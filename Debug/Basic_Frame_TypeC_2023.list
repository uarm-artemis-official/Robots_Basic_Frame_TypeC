
Basic_Frame_TypeC_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015268  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e38  080153f8  080153f8  000253f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016230  08016230  00030478  2**0
                  CONTENTS
  4 .ARM          00000008  08016230  08016230  00026230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016238  08016238  00030478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016238  08016238  00026238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801623c  0801623c  0002623c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000478  20000000  08016240  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030478  2**0
                  CONTENTS
 10 .bss          0000dab0  20000478  20000478  00030478  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000df28  2000df28  00030478  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030478  2**0
                  CONTENTS, READONLY
 13 .debug_info   00057880  00000000  00000000  000304a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000095c8  00000000  00000000  00087d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002508  00000000  00000000  000912f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002150  00000000  00000000  000937f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e7a6  00000000  00000000  00095948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037b10  00000000  00000000  000c40ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5f84  00000000  00000000  000fbbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  001e1b82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a53c  00000000  00000000  001e1c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000018a  00000000  00000000  001ec180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000478 	.word	0x20000478
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080153e0 	.word	0x080153e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000047c 	.word	0x2000047c
 80001cc:	080153e0 	.word	0x080153e0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <madgwick_ahrs_update>:

static volatile float gx, gy, gz, ax, ay, az, mx, my, mz;

//this function takes 60.8us.(168M)
void madgwick_ahrs_update(AhrsSensor_t *sensor, Attitude_t *atti)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b0a6      	sub	sp, #152	; 0x98
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float hx, hy;
  float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

  gx = sensor->wx;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <madgwick_ahrs_update+0x90>)
 8000f50:	6013      	str	r3, [r2, #0]
  gy = sensor->wy;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <madgwick_ahrs_update+0x94>)
 8000f58:	6013      	str	r3, [r2, #0]
  gz = sensor->wz;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <madgwick_ahrs_update+0x98>)
 8000f60:	6013      	str	r3, [r2, #0]
  ax = sensor->ax;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <madgwick_ahrs_update+0x9c>)
 8000f68:	6013      	str	r3, [r2, #0]
  ay = sensor->ay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <madgwick_ahrs_update+0xa0>)
 8000f70:	6013      	str	r3, [r2, #0]
  az = sensor->az;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <madgwick_ahrs_update+0xa4>)
 8000f78:	6013      	str	r3, [r2, #0]
  mx = sensor->mx;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <madgwick_ahrs_update+0xa8>)
 8000f80:	6013      	str	r3, [r2, #0]
  my = sensor->my;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <madgwick_ahrs_update+0xac>)
 8000f88:	6013      	str	r3, [r2, #0]
  mz = sensor->mz;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <madgwick_ahrs_update+0xb0>)
 8000f90:	6013      	str	r3, [r2, #0]

  // Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
  if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f))
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <madgwick_ahrs_update+0xa8>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d128      	bne.n	8000ff4 <madgwick_ahrs_update+0xb4>
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <madgwick_ahrs_update+0xac>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d120      	bne.n	8000ff4 <madgwick_ahrs_update+0xb4>
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <madgwick_ahrs_update+0xb0>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d118      	bne.n	8000ff4 <madgwick_ahrs_update+0xb4>
  {
    madgwick_ahrs_updateIMU(sensor, atti);
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f001 f84d 	bl	8002064 <madgwick_ahrs_updateIMU>
    return;
 8000fca:	f001 b840 	b.w	800204e <madgwick_ahrs_update+0x110e>
 8000fce:	bf00      	nop
 8000fd0:	200004a0 	.word	0x200004a0
 8000fd4:	200004a4 	.word	0x200004a4
 8000fd8:	200004a8 	.word	0x200004a8
 8000fdc:	200004ac 	.word	0x200004ac
 8000fe0:	200004b0 	.word	0x200004b0
 8000fe4:	200004b4 	.word	0x200004b4
 8000fe8:	200004b8 	.word	0x200004b8
 8000fec:	200004bc 	.word	0x200004bc
 8000ff0:	200004c0 	.word	0x200004c0
  }

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000ff4:	4bd7      	ldr	r3, [pc, #860]	; (8001354 <madgwick_ahrs_update+0x414>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eeb1 7a67 	vneg.f32	s14, s15
 8000ffe:	4bd6      	ldr	r3, [pc, #856]	; (8001358 <madgwick_ahrs_update+0x418>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001008:	4bd4      	ldr	r3, [pc, #848]	; (800135c <madgwick_ahrs_update+0x41c>)
 800100a:	edd3 6a00 	vldr	s13, [r3]
 800100e:	4bd4      	ldr	r3, [pc, #848]	; (8001360 <madgwick_ahrs_update+0x420>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101c:	4bd1      	ldr	r3, [pc, #836]	; (8001364 <madgwick_ahrs_update+0x424>)
 800101e:	edd3 6a00 	vldr	s13, [r3]
 8001022:	4bd1      	ldr	r3, [pc, #836]	; (8001368 <madgwick_ahrs_update+0x428>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001038:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800103c:	4bcb      	ldr	r3, [pc, #812]	; (800136c <madgwick_ahrs_update+0x42c>)
 800103e:	ed93 7a00 	vldr	s14, [r3]
 8001042:	4bc5      	ldr	r3, [pc, #788]	; (8001358 <madgwick_ahrs_update+0x418>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104c:	4bc3      	ldr	r3, [pc, #780]	; (800135c <madgwick_ahrs_update+0x41c>)
 800104e:	edd3 6a00 	vldr	s13, [r3]
 8001052:	4bc5      	ldr	r3, [pc, #788]	; (8001368 <madgwick_ahrs_update+0x428>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001060:	4bc0      	ldr	r3, [pc, #768]	; (8001364 <madgwick_ahrs_update+0x424>)
 8001062:	edd3 6a00 	vldr	s13, [r3]
 8001066:	4bbe      	ldr	r3, [pc, #760]	; (8001360 <madgwick_ahrs_update+0x420>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001074:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001080:	4bba      	ldr	r3, [pc, #744]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	4bb6      	ldr	r3, [pc, #728]	; (8001360 <madgwick_ahrs_update+0x420>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4bb0      	ldr	r3, [pc, #704]	; (8001354 <madgwick_ahrs_update+0x414>)
 8001092:	edd3 6a00 	vldr	s13, [r3]
 8001096:	4bb4      	ldr	r3, [pc, #720]	; (8001368 <madgwick_ahrs_update+0x428>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a4:	4baf      	ldr	r3, [pc, #700]	; (8001364 <madgwick_ahrs_update+0x424>)
 80010a6:	edd3 6a00 	vldr	s13, [r3]
 80010aa:	4bab      	ldr	r3, [pc, #684]	; (8001358 <madgwick_ahrs_update+0x418>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80010c4:	4ba9      	ldr	r3, [pc, #676]	; (800136c <madgwick_ahrs_update+0x42c>)
 80010c6:	ed93 7a00 	vldr	s14, [r3]
 80010ca:	4ba7      	ldr	r3, [pc, #668]	; (8001368 <madgwick_ahrs_update+0x428>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	4b9f      	ldr	r3, [pc, #636]	; (8001354 <madgwick_ahrs_update+0x414>)
 80010d6:	edd3 6a00 	vldr	s13, [r3]
 80010da:	4ba1      	ldr	r3, [pc, #644]	; (8001360 <madgwick_ahrs_update+0x420>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e8:	4b9c      	ldr	r3, [pc, #624]	; (800135c <madgwick_ahrs_update+0x41c>)
 80010ea:	edd3 6a00 	vldr	s13, [r3]
 80010ee:	4b9a      	ldr	r3, [pc, #616]	; (8001358 <madgwick_ahrs_update+0x418>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8001108:	4b99      	ldr	r3, [pc, #612]	; (8001370 <madgwick_ahrs_update+0x430>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d110      	bne.n	800113a <madgwick_ahrs_update+0x1fa>
 8001118:	4b96      	ldr	r3, [pc, #600]	; (8001374 <madgwick_ahrs_update+0x434>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	d108      	bne.n	800113a <madgwick_ahrs_update+0x1fa>
 8001128:	4b93      	ldr	r3, [pc, #588]	; (8001378 <madgwick_ahrs_update+0x438>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	f000 8621 	beq.w	8001d7c <madgwick_ahrs_update+0xe3c>
  {

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800113a:	4b8d      	ldr	r3, [pc, #564]	; (8001370 <madgwick_ahrs_update+0x430>)
 800113c:	ed93 7a00 	vldr	s14, [r3]
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <madgwick_ahrs_update+0x430>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114a:	4b8a      	ldr	r3, [pc, #552]	; (8001374 <madgwick_ahrs_update+0x434>)
 800114c:	edd3 6a00 	vldr	s13, [r3]
 8001150:	4b88      	ldr	r3, [pc, #544]	; (8001374 <madgwick_ahrs_update+0x434>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115e:	4b86      	ldr	r3, [pc, #536]	; (8001378 <madgwick_ahrs_update+0x438>)
 8001160:	edd3 6a00 	vldr	s13, [r3]
 8001164:	4b84      	ldr	r3, [pc, #528]	; (8001378 <madgwick_ahrs_update+0x438>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	f001 fbc1 	bl	80028fc <invSqrt>
 800117a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
    ax *= recipNorm;
 800117e:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <madgwick_ahrs_update+0x430>)
 8001180:	ed93 7a00 	vldr	s14, [r3]
 8001184:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118c:	4b78      	ldr	r3, [pc, #480]	; (8001370 <madgwick_ahrs_update+0x430>)
 800118e:	edc3 7a00 	vstr	s15, [r3]
    ay *= recipNorm;
 8001192:	4b78      	ldr	r3, [pc, #480]	; (8001374 <madgwick_ahrs_update+0x434>)
 8001194:	ed93 7a00 	vldr	s14, [r3]
 8001198:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	4b74      	ldr	r3, [pc, #464]	; (8001374 <madgwick_ahrs_update+0x434>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
    az *= recipNorm;
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <madgwick_ahrs_update+0x438>)
 80011a8:	ed93 7a00 	vldr	s14, [r3]
 80011ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	4b70      	ldr	r3, [pc, #448]	; (8001378 <madgwick_ahrs_update+0x438>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]

    // Normalise magnetometer measurement
    recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80011ba:	4b70      	ldr	r3, [pc, #448]	; (800137c <madgwick_ahrs_update+0x43c>)
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	4b6e      	ldr	r3, [pc, #440]	; (800137c <madgwick_ahrs_update+0x43c>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ca:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <madgwick_ahrs_update+0x440>)
 80011cc:	edd3 6a00 	vldr	s13, [r3]
 80011d0:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <madgwick_ahrs_update+0x440>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011de:	4b69      	ldr	r3, [pc, #420]	; (8001384 <madgwick_ahrs_update+0x444>)
 80011e0:	edd3 6a00 	vldr	s13, [r3]
 80011e4:	4b67      	ldr	r3, [pc, #412]	; (8001384 <madgwick_ahrs_update+0x444>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f001 fb81 	bl	80028fc <invSqrt>
 80011fa:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
    mx *= recipNorm;
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <madgwick_ahrs_update+0x43c>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	4b5b      	ldr	r3, [pc, #364]	; (800137c <madgwick_ahrs_update+0x43c>)
 800120e:	edc3 7a00 	vstr	s15, [r3]
    my *= recipNorm;
 8001212:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <madgwick_ahrs_update+0x440>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	4b57      	ldr	r3, [pc, #348]	; (8001380 <madgwick_ahrs_update+0x440>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
    mz *= recipNorm;
 8001226:	4b57      	ldr	r3, [pc, #348]	; (8001384 <madgwick_ahrs_update+0x444>)
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <madgwick_ahrs_update+0x444>)
 8001236:	edc3 7a00 	vstr	s15, [r3]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0mx = 2.0f * q0 * mx;
 800123a:	4b4c      	ldr	r3, [pc, #304]	; (800136c <madgwick_ahrs_update+0x42c>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001244:	4b4d      	ldr	r3, [pc, #308]	; (800137c <madgwick_ahrs_update+0x43c>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    _2q0my = 2.0f * q0 * my;
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <madgwick_ahrs_update+0x440>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001266:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    _2q0mz = 2.0f * q0 * mz;
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <madgwick_ahrs_update+0x42c>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <madgwick_ahrs_update+0x444>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    _2q1mx = 2.0f * q1 * mx;
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <madgwick_ahrs_update+0x414>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <madgwick_ahrs_update+0x43c>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    _2q0 = 2.0f * q0;
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <madgwick_ahrs_update+0x42c>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012a4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    _2q1 = 2.0f * q1;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <madgwick_ahrs_update+0x414>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012b2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    _2q2 = 2.0f * q2;
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <madgwick_ahrs_update+0x41c>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012c0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    _2q3 = 2.0f * q3;
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <madgwick_ahrs_update+0x424>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012ce:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    _2q0q2 = 2.0f * q0 * q2;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <madgwick_ahrs_update+0x42c>)
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <madgwick_ahrs_update+0x41c>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    _2q2q3 = 2.0f * q2 * q3;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <madgwick_ahrs_update+0x41c>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <madgwick_ahrs_update+0x424>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    q0q0 = q0 * q0;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <madgwick_ahrs_update+0x42c>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    q0q1 = q0 * q1;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <madgwick_ahrs_update+0x414>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001326:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    q0q2 = q0 * q2;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <madgwick_ahrs_update+0x42c>)
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <madgwick_ahrs_update+0x41c>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    q0q3 = q0 * q3;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001340:	ed93 7a00 	vldr	s14, [r3]
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <madgwick_ahrs_update+0x424>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8001352:	e019      	b.n	8001388 <madgwick_ahrs_update+0x448>
 8001354:	20000494 	.word	0x20000494
 8001358:	200004a0 	.word	0x200004a0
 800135c:	20000498 	.word	0x20000498
 8001360:	200004a4 	.word	0x200004a4
 8001364:	2000049c 	.word	0x2000049c
 8001368:	200004a8 	.word	0x200004a8
 800136c:	20000004 	.word	0x20000004
 8001370:	200004ac 	.word	0x200004ac
 8001374:	200004b0 	.word	0x200004b0
 8001378:	200004b4 	.word	0x200004b4
 800137c:	200004b8 	.word	0x200004b8
 8001380:	200004bc 	.word	0x200004bc
 8001384:	200004c0 	.word	0x200004c0
    q1q1 = q1 * q1;
 8001388:	4be5      	ldr	r3, [pc, #916]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	4be4      	ldr	r3, [pc, #912]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    q1q2 = q1 * q2;
 800139c:	4be0      	ldr	r3, [pc, #896]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 800139e:	ed93 7a00 	vldr	s14, [r3]
 80013a2:	4be0      	ldr	r3, [pc, #896]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    q1q3 = q1 * q3;
 80013b0:	4bdb      	ldr	r3, [pc, #876]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 80013b2:	ed93 7a00 	vldr	s14, [r3]
 80013b6:	4bdc      	ldr	r3, [pc, #880]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    q2q2 = q2 * q2;
 80013c4:	4bd7      	ldr	r3, [pc, #860]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013c6:	ed93 7a00 	vldr	s14, [r3]
 80013ca:	4bd6      	ldr	r3, [pc, #856]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    q2q3 = q2 * q3;
 80013d8:	4bd2      	ldr	r3, [pc, #840]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	4bd2      	ldr	r3, [pc, #840]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    q3q3 = q3 * q3;
 80013ec:	4bce      	ldr	r3, [pc, #824]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4bcd      	ldr	r3, [pc, #820]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    // Reference direction of Earth's magnetic field
    hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001400:	4bca      	ldr	r3, [pc, #808]	; (800172c <madgwick_ahrs_update+0x7ec>)
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	4bc6      	ldr	r3, [pc, #792]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 8001410:	edd3 6a00 	vldr	s13, [r3]
 8001414:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001420:	4bc0      	ldr	r3, [pc, #768]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 8001422:	edd3 6a00 	vldr	s13, [r3]
 8001426:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001432:	4bbe      	ldr	r3, [pc, #760]	; (800172c <madgwick_ahrs_update+0x7ec>)
 8001434:	edd3 6a00 	vldr	s13, [r3]
 8001438:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800143c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001444:	4bba      	ldr	r3, [pc, #744]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 8001446:	edd3 6a00 	vldr	s13, [r3]
 800144a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800144e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001452:	4bb4      	ldr	r3, [pc, #720]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001460:	4bb4      	ldr	r3, [pc, #720]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 8001462:	edd3 6a00 	vldr	s13, [r3]
 8001466:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800146a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800146e:	4bae      	ldr	r3, [pc, #696]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	4bab      	ldr	r3, [pc, #684]	; (800172c <madgwick_ahrs_update+0x7ec>)
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148e:	4ba7      	ldr	r3, [pc, #668]	; (800172c <madgwick_ahrs_update+0x7ec>)
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80014a4:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80014ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b2:	4b9f      	ldr	r3, [pc, #636]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80014b4:	edd3 6a00 	vldr	s13, [r3]
 80014b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80014bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c4:	4b96      	ldr	r3, [pc, #600]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 80014c6:	edd3 6a00 	vldr	s13, [r3]
 80014ca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80014ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014d6:	4b93      	ldr	r3, [pc, #588]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80014d8:	edd3 6a00 	vldr	s13, [r3]
 80014dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80014e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	4b91      	ldr	r3, [pc, #580]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80014ea:	edd3 6a00 	vldr	s13, [r3]
 80014ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014fa:	4b8d      	ldr	r3, [pc, #564]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80014fc:	edd3 6a00 	vldr	s13, [r3]
 8001500:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150c:	4b89      	ldr	r3, [pc, #548]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 800150e:	edd3 6a00 	vldr	s13, [r3]
 8001512:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001516:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800151a:	4b83      	ldr	r3, [pc, #524]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001528:	4b81      	ldr	r3, [pc, #516]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 800152a:	edd3 6a00 	vldr	s13, [r3]
 800152e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    _2bx = sqrt(hx * hx + hy * hy);
 800153e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001542:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001546:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800154a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7fe fff7 	bl	8000548 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	ec43 2b10 	vmov	d0, r2, r3
 8001562:	f013 f9c1 	bl	80148e8 <sqrt>
 8001566:	ec53 2b10 	vmov	r2, r3, d0
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb1b 	bl	8000ba8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001576:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800157a:	eeb1 7a67 	vneg.f32	s14, s15
 800157e:	4b69      	ldr	r3, [pc, #420]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001588:	4b65      	ldr	r3, [pc, #404]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 800158a:	edd3 6a00 	vldr	s13, [r3]
 800158e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001596:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ac:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80015ae:	edd3 6a00 	vldr	s13, [r3]
 80015b2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 80015c0:	edd3 6a00 	vldr	s13, [r3]
 80015c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80015d2:	edd3 6a00 	vldr	s13, [r3]
 80015d6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015de:	4b52      	ldr	r3, [pc, #328]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ec:	4b51      	ldr	r3, [pc, #324]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 80015ee:	edd3 6a00 	vldr	s13, [r3]
 80015f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fe:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 8001600:	edd3 6a00 	vldr	s13, [r3]
 8001604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    _4bx = 2.0f * _2bx;
 8001614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001618:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800161c:	edc7 7a08 	vstr	s15, [r7, #32]
    _4bz = 2.0f * _2bz;
 8001620:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001624:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001628:	edc7 7a07 	vstr	s15, [r7, #28]

    // Gradient decent algorithm corrective step
    s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800162c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001630:	eeb1 7a67 	vneg.f32	s14, s15
 8001634:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001638:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800163c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001640:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <madgwick_ahrs_update+0x7f8>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800164e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001652:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001656:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800165a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800165e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001662:	4b36      	ldr	r3, [pc, #216]	; (800173c <madgwick_ahrs_update+0x7fc>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800166c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 800167a:	edd3 6a00 	vldr	s13, [r3]
 800167e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001682:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001686:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800168a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800168e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001692:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001696:	ee36 6a67 	vsub.f32	s12, s12, s15
 800169a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800169e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016a2:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 80016a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80016aa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80016ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016b6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <madgwick_ahrs_update+0x7ec>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016d0:	eef1 6a67 	vneg.f32	s13, s15
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 80016e0:	ed93 6a00 	vldr	s12, [r3]
 80016e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016f0:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80016f4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001700:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001704:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8001708:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800170c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001710:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001714:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001718:	ee36 6a27 	vadd.f32	s12, s12, s15
 800171c:	e010      	b.n	8001740 <madgwick_ahrs_update+0x800>
 800171e:	bf00      	nop
 8001720:	20000494 	.word	0x20000494
 8001724:	20000498 	.word	0x20000498
 8001728:	2000049c 	.word	0x2000049c
 800172c:	200004b8 	.word	0x200004b8
 8001730:	200004bc 	.word	0x200004bc
 8001734:	200004c0 	.word	0x200004c0
 8001738:	200004ac 	.word	0x200004ac
 800173c:	200004b0 	.word	0x200004b0
 8001740:	4bf0      	ldr	r3, [pc, #960]	; (8001b04 <madgwick_ahrs_update+0xbc4>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee76 7a67 	vsub.f32	s15, s12, s15
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	4bed      	ldr	r3, [pc, #948]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001754:	edd3 6a00 	vldr	s13, [r3]
 8001758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800175c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001760:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001764:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001768:	ee36 6a27 	vadd.f32	s12, s12, s15
 800176c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001770:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001774:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001778:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800177c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001780:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001784:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001788:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800178c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001790:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001794:	4bdd      	ldr	r3, [pc, #884]	; (8001b0c <madgwick_ahrs_update+0xbcc>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800179e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	edc7 7a06 	vstr	s15, [r7, #24]
    s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80017aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017b2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ba:	4bd5      	ldr	r3, [pc, #852]	; (8001b10 <madgwick_ahrs_update+0xbd0>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80017c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017d0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017dc:	4bcd      	ldr	r3, [pc, #820]	; (8001b14 <madgwick_ahrs_update+0xbd4>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	4bc9      	ldr	r3, [pc, #804]	; (8001b18 <madgwick_ahrs_update+0xbd8>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80017fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001800:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001804:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001808:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800180c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001810:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001814:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001818:	ee36 6a67 	vsub.f32	s12, s12, s15
 800181c:	4bbf      	ldr	r3, [pc, #764]	; (8001b1c <madgwick_ahrs_update+0xbdc>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182e:	4bbc      	ldr	r3, [pc, #752]	; (8001b20 <madgwick_ahrs_update+0xbe0>)
 8001830:	edd3 6a00 	vldr	s13, [r3]
 8001834:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001838:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800183c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001840:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001844:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001848:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800184c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001850:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001854:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001858:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 800185c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001860:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001864:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001868:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800186c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001870:	4bac      	ldr	r3, [pc, #688]	; (8001b24 <madgwick_ahrs_update+0xbe4>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee76 7a67 	vsub.f32	s15, s12, s15
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001882:	4ba1      	ldr	r3, [pc, #644]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001884:	edd3 6a00 	vldr	s13, [r3]
 8001888:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800188c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001890:	4ba5      	ldr	r3, [pc, #660]	; (8001b28 <madgwick_ahrs_update+0xbe8>)
 8001892:	ed93 6a00 	vldr	s12, [r3]
 8001896:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800189a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800189e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018a2:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80018a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80018aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018b6:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 80018ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80018c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018ce:	4b8d      	ldr	r3, [pc, #564]	; (8001b04 <madgwick_ahrs_update+0xbc4>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <madgwick_ahrs_update+0xbe0>)
 80018e2:	edd3 6a00 	vldr	s13, [r3]
 80018e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ee:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <madgwick_ahrs_update+0xbd8>)
 80018f0:	ed93 6a00 	vldr	s12, [r3]
 80018f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001900:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001904:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001908:	ee36 6a27 	vadd.f32	s12, s12, s15
 800190c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001910:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001914:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001918:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800191c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001920:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001924:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001928:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800192c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001930:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001934:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <madgwick_ahrs_update+0xbcc>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001946:	edc7 7a05 	vstr	s15, [r7, #20]
    s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800194a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800194e:	eeb1 7a67 	vneg.f32	s14, s15
 8001952:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001956:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800195a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800195e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001962:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <madgwick_ahrs_update+0xbd0>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001974:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001978:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800197c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001980:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <madgwick_ahrs_update+0xbd4>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800198a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <madgwick_ahrs_update+0xbdc>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80019d6:	eef1 6a67 	vneg.f32	s13, s15
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <madgwick_ahrs_update+0xbe8>)
 80019e6:	ed93 6a00 	vldr	s12, [r3]
 80019ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80019fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a02:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a06:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a12:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 8001a16:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a1a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a22:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a26:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <madgwick_ahrs_update+0xbe4>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <madgwick_ahrs_update+0xbd8>)
 8001a3e:	edd3 6a00 	vldr	s13, [r3]
 8001a42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <madgwick_ahrs_update+0xbe0>)
 8001a4c:	ed93 6a00 	vldr	s12, [r3]
 8001a50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a5c:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8001a60:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a70:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8001a74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a78:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <madgwick_ahrs_update+0xbc4>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <madgwick_ahrs_update+0xbe8>)
 8001a9c:	edd3 6a00 	vldr	s13, [r3]
 8001aa0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001aaa:	ed93 6a00 	vldr	s12, [r3]
 8001aae:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ab2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ab6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aba:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001abe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ac2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aca:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ace:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ad2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ada:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ade:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ae6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001aea:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <madgwick_ahrs_update+0xbcc>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	e014      	b.n	8001b2c <madgwick_ahrs_update+0xbec>
 8001b02:	bf00      	nop
 8001b04:	200004bc 	.word	0x200004bc
 8001b08:	20000498 	.word	0x20000498
 8001b0c:	200004c0 	.word	0x200004c0
 8001b10:	200004ac 	.word	0x200004ac
 8001b14:	200004b0 	.word	0x200004b0
 8001b18:	20000494 	.word	0x20000494
 8001b1c:	200004b4 	.word	0x200004b4
 8001b20:	2000049c 	.word	0x2000049c
 8001b24:	200004b8 	.word	0x200004b8
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	edc7 7a04 	vstr	s15, [r7, #16]
    s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b34:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b40:	4be8      	ldr	r3, [pc, #928]	; (8001ee4 <madgwick_ahrs_update+0xfa4>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b56:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b5a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b5e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b62:	4be1      	ldr	r3, [pc, #900]	; (8001ee8 <madgwick_ahrs_update+0xfa8>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b78:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b7c:	eef1 6a67 	vneg.f32	s13, s15
 8001b80:	4bda      	ldr	r3, [pc, #872]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b8a:	4bd9      	ldr	r3, [pc, #868]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001b8c:	ed93 6a00 	vldr	s12, [r3]
 8001b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b9c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ba0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ba4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ba8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bb8:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 8001bbc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001bc0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bc8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bcc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bd0:	4bc8      	ldr	r3, [pc, #800]	; (8001ef4 <madgwick_ahrs_update+0xfb4>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001be6:	eef1 6a67 	vneg.f32	s13, s15
 8001bea:	4bc3      	ldr	r3, [pc, #780]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bf4:	4bc1      	ldr	r3, [pc, #772]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001bf6:	ed93 6a00 	vldr	s12, [r3]
 8001bfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c06:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8001c0a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001c0e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c1a:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8001c1e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c22:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c32:	4bb3      	ldr	r3, [pc, #716]	; (8001f00 <madgwick_ahrs_update+0xfc0>)
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	4baa      	ldr	r3, [pc, #680]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001c46:	edd3 6a00 	vldr	s13, [r3]
 8001c4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c52:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001c56:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c5a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c62:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c66:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001c6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c6e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c76:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c7e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c86:	4b9f      	ldr	r3, [pc, #636]	; (8001f04 <madgwick_ahrs_update+0xfc4>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	edc7 7a03 	vstr	s15, [r7, #12]
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	f000 fe16 	bl	80028fc <invSqrt>
 8001cd0:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
    s0 *= recipNorm;
 8001cd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	edc7 7a06 	vstr	s15, [r7, #24]
    s1 *= recipNorm;
 8001ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf0:	edc7 7a05 	vstr	s15, [r7, #20]
    s2 *= recipNorm;
 8001cf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cf8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	edc7 7a04 	vstr	s15, [r7, #16]
    s3 *= recipNorm;
 8001d04:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d08:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d10:	edc7 7a03 	vstr	s15, [r7, #12]

    // Apply feedback step
    qDot1 -= beta * s0;
 8001d14:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d16:	ed93 7a00 	vldr	s14, [r3]
 8001d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    qDot2 -= beta * s1;
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d30:	ed93 7a00 	vldr	s14, [r3]
 8001d34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d44:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    qDot3 -= beta * s2;
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    qDot4 -= beta * s3;
 8001d62:	4b69      	ldr	r3, [pc, #420]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d64:	ed93 7a00 	vldr	s14, [r3]
 8001d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * (1.0f / sampleFreq);
 8001d7c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d80:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001d84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d92:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * (1.0f / sampleFreq);
 8001d98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001d9c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001da0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * (1.0f / sampleFreq);
 8001db4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001db8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001dbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc0:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * (1.0f / sampleFreq);
 8001dd0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001dd4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ddc:	4b43      	ldr	r3, [pc, #268]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001de8:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001dfe:	edd3 6a00 	vldr	s13, [r3]
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e12:	edd3 6a00 	vldr	s13, [r3]
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e26:	edd3 6a00 	vldr	s13, [r3]
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3c:	f000 fd5e 	bl	80028fc <invSqrt>
 8001e40:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
  q0 *= recipNorm;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001e46:	ed93 7a00 	vldr	s14, [r3]
 8001e4a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001e54:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001e5a:	ed93 7a00 	vldr	s14, [r3]
 8001e5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001e68:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e7c:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e90:	edc3 7a00 	vstr	s15, [r3]

  atti->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1); // roll     -pi----pi
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	ee17 0a90 	vmov	r0, s15
 8001ec4:	f7fe fb40 	bl	8000548 <__aeabi_f2d>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001ed6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	e016      	b.n	8001f10 <madgwick_ahrs_update+0xfd0>
 8001ee2:	bf00      	nop
 8001ee4:	200004ac 	.word	0x200004ac
 8001ee8:	200004b0 	.word	0x200004b0
 8001eec:	2000049c 	.word	0x2000049c
 8001ef0:	20000494 	.word	0x20000494
 8001ef4:	200004b8 	.word	0x200004b8
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	20000498 	.word	0x20000498
 8001f00:	200004bc 	.word	0x200004bc
 8001f04:	200004c0 	.word	0x200004c0
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	3a83126f 	.word	0x3a83126f
 8001f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f34:	ee17 0a90 	vmov	r0, s15
 8001f38:	f7fe fb06 	bl	8000548 <__aeabi_f2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	ec43 2b11 	vmov	d1, r2, r3
 8001f44:	ec45 4b10 	vmov	d0, r4, r5
 8001f48:	f012 fccc 	bl	80148e4 <atan2>
 8001f4c:	ec53 2b10 	vmov	r2, r3, d0
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe28 	bl	8000ba8 <__aeabi_d2f>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	601a      	str	r2, [r3, #0]
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2);                                // pitch    -pi/2----pi/2
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <madgwick_ahrs_update+0x1118>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001f68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <madgwick_ahrs_update+0x111c>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <madgwick_ahrs_update+0x1120>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8e:	ee17 0a90 	vmov	r0, s15
 8001f92:	f7fe fad9 	bl	8000548 <__aeabi_f2d>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	ec43 2b10 	vmov	d0, r2, r3
 8001f9e:	f012 fc67 	bl	8014870 <asin>
 8001fa2:	ec53 2b10 	vmov	r2, r3, d0
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fdfd 	bl	8000ba8 <__aeabi_d2f>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1);  // yaw      -pi----pi
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <madgwick_ahrs_update+0x1118>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <madgwick_ahrs_update+0x1120>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <madgwick_ahrs_update+0x111c>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe0:	ee17 0a90 	vmov	r0, s15
 8001fe4:	f7fe fab0 	bl	8000548 <__aeabi_f2d>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	460d      	mov	r5, r1
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001ff6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <madgwick_ahrs_update+0x111c>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <madgwick_ahrs_update+0x111c>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002024:	ee17 0a90 	vmov	r0, s15
 8002028:	f7fe fa8e 	bl	8000548 <__aeabi_f2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	ec43 2b11 	vmov	d1, r2, r3
 8002034:	ec45 4b10 	vmov	d0, r4, r5
 8002038:	f012 fc54 	bl	80148e4 <atan2>
 800203c:	ec53 2b10 	vmov	r2, r3, d0
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fdb0 	bl	8000ba8 <__aeabi_d2f>
 8002048:	4602      	mov	r2, r0
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	609a      	str	r2, [r3, #8]
}
 800204e:	3798      	adds	r7, #152	; 0x98
 8002050:	46bd      	mov	sp, r7
 8002052:	bdb0      	pop	{r4, r5, r7, pc}
 8002054:	20000498 	.word	0x20000498
 8002058:	20000494 	.word	0x20000494
 800205c:	2000049c 	.word	0x2000049c
 8002060:	20000004 	.word	0x20000004

08002064 <madgwick_ahrs_updateIMU>:

void madgwick_ahrs_updateIMU(AhrsSensor_t *sensor, Attitude_t *atti)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b098      	sub	sp, #96	; 0x60
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  float recipNorm;
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

  gx = sensor->wx;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4ad1      	ldr	r2, [pc, #836]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 8002074:	6013      	str	r3, [r2, #0]
  gy = sensor->wy;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	4ad0      	ldr	r2, [pc, #832]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 800207c:	6013      	str	r3, [r2, #0]
  gz = sensor->wz;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4acf      	ldr	r2, [pc, #828]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 8002084:	6013      	str	r3, [r2, #0]
  ax = sensor->ax;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4ace      	ldr	r2, [pc, #824]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 800208c:	6013      	str	r3, [r2, #0]

  az = sensor->az;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4acd      	ldr	r2, [pc, #820]	; (80023c8 <madgwick_ahrs_updateIMU+0x364>)
 8002094:	6013      	str	r3, [r2, #0]
  mx = sensor->mx;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4acc      	ldr	r2, [pc, #816]	; (80023cc <madgwick_ahrs_updateIMU+0x368>)
 800209c:	6013      	str	r3, [r2, #0]
  my = sensor->my;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4acb      	ldr	r2, [pc, #812]	; (80023d0 <madgwick_ahrs_updateIMU+0x36c>)
 80020a4:	6013      	str	r3, [r2, #0]
  mz = sensor->mz;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	4aca      	ldr	r2, [pc, #808]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 80020ac:	6013      	str	r3, [r2, #0]

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020ae:	4bca      	ldr	r3, [pc, #808]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 80020b0:	edd3 7a00 	vldr	s15, [r3]
 80020b4:	eeb1 7a67 	vneg.f32	s14, s15
 80020b8:	4bbf      	ldr	r3, [pc, #764]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 80020ba:	edd3 7a00 	vldr	s15, [r3]
 80020be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c2:	4bc6      	ldr	r3, [pc, #792]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 80020c4:	edd3 6a00 	vldr	s13, [r3]
 80020c8:	4bbc      	ldr	r3, [pc, #752]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020d6:	4bc2      	ldr	r3, [pc, #776]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 80020d8:	edd3 6a00 	vldr	s13, [r3]
 80020dc:	4bb8      	ldr	r3, [pc, #736]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 80020de:	edd3 7a00 	vldr	s15, [r3]
 80020e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020f6:	4bbb      	ldr	r3, [pc, #748]	; (80023e4 <madgwick_ahrs_updateIMU+0x380>)
 80020f8:	ed93 7a00 	vldr	s14, [r3]
 80020fc:	4bae      	ldr	r3, [pc, #696]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002106:	4bb5      	ldr	r3, [pc, #724]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 8002108:	edd3 6a00 	vldr	s13, [r3]
 800210c:	4bac      	ldr	r3, [pc, #688]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211a:	4bb1      	ldr	r3, [pc, #708]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 800211c:	edd3 6a00 	vldr	s13, [r3]
 8002120:	4ba6      	ldr	r3, [pc, #664]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 8002122:	edd3 7a00 	vldr	s15, [r3]
 8002126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002136:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800213a:	4baa      	ldr	r3, [pc, #680]	; (80023e4 <madgwick_ahrs_updateIMU+0x380>)
 800213c:	ed93 7a00 	vldr	s14, [r3]
 8002140:	4b9e      	ldr	r3, [pc, #632]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800214a:	4ba3      	ldr	r3, [pc, #652]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 800214c:	edd3 6a00 	vldr	s13, [r3]
 8002150:	4b9b      	ldr	r3, [pc, #620]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800215e:	4ba0      	ldr	r3, [pc, #640]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 8002160:	edd3 6a00 	vldr	s13, [r3]
 8002164:	4b94      	ldr	r3, [pc, #592]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002172:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002176:	ee67 7a87 	vmul.f32	s15, s15, s14
 800217a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800217e:	4b99      	ldr	r3, [pc, #612]	; (80023e4 <madgwick_ahrs_updateIMU+0x380>)
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	4b8e      	ldr	r3, [pc, #568]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 8002186:	edd3 7a00 	vldr	s15, [r3]
 800218a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800218e:	4b92      	ldr	r3, [pc, #584]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 8002190:	edd3 6a00 	vldr	s13, [r3]
 8002194:	4b89      	ldr	r3, [pc, #548]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 8002196:	edd3 7a00 	vldr	s15, [r3]
 800219a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021a2:	4b8e      	ldr	r3, [pc, #568]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 80021a4:	edd3 6a00 	vldr	s13, [r3]
 80021a8:	4b83      	ldr	r3, [pc, #524]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 80021aa:	edd3 7a00 	vldr	s15, [r3]
 80021ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021be:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 80021c2:	4b80      	ldr	r3, [pc, #512]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d0:	d110      	bne.n	80021f4 <madgwick_ahrs_updateIMU+0x190>
 80021d2:	4b85      	ldr	r3, [pc, #532]	; (80023e8 <madgwick_ahrs_updateIMU+0x384>)
 80021d4:	edd3 7a00 	vldr	s15, [r3]
 80021d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e0:	d108      	bne.n	80021f4 <madgwick_ahrs_updateIMU+0x190>
 80021e2:	4b79      	ldr	r3, [pc, #484]	; (80023c8 <madgwick_ahrs_updateIMU+0x364>)
 80021e4:	edd3 7a00 	vldr	s15, [r3]
 80021e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f0:	f000 8213 	beq.w	800261a <madgwick_ahrs_updateIMU+0x5b6>
  {

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021f4:	4b73      	ldr	r3, [pc, #460]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002204:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <madgwick_ahrs_updateIMU+0x384>)
 8002206:	edd3 6a00 	vldr	s13, [r3]
 800220a:	4b77      	ldr	r3, [pc, #476]	; (80023e8 <madgwick_ahrs_updateIMU+0x384>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002218:	4b6b      	ldr	r3, [pc, #428]	; (80023c8 <madgwick_ahrs_updateIMU+0x364>)
 800221a:	edd3 6a00 	vldr	s13, [r3]
 800221e:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <madgwick_ahrs_updateIMU+0x364>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222c:	eeb0 0a67 	vmov.f32	s0, s15
 8002230:	f000 fb64 	bl	80028fc <invSqrt>
 8002234:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    ax *= recipNorm;
 8002238:	4b62      	ldr	r3, [pc, #392]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 800223a:	ed93 7a00 	vldr	s14, [r3]
 800223e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002246:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 8002248:	edc3 7a00 	vstr	s15, [r3]
    ay *= recipNorm;
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <madgwick_ahrs_updateIMU+0x384>)
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <madgwick_ahrs_updateIMU+0x384>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
    az *= recipNorm;
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <madgwick_ahrs_updateIMU+0x364>)
 8002262:	ed93 7a00 	vldr	s14, [r3]
 8002266:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800226a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226e:	4b56      	ldr	r3, [pc, #344]	; (80023c8 <madgwick_ahrs_updateIMU+0x364>)
 8002270:	edc3 7a00 	vstr	s15, [r3]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0 = 2.0f * q0;
 8002274:	4b5b      	ldr	r3, [pc, #364]	; (80023e4 <madgwick_ahrs_updateIMU+0x380>)
 8002276:	edd3 7a00 	vldr	s15, [r3]
 800227a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800227e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    _2q1 = 2.0f * q1;
 8002282:	4b55      	ldr	r3, [pc, #340]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800228c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    _2q2 = 2.0f * q2;
 8002290:	4b52      	ldr	r3, [pc, #328]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800229a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    _2q3 = 2.0f * q3;
 800229e:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022a8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    _4q0 = 4.0f * q0;
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <madgwick_ahrs_updateIMU+0x380>)
 80022ae:	edd3 7a00 	vldr	s15, [r3]
 80022b2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ba:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    _4q1 = 4.0f * q1;
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 80022c0:	edd3 7a00 	vldr	s15, [r3]
 80022c4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    _4q2 = 4.0f * q2;
 80022d0:	4b42      	ldr	r3, [pc, #264]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    _8q1 = 8.0f * q1;
 80022e2:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    _8q2 = 8.0f * q2;
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002302:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    q0q0 = q0 * q0;
 8002306:	4b37      	ldr	r3, [pc, #220]	; (80023e4 <madgwick_ahrs_updateIMU+0x380>)
 8002308:	ed93 7a00 	vldr	s14, [r3]
 800230c:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <madgwick_ahrs_updateIMU+0x380>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    q1q1 = q1 * q1;
 800231a:	4b2f      	ldr	r3, [pc, #188]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 800231c:	ed93 7a00 	vldr	s14, [r3]
 8002320:	4b2d      	ldr	r3, [pc, #180]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 8002322:	edd3 7a00 	vldr	s15, [r3]
 8002326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232a:	edc7 7a08 	vstr	s15, [r7, #32]
    q2q2 = q2 * q2;
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 8002330:	ed93 7a00 	vldr	s14, [r3]
 8002334:	4b29      	ldr	r3, [pc, #164]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233e:	edc7 7a07 	vstr	s15, [r7, #28]
    q3q3 = q3 * q3;
 8002342:	4b27      	ldr	r3, [pc, #156]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 8002344:	ed93 7a00 	vldr	s14, [r3]
 8002348:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 800234a:	edd3 7a00 	vldr	s15, [r3]
 800234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002352:	edc7 7a06 	vstr	s15, [r7, #24]

    // Gradient decent algorithm corrective step
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002356:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800235a:	edd7 7a07 	vldr	s15, [r7, #28]
 800235e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 8002364:	edd3 6a00 	vldr	s13, [r3]
 8002368:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002374:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002378:	edd7 7a08 	vldr	s15, [r7, #32]
 800237c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002384:	4b18      	ldr	r3, [pc, #96]	; (80023e8 <madgwick_ahrs_updateIMU+0x384>)
 8002386:	edd3 6a00 	vldr	s13, [r3]
 800238a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800238e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002396:	edc7 7a05 	vstr	s15, [r7, #20]
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800239a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800239e:	edd7 7a06 	vldr	s15, [r7, #24]
 80023a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 80023a8:	edd3 6a00 	vldr	s13, [r3]
 80023ac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b4:	e01a      	b.n	80023ec <madgwick_ahrs_updateIMU+0x388>
 80023b6:	bf00      	nop
 80023b8:	200004a0 	.word	0x200004a0
 80023bc:	200004a4 	.word	0x200004a4
 80023c0:	200004a8 	.word	0x200004a8
 80023c4:	200004ac 	.word	0x200004ac
 80023c8:	200004b4 	.word	0x200004b4
 80023cc:	200004b8 	.word	0x200004b8
 80023d0:	200004bc 	.word	0x200004bc
 80023d4:	200004c0 	.word	0x200004c0
 80023d8:	20000494 	.word	0x20000494
 80023dc:	20000498 	.word	0x20000498
 80023e0:	2000049c 	.word	0x2000049c
 80023e4:	20000004 	.word	0x20000004
 80023e8:	200004b0 	.word	0x200004b0
 80023ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023f0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023f4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80023f8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023fc:	4be6      	ldr	r3, [pc, #920]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240a:	4be4      	ldr	r3, [pc, #912]	; (800279c <madgwick_ahrs_updateIMU+0x738>)
 800240c:	edd3 6a00 	vldr	s13, [r3]
 8002410:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800241c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002420:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002424:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002428:	edd7 7a08 	vldr	s15, [r7, #32]
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002434:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8002438:	edd7 7a07 	vldr	s15, [r7, #28]
 800243c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002444:	4bd6      	ldr	r3, [pc, #856]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 8002446:	edd3 6a00 	vldr	s13, [r3]
 800244a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800244e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002456:	edc7 7a04 	vstr	s15, [r7, #16]
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800245a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800245e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002462:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002466:	4bcf      	ldr	r3, [pc, #828]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002470:	4bcd      	ldr	r3, [pc, #820]	; (80027a8 <madgwick_ahrs_updateIMU+0x744>)
 8002472:	edd3 6a00 	vldr	s13, [r3]
 8002476:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800247a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800247e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002482:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8002486:	edd7 7a06 	vldr	s15, [r7, #24]
 800248a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800248e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002492:	4bc2      	ldr	r3, [pc, #776]	; (800279c <madgwick_ahrs_updateIMU+0x738>)
 8002494:	edd3 6a00 	vldr	s13, [r3]
 8002498:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800249c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024a4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80024b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80024c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024cc:	4bb4      	ldr	r3, [pc, #720]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 80024ce:	edd3 6a00 	vldr	s13, [r3]
 80024d2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024de:	edc7 7a03 	vstr	s15, [r7, #12]
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80024e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80024e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ee:	4baf      	ldr	r3, [pc, #700]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 80024f0:	edd3 7a00 	vldr	s15, [r3]
 80024f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024f8:	4bab      	ldr	r3, [pc, #684]	; (80027a8 <madgwick_ahrs_updateIMU+0x744>)
 80024fa:	edd3 6a00 	vldr	s13, [r3]
 80024fe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002506:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250a:	edd7 7a07 	vldr	s15, [r7, #28]
 800250e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002512:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002516:	4ba5      	ldr	r3, [pc, #660]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 8002518:	edd3 7a00 	vldr	s15, [r3]
 800251c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002524:	4b9d      	ldr	r3, [pc, #628]	; (800279c <madgwick_ahrs_updateIMU+0x738>)
 8002526:	edd3 6a00 	vldr	s13, [r3]
 800252a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800252e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002536:	edc7 7a02 	vstr	s15, [r7, #8]
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800253a:	edd7 7a05 	vldr	s15, [r7, #20]
 800253e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002542:	edd7 7a04 	vldr	s15, [r7, #16]
 8002546:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800254a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800254e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002552:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002556:	ee37 7a27 	vadd.f32	s14, s14, s15
 800255a:	edd7 7a02 	vldr	s15, [r7, #8]
 800255e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002566:	eeb0 0a67 	vmov.f32	s0, s15
 800256a:	f000 f9c7 	bl	80028fc <invSqrt>
 800256e:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    s0 *= recipNorm;
 8002572:	ed97 7a05 	vldr	s14, [r7, #20]
 8002576:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800257a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257e:	edc7 7a05 	vstr	s15, [r7, #20]
    s1 *= recipNorm;
 8002582:	ed97 7a04 	vldr	s14, [r7, #16]
 8002586:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	edc7 7a04 	vstr	s15, [r7, #16]
    s2 *= recipNorm;
 8002592:	ed97 7a03 	vldr	s14, [r7, #12]
 8002596:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800259e:	edc7 7a03 	vstr	s15, [r7, #12]
    s3 *= recipNorm;
 80025a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80025a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	edc7 7a02 	vstr	s15, [r7, #8]

    // Apply feedback step
    qDot1 -= beta * s0;
 80025b2:	4b7f      	ldr	r3, [pc, #508]	; (80027b0 <madgwick_ahrs_updateIMU+0x74c>)
 80025b4:	ed93 7a00 	vldr	s14, [r3]
 80025b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80025bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80025c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    qDot2 -= beta * s1;
 80025cc:	4b78      	ldr	r3, [pc, #480]	; (80027b0 <madgwick_ahrs_updateIMU+0x74c>)
 80025ce:	ed93 7a00 	vldr	s14, [r3]
 80025d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80025de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    qDot3 -= beta * s2;
 80025e6:	4b72      	ldr	r3, [pc, #456]	; (80027b0 <madgwick_ahrs_updateIMU+0x74c>)
 80025e8:	ed93 7a00 	vldr	s14, [r3]
 80025ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80025f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    qDot4 -= beta * s3;
 8002600:	4b6b      	ldr	r3, [pc, #428]	; (80027b0 <madgwick_ahrs_updateIMU+0x74c>)
 8002602:	ed93 7a00 	vldr	s14, [r3]
 8002606:	edd7 7a02 	vldr	s15, [r7, #8]
 800260a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002616:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * (1.0f / sampleFreq);
 800261a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800261e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80027b4 <madgwick_ahrs_updateIMU+0x750>
 8002622:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002626:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <madgwick_ahrs_updateIMU+0x754>)
 8002628:	edd3 7a00 	vldr	s15, [r3]
 800262c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002630:	4b61      	ldr	r3, [pc, #388]	; (80027b8 <madgwick_ahrs_updateIMU+0x754>)
 8002632:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * (1.0f / sampleFreq);
 8002636:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800263a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80027b4 <madgwick_ahrs_updateIMU+0x750>
 800263e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002642:	4b55      	ldr	r3, [pc, #340]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 8002644:	edd3 7a00 	vldr	s15, [r3]
 8002648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264c:	4b52      	ldr	r3, [pc, #328]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 800264e:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * (1.0f / sampleFreq);
 8002652:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002656:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80027b4 <madgwick_ahrs_updateIMU+0x750>
 800265a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800265e:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 8002660:	edd3 7a00 	vldr	s15, [r3]
 8002664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002668:	4b4e      	ldr	r3, [pc, #312]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 800266a:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * (1.0f / sampleFreq);
 800266e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002672:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80027b4 <madgwick_ahrs_updateIMU+0x750>
 8002676:	ee27 7a87 	vmul.f32	s14, s15, s14
 800267a:	4b4c      	ldr	r3, [pc, #304]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002684:	4b49      	ldr	r3, [pc, #292]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 8002686:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800268a:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <madgwick_ahrs_updateIMU+0x754>)
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	4b49      	ldr	r3, [pc, #292]	; (80027b8 <madgwick_ahrs_updateIMU+0x754>)
 8002692:	edd3 7a00 	vldr	s15, [r3]
 8002696:	ee27 7a27 	vmul.f32	s14, s14, s15
 800269a:	4b3f      	ldr	r3, [pc, #252]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 800269c:	edd3 6a00 	vldr	s13, [r3]
 80026a0:	4b3d      	ldr	r3, [pc, #244]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 80026b0:	edd3 6a00 	vldr	s13, [r3]
 80026b4:	4b3b      	ldr	r3, [pc, #236]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c2:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 80026c4:	edd3 6a00 	vldr	s13, [r3]
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d6:	eeb0 0a67 	vmov.f32	s0, s15
 80026da:	f000 f90f 	bl	80028fc <invSqrt>
 80026de:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  q0 *= recipNorm;
 80026e2:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <madgwick_ahrs_updateIMU+0x754>)
 80026e4:	ed93 7a00 	vldr	s14, [r3]
 80026e8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80026ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f0:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <madgwick_ahrs_updateIMU+0x754>)
 80026f2:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 80026f6:	4b28      	ldr	r3, [pc, #160]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 80026f8:	ed93 7a00 	vldr	s14, [r3]
 80026fc:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 8002706:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 800271a:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 8002720:	ed93 7a00 	vldr	s14, [r3]
 8002724:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 800272e:	edc3 7a00 	vstr	s15, [r3]

  atti->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1); // roll     -pi----pi
 8002732:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800273c:	4b1b      	ldr	r3, [pc, #108]	; (80027ac <madgwick_ahrs_updateIMU+0x748>)
 800273e:	edd3 7a00 	vldr	s15, [r3]
 8002742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002746:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <madgwick_ahrs_updateIMU+0x754>)
 8002748:	edd3 7a00 	vldr	s15, [r3]
 800274c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800275e:	ee17 0a90 	vmov	r0, s15
 8002762:	f7fd fef1 	bl	8000548 <__aeabi_f2d>
 8002766:	4604      	mov	r4, r0
 8002768:	460d      	mov	r5, r1
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002774:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 8002784:	edd3 7a00 	vldr	s15, [r3]
 8002788:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <madgwick_ahrs_updateIMU+0x740>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002796:	e011      	b.n	80027bc <madgwick_ahrs_updateIMU+0x758>
 8002798:	20000494 	.word	0x20000494
 800279c:	200004b0 	.word	0x200004b0
 80027a0:	200004b4 	.word	0x200004b4
 80027a4:	20000498 	.word	0x20000498
 80027a8:	200004ac 	.word	0x200004ac
 80027ac:	2000049c 	.word	0x2000049c
 80027b0:	20000000 	.word	0x20000000
 80027b4:	3a83126f 	.word	0x3a83126f
 80027b8:	20000004 	.word	0x20000004
 80027bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c8:	ee17 0a90 	vmov	r0, s15
 80027cc:	f7fd febc 	bl	8000548 <__aeabi_f2d>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	ec43 2b11 	vmov	d1, r2, r3
 80027d8:	ec45 4b10 	vmov	d0, r4, r5
 80027dc:	f012 f882 	bl	80148e4 <atan2>
 80027e0:	ec53 2b10 	vmov	r2, r3, d0
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7fe f9de 	bl	8000ba8 <__aeabi_d2f>
 80027ec:	4602      	mov	r2, r0
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	601a      	str	r2, [r3, #0]
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2);                                // pitch    -pi/2----pi/2
 80027f2:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <madgwick_ahrs_updateIMU+0x888>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80027fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002800:	4b3b      	ldr	r3, [pc, #236]	; (80028f0 <madgwick_ahrs_updateIMU+0x88c>)
 8002802:	edd3 7a00 	vldr	s15, [r3]
 8002806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280a:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 800280c:	edd3 7a00 	vldr	s15, [r3]
 8002810:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002814:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002822:	ee17 0a90 	vmov	r0, s15
 8002826:	f7fd fe8f 	bl	8000548 <__aeabi_f2d>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	ec43 2b10 	vmov	d0, r2, r3
 8002832:	f012 f81d 	bl	8014870 <asin>
 8002836:	ec53 2b10 	vmov	r2, r3, d0
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f9b3 	bl	8000ba8 <__aeabi_d2f>
 8002842:	4602      	mov	r2, r0
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	605a      	str	r2, [r3, #4]
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1);  // yaw      -pi----pi
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <madgwick_ahrs_updateIMU+0x888>)
 800284a:	edd3 7a00 	vldr	s15, [r3]
 800284e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <madgwick_ahrs_updateIMU+0x88c>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002874:	ee17 0a90 	vmov	r0, s15
 8002878:	f7fd fe66 	bl	8000548 <__aeabi_f2d>
 800287c:	4604      	mov	r4, r0
 800287e:	460d      	mov	r5, r1
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800288a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <madgwick_ahrs_updateIMU+0x88c>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <madgwick_ahrs_updateIMU+0x88c>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028b8:	ee17 0a90 	vmov	r0, s15
 80028bc:	f7fd fe44 	bl	8000548 <__aeabi_f2d>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	ec43 2b11 	vmov	d1, r2, r3
 80028c8:	ec45 4b10 	vmov	d0, r4, r5
 80028cc:	f012 f80a 	bl	80148e4 <atan2>
 80028d0:	ec53 2b10 	vmov	r2, r3, d0
 80028d4:	4610      	mov	r0, r2
 80028d6:	4619      	mov	r1, r3
 80028d8:	f7fe f966 	bl	8000ba8 <__aeabi_d2f>
 80028dc:	4602      	mov	r2, r0
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	609a      	str	r2, [r3, #8]
}
 80028e2:	bf00      	nop
 80028e4:	3760      	adds	r7, #96	; 0x60
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000494 	.word	0x20000494
 80028f0:	2000049c 	.word	0x2000049c
 80028f4:	20000004 	.word	0x20000004
 80028f8:	20000498 	.word	0x20000498

080028fc <invSqrt>:
               sizeof(long) must be 4 bytes.
  * @param[in] input:x
  * @retval    1/Sqrt(x)
  */
float invSqrt(float x)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b087      	sub	sp, #28
 8002900:	af00      	add	r7, sp, #0
 8002902:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 8002906:	edd7 7a01 	vldr	s15, [r7, #4]
 800290a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800290e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002912:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	613b      	str	r3, [r7, #16]
  long i = *(long *)&y;
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	105a      	asrs	r2, r3, #1
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <invSqrt+0x74>)
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  y = *(float *)&i;
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8002934:	ed97 7a04 	vldr	s14, [r7, #16]
 8002938:	edd7 7a05 	vldr	s15, [r7, #20]
 800293c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002940:	edd7 7a04 	vldr	s15, [r7, #16]
 8002944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002948:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800294c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002950:	edd7 7a04 	vldr	s15, [r7, #16]
 8002954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002958:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	ee07 3a90 	vmov	s15, r3
}
 8002962:	eeb0 0a67 	vmov.f32	s0, s15
 8002966:	371c      	adds	r7, #28
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	5f3759df 	.word	0x5f3759df

08002974 <queueM_init>:
#include "string.h"

/* Since we have multiple can comm works in the future , there is necessity that apply
 * FIFO Queue management of our CAN2 data pool. */
/***************************** CAN COMM QUEUE ************************************/
void queueM_init(QueueManage_t *qm){
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	qm->head = 0;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	801a      	strh	r2, [r3, #0]
	qm->tail = 0;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	805a      	strh	r2, [r3, #2]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <enqueueCanMessage>:
  * @brief     can comms enqueue
  * @param[in] header: can type header
  * @param[in] data: the data would be transmitted
  * @retval    None
  */
void enqueueCanMessage(CAN_TxHeaderTypeDef* header, CanMessage_t *canQueue, QueueManage_t *qm, uint8_t *data){
 8002994:	b5b0      	push	{r4, r5, r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	607a      	str	r2, [r7, #4]
 80029a0:	603b      	str	r3, [r7, #0]
    if ((qm->tail + 1) % QUEUE_SIZE == qm->head)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <enqueueCanMessage+0x9c>)
 80029ac:	fb83 1302 	smull	r1, r3, r3, r2
 80029b0:	1199      	asrs	r1, r3, #6
 80029b2:	17d3      	asrs	r3, r2, #31
 80029b4:	1acb      	subs	r3, r1, r3
 80029b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029ba:	fb01 f303 	mul.w	r3, r1, r3
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d02d      	beq.n	8002a26 <enqueueCanMessage+0x92>
    {
        /* Queue is full, cannot enqueue message */
        return;
    }
    /* follow fifo rules */
    canQueue[qm->tail].header = *header;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d0:	015b      	lsls	r3, r3, #5
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	441a      	add	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029e4:	e884 0003 	stmia.w	r4, {r0, r1}
    memcpy(canQueue[qm->tail].data, data, 8);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029ee:	015b      	lsls	r3, r3, #5
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	4413      	add	r3, r2
 80029f4:	3318      	adds	r3, #24
 80029f6:	2208      	movs	r2, #8
 80029f8:	6839      	ldr	r1, [r7, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f00f fa8e 	bl	8011f1c <memcpy>
    /* tail ++ */
    qm->tail = (qm->tail + 1) % QUEUE_SIZE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a06:	3301      	adds	r3, #1
 8002a08:	4a09      	ldr	r2, [pc, #36]	; (8002a30 <enqueueCanMessage+0x9c>)
 8002a0a:	fb82 1203 	smull	r1, r2, r2, r3
 8002a0e:	1191      	asrs	r1, r2, #6
 8002a10:	17da      	asrs	r2, r3, #31
 8002a12:	1a8a      	subs	r2, r1, r2
 8002a14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a18:	fb01 f202 	mul.w	r2, r1, r2
 8002a1c:	1a9a      	subs	r2, r3, r2
 8002a1e:	b212      	sxth	r2, r2
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	805a      	strh	r2, [r3, #2]
 8002a24:	e000      	b.n	8002a28 <enqueueCanMessage+0x94>
        return;
 8002a26:	bf00      	nop
}
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	10624dd3 	.word	0x10624dd3

08002a34 <sendNextCanMessage>:
/**
  * @brief     can comm send data from queue
  * @param[in] header: can type header
  * @retval    None
  */
void sendNextCanMessage(CAN_HandleTypeDef* hcan, CanMessage_t *canQueue, QueueManage_t *qm){
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
    if (qm->head == qm->tail)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d02b      	beq.n	8002aa8 <sendNextCanMessage+0x74>
    {
        /* Queue is empty, nothing to send */
        return;
    }
    uint32_t mailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(hcan, &(canQueue[qm->head].header), canQueue[qm->head].data, &mailbox);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a56:	015b      	lsls	r3, r3, #5
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a64:	015b      	lsls	r3, r3, #5
 8002a66:	68ba      	ldr	r2, [r7, #8]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f103 0218 	add.w	r2, r3, #24
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f008 facc 	bl	800b010 <HAL_CAN_AddTxMessage>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d113      	bne.n	8002aaa <sendNextCanMessage+0x76>
    {
        /* Message has been added to the mailbox successfully, remove it from the queue */
    	qm->head = (qm->head + 1) % QUEUE_SIZE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <sendNextCanMessage+0x7c>)
 8002a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a90:	1191      	asrs	r1, r2, #6
 8002a92:	17da      	asrs	r2, r3, #31
 8002a94:	1a8a      	subs	r2, r1, r2
 8002a96:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a9a:	fb01 f202 	mul.w	r2, r1, r2
 8002a9e:	1a9a      	subs	r2, r3, r2
 8002aa0:	b212      	sxth	r2, r2
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	e000      	b.n	8002aaa <sendNextCanMessage+0x76>
        return;
 8002aa8:	bf00      	nop
    }
}
 8002aaa:	3718      	adds	r7, #24
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	10624dd3 	.word	0x10624dd3

08002ab4 <ff_param_init>:
/**
  * @brief    feed forward control init
  * @param[in] ff: pointer to feed forward control struct
  * @param[in] kf: ff_gain value
  */
void ff_param_init(FeedForward_t *ff, float kf){
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	ed87 0a00 	vstr	s0, [r7]
	ff->ff_gain = kf;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	601a      	str	r2, [r3, #0]
	ff->last_input = 0;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f04f 0200 	mov.w	r2, #0
 8002acc:	605a      	str	r2, [r3, #4]
	ff->output = 0;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <feedforward>:
  * @retval    feedforwad prediction value
  *
  * Understanding: Gff(S) = 1 / (Gc_fb(s))
  *
  */
float feedforward(FeedForward_t *ff, float input){
 8002ae2:	b480      	push	{r7}
 8002ae4:	b083      	sub	sp, #12
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	ed87 0a00 	vstr	s0, [r7]
	ff->output = (input - ff->last_input) * ff->ff_gain + input;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8002af4:	ed97 7a00 	vldr	s14, [r7]
 8002af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b06:	edd7 7a00 	vldr	s15, [r7]
 8002b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edc3 7a02 	vstr	s15, [r3, #8]
	ff->last_input = input;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	605a      	str	r2, [r3, #4]
	return ff->output;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	ee07 3a90 	vmov	s15, r3
}
 8002b22:	eeb0 0a67 	vmov.f32	s0, s15
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <pid_param_init>:

/**
  * @brief  pid parameters initialization
  * @retval None
  */
void pid_param_init(PID_t *pid, int32_t max_out, float max_i_out, float max_err, float kp, float ki, float kd){
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	; 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	61f8      	str	r0, [r7, #28]
 8002b38:	61b9      	str	r1, [r7, #24]
 8002b3a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002b3e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002b42:	ed87 1a03 	vstr	s2, [r7, #12]
 8002b46:	edc7 1a02 	vstr	s3, [r7, #8]
 8002b4a:	ed87 2a01 	vstr	s4, [r7, #4]
	pid->kp = kp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	609a      	str	r2, [r3, #8]

	pid->max_out = max_out;
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid->max_i_out = max_i_out;
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	635a      	str	r2, [r3, #52]	; 0x34
	pid->max_err = max_err;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30

	pid->err = 0;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	615a      	str	r2, [r3, #20]
	pid->last_err = 0;
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
	pid->llast_err = 0;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	61da      	str	r2, [r3, #28]

	pid->total_out = 0;
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002b9c:	bf00      	nop
 8002b9e:	3724      	adds	r7, #36	; 0x24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output
  */
float pid_calculate(PID_t *pid, float cur_val, float target_val)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bb4:	edc7 0a01 	vstr	s1, [r7, #4]
  float dt = 1.0f; //sampling time
 8002bb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002bbc:	617b      	str	r3, [r7, #20]
  pid->cur_val = cur_val;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	60da      	str	r2, [r3, #12]
  pid->target_val = target_val;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]
  pid->last_err = pid->err;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	619a      	str	r2, [r3, #24]
  pid->err =  target_val - cur_val;
 8002bd2:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	edc3 7a05 	vstr	s15, [r3, #20]
  if ((pid->max_err != 0) && (fabs(pid->err) > pid->max_err))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002bea:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf2:	d00f      	beq.n	8002c14 <pid_calculate+0x6c>
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002bfa:	eeb0 7ae7 	vabs.f32	s14, s15
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0c:	dd02      	ble.n	8002c14 <pid_calculate+0x6c>
    return 0;
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e05a      	b.n	8002cca <pid_calculate+0x122>
  pid->pout = pid->kp * pid->err;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	ed93 7a00 	vldr	s14, [r3]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	edc3 7a08 	vstr	s15, [r3, #32]
  pid->iout += pid->ki * pid->err *dt;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	edd3 6a01 	vldr	s13, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c3c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  pid->dout = pid->kd * (pid->err - pid->last_err) / dt;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	edd3 6a05 	vldr	s13, [r3, #20]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c64:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002c68:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  abs_limit(&(pid->iout), pid->max_i_out);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c86:	eeb0 0a67 	vmov.f32	s0, s15
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f000 f8cc 	bl	8002e28 <abs_limit>
  pid->total_out = pid->pout + pid->iout + pid->dout;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	ed93 7a08 	vldr	s14, [r3, #32]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  abs_limit(&(pid->total_out), pid->max_out);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f000 f8b1 	bl	8002e28 <abs_limit>

  return pid->total_out;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	ee07 3a90 	vmov	s15, r3
}
 8002cce:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <pid_single_loop_control>:
}
/**
  * @brief  Single-loop pid controller
  * @retval None
  */
float pid_single_loop_control(float target_val, PID_t *pid, float cur_val){
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	ed87 0a03 	vstr	s0, [r7, #12]
 8002ce2:	60b8      	str	r0, [r7, #8]
 8002ce4:	edc7 0a01 	vstr	s1, [r7, #4]
	return pid_calculate(pid, cur_val, target_val);
 8002ce8:	edd7 0a03 	vldr	s1, [r7, #12]
 8002cec:	ed97 0a01 	vldr	s0, [r7, #4]
 8002cf0:	68b8      	ldr	r0, [r7, #8]
 8002cf2:	f7ff ff59 	bl	8002ba8 <pid_calculate>
 8002cf6:	eef0 7a40 	vmov.f32	s15, s0
}
 8002cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <pid_dual_loop_control>:
/**
  * @brief  Dual-loop pid controller
  * @Note 	Dual control provide more force and greater torque
  * @retval None
  */
float pid_dual_loop_control(float f_tar_val, PID_t *f_pid, PID_t *s_pid, float f_cur_val, float s_cur_val){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002d0e:	6138      	str	r0, [r7, #16]
 8002d10:	60f9      	str	r1, [r7, #12]
 8002d12:	edc7 0a02 	vstr	s1, [r7, #8]
 8002d16:	ed87 1a01 	vstr	s2, [r7, #4]
	float f_out=0;
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	61fb      	str	r3, [r7, #28]
	f_out = pid_calculate(f_pid, f_cur_val, f_tar_val);
 8002d20:	edd7 0a05 	vldr	s1, [r7, #20]
 8002d24:	ed97 0a02 	vldr	s0, [r7, #8]
 8002d28:	6938      	ldr	r0, [r7, #16]
 8002d2a:	f7ff ff3d 	bl	8002ba8 <pid_calculate>
 8002d2e:	ed87 0a07 	vstr	s0, [r7, #28]
	return pid_calculate(s_pid, s_cur_val, f_out);
 8002d32:	edd7 0a07 	vldr	s1, [r7, #28]
 8002d36:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f7ff ff34 	bl	8002ba8 <pid_calculate>
 8002d40:	eef0 7a40 	vmov.f32	s15, s0
}
 8002d44:	eeb0 0a67 	vmov.f32	s0, s15
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <ramp_init>:
 ***************************************************************************/

#include "ramp.h"

void ramp_init(ramp_t *ramp, int32_t scale)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  ramp->count = 0;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
  ramp->scale = scale;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	605a      	str	r2, [r3, #4]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <ramp_calculate>:

float ramp_calculate(ramp_t *ramp)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if (ramp->scale <= 0)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dc02      	bgt.n	8002d86 <ramp_calculate+0x16>
    return 0;
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	e01f      	b.n	8002dc6 <ramp_calculate+0x56>

  if (ramp->count++ >= ramp->scale)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	1c59      	adds	r1, r3, #1
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	6011      	str	r1, [r2, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6852      	ldr	r2, [r2, #4]
 8002d94:	4293      	cmp	r3, r2
 8002d96:	db03      	blt.n	8002da0 <ramp_calculate+0x30>
    ramp->count = ramp->scale;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	601a      	str	r2, [r3, #0]

  ramp->out = ramp->count / ((float)ramp->scale);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	edc3 7a02 	vstr	s15, [r3, #8]
  return ramp->out;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	ee07 3a90 	vmov	s15, r3
}
 8002dca:	eeb0 0a67 	vmov.f32	s0, s15
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <kalmanCreate>:
  *         T_R: Measurement noise covariance
  *
  * @retval none
  */
void kalmanCreate(kalman_filter_t *p,float T_Q,float T_R)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002de4:	edc7 0a01 	vstr	s1, [r7, #4]
    p->X_last = (float)0;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f04f 0200 	mov.w	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    p->P_last = 0;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
    p->Q = T_Q;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	621a      	str	r2, [r3, #32]
    p->R = T_R;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
    p->A = 1;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e0a:	61da      	str	r2, [r3, #28]
    p->H = 1;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002e12:	629a      	str	r2, [r3, #40]	; 0x28
    p->X_mid = p->X_last;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	605a      	str	r2, [r3, #4]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <abs_limit>:
/**
  * @brief  absolute limitation
  * @retval None
  */
void abs_limit(float *a, float ABS_MAX)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	edd3 7a00 	vldr	s15, [r3]
 8002e3a:	ed97 7a00 	vldr	s14, [r7]
 8002e3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e46:	d502      	bpl.n	8002e4e <abs_limit+0x26>
    *a = ABS_MAX;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	ed93 7a00 	vldr	s14, [r3]
 8002e54:	edd7 7a00 	vldr	s15, [r7]
 8002e58:	eef1 7a67 	vneg.f32	s15, s15
 8002e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	d400      	bmi.n	8002e68 <abs_limit+0x40>
    *a = -ABS_MAX;
}
 8002e66:	e006      	b.n	8002e76 <abs_limit+0x4e>
    *a = -ABS_MAX;
 8002e68:	edd7 7a00 	vldr	s15, [r7]
 8002e6c:	eef1 7a67 	vneg.f32	s15, s15
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	edc3 7a00 	vstr	s15, [r3]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <in_out_map>:

/**
  * @brief  map the angle vals for motor angular and radians.
  * @retval mapped radians
  */
float in_out_map(float input, float in_min, float in_max, float out_min, float out_max){
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	ed87 0a05 	vstr	s0, [r7, #20]
 8002e8c:	edc7 0a04 	vstr	s1, [r7, #16]
 8002e90:	ed87 1a03 	vstr	s2, [r7, #12]
 8002e94:	edc7 1a02 	vstr	s3, [r7, #8]
 8002e98:	ed87 2a01 	vstr	s4, [r7, #4]
    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002e9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ea0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ea8:	edd7 6a01 	vldr	s13, [r7, #4]
 8002eac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002eb4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002eb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ebc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ec0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ec4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ecc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <init_folp_filter>:
* @func groups    : filters
* @brief          : Some filters for data process and normailzation
* @created time	  : Jul, 2023
* @author         : Haoran
******************************************************************************/
void init_folp_filter(first_order_low_pass_t *folp, float a){
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	ed87 0a00 	vstr	s0, [r7]
	folp->a = a;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	60da      	str	r2, [r3, #12]
	folp->cur_data = 0;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
	folp->last_output_data = 0;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f04f 0200 	mov.w	r2, #0
 8002efe:	609a      	str	r2, [r3, #8]
	folp->output_data = 0;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	605a      	str	r2, [r3, #4]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <first_order_low_pass_filter>:
  * 			hyperparameter: a[0,1] -> smaller : stability up, sensitivity down (used when data is slightly oscillating)
  * 								 	  larger  : stability down, sensitivity up (used when data rapidly changes)
  * @attention significant phase lags. Good suppression of periodic disturbances tho.
  * @retval    output
  */
float first_order_low_pass_filter(first_order_low_pass_t *folp, float data){
 8002f14:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f18:	b082      	sub	sp, #8
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	ed87 0a00 	vstr	s0, [r7]
	folp->cur_data = data;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	601a      	str	r2, [r3, #0]
	/* apply equation */
	folp->output_data = folp->a * folp->cur_data + (1.0-folp->a)*folp->last_output_data;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	edd3 7a00 	vldr	s15, [r3]
 8002f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f38:	ee17 0a90 	vmov	r0, s15
 8002f3c:	f7fd fb04 	bl	8000548 <__aeabi_f2d>
 8002f40:	4604      	mov	r4, r0
 8002f42:	460d      	mov	r5, r1
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd fafd 	bl	8000548 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	f04f 0000 	mov.w	r0, #0
 8002f56:	4917      	ldr	r1, [pc, #92]	; (8002fb4 <first_order_low_pass_filter+0xa0>)
 8002f58:	f7fd f996 	bl	8000288 <__aeabi_dsub>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4690      	mov	r8, r2
 8002f62:	4699      	mov	r9, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd faed 	bl	8000548 <__aeabi_f2d>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	4640      	mov	r0, r8
 8002f74:	4649      	mov	r1, r9
 8002f76:	f7fd fb3f 	bl	80005f8 <__aeabi_dmul>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4620      	mov	r0, r4
 8002f80:	4629      	mov	r1, r5
 8002f82:	f7fd f983 	bl	800028c <__adddf3>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4610      	mov	r0, r2
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	f7fd fe0b 	bl	8000ba8 <__aeabi_d2f>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	605a      	str	r2, [r3, #4]
	folp->last_output_data = folp->output_data;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
	return folp->output_data;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	ee07 3a90 	vmov	s15, r3
}
 8002fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fb4:	3ff00000 	.word	0x3ff00000

08002fb8 <init_ewma_filter>:
  */
float first_order_comp_filter(float a,  float lowPF, float highPF){
	return (a*lowPF + (1.0-a)*highPF);
}

void init_ewma_filter(ewma_filter_t *ewma, float a){
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	ed87 0a00 	vstr	s0, [r7]
	ewma->a = a;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	609a      	str	r2, [r3, #8]
	ewma->output_data = 0;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
	ewma->last_output_data = 0;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	605a      	str	r2, [r3, #4]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <ewma_filter>:
  * @param[in] main ewna struct
  * @param[in] current value to be filtered
  * @Note	   output = alpha * reading + (1 - alpha) * lastOutput, seems better than mean sliding filter
  * @retval    output
  */
float ewma_filter(ewma_filter_t *ewma, float cur_data) {
 8002fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fec:	b082      	sub	sp, #8
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
 8002ff2:	ed87 0a00 	vstr	s0, [r7]
	ewma->output_data = ewma->a * cur_data + (1.0 - ewma->a)*ewma->last_output_data;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ffc:	edd7 7a00 	vldr	s15, [r7]
 8003000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003004:	ee17 0a90 	vmov	r0, s15
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	4604      	mov	r4, r0
 800300e:	460d      	mov	r5, r1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f7fd fa97 	bl	8000548 <__aeabi_f2d>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	f04f 0000 	mov.w	r0, #0
 8003022:	4917      	ldr	r1, [pc, #92]	; (8003080 <ewma_filter+0x98>)
 8003024:	f7fd f930 	bl	8000288 <__aeabi_dsub>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4690      	mov	r8, r2
 800302e:	4699      	mov	r9, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa87 	bl	8000548 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4640      	mov	r0, r8
 8003040:	4649      	mov	r1, r9
 8003042:	f7fd fad9 	bl	80005f8 <__aeabi_dmul>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4620      	mov	r0, r4
 800304c:	4629      	mov	r1, r5
 800304e:	f7fd f91d 	bl	800028c <__adddf3>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4610      	mov	r0, r2
 8003058:	4619      	mov	r1, r3
 800305a:	f7fd fda5 	bl	8000ba8 <__aeabi_d2f>
 800305e:	4602      	mov	r2, r0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	601a      	str	r2, [r3, #0]
	ewma->last_output_data = ewma->output_data;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]
    return ewma->output_data;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	ee07 3a90 	vmov	s15, r3
}
 8003074:	eeb0 0a67 	vmov.f32	s0, s15
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003080:	3ff00000 	.word	0x3ff00000

08003084 <init_swm_filter>:


void init_swm_filter(sliding_mean_filter_t *filter, size_t window_size){
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
    /* window size should not be greater than max window size */
	filter->window_size = (window_size <= MAX_WINDOW_SIZE) ? window_size : MAX_WINDOW_SIZE;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003094:	bf28      	it	cs
 8003096:	f44f 7396 	movcs.w	r3, #300	; 0x12c
 800309a:	461a      	mov	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    filter->current_index = 0;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
    filter->sum = 0.0f;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    memset(filter->window, 0, filter->window_size * sizeof(float));
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	461a      	mov	r2, r3
 80030c2:	2100      	movs	r1, #0
 80030c4:	f00e ff38 	bl	8011f38 <memset>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* Task execution time (per loop): 1ms */
void Chassis_Task_Func(void const * argument)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* task LD indicator */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030de:	480d      	ldr	r0, [pc, #52]	; (8003114 <Chassis_Task_Func+0x44>)
 80030e0:	f009 faa0 	bl	800c624 <HAL_GPIO_WritePin>

  /* init chassis task */
  chasiss_task_init(&chassis); // For remote debug, set act mode as GIMBAL_CENTER
 80030e4:	480c      	ldr	r0, [pc, #48]	; (8003118 <Chassis_Task_Func+0x48>)
 80030e6:	f000 f81b 	bl	8003120 <chasiss_task_init>
  	  	  	  	  	  	  	   //					set mode as DEBUG_MODE

  /* set task exec period */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 1ms
 80030ea:	2301      	movs	r3, #1
 80030ec:	60fb      	str	r3, [r7, #12]

  /* init the task ticks */
  xLastWakeTime = xTaskGetTickCount();
 80030ee:	f00d ff4d 	bl	8010f8c <xTaskGetTickCount>
 80030f2:	4603      	mov	r3, r0
 80030f4:	60bb      	str	r3, [r7, #8]

  for(;;)
  {
	  /* main chassis task function */
//	  memcpy(&temp_referee, &referee, sizeof(Referee_t));
	  chassis_rc_mode_selection(&chassis, &rc);
 80030f6:	4909      	ldr	r1, [pc, #36]	; (800311c <Chassis_Task_Func+0x4c>)
 80030f8:	4807      	ldr	r0, [pc, #28]	; (8003118 <Chassis_Task_Func+0x48>)
 80030fa:	f000 fd9d 	bl	8003c38 <chassis_rc_mode_selection>
	  chassis_exec_act_mode(&chassis);
 80030fe:	4806      	ldr	r0, [pc, #24]	; (8003118 <Chassis_Task_Func+0x48>)
 8003100:	f000 fbb6 	bl	8003870 <chassis_exec_act_mode>

	  /* delay until wake time */
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003104:	f107 0308 	add.w	r3, r7, #8
 8003108:	68f9      	ldr	r1, [r7, #12]
 800310a:	4618      	mov	r0, r3
 800310c:	f00d fd82 	bl	8010c14 <vTaskDelayUntil>
	  chassis_rc_mode_selection(&chassis, &rc);
 8003110:	e7f1      	b.n	80030f6 <Chassis_Task_Func+0x26>
 8003112:	bf00      	nop
 8003114:	40021c00 	.word	0x40021c00
 8003118:	2000d528 	.word	0x2000d528
 800311c:	2000d6c0 	.word	0x2000d6c0

08003120 <chasiss_task_init>:

/*
 * @brief     the initialization process of the chassis task,
 * @param[in] chassis: main chassis handler
 * */
void chasiss_task_init(Chassis_t* chassis_hdlr){
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	  /* set pid parameters for chassis motors */
	  for(int i=0;i<max_wheel_num;i++){
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e020      	b.n	8003170 <chasiss_task_init+0x50>
		  motor_init(i, max_out_wheel,  max_I_out_wheel, max_err_wheel, kp_wheel, ki_wheel, kd_wheel,
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	ed9f 5a23 	vldr	s10, [pc, #140]	; 80031c0 <chasiss_task_init+0xa0>
 8003136:	eddf 4a22 	vldr	s9, [pc, #136]	; 80031c0 <chasiss_task_init+0xa0>
 800313a:	ed9f 4a21 	vldr	s8, [pc, #132]	; 80031c0 <chasiss_task_init+0xa0>
 800313e:	eddf 3a20 	vldr	s7, [pc, #128]	; 80031c0 <chasiss_task_init+0xa0>
 8003142:	ed9f 3a1f 	vldr	s6, [pc, #124]	; 80031c0 <chasiss_task_init+0xa0>
 8003146:	eddf 2a1e 	vldr	s5, [pc, #120]	; 80031c0 <chasiss_task_init+0xa0>
 800314a:	2200      	movs	r2, #0
 800314c:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 80031c0 <chasiss_task_init+0xa0>
 8003150:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80031c0 <chasiss_task_init+0xa0>
 8003154:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8003158:	eddf 0a1a 	vldr	s1, [pc, #104]	; 80031c4 <chasiss_task_init+0xa4>
 800315c:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80031c0 <chasiss_task_init+0xa0>
 8003160:	f241 3188 	movw	r1, #5000	; 0x1388
 8003164:	4618      	mov	r0, r3
 8003166:	f003 ff9b 	bl	80070a0 <motor_init>
	  for(int i=0;i<max_wheel_num;i++){
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3301      	adds	r3, #1
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2b03      	cmp	r3, #3
 8003174:	dddb      	ble.n	800312e <chasiss_task_init+0xe>
		  							 0, 0, 0, 0, 0, 0,//no second loop
		  							 0);//spd ff gain
	  }
	  pid_param_init(&(chassis_hdlr->f_pid), 8000, 500, 5000, 550, 0.01, 10); // chassis twist pid init
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3324      	adds	r3, #36	; 0x24
 800317a:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 800317e:	eddf 1a12 	vldr	s3, [pc, #72]	; 80031c8 <chasiss_task_init+0xa8>
 8003182:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80031cc <chasiss_task_init+0xac>
 8003186:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80031c4 <chasiss_task_init+0xa4>
 800318a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 80031d0 <chasiss_task_init+0xb0>
 800318e:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff fccc 	bl	8002b30 <pid_param_init>
	  /* set initial chassis mode to idle mode or debug mode */
	  chassis_set_mode(chassis_hdlr, IDLE_MODE);
 8003198:	2104      	movs	r1, #4
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fce8 	bl	8003b70 <chassis_set_mode>
	  chassis_set_act_mode(chassis_hdlr, INDPET_MODE);// act mode only works when debuging with rc
 80031a0:	2103      	movs	r1, #3
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 fcf4 	bl	8003b90 <chassis_set_act_mode>
	  chassis_hdlr->chassis_gear_mode = AUTO_GEAR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	  /* reset data */
	  chassis_reset_data(chassis_hdlr);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f80f 	bl	80031d4 <chassis_reset_data>
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	00000000 	.word	0x00000000
 80031c4:	459c4000 	.word	0x459c4000
 80031c8:	3c23d70a 	.word	0x3c23d70a
 80031cc:	44098000 	.word	0x44098000
 80031d0:	43fa0000 	.word	0x43fa0000

080031d4 <chassis_reset_data>:
/*
 * @brief 	  reset all data in the chassis main struct
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_reset_data(Chassis_t *chassis_hdlr){
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
	/* init both coordinates */
	chassis_hdlr->vx = 0;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
	chassis_hdlr->vy = 0;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	605a      	str	r2, [r3, #4]
	chassis_hdlr->wz = 0;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	609a      	str	r2, [r3, #8]

	chassis_hdlr->gimbal_axis.vx = 0;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	669a      	str	r2, [r3, #104]	; 0x68
	chassis_hdlr->gimbal_axis.vy = 0;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	66da      	str	r2, [r3, #108]	; 0x6c
	chassis_hdlr->gimbal_axis.wz = 0;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	671a      	str	r2, [r3, #112]	; 0x70
	chassis_hdlr->gimbal_yaw_rel_angle = 0;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
	chassis_hdlr->gimbal_yaw_abs_angle = 0;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	61da      	str	r2, [r3, #28]

	memset(&(chassis_hdlr->gimbal_axis), 0, sizeof(Gimbal_Axis_t));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3368      	adds	r3, #104	; 0x68
 8003220:	220c      	movs	r2, #12
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f00e fe87 	bl	8011f38 <memset>
	memset(&(chassis_hdlr->ref_power_stat), 0, sizeof(ChassisPowerStat_t));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3378      	adds	r3, #120	; 0x78
 800322e:	220c      	movs	r2, #12
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f00e fe80 	bl	8011f38 <memset>

	chassis_hdlr->prev_robot_level = 1; // Initalized to level 1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	select_chassis_speed(chassis_hdlr, chassis_hdlr->prev_robot_level);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003246:	4619      	mov	r1, r3
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fdd1 	bl	8003df0 <select_chassis_speed>

	/* reset mecanum wheel speed */
	for(int i=0;i<4;i++)
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e008      	b.n	8003266 <chassis_reset_data+0x92>
		chassis_hdlr->mec_spd[i] = 0;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68fa      	ldr	r2, [r7, #12]
 8003258:	3230      	adds	r2, #48	; 0x30
 800325a:	2100      	movs	r1, #0
 800325c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i=0;i<4;i++)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b03      	cmp	r3, #3
 800326a:	ddf3      	ble.n	8003254 <chassis_reset_data+0x80>
}
 800326c:	bf00      	nop
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <mecanum_wheel_calc_speed>:
/*
 * @brief 	  Inversely calculate the mecanum wheel speed
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void mecanum_wheel_calc_speed(Chassis_t *chassis_hdlr){
 8003278:	b5b0      	push	{r4, r5, r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
	 *	v3  =  [-vx, -vy,  wz] * (rx + ry) * motor_gearbox_ratio
	 * 	v4  =  [ vx, -vy,  wz] * (rx + ry) * motor_gearbox_ratio
	 *
	 * */
	/* X type installation */
	chassis_hdlr->mec_spd[wheel_id1] = (int16_t)(  chassis_hdlr->vx + chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	ed93 7a00 	vldr	s14, [r3]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a01 	vldr	s15, [r3, #4]
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	ee17 0a90 	vmov	r0, s15
 8003294:	f7fd f958 	bl	8000548 <__aeabi_f2d>
 8003298:	4604      	mov	r4, r0
 800329a:	460d      	mov	r5, r1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	edd3 7a02 	vldr	s15, [r3, #8]
 80032a2:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800346c <mecanum_wheel_calc_speed+0x1f4>
 80032a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032aa:	ee17 0a90 	vmov	r0, s15
 80032ae:	f7fd f94b 	bl	8000548 <__aeabi_f2d>
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	4b6e      	ldr	r3, [pc, #440]	; (8003470 <mecanum_wheel_calc_speed+0x1f8>)
 80032b8:	f7fd f99e 	bl	80005f8 <__aeabi_dmul>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4620      	mov	r0, r4
 80032c2:	4629      	mov	r1, r5
 80032c4:	f7fc ffe2 	bl	800028c <__adddf3>
 80032c8:	4602      	mov	r2, r0
 80032ca:	460b      	mov	r3, r1
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	f7fd fc42 	bl	8000b58 <__aeabi_d2iz>
 80032d4:	4603      	mov	r3, r0
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	ee07 3a90 	vmov	s15, r3
 80032dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032e0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80032e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ec:	ee17 3a90 	vmov	r3, s15
 80032f0:	b21a      	sxth	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	chassis_hdlr->mec_spd[wheel_id2] = (int16_t)(- chassis_hdlr->vx + chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003308:	ee17 0a90 	vmov	r0, s15
 800330c:	f7fd f91c 	bl	8000548 <__aeabi_f2d>
 8003310:	4604      	mov	r4, r0
 8003312:	460d      	mov	r5, r1
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	edd3 7a02 	vldr	s15, [r3, #8]
 800331a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800346c <mecanum_wheel_calc_speed+0x1f4>
 800331e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003322:	ee17 0a90 	vmov	r0, s15
 8003326:	f7fd f90f 	bl	8000548 <__aeabi_f2d>
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	4b50      	ldr	r3, [pc, #320]	; (8003470 <mecanum_wheel_calc_speed+0x1f8>)
 8003330:	f7fd f962 	bl	80005f8 <__aeabi_dmul>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4620      	mov	r0, r4
 800333a:	4629      	mov	r1, r5
 800333c:	f7fc ffa6 	bl	800028c <__adddf3>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4610      	mov	r0, r2
 8003346:	4619      	mov	r1, r3
 8003348:	f7fd fc06 	bl	8000b58 <__aeabi_d2iz>
 800334c:	4603      	mov	r3, r0
 800334e:	b21b      	sxth	r3, r3
 8003350:	ee07 3a90 	vmov	s15, r3
 8003354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003358:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800335c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003364:	ee17 3a90 	vmov	r3, s15
 8003368:	b21a      	sxth	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	chassis_hdlr->mec_spd[wheel_id3] = (int16_t)(- chassis_hdlr->vx - chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eeb1 7a67 	vneg.f32	s14, s15
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003380:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003384:	ee17 0a90 	vmov	r0, s15
 8003388:	f7fd f8de 	bl	8000548 <__aeabi_f2d>
 800338c:	4604      	mov	r4, r0
 800338e:	460d      	mov	r5, r1
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	edd3 7a02 	vldr	s15, [r3, #8]
 8003396:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800346c <mecanum_wheel_calc_speed+0x1f4>
 800339a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800339e:	ee17 0a90 	vmov	r0, s15
 80033a2:	f7fd f8d1 	bl	8000548 <__aeabi_f2d>
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <mecanum_wheel_calc_speed+0x1f8>)
 80033ac:	f7fd f924 	bl	80005f8 <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fc ff68 	bl	800028c <__adddf3>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f7fd fbc8 	bl	8000b58 <__aeabi_d2iz>
 80033c8:	4603      	mov	r3, r0
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	ee07 3a90 	vmov	s15, r3
 80033d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033d4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80033d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033e0:	ee17 3a90 	vmov	r3, s15
 80033e4:	b21a      	sxth	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	chassis_hdlr->mec_spd[wheel_id4] = (int16_t)(  chassis_hdlr->vx - chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	ed93 7a00 	vldr	s14, [r3]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fc:	ee17 0a90 	vmov	r0, s15
 8003400:	f7fd f8a2 	bl	8000548 <__aeabi_f2d>
 8003404:	4604      	mov	r4, r0
 8003406:	460d      	mov	r5, r1
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	edd3 7a02 	vldr	s15, [r3, #8]
 800340e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800346c <mecanum_wheel_calc_speed+0x1f4>
 8003412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003416:	ee17 0a90 	vmov	r0, s15
 800341a:	f7fd f895 	bl	8000548 <__aeabi_f2d>
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	4b13      	ldr	r3, [pc, #76]	; (8003470 <mecanum_wheel_calc_speed+0x1f8>)
 8003424:	f7fd f8e8 	bl	80005f8 <__aeabi_dmul>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4620      	mov	r0, r4
 800342e:	4629      	mov	r1, r5
 8003430:	f7fc ff2c 	bl	800028c <__adddf3>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	f7fd fb8c 	bl	8000b58 <__aeabi_d2iz>
 8003440:	4603      	mov	r3, r0
 8003442:	b21b      	sxth	r3, r3
 8003444:	ee07 3a90 	vmov	s15, r3
 8003448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800344c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003458:	ee17 3a90 	vmov	r3, s15
 800345c:	b21a      	sxth	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	/* may apply super super capacity gain here */
	/* may apply level up gain and power limit here when we have referee system feedback */
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bdb0      	pop	{r4, r5, r7, pc}
 800346c:	3f4ccccd 	.word	0x3f4ccccd
 8003470:	3fe00000 	.word	0x3fe00000

08003474 <chassis_execute>:
/*
 * @brief 	  Inversely calculate the mecanum wheel speed
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_execute(Chassis_t *chassis_hdlr){
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	b087      	sub	sp, #28
 8003478:	af02      	add	r7, sp, #8
 800347a:	6078      	str	r0, [r7, #4]
	mecanum_wheel_calc_speed(chassis_hdlr);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff fefb 	bl	8003278 <mecanum_wheel_calc_speed>
	/* max +-16834 */
	for(int i=0;i<4;i++){
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e022      	b.n	80034ce <chassis_execute+0x5a>
		VAL_LIMIT(chassis_hdlr->mec_spd[i], -CHASSIS_MAX_SPEED, CHASSIS_MAX_SPEED);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	3230      	adds	r2, #48	; 0x30
 800348e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003492:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <chassis_execute+0x94>)
 8003494:	4293      	cmp	r3, r2
 8003496:	da07      	bge.n	80034a8 <chassis_execute+0x34>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	3230      	adds	r2, #48	; 0x30
 800349e:	f64b 613e 	movw	r1, #48702	; 0xbe3e
 80034a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80034a6:	e00f      	b.n	80034c8 <chassis_execute+0x54>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	3230      	adds	r2, #48	; 0x30
 80034ae:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80034b2:	f244 12c1 	movw	r2, #16833	; 0x41c1
 80034b6:	4293      	cmp	r3, r2
 80034b8:	dd06      	ble.n	80034c8 <chassis_execute+0x54>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	3230      	adds	r2, #48	; 0x30
 80034c0:	f244 11c2 	movw	r1, #16834	; 0x41c2
 80034c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i=0;i<4;i++){
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3301      	adds	r3, #1
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	ddd9      	ble.n	8003488 <chassis_execute+0x14>
	}
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 80034da:	4618      	mov	r0, r3
						  chassis_hdlr->mec_spd[wheel_id2],
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 80034e2:	4619      	mov	r1, r3
						  chassis_hdlr->mec_spd[wheel_id3],
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 80034ea:	461a      	mov	r2, r3
						  chassis_hdlr->mec_spd[wheel_id4],
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f9b3 3066 	ldrsh.w	r3, [r3, #102]	; 0x66
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 80034f2:	461c      	mov	r4, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	4623      	mov	r3, r4
 80034fa:	f003 ff63 	bl	80073c4 <set_motor_can_current>
						  SINGLE_LOOP_PID_CONTROL);
}
 80034fe:	bf00      	nop
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	bf00      	nop
 8003508:	ffffbe3f 	.word	0xffffbe3f

0800350c <chassis_update_gimbal_coord>:
/*
 * @brief 	  Update chassis gimbal axis data through rc
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_update_gimbal_coord(Chassis_t *chassis_hdlr, RemoteControl_t *rc_hdlr){
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800351c:	2b00      	cmp	r3, #0
 800351e:	d11e      	bne.n	800355e <chassis_update_gimbal_coord+0x52>
		/* controller data is not required to be filtered */
		chassis_hdlr->gimbal_axis.vx = rc_hdlr->ctrl.ch3; // apply vx data here
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		chassis_hdlr->gimbal_axis.vy = rc_hdlr->ctrl.ch2; // apply vy data here
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		chassis_hdlr->gimbal_axis.wz = rc_hdlr->ctrl.ch0; // apply wz data here
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
				if(chassis_hdlr->gimbal_axis.wz > chassis_hdlr->max_vy)
					chassis_hdlr->gimbal_axis.wz = chassis_hdlr->max_vy;
			}
		}
	}
}
 800355c:	e155      	b.n	800380a <chassis_update_gimbal_coord+0x2fe>
	else if(rc_hdlr->control_mode == PC_MODE){
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 8150 	bne.w	800380a <chassis_update_gimbal_coord+0x2fe>
		if(rc_hdlr->pc.key.W.status == PRESSED && rc_hdlr->pc.key.S.status == PRESSED)
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b03      	cmp	r3, #3
 8003572:	d109      	bne.n	8003588 <chassis_update_gimbal_coord+0x7c>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800357a:	2b03      	cmp	r3, #3
 800357c:	d104      	bne.n	8003588 <chassis_update_gimbal_coord+0x7c>
			chassis_hdlr->gimbal_axis.vx = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	669a      	str	r2, [r3, #104]	; 0x68
 8003586:	e012      	b.n	80035ae <chassis_update_gimbal_coord+0xa2>
		else if(rc_hdlr->pc.key.W.status != PRESSED && rc_hdlr->pc.key.S.status != PRESSED){
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358e:	2b03      	cmp	r3, #3
 8003590:	d00d      	beq.n	80035ae <chassis_update_gimbal_coord+0xa2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003598:	2b03      	cmp	r3, #3
 800359a:	d008      	beq.n	80035ae <chassis_update_gimbal_coord+0xa2>
			chassis_brake(&chassis_hdlr->gimbal_axis.vx, 1.0f, 2.0f);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3368      	adds	r3, #104	; 0x68
 80035a0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80035a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fb01 	bl	8003bb0 <chassis_brake>
		if(rc_hdlr->pc.key.W.status == PRESSED && rc_hdlr->pc.key.S.status != PRESSED){// check holding
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d11d      	bne.n	80035f4 <chassis_update_gimbal_coord+0xe8>
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035be:	2b03      	cmp	r3, #3
 80035c0:	d018      	beq.n	80035f4 <chassis_update_gimbal_coord+0xe8>
			chassis_hdlr->gimbal_axis.vx += 0.1f; // apply ramp-like mode to engage chassis
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80035c8:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8003814 <chassis_update_gimbal_coord+0x308>
 80035cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			if(chassis_hdlr->gimbal_axis.vx >= chassis_hdlr->max_vx)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	edd3 7a03 	vldr	s15, [r3, #12]
 80035e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ea:	db03      	blt.n	80035f4 <chassis_update_gimbal_coord+0xe8>
				chassis_hdlr->gimbal_axis.vx = chassis_hdlr->max_vx;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	669a      	str	r2, [r3, #104]	; 0x68
		if(rc_hdlr->pc.key.S.status == PRESSED && rc_hdlr->pc.key.W.status != PRESSED){// check holding
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d123      	bne.n	8003646 <chassis_update_gimbal_coord+0x13a>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003604:	2b03      	cmp	r3, #3
 8003606:	d01e      	beq.n	8003646 <chassis_update_gimbal_coord+0x13a>
			chassis_hdlr->gimbal_axis.vx -= 0.1f; // apply ramp-like mode to engage chassis
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800360e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8003814 <chassis_update_gimbal_coord+0x308>
 8003612:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			if(chassis_hdlr->gimbal_axis.vx < -chassis_hdlr->max_vx)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	edd3 7a03 	vldr	s15, [r3, #12]
 8003628:	eef1 7a67 	vneg.f32	s15, s15
 800362c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003634:	d507      	bpl.n	8003646 <chassis_update_gimbal_coord+0x13a>
				chassis_hdlr->gimbal_axis.vx = -chassis_hdlr->max_vx;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	edd3 7a03 	vldr	s15, [r3, #12]
 800363c:	eef1 7a67 	vneg.f32	s15, s15
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		if(rc_hdlr->pc.key.A.status == PRESSED && rc_hdlr->pc.key.D.status == PRESSED)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800364c:	2b03      	cmp	r3, #3
 800364e:	d109      	bne.n	8003664 <chassis_update_gimbal_coord+0x158>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003656:	2b03      	cmp	r3, #3
 8003658:	d104      	bne.n	8003664 <chassis_update_gimbal_coord+0x158>
			chassis_hdlr->gimbal_axis.vy = 0;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	66da      	str	r2, [r3, #108]	; 0x6c
 8003662:	e012      	b.n	800368a <chassis_update_gimbal_coord+0x17e>
		else if(rc_hdlr->pc.key.A.status != PRESSED && rc_hdlr->pc.key.D.status != PRESSED){
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800366a:	2b03      	cmp	r3, #3
 800366c:	d00d      	beq.n	800368a <chassis_update_gimbal_coord+0x17e>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003674:	2b03      	cmp	r3, #3
 8003676:	d008      	beq.n	800368a <chassis_update_gimbal_coord+0x17e>
			chassis_brake(&chassis_hdlr->gimbal_axis.vy, 1.0f, 2.0f);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	336c      	adds	r3, #108	; 0x6c
 800367c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003680:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fa93 	bl	8003bb0 <chassis_brake>
		if(rc_hdlr->pc.key.A.status == PRESSED && rc_hdlr->pc.key.D.status != PRESSED){// check holding
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003690:	2b03      	cmp	r3, #3
 8003692:	d123      	bne.n	80036dc <chassis_update_gimbal_coord+0x1d0>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800369a:	2b03      	cmp	r3, #3
 800369c:	d01e      	beq.n	80036dc <chassis_update_gimbal_coord+0x1d0>
			chassis_hdlr->gimbal_axis.vy -= 0.1f;// apply ramp-like mode to engage chassis
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80036a4:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8003814 <chassis_update_gimbal_coord+0x308>
 80036a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			if(chassis_hdlr->gimbal_axis.vy < -chassis_hdlr->max_vy)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80036be:	eef1 7a67 	vneg.f32	s15, s15
 80036c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ca:	d507      	bpl.n	80036dc <chassis_update_gimbal_coord+0x1d0>
				chassis_hdlr->gimbal_axis.vy = -chassis_hdlr->max_vy;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80036d2:	eef1 7a67 	vneg.f32	s15, s15
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
		if(rc_hdlr->pc.key.D.status == PRESSED && rc_hdlr->pc.key.A.status != PRESSED){// check holding
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d11d      	bne.n	8003722 <chassis_update_gimbal_coord+0x216>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d018      	beq.n	8003722 <chassis_update_gimbal_coord+0x216>
			chassis_hdlr->gimbal_axis.vy += 0.1f;// apply ramp-like mode to engage chassis
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 80036f6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8003814 <chassis_update_gimbal_coord+0x308>
 80036fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			if(chassis_hdlr->gimbal_axis.vy > chassis_hdlr->max_vy)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003710:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003718:	dd03      	ble.n	8003722 <chassis_update_gimbal_coord+0x216>
				chassis_hdlr->gimbal_axis.vy = chassis_hdlr->max_vy;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	66da      	str	r2, [r3, #108]	; 0x6c
		if(chassis_hdlr->chassis_act_mode == GIMBAL_FOLLOW){
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003728:	2b01      	cmp	r3, #1
 800372a:	d16e      	bne.n	800380a <chassis_update_gimbal_coord+0x2fe>
			if(rc_hdlr->pc.key.Q.status == PRESSED && rc_hdlr->pc.key.E.status == PRESSED)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003732:	2b03      	cmp	r3, #3
 8003734:	d109      	bne.n	800374a <chassis_update_gimbal_coord+0x23e>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800373c:	2b03      	cmp	r3, #3
 800373e:	d104      	bne.n	800374a <chassis_update_gimbal_coord+0x23e>
				chassis_hdlr->gimbal_axis.wz = 0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	671a      	str	r2, [r3, #112]	; 0x70
 8003748:	e012      	b.n	8003770 <chassis_update_gimbal_coord+0x264>
			else if(rc_hdlr->pc.key.Q.status != PRESSED && rc_hdlr->pc.key.E.status != PRESSED){
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003750:	2b03      	cmp	r3, #3
 8003752:	d00d      	beq.n	8003770 <chassis_update_gimbal_coord+0x264>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800375a:	2b03      	cmp	r3, #3
 800375c:	d008      	beq.n	8003770 <chassis_update_gimbal_coord+0x264>
				chassis_brake(&chassis_hdlr->gimbal_axis.wz, 1.0f, 2.0f);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3370      	adds	r3, #112	; 0x70
 8003762:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003766:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fa20 	bl	8003bb0 <chassis_brake>
			if(rc_hdlr->pc.key.Q.status == PRESSED && rc_hdlr->pc.key.E.status != PRESSED){// check holding
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003776:	2b03      	cmp	r3, #3
 8003778:	d123      	bne.n	80037c2 <chassis_update_gimbal_coord+0x2b6>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003780:	2b03      	cmp	r3, #3
 8003782:	d01e      	beq.n	80037c2 <chassis_update_gimbal_coord+0x2b6>
				chassis_hdlr->gimbal_axis.wz -= 0.1f;// apply ramp-like mode to engage chassis
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 800378a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003814 <chassis_update_gimbal_coord+0x308>
 800378e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
				if(chassis_hdlr->gimbal_axis.wz < -chassis_hdlr->max_wz)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80037a4:	eef1 7a67 	vneg.f32	s15, s15
 80037a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d507      	bpl.n	80037c2 <chassis_update_gimbal_coord+0x2b6>
					chassis_hdlr->gimbal_axis.wz = -chassis_hdlr->max_wz;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80037b8:	eef1 7a67 	vneg.f32	s15, s15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
			if(rc_hdlr->pc.key.E.status == PRESSED && rc_hdlr->pc.key.Q.status != PRESSED){// check holding
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d11e      	bne.n	800380a <chassis_update_gimbal_coord+0x2fe>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d019      	beq.n	800380a <chassis_update_gimbal_coord+0x2fe>
				chassis_hdlr->gimbal_axis.wz += 0.1f;// apply ramp-like mode to engage chassis
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80037dc:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003814 <chassis_update_gimbal_coord+0x308>
 80037e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
				if(chassis_hdlr->gimbal_axis.wz > chassis_hdlr->max_vy)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80037f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fe:	dc00      	bgt.n	8003802 <chassis_update_gimbal_coord+0x2f6>
}
 8003800:	e003      	b.n	800380a <chassis_update_gimbal_coord+0x2fe>
					chassis_hdlr->gimbal_axis.wz = chassis_hdlr->max_vy;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	671a      	str	r2, [r3, #112]	; 0x70
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	3dcccccd 	.word	0x3dcccccd

08003818 <chassis_update_chassis_coord>:
/*
 * @brief 	  Update chassis ground data through rc
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_update_chassis_coord(Chassis_t *chassis_hdlr, RemoteControl_t *rc_hdlr){
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
	/*chassis coordinates only for debugging purpose, thus no pc control processing*/
	chassis_hdlr->vx = rc.ctrl.ch3; // apply vx data here
 8003822:	4b12      	ldr	r3, [pc, #72]	; (800386c <chassis_update_chassis_coord+0x54>)
 8003824:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003828:	ee07 3a90 	vmov	s15, r3
 800382c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	edc3 7a00 	vstr	s15, [r3]
	chassis_hdlr->vy = rc.ctrl.ch2; // apply vy data here
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <chassis_update_chassis_coord+0x54>)
 8003838:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800383c:	ee07 3a90 	vmov	s15, r3
 8003840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	edc3 7a01 	vstr	s15, [r3, #4]
	chassis_hdlr->wz = rc.ctrl.ch0;
 800384a:	4b08      	ldr	r3, [pc, #32]	; (800386c <chassis_update_chassis_coord+0x54>)
 800384c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	2000d6c0 	.word	0x2000d6c0

08003870 <chassis_exec_act_mode>:
 *			follow gimbal center| move_along gimbal coordinate |
 *			self-spinning while follow the gimbal coordinate | independent(ground coordinate)
 */
//FIXME: Didn't consider the acceleration. Acceleration can help us better explicit the buffer energy.
//		 But with more critical strict on power management.
void chassis_exec_act_mode(Chassis_t *chassis_hdlr){
 8003870:	b580      	push	{r7, lr}
 8003872:	ed2d 8b02 	vpush	{d8}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	}
	else
		chassis_gyro_flag = 1;//start the timer counter interrupt
#endif

	if(chassis_hdlr->chassis_mode == IDLE_MODE){
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8003882:	2b04      	cmp	r3, #4
 8003884:	d10c      	bne.n	80038a0 <chassis_exec_act_mode+0x30>
		chassis_hdlr->vx = 0;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
		chassis_hdlr->vy = 0;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	605a      	str	r2, [r3, #4]
		chassis_hdlr->wz = 0;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	e0d8      	b.n	8003a52 <chassis_exec_act_mode+0x1e2>
		}
	else if(chassis_hdlr->chassis_act_mode == GIMBAL_CENTER){ // gyro mode
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11c      	bne.n	80038e4 <chassis_exec_act_mode+0x74>
		/* The front of chassis always chases gimbal yaw's ecd center (aka Twist mode) */
		chassis_hdlr->vx = chassis_hdlr->gimbal_axis.vx;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
		chassis_hdlr->vy = chassis_hdlr->gimbal_axis.vy;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	605a      	str	r2, [r3, #4]
		chassis_hdlr->wz = -pid_single_loop_control(0, &(chassis_hdlr->f_pid), chassis_hdlr->gimbal_yaw_rel_angle);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80038c6:	eef0 0a67 	vmov.f32	s1, s15
 80038ca:	4610      	mov	r0, r2
 80038cc:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8003b64 <chassis_exec_act_mode+0x2f4>
 80038d0:	f7ff fa02 	bl	8002cd8 <pid_single_loop_control>
 80038d4:	eef0 7a40 	vmov.f32	s15, s0
 80038d8:	eef1 7a67 	vneg.f32	s15, s15
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	edc3 7a02 	vstr	s15, [r3, #8]
 80038e2:	e0b6      	b.n	8003a52 <chassis_exec_act_mode+0x1e2>
	}
	else if(chassis_hdlr->chassis_act_mode == GIMBAL_FOLLOW){ // encoder mode
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d155      	bne.n	800399a <chassis_exec_act_mode+0x12a>
		/* The chassis always move along gimbal's coord/axis , but not chasing yaw's center */
		chassis_hdlr->vx = chassis_hdlr->gimbal_axis.vx * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle) - chassis_hdlr->gimbal_axis.vy * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	ed93 8a1a 	vldr	s16, [r3, #104]	; 0x68
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	edd3 7a06 	vldr	s15, [r3, #24]
 80038fa:	eeb0 0a67 	vmov.f32	s0, s15
 80038fe:	f00e fa73 	bl	8011de8 <arm_cos_f32>
 8003902:	eef0 7a40 	vmov.f32	s15, s0
 8003906:	ee28 8a27 	vmul.f32	s16, s16, s15
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	edd3 8a1b 	vldr	s17, [r3, #108]	; 0x6c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	edd3 7a06 	vldr	s15, [r3, #24]
 8003916:	eeb0 0a67 	vmov.f32	s0, s15
 800391a:	f00e fa17 	bl	8011d4c <arm_sin_f32>
 800391e:	eef0 7a40 	vmov.f32	s15, s0
 8003922:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003926:	ee78 7a67 	vsub.f32	s15, s16, s15
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	edc3 7a00 	vstr	s15, [r3]
		chassis_hdlr->vy = chassis_hdlr->gimbal_axis.vx * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle) + chassis_hdlr->gimbal_axis.vy * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	ed93 8a1a 	vldr	s16, [r3, #104]	; 0x68
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	edd3 7a06 	vldr	s15, [r3, #24]
 800393c:	eeb0 0a67 	vmov.f32	s0, s15
 8003940:	f00e fa04 	bl	8011d4c <arm_sin_f32>
 8003944:	eef0 7a40 	vmov.f32	s15, s0
 8003948:	ee28 8a27 	vmul.f32	s16, s16, s15
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	edd3 8a1b 	vldr	s17, [r3, #108]	; 0x6c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	edd3 7a06 	vldr	s15, [r3, #24]
 8003958:	eeb0 0a67 	vmov.f32	s0, s15
 800395c:	f00e fa44 	bl	8011de8 <arm_cos_f32>
 8003960:	eef0 7a40 	vmov.f32	s15, s0
 8003964:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003968:	ee78 7a27 	vadd.f32	s15, s16, s15
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	edc3 7a01 	vstr	s15, [r3, #4]
		if(rc.control_mode == CTRLER_MODE)
 8003972:	4b7d      	ldr	r3, [pc, #500]	; (8003b68 <chassis_exec_act_mode+0x2f8>)
 8003974:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <chassis_exec_act_mode+0x116>
			chassis_hdlr->wz = 0;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	e065      	b.n	8003a52 <chassis_exec_act_mode+0x1e2>
		else if(rc.control_mode == PC_MODE)
 8003986:	4b78      	ldr	r3, [pc, #480]	; (8003b68 <chassis_exec_act_mode+0x2f8>)
 8003988:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800398c:	2b01      	cmp	r3, #1
 800398e:	d160      	bne.n	8003a52 <chassis_exec_act_mode+0x1e2>
			chassis_hdlr->wz = chassis_hdlr->gimbal_axis.wz;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	609a      	str	r2, [r3, #8]
 8003998:	e05b      	b.n	8003a52 <chassis_exec_act_mode+0x1e2>
	}
	else if(chassis_hdlr->chassis_act_mode == SELF_GYRO){ // gyro or encoder mode
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d145      	bne.n	8003a30 <chassis_exec_act_mode+0x1c0>
		/* The chassis always move along gimbal's coord/axis , meanwhile spinning the chassis with a fixed speed */
		chassis_hdlr->vx = chassis_hdlr->gimbal_axis.vx * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle) - chassis_hdlr->gimbal_axis.vy * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	ed93 8a1a 	vldr	s16, [r3, #104]	; 0x68
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80039b0:	eeb0 0a67 	vmov.f32	s0, s15
 80039b4:	f00e fa18 	bl	8011de8 <arm_cos_f32>
 80039b8:	eef0 7a40 	vmov.f32	s15, s0
 80039bc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	edd3 8a1b 	vldr	s17, [r3, #108]	; 0x6c
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80039cc:	eeb0 0a67 	vmov.f32	s0, s15
 80039d0:	f00e f9bc 	bl	8011d4c <arm_sin_f32>
 80039d4:	eef0 7a40 	vmov.f32	s15, s0
 80039d8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80039dc:	ee78 7a67 	vsub.f32	s15, s16, s15
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	edc3 7a00 	vstr	s15, [r3]
		chassis_hdlr->vy = chassis_hdlr->gimbal_axis.vx * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle) + chassis_hdlr->gimbal_axis.vy * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	ed93 8a1a 	vldr	s16, [r3, #104]	; 0x68
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80039f2:	eeb0 0a67 	vmov.f32	s0, s15
 80039f6:	f00e f9a9 	bl	8011d4c <arm_sin_f32>
 80039fa:	eef0 7a40 	vmov.f32	s15, s0
 80039fe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	edd3 8a1b 	vldr	s17, [r3, #108]	; 0x6c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a12:	f00e f9e9 	bl	8011de8 <arm_cos_f32>
 8003a16:	eef0 7a40 	vmov.f32	s15, s0
 8003a1a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003a1e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	edc3 7a01 	vstr	s15, [r3, #4]
		/* for robots with slipring */
#ifdef WITH_SLIPRING
		//FIXME apply differential rotary control or use Q&E to change direction
		chassis_hdlr->wz =  CHASSIS_ECD_CONST_OMEGA * 3.5f;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a50      	ldr	r2, [pc, #320]	; (8003b6c <chassis_exec_act_mode+0x2fc>)
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	e010      	b.n	8003a52 <chassis_exec_act_mode+0x1e2>
			chassis_hdlr->wz =  -CHASSIS_ECD_CONST_OMEGA * 2.0f;
		else
			chassis_gyro_counter = 0;
#endif
	}
	else if(chassis_hdlr->chassis_act_mode == INDPET_MODE){ // encoder mode
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d10b      	bne.n	8003a52 <chassis_exec_act_mode+0x1e2>
		/* The chassis follow the ground axis
		 * Also can be used as sentry's chassis cmd
		 *  */
		chassis_hdlr->vx = chassis_hdlr->vx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	601a      	str	r2, [r3, #0]
		chassis_hdlr->vy = chassis_hdlr->vy;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	605a      	str	r2, [r3, #4]
		chassis_hdlr->wz = chassis_hdlr->wz;//CHASSIS_SLEF_GYRO_ANG_VEL * 1.0f;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	609a      	str	r2, [r3, #8]
	else if(cur_robot_level - cur_robot_level >= 3){ // This may indicate failure comm with ref
		cur_robot_level = chassis_hdlr->prev_robot_level;
	}
	select_chassis_speed(chassis_hdlr, cur_robot_level);
#endif
	VAL_LIMIT(chassis_hdlr->vx, -chassis_hdlr->max_vx, chassis_hdlr->max_vx);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	ed93 7a00 	vldr	s14, [r3]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a5e:	eef1 7a67 	vneg.f32	s15, s15
 8003a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	d808      	bhi.n	8003a7e <chassis_exec_act_mode+0x20e>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a72:	eef1 7a67 	vneg.f32	s15, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	edc3 7a00 	vstr	s15, [r3]
 8003a7c:	e00e      	b.n	8003a9c <chassis_exec_act_mode+0x22c>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	ed93 7a00 	vldr	s14, [r3]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a92:	db03      	blt.n	8003a9c <chassis_exec_act_mode+0x22c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]
	VAL_LIMIT(chassis_hdlr->vy, -chassis_hdlr->max_vy, chassis_hdlr->max_vy);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8003aa8:	eef1 7a67 	vneg.f32	s15, s15
 8003aac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab4:	d808      	bhi.n	8003ac8 <chassis_exec_act_mode+0x258>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003abc:	eef1 7a67 	vneg.f32	s15, s15
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	edc3 7a01 	vstr	s15, [r3, #4]
 8003ac6:	e00e      	b.n	8003ae6 <chassis_exec_act_mode+0x276>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	ed93 7a01 	vldr	s14, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	edd3 7a04 	vldr	s15, [r3, #16]
 8003ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003adc:	db03      	blt.n	8003ae6 <chassis_exec_act_mode+0x276>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	605a      	str	r2, [r3, #4]
	VAL_LIMIT(chassis_hdlr->wz, -chassis_hdlr->max_wz, chassis_hdlr->max_wz);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	ed93 7a02 	vldr	s14, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	edd3 7a05 	vldr	s15, [r3, #20]
 8003af2:	eef1 7a67 	vneg.f32	s15, s15
 8003af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afe:	d808      	bhi.n	8003b12 <chassis_exec_act_mode+0x2a2>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b06:	eef1 7a67 	vneg.f32	s15, s15
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	edc3 7a02 	vstr	s15, [r3, #8]
 8003b10:	e00e      	b.n	8003b30 <chassis_exec_act_mode+0x2c0>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003b1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b26:	db03      	blt.n	8003b30 <chassis_exec_act_mode+0x2c0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	609a      	str	r2, [r3, #8]

	if(fabs(chassis_hdlr->wz) < 30.0f)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b36:	eef0 7ae7 	vabs.f32	s15, s15
 8003b3a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	d503      	bpl.n	8003b50 <chassis_exec_act_mode+0x2e0>
		/* PID dead zone risk management */
		chassis_hdlr->wz = 0;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]

	/* execute the cmd */
	chassis_execute(chassis_hdlr);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fc8f 	bl	8003474 <chassis_execute>

}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	ecbd 8b02 	vpop	{d8}
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	00000000 	.word	0x00000000
 8003b68:	2000d6c0 	.word	0x2000d6c0
 8003b6c:	43d20000 	.word	0x43d20000

08003b70 <chassis_set_mode>:

/*
 * @brief set chassis mode
 *			patrol | detected armor | Auto_Poilt | IDLE(no action) | Debug(remote control)
 */
void chassis_set_mode(Chassis_t *chassis_hdlr, BoardMode_t mode){
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
	chassis_hdlr->chassis_mode = mode;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <chassis_set_act_mode>:
/*
 * @brief set chassis action mode
 *			follow gimbal center| move_along gimbal coordinate |
 *			self-spinning while follow the gimbal coordinate | independent(ground coordinate)
 */
void chassis_set_act_mode(Chassis_t *chassis_hdlr, BoardActMode_t mode){
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
	chassis_hdlr->chassis_act_mode = mode;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <chassis_brake>:
/*
 * @brief brake the chassis slowly to avoid instant power overlimt
 */
void chassis_brake(float *vel, float ramp_step, float stop_threshold){
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003bbc:	edc7 0a01 	vstr	s1, [r7, #4]
	if(*vel > 0)// both release -> brake
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bce:	dd0a      	ble.n	8003be6 <chassis_brake+0x36>
		*vel -= ramp_step;//brake need to be quicker
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	ed93 7a00 	vldr	s14, [r3]
 8003bd6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	edc3 7a00 	vstr	s15, [r3]
 8003be4:	e011      	b.n	8003c0a <chassis_brake+0x5a>
	else if(*vel < 0)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf4:	d509      	bpl.n	8003c0a <chassis_brake+0x5a>
		*vel += ramp_step;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	ed93 7a00 	vldr	s14, [r3]
 8003bfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	edc3 7a00 	vstr	s15, [r3]
	if(fabs(*vel) < stop_threshold)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	edd3 7a00 	vldr	s15, [r3]
 8003c10:	eef0 7ae7 	vabs.f32	s15, s15
 8003c14:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	dc00      	bgt.n	8003c24 <chassis_brake+0x74>
		*vel = 0;
}
 8003c22:	e003      	b.n	8003c2c <chassis_brake+0x7c>
		*vel = 0;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <chassis_rc_mode_selection>:
/*
 * @brief     mode selection based on remote controller
 * @param[in] chassis: main chassis handler
 * @param[in] rc: main remote controller handler
 * */
static void chassis_rc_mode_selection(Chassis_t* chassis_hdlr, RemoteControl_t *rc_hdlr){
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
	BoardMode_t    board_mode = IDLE_MODE;
 8003c42:	2304      	movs	r3, #4
 8003c44:	73fb      	strb	r3, [r7, #15]
	BoardActMode_t act_mode   = INDPET_MODE;
 8003c46:	2303      	movs	r3, #3
 8003c48:	73bb      	strb	r3, [r7, #14]

	/* controller end mode selection */
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d139      	bne.n	8003cc8 <chassis_rc_mode_selection+0x90>
		if(rc_hdlr->ctrl.s1 == SW_MID){
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	7a1b      	ldrb	r3, [r3, #8]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d102      	bne.n	8003c62 <chassis_rc_mode_selection+0x2a>
			/* if s1 down, then just shut down everything */
			board_mode = IDLE_MODE;
 8003c5c:	2304      	movs	r3, #4
 8003c5e:	73fb      	strb	r3, [r7, #15]
 8003c60:	e0b1      	b.n	8003dc6 <chassis_rc_mode_selection+0x18e>
		}
		else{
			/* else just set up to patrol mode */
			board_mode = PATROL_MODE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	73fb      	strb	r3, [r7, #15]
			if(rc_hdlr->ctrl.s1 == SW_UP){
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	7a1b      	ldrb	r3, [r3, #8]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d110      	bne.n	8003c90 <chassis_rc_mode_selection+0x58>
				/* chassis follow gimbal center while follow yaw axis */
				act_mode = GIMBAL_CENTER;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	73bb      	strb	r3, [r7, #14]
	#ifdef MODE_DEBUG
				/* LD indicator, For debug purposes only */
	#endif
				if(rc_hdlr->ctrl.s1 == SW_UP && rc_hdlr->ctrl.s2 == SW_DOWN){
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	7a1b      	ldrb	r3, [r3, #8]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <chassis_rc_mode_selection+0x4e>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	7a5b      	ldrb	r3, [r3, #9]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <chassis_rc_mode_selection+0x4e>
					/* spinning chassis while follow yaw axis */
					act_mode = SELF_GYRO;
 8003c82:	2302      	movs	r3, #2
 8003c84:	73bb      	strb	r3, [r7, #14]
	#ifdef MODE_DEBUG
					/* LD indicator, For debug purposes only */
	#endif
				}
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003c86:	6839      	ldr	r1, [r7, #0]
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fc3f 	bl	800350c <chassis_update_gimbal_coord>
 8003c8e:	e09a      	b.n	8003dc6 <chassis_rc_mode_selection+0x18e>
			}
			else if(rc_hdlr->ctrl.s1 == SW_DOWN){
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	7a1b      	ldrb	r3, [r3, #8]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f040 8096 	bne.w	8003dc6 <chassis_rc_mode_selection+0x18e>
				/* chassis only follow yaw axis */
				act_mode = GIMBAL_FOLLOW;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	73bb      	strb	r3, [r7, #14]
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003c9e:	6839      	ldr	r1, [r7, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f7ff fc33 	bl	800350c <chassis_update_gimbal_coord>
					if(rc_hdlr->ctrl.s1 == SW_DOWN && rc_hdlr->ctrl.s2 == SW_DOWN){
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	7a1b      	ldrb	r3, [r3, #8]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	f040 808b 	bne.w	8003dc6 <chassis_rc_mode_selection+0x18e>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	7a5b      	ldrb	r3, [r3, #9]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	f040 8086 	bne.w	8003dc6 <chassis_rc_mode_selection+0x18e>
						/* independent mode */
						act_mode = INDPET_MODE;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	73bb      	strb	r3, [r7, #14]
#ifdef MODE_DEBUG
					/* LD indicator, For debug purposes only */
#endif
						/* update ground axis */
						chassis_update_chassis_coord(chassis_hdlr, rc_hdlr);
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff fda9 	bl	8003818 <chassis_update_chassis_coord>
 8003cc6:	e07e      	b.n	8003dc6 <chassis_rc_mode_selection+0x18e>
	 * |			 |--------------------------------------------------------   | - Gyro mode
	 * |	         |  	-1        |  	    1         |	SELF_GYRO	     | __|
	 * -----------------------------------------------------------------------
	 * */
	/* pc end mode selection */
	else if(rc_hdlr->control_mode == PC_MODE){
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d179      	bne.n	8003dc6 <chassis_rc_mode_selection+0x18e>
		if(rc_hdlr->pc.key.key_buffer & KEY_BOARD_G){
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <chassis_rc_mode_selection+0xae>
				/* if s1 down, then just shut down everything */
				board_mode = IDLE_MODE;
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e06f      	b.n	8003dc6 <chassis_rc_mode_selection+0x18e>
			}
		else{
			/* else just set up to patrol mode */
			board_mode = PATROL_MODE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	73fb      	strb	r3, [r7, #15]
			/* update keys state */
//			if(rc_hdlr->pc.key.key_buffer & KEY_BOARD_CTRL)
			if(rc_get_key_status(&rc_hdlr->pc.key.Ctrl) == RELEASED_TO_PRESS){ // check rising edge
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	3354      	adds	r3, #84	; 0x54
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f002 fc88 	bl	8006604 <rc_get_key_status>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d10d      	bne.n	8003d16 <chassis_rc_mode_selection+0xde>
				chassis_pc_mode_toggle = -chassis_pc_mode_toggle;
 8003cfa:	4b3a      	ldr	r3, [pc, #232]	; (8003de4 <chassis_rc_mode_selection+0x1ac>)
 8003cfc:	f993 3000 	ldrsb.w	r3, [r3]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	425b      	negs	r3, r3
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	b25a      	sxtb	r2, r3
 8003d08:	4b36      	ldr	r3, [pc, #216]	; (8003de4 <chassis_rc_mode_selection+0x1ac>)
 8003d0a:	701a      	strb	r2, [r3, #0]
				temp_toggle_count++;
 8003d0c:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <chassis_rc_mode_selection+0x1b0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a35      	ldr	r2, [pc, #212]	; (8003de8 <chassis_rc_mode_selection+0x1b0>)
 8003d14:	6013      	str	r3, [r2, #0]
			}
			if(rc_get_key_status(&rc_hdlr->pc.key.F) == RELEASED_TO_PRESS) // check rising edge
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	3357      	adds	r3, #87	; 0x57
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 fc72 	bl	8006604 <rc_get_key_status>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d108      	bne.n	8003d38 <chassis_rc_mode_selection+0x100>
				chassis_pc_submode_toggle = -chassis_pc_submode_toggle;
 8003d26:	4b31      	ldr	r3, [pc, #196]	; (8003dec <chassis_rc_mode_selection+0x1b4>)
 8003d28:	f993 3000 	ldrsb.w	r3, [r3]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	425b      	negs	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	b25a      	sxtb	r2, r3
 8003d34:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <chassis_rc_mode_selection+0x1b4>)
 8003d36:	701a      	strb	r2, [r3, #0]

			/* mode decide */
			if(chassis_pc_mode_toggle == -1 && chassis_pc_submode_toggle == -1){
 8003d38:	4b2a      	ldr	r3, [pc, #168]	; (8003de4 <chassis_rc_mode_selection+0x1ac>)
 8003d3a:	f993 3000 	ldrsb.w	r3, [r3]
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	d10c      	bne.n	8003d5e <chassis_rc_mode_selection+0x126>
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <chassis_rc_mode_selection+0x1b4>)
 8003d46:	f993 3000 	ldrsb.w	r3, [r3]
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d106      	bne.n	8003d5e <chassis_rc_mode_selection+0x126>
				/* chassis follow gimbal center while follow yaw axis */
				act_mode = GIMBAL_CENTER;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73bb      	strb	r3, [r7, #14]
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003d54:	6839      	ldr	r1, [r7, #0]
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7ff fbd8 	bl	800350c <chassis_update_gimbal_coord>
 8003d5c:	e033      	b.n	8003dc6 <chassis_rc_mode_selection+0x18e>
#ifdef MODE_DEBUG
		/* LD indicator, For debug purposes only */
#endif
			}

			else if(chassis_pc_mode_toggle == -1 && chassis_pc_submode_toggle == 1){
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <chassis_rc_mode_selection+0x1ac>)
 8003d60:	f993 3000 	ldrsb.w	r3, [r3]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d10b      	bne.n	8003d82 <chassis_rc_mode_selection+0x14a>
 8003d6a:	4b20      	ldr	r3, [pc, #128]	; (8003dec <chassis_rc_mode_selection+0x1b4>)
 8003d6c:	f993 3000 	ldrsb.w	r3, [r3]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <chassis_rc_mode_selection+0x14a>
				/* spinning chassis while follow yaw axis */
				act_mode = SELF_GYRO;
 8003d74:	2302      	movs	r3, #2
 8003d76:	73bb      	strb	r3, [r7, #14]
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003d78:	6839      	ldr	r1, [r7, #0]
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fbc6 	bl	800350c <chassis_update_gimbal_coord>
 8003d80:	e021      	b.n	8003dc6 <chassis_rc_mode_selection+0x18e>
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
			}

			else if(chassis_pc_mode_toggle == 1 && chassis_pc_submode_toggle == -1){
 8003d82:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <chassis_rc_mode_selection+0x1ac>)
 8003d84:	f993 3000 	ldrsb.w	r3, [r3]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10c      	bne.n	8003da6 <chassis_rc_mode_selection+0x16e>
 8003d8c:	4b17      	ldr	r3, [pc, #92]	; (8003dec <chassis_rc_mode_selection+0x1b4>)
 8003d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	d106      	bne.n	8003da6 <chassis_rc_mode_selection+0x16e>
				/* chassis only follow yaw axis */
				act_mode = GIMBAL_FOLLOW;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73bb      	strb	r3, [r7, #14]
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fbb4 	bl	800350c <chassis_update_gimbal_coord>
 8003da4:	e00f      	b.n	8003dc6 <chassis_rc_mode_selection+0x18e>
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
			}
			else if(chassis_pc_mode_toggle == 1 && chassis_pc_submode_toggle == 1){
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <chassis_rc_mode_selection+0x1ac>)
 8003da8:	f993 3000 	ldrsb.w	r3, [r3]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d10a      	bne.n	8003dc6 <chassis_rc_mode_selection+0x18e>
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <chassis_rc_mode_selection+0x1b4>)
 8003db2:	f993 3000 	ldrsb.w	r3, [r3]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d105      	bne.n	8003dc6 <chassis_rc_mode_selection+0x18e>
				/* independent mode */
				act_mode = INDPET_MODE;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	73bb      	strb	r3, [r7, #14]
				/* update ground axis */
				chassis_update_chassis_coord(chassis_hdlr, rc_hdlr);
 8003dbe:	6839      	ldr	r1, [r7, #0]
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fd29 	bl	8003818 <chassis_update_chassis_coord>
			}
		}// else patrol mode
	}//pc mode

	/* set modes */
	chassis_set_mode(chassis_hdlr, board_mode);
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff fed0 	bl	8003b70 <chassis_set_mode>
	chassis_set_act_mode(chassis_hdlr, act_mode);// act mode only works when debuging with rc
 8003dd0:	7bbb      	ldrb	r3, [r7, #14]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff fedb 	bl	8003b90 <chassis_set_act_mode>
}
 8003dda:	bf00      	nop
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000008 	.word	0x20000008
 8003de8:	200004c4 	.word	0x200004c4
 8003dec:	20000009 	.word	0x20000009

08003df0 <select_chassis_speed>:

void select_chassis_speed(Chassis_t* chassis_hdlr, uint8_t level){
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
	chassis_hdlr->prev_robot_level =  level;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	switch(level){
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	2b09      	cmp	r3, #9
 8003e0a:	d87b      	bhi.n	8003f04 <select_chassis_speed+0x114>
 8003e0c:	a201      	add	r2, pc, #4	; (adr r2, 8003e14 <select_chassis_speed+0x24>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e51 	.word	0x08003e51
 8003e1c:	08003e65 	.word	0x08003e65
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e8d 	.word	0x08003e8d
 8003e28:	08003ea1 	.word	0x08003ea1
 8003e2c:	08003eb5 	.word	0x08003eb5
 8003e30:	08003ec9 	.word	0x08003ec9
 8003e34:	08003edd 	.word	0x08003edd
 8003e38:	08003ef1 	.word	0x08003ef1
		case 1: chassis_hdlr->max_vx = chassis_l1_pf_padding_speed;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <select_chassis_speed+0x120>)
 8003e40:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l1_pf_padding_speed;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a32      	ldr	r2, [pc, #200]	; (8003f10 <select_chassis_speed+0x120>)
 8003e46:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l1_pf_spin_speed;break;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a31      	ldr	r2, [pc, #196]	; (8003f10 <select_chassis_speed+0x120>)
 8003e4c:	615a      	str	r2, [r3, #20]
 8003e4e:	e059      	b.n	8003f04 <select_chassis_speed+0x114>
		case 2: chassis_hdlr->max_vx = chassis_l2_pf_padding_speed;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a30      	ldr	r2, [pc, #192]	; (8003f14 <select_chassis_speed+0x124>)
 8003e54:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l2_pf_padding_speed;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2e      	ldr	r2, [pc, #184]	; (8003f14 <select_chassis_speed+0x124>)
 8003e5a:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l2_pf_spin_speed;break;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a2e      	ldr	r2, [pc, #184]	; (8003f18 <select_chassis_speed+0x128>)
 8003e60:	615a      	str	r2, [r3, #20]
 8003e62:	e04f      	b.n	8003f04 <select_chassis_speed+0x114>
		case 3: chassis_hdlr->max_vx = chassis_l3_pf_padding_speed;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a2d      	ldr	r2, [pc, #180]	; (8003f1c <select_chassis_speed+0x12c>)
 8003e68:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l3_pf_padding_speed;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a2b      	ldr	r2, [pc, #172]	; (8003f1c <select_chassis_speed+0x12c>)
 8003e6e:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l3_pf_spin_speed;break;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a2b      	ldr	r2, [pc, #172]	; (8003f20 <select_chassis_speed+0x130>)
 8003e74:	615a      	str	r2, [r3, #20]
 8003e76:	e045      	b.n	8003f04 <select_chassis_speed+0x114>
		case 4: chassis_hdlr->max_vx = chassis_l4_pf_padding_speed;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <select_chassis_speed+0x134>)
 8003e7c:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l4_pf_padding_speed;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a28      	ldr	r2, [pc, #160]	; (8003f24 <select_chassis_speed+0x134>)
 8003e82:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l4_pf_spin_speed;break;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a22      	ldr	r2, [pc, #136]	; (8003f10 <select_chassis_speed+0x120>)
 8003e88:	615a      	str	r2, [r3, #20]
 8003e8a:	e03b      	b.n	8003f04 <select_chassis_speed+0x114>
		case 5: chassis_hdlr->max_vx = chassis_l5_pf_padding_speed;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a26      	ldr	r2, [pc, #152]	; (8003f28 <select_chassis_speed+0x138>)
 8003e90:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l5_pf_padding_speed;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <select_chassis_speed+0x138>)
 8003e96:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l5_pf_spin_speed;break;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a1f      	ldr	r2, [pc, #124]	; (8003f18 <select_chassis_speed+0x128>)
 8003e9c:	615a      	str	r2, [r3, #20]
 8003e9e:	e031      	b.n	8003f04 <select_chassis_speed+0x114>
		case 6: chassis_hdlr->max_vx = chassis_l6_pf_padding_speed;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a22      	ldr	r2, [pc, #136]	; (8003f2c <select_chassis_speed+0x13c>)
 8003ea4:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l6_pf_padding_speed;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a20      	ldr	r2, [pc, #128]	; (8003f2c <select_chassis_speed+0x13c>)
 8003eaa:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l6_pf_spin_speed;break;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	; (8003f20 <select_chassis_speed+0x130>)
 8003eb0:	615a      	str	r2, [r3, #20]
 8003eb2:	e027      	b.n	8003f04 <select_chassis_speed+0x114>
		case 7: chassis_hdlr->max_vx = chassis_l7_pf_padding_speed;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a18      	ldr	r2, [pc, #96]	; (8003f18 <select_chassis_speed+0x128>)
 8003eb8:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l7_pf_padding_speed;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a16      	ldr	r2, [pc, #88]	; (8003f18 <select_chassis_speed+0x128>)
 8003ebe:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l7_pf_spin_speed;break;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a13      	ldr	r2, [pc, #76]	; (8003f10 <select_chassis_speed+0x120>)
 8003ec4:	615a      	str	r2, [r3, #20]
 8003ec6:	e01d      	b.n	8003f04 <select_chassis_speed+0x114>
		case 8: chassis_hdlr->max_vx = chassis_l8_pf_padding_speed;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <select_chassis_speed+0x140>)
 8003ecc:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l8_pf_padding_speed;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	; (8003f30 <select_chassis_speed+0x140>)
 8003ed2:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l8_pf_spin_speed;break;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a10      	ldr	r2, [pc, #64]	; (8003f18 <select_chassis_speed+0x128>)
 8003ed8:	615a      	str	r2, [r3, #20]
 8003eda:	e013      	b.n	8003f04 <select_chassis_speed+0x114>
		case 9: chassis_hdlr->max_vx = chassis_l9_pf_padding_speed;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a10      	ldr	r2, [pc, #64]	; (8003f20 <select_chassis_speed+0x130>)
 8003ee0:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l9_pf_padding_speed;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a0e      	ldr	r2, [pc, #56]	; (8003f20 <select_chassis_speed+0x130>)
 8003ee6:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l9_pf_spin_speed;break;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <select_chassis_speed+0x130>)
 8003eec:	615a      	str	r2, [r3, #20]
 8003eee:	e009      	b.n	8003f04 <select_chassis_speed+0x114>
		case 10: chassis_hdlr->max_vx = chassis_l10_pf_padding_speed;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a0b      	ldr	r2, [pc, #44]	; (8003f20 <select_chassis_speed+0x130>)
 8003ef4:	60da      	str	r2, [r3, #12]
				chassis_hdlr->max_vy = chassis_l10_pf_padding_speed;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a09      	ldr	r2, [pc, #36]	; (8003f20 <select_chassis_speed+0x130>)
 8003efa:	611a      	str	r2, [r3, #16]
				chassis_hdlr->max_wz = chassis_l10_pf_spin_speed;break;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <select_chassis_speed+0x130>)
 8003f00:	615a      	str	r2, [r3, #20]
 8003f02:	bf00      	nop
	}
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	43960000 	.word	0x43960000
 8003f14:	43af0000 	.word	0x43af0000
 8003f18:	44160000 	.word	0x44160000
 8003f1c:	43c80000 	.word	0x43c80000
 8003f20:	44250000 	.word	0x44250000
 8003f24:	43e10000 	.word	0x43e10000
 8003f28:	43fa0000 	.word	0x43fa0000
 8003f2c:	44098000 	.word	0x44098000
 8003f30:	44228000 	.word	0x44228000

08003f34 <Gimbal_Task_Function>:
	static uint8_t dynamic_offset_center_flag = 0;
#endif

/* With encoder mode, task execution time (per loop): 1ms */
void Gimbal_Task_Function(void const * argument)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	ed2d 8b02 	vpush	{d8}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]

    /* USER CODE BEGIN Gimbal_Task_Function */
	/* gimbal task LD indicator */
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8003f40:	2201      	movs	r2, #1
 8003f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f46:	4886      	ldr	r0, [pc, #536]	; (8004160 <Gimbal_Task_Function+0x22c>)
 8003f48:	f008 fb6c 	bl	800c624 <HAL_GPIO_WritePin>

	/* init gimbal task */
	gimbal_task_init(&gimbal);
 8003f4c:	4885      	ldr	r0, [pc, #532]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f4e:	f000 f955 	bl	80041fc <gimbal_task_init>

	/* reset calibration using ramp function */
	gimbal_calibration_reset(&gimbal);
 8003f52:	4884      	ldr	r0, [pc, #528]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f54:	f000 f9d4 	bl	8004300 <gimbal_calibration_reset>
	/* define after-detection delay var here */
//	int16_t gimbal_control_counter=0;

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 1ms
 8003f58:	2301      	movs	r3, #1
 8003f5a:	61bb      	str	r3, [r7, #24]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8003f5c:	f00d f816 	bl	8010f8c <xTaskGetTickCount>
 8003f60:	4603      	mov	r3, r0
 8003f62:	60fb      	str	r3, [r7, #12]

#ifndef GIMBAL_MOTOR_DEBUG //for only test temp closed loop control
	for(;;){

	  /* mode selection */
	  gimbal_rc_mode_selection(&gimbal, &rc);
 8003f64:	4980      	ldr	r1, [pc, #512]	; (8004168 <Gimbal_Task_Function+0x234>)
 8003f66:	487f      	ldr	r0, [pc, #508]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f68:	f000 feb4 	bl	8004cd4 <gimbal_rc_mode_selection>

	  /* make sure offset already be set to the gyro */
	  if(imu_init_flag == 1)
 8003f6c:	4b7f      	ldr	r3, [pc, #508]	; (800416c <Gimbal_Task_Function+0x238>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d103      	bne.n	8003f7c <Gimbal_Task_Function+0x48>
		 /* update gyroscope angle */
		 gimbal_gyro_update_abs_angle(&gimbal);
 8003f74:	487b      	ldr	r0, [pc, #492]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f76:	f000 fba3 	bl	80046c0 <gimbal_gyro_update_abs_angle>
 8003f7a:	e008      	b.n	8003f8e <Gimbal_Task_Function+0x5a>
	  else if(gimbal.gimbal_motor_mode == GYRO_MODE)
 8003f7c:	4b79      	ldr	r3, [pc, #484]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f7e:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <Gimbal_Task_Function+0x5a>
		  /* imu not ready -> deactivate gyro mode*/
		  gimbal.gimbal_act_mode = IDLE_MODE;
 8003f86:	4b77      	ldr	r3, [pc, #476]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f88:	2204      	movs	r2, #4
 8003f8a:	f883 2ad1 	strb.w	r2, [r3, #2769]	; 0xad1

	  /************************************* MODE SELECTION START *************************************/
	  if(gimbal.gimbal_mode == IDLE_MODE){
 8003f8e:	4b75      	ldr	r3, [pc, #468]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f90:	f893 3ad3 	ldrb.w	r3, [r3, #2771]	; 0xad3
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d139      	bne.n	800400c <Gimbal_Task_Function+0xd8>
		  /* use ramp function to approximate zeros */
		  gimbal_get_ecd_fb_data(&gimbal,
 8003f98:	4a75      	ldr	r2, [pc, #468]	; (8004170 <Gimbal_Task_Function+0x23c>)
 8003f9a:	4976      	ldr	r1, [pc, #472]	; (8004174 <Gimbal_Task_Function+0x240>)
 8003f9c:	4871      	ldr	r0, [pc, #452]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003f9e:	f000 fc63 	bl	8004868 <gimbal_get_ecd_fb_data>
		  						   &(motor_data[yaw_id].motor_feedback),
		  						   &(motor_data[pitch_id].motor_feedback));
		  float temp_idle_yaw = gimbal.yaw_cur_rel_angle + (0-gimbal.yaw_cur_rel_angle)*ramp_calculate(&gimbal.yaw_ramp);
 8003fa2:	4b70      	ldr	r3, [pc, #448]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003fa4:	ed93 8a06 	vldr	s16, [r3, #24]
 8003fa8:	4b6e      	ldr	r3, [pc, #440]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003faa:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fae:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8004178 <Gimbal_Task_Function+0x244>
 8003fb2:	ee77 8a67 	vsub.f32	s17, s14, s15
 8003fb6:	4871      	ldr	r0, [pc, #452]	; (800417c <Gimbal_Task_Function+0x248>)
 8003fb8:	f7fe feda 	bl	8002d70 <ramp_calculate>
 8003fbc:	eef0 7a40 	vmov.f32	s15, s0
 8003fc0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003fc4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003fc8:	edc7 7a05 	vstr	s15, [r7, #20]
		  float temp_idle_pitch = gimbal.pitch_cur_rel_angle + (0-gimbal.pitch_cur_rel_angle)*ramp_calculate(&gimbal.pitch_ramp);
 8003fcc:	4b65      	ldr	r3, [pc, #404]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003fce:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8003fd2:	4b64      	ldr	r3, [pc, #400]	; (8004164 <Gimbal_Task_Function+0x230>)
 8003fd4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003fd8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004178 <Gimbal_Task_Function+0x244>
 8003fdc:	ee77 8a67 	vsub.f32	s17, s14, s15
 8003fe0:	4867      	ldr	r0, [pc, #412]	; (8004180 <Gimbal_Task_Function+0x24c>)
 8003fe2:	f7fe fec5 	bl	8002d70 <ramp_calculate>
 8003fe6:	eef0 7a40 	vmov.f32	s15, s0
 8003fea:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003fee:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003ff2:	edc7 7a04 	vstr	s15, [r7, #16]
		  /* reset everything */
		  gimbal_set_limited_angle(&gimbal, temp_idle_yaw, temp_idle_pitch);
 8003ff6:	edd7 0a04 	vldr	s1, [r7, #16]
 8003ffa:	ed97 0a05 	vldr	s0, [r7, #20]
 8003ffe:	4859      	ldr	r0, [pc, #356]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004000:	f000 fcf0 	bl	80049e4 <gimbal_set_limited_angle>
		  /* turn off dynamic center offset */
		  dynamic_offset_center_flag = 0;
 8004004:	4b5f      	ldr	r3, [pc, #380]	; (8004184 <Gimbal_Task_Function+0x250>)
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
 800400a:	e099      	b.n	8004140 <Gimbal_Task_Function+0x20c>
	  }
	  else{
		  /* reset ramp counter for next use */
		  gimbal.pitch_ramp.count = 0;
 800400c:	4b55      	ldr	r3, [pc, #340]	; (8004164 <Gimbal_Task_Function+0x230>)
 800400e:	2200      	movs	r2, #0
 8004010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		  gimbal.yaw_ramp.count = 0;
 8004014:	4b53      	ldr	r3, [pc, #332]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004016:	2200      	movs	r2, #0
 8004018:	675a      	str	r2, [r3, #116]	; 0x74

		 if(dynamic_offset_center_flag == 0){
 800401a:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <Gimbal_Task_Function+0x250>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d123      	bne.n	800406a <Gimbal_Task_Function+0x136>
			for(int j=0;j<2;j++){
 8004022:	2300      	movs	r3, #0
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	e01a      	b.n	800405e <Gimbal_Task_Function+0x12a>
				* 			  the original center error;
				* Second loop: continues the same operation, while the original
				* 			   center error introduced last time can be corrected.
				* */
				//FIXME: This can be removed by precisely adjusting PID parameters of motor
				gimbal_update_rc_rel_angle(&gimbal, &rc);//update current center value
 8004028:	494f      	ldr	r1, [pc, #316]	; (8004168 <Gimbal_Task_Function+0x234>)
 800402a:	484e      	ldr	r0, [pc, #312]	; (8004164 <Gimbal_Task_Function+0x230>)
 800402c:	f000 fd36 	bl	8004a9c <gimbal_update_rc_rel_angle>
				gimbal.yaw_ecd_center = gimbal.yaw_ecd_fb.rx_angle;//reset center value
 8004030:	4b4c      	ldr	r3, [pc, #304]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004032:	f9b3 2062 	ldrsh.w	r2, [r3, #98]	; 0x62
 8004036:	4b4b      	ldr	r3, [pc, #300]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004038:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				gimbal.yaw_cur_rel_angle = 0;//reset current rel angle to 0
 800403c:	4b49      	ldr	r3, [pc, #292]	; (8004164 <Gimbal_Task_Function+0x230>)
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
				gimbal.pitch_ecd_center = gimbal.pitch_ecd_fb.rx_angle;//reset center value
 8004044:	4b47      	ldr	r3, [pc, #284]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004046:	f9b3 206a 	ldrsh.w	r2, [r3, #106]	; 0x6a
 800404a:	4b46      	ldr	r3, [pc, #280]	; (8004164 <Gimbal_Task_Function+0x230>)
 800404c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				gimbal.pitch_cur_rel_angle = 0;//reset current rel angle to 0
 8004050:	4b44      	ldr	r3, [pc, #272]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	629a      	str	r2, [r3, #40]	; 0x28
			for(int j=0;j<2;j++){
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3301      	adds	r3, #1
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b01      	cmp	r3, #1
 8004062:	dde1      	ble.n	8004028 <Gimbal_Task_Function+0xf4>
			}
			dynamic_offset_center_flag = 1;
 8004064:	4b47      	ldr	r3, [pc, #284]	; (8004184 <Gimbal_Task_Function+0x250>)
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
//		 else{
////			 memcpy(&temp_pack, 0, sizeof(UC_Auto_Aim_Pack_t));
//			 temp_pack.delta_pitch = 0;
//			 temp_pack.delta_yaw = 0;
//		 }
		 memcpy(&temp_pack, &uc_auto_aim_pack, sizeof(UC_Auto_Aim_Pack_t));
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <Gimbal_Task_Function+0x254>)
 800406c:	4a47      	ldr	r2, [pc, #284]	; (800418c <Gimbal_Task_Function+0x258>)
 800406e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004070:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		 /* if operator wants to activate auto-aim AND the camera has detected the object */
		 if(gimbal.gimbal_mode == AUTO_AIM_MODE && temp_pack.target_num > -1){
 8004074:	4b3b      	ldr	r3, [pc, #236]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004076:	f893 3ad3 	ldrb.w	r3, [r3, #2771]	; 0xad3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d112      	bne.n	80040a4 <Gimbal_Task_Function+0x170>
//			 if( gimbal.prev_gimbal_act_mode != gimbal.gimbal_act_mode){
//					 gimbal.yaw_tar_angle = gimbal.yaw_cur_abs_angle;
//					 gimbal.pitch_tar_angle = gimbal.pitch_cur_rel_angle;
//			 }
			 /* activate auto aiming */
			 gimbal_update_autoaim_rel_angle(&gimbal, &rc, &temp_pack);
 800407e:	4a42      	ldr	r2, [pc, #264]	; (8004188 <Gimbal_Task_Function+0x254>)
 8004080:	4939      	ldr	r1, [pc, #228]	; (8004168 <Gimbal_Task_Function+0x234>)
 8004082:	4838      	ldr	r0, [pc, #224]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004084:	f000 feac 	bl	8004de0 <gimbal_update_autoaim_rel_angle>
			 /* set limited target angle */
			 gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 8004088:	4b36      	ldr	r3, [pc, #216]	; (8004164 <Gimbal_Task_Function+0x230>)
 800408a:	edd3 7a04 	vldr	s15, [r3, #16]
 800408e:	4b35      	ldr	r3, [pc, #212]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004090:	ed93 7a08 	vldr	s14, [r3, #32]
 8004094:	eef0 0a47 	vmov.f32	s1, s14
 8004098:	eeb0 0a67 	vmov.f32	s0, s15
 800409c:	4831      	ldr	r0, [pc, #196]	; (8004164 <Gimbal_Task_Function+0x230>)
 800409e:	f000 fca1 	bl	80049e4 <gimbal_set_limited_angle>
 80040a2:	e04d      	b.n	8004140 <Gimbal_Task_Function+0x20c>

		 }

		 /* artificial targeting */
		 else if(gimbal.gimbal_act_mode == GIMBAL_FOLLOW || gimbal.gimbal_act_mode == INDPET_MODE){
 80040a4:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040a6:	f893 3ad1 	ldrb.w	r3, [r3, #2769]	; 0xad1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d004      	beq.n	80040b8 <Gimbal_Task_Function+0x184>
 80040ae:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040b0:	f893 3ad1 	ldrb.w	r3, [r3, #2769]	; 0xad1
 80040b4:	2b03      	cmp	r3, #3
 80040b6:	d111      	bne.n	80040dc <Gimbal_Task_Function+0x1a8>
//			 if( gimbal.prev_gimbal_act_mode != gimbal.gimbal_act_mode){
//					 gimbal.yaw_tar_angle = gimbal.yaw_cur_rel_angle;
//					 gimbal.pitch_tar_angle = gimbal.pitch_cur_rel_angle;
//			 }
			 /* update gimbal rel angle */
			gimbal_update_rc_rel_angle(&gimbal, &rc);
 80040b8:	492b      	ldr	r1, [pc, #172]	; (8004168 <Gimbal_Task_Function+0x234>)
 80040ba:	482a      	ldr	r0, [pc, #168]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040bc:	f000 fcee 	bl	8004a9c <gimbal_update_rc_rel_angle>
			/* set limited target angle */
			gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 80040c0:	4b28      	ldr	r3, [pc, #160]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040c2:	edd3 7a04 	vldr	s15, [r3, #16]
 80040c6:	4b27      	ldr	r3, [pc, #156]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80040cc:	eef0 0a47 	vmov.f32	s1, s14
 80040d0:	eeb0 0a67 	vmov.f32	s0, s15
 80040d4:	4823      	ldr	r0, [pc, #140]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040d6:	f000 fc85 	bl	80049e4 <gimbal_set_limited_angle>
 80040da:	e031      	b.n	8004140 <Gimbal_Task_Function+0x20c>
//			printf("%f,%f\r\n", gimbal.pitch_tar_angle, gimbal.pitch_cur_rel_angle);
//			gimbal.prev_gimbal_act_mode = gimbal.gimbal_act_mode;

		 }

		 else if(gimbal.gimbal_act_mode == GIMBAL_CENTER){
 80040dc:	4b21      	ldr	r3, [pc, #132]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040de:	f893 3ad1 	ldrb.w	r3, [r3, #2769]	; 0xad1
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d111      	bne.n	800410a <Gimbal_Task_Function+0x1d6>
//			 if( gimbal.prev_gimbal_act_mode != SELF_GYRO || gimbal.prev_gimbal_act_mode != GIMBAL_CENTER){
//				 gimbal.yaw_tar_angle = gimbal.yaw_cur_abs_angle;
//				 gimbal.pitch_tar_angle = gimbal.pitch_cur_rel_angle;
//			 }
			/* update gimbal rel angle */
			gimbal_update_rc_rel_angle(&gimbal, &rc);
 80040e6:	4920      	ldr	r1, [pc, #128]	; (8004168 <Gimbal_Task_Function+0x234>)
 80040e8:	481e      	ldr	r0, [pc, #120]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040ea:	f000 fcd7 	bl	8004a9c <gimbal_update_rc_rel_angle>
			/* set limited target angle */
			gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 80040ee:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80040f4:	4b1b      	ldr	r3, [pc, #108]	; (8004164 <Gimbal_Task_Function+0x230>)
 80040f6:	ed93 7a08 	vldr	s14, [r3, #32]
 80040fa:	eef0 0a47 	vmov.f32	s1, s14
 80040fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004102:	4818      	ldr	r0, [pc, #96]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004104:	f000 fc6e 	bl	80049e4 <gimbal_set_limited_angle>
 8004108:	e01a      	b.n	8004140 <Gimbal_Task_Function+0x20c>

//			gimbal.prev_gimbal_act_mode = GIMBAL_CENTER;
		 }

		 else if(gimbal.gimbal_act_mode == SELF_GYRO){
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <Gimbal_Task_Function+0x230>)
 800410c:	f893 3ad1 	ldrb.w	r3, [r3, #2769]	; 0xad1
 8004110:	2b02      	cmp	r3, #2
 8004112:	d115      	bne.n	8004140 <Gimbal_Task_Function+0x20c>
//			 if( gimbal.prev_gimbal_act_mode != SELF_GYRO || gimbal.prev_gimbal_act_mode != GIMBAL_CENTER){
//				 gimbal.yaw_tar_angle = gimbal.yaw_cur_abs_angle;
//				 gimbal.pitch_tar_angle = gimbal.pitch_cur_rel_angle;
//			 }
			 if(gimbal.gimbal_motor_mode == GYRO_MODE){
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004116:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d110      	bne.n	8004140 <Gimbal_Task_Function+0x20c>
				/* update gimbal rel ecd angle for pitch */
				gimbal_update_rc_rel_angle(&gimbal, &rc);
 800411e:	4912      	ldr	r1, [pc, #72]	; (8004168 <Gimbal_Task_Function+0x234>)
 8004120:	4810      	ldr	r0, [pc, #64]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004122:	f000 fcbb 	bl	8004a9c <gimbal_update_rc_rel_angle>
				/* set limited target angle */
				gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004128:	edd3 7a04 	vldr	s15, [r3, #16]
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <Gimbal_Task_Function+0x230>)
 800412e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004132:	eef0 0a47 	vmov.f32	s1, s14
 8004136:	eeb0 0a67 	vmov.f32	s0, s15
 800413a:	480a      	ldr	r0, [pc, #40]	; (8004164 <Gimbal_Task_Function+0x230>)
 800413c:	f000 fc52 	bl	80049e4 <gimbal_set_limited_angle>
//			 gimbal.prev_gimbal_act_mode = SELF_GYRO;
		}
	}//None IDLE MODE else

	 /* set motor voltage through cascade pid controller */
	 gimbal_cmd_exec(&gimbal, DUAL_LOOP_PID_CONTROL);
 8004140:	2101      	movs	r1, #1
 8004142:	4808      	ldr	r0, [pc, #32]	; (8004164 <Gimbal_Task_Function+0x230>)
 8004144:	f000 ff02 	bl	8004f4c <gimbal_cmd_exec>

	 /* update rel angle and send to chassis */
	 gimbal_update_comm_info(&gimbal, &gimbal_angle_message.message);
 8004148:	4911      	ldr	r1, [pc, #68]	; (8004190 <Gimbal_Task_Function+0x25c>)
 800414a:	4806      	ldr	r0, [pc, #24]	; (8004164 <Gimbal_Task_Function+0x230>)
 800414c:	f000 fc82 	bl	8004a54 <gimbal_update_comm_info>

	 /* delay until wake time */
	 vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004150:	f107 030c 	add.w	r3, r7, #12
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	4618      	mov	r0, r3
 8004158:	f00c fd5c 	bl	8010c14 <vTaskDelayUntil>
	  gimbal_rc_mode_selection(&gimbal, &rc);
 800415c:	e702      	b.n	8003f64 <Gimbal_Task_Function+0x30>
 800415e:	bf00      	nop
 8004160:	40021c00 	.word	0x40021c00
 8004164:	20004740 	.word	0x20004740
 8004168:	2000d6c0 	.word	0x2000d6c0
 800416c:	200004ca 	.word	0x200004ca
 8004170:	20005584 	.word	0x20005584
 8004174:	200054f0 	.word	0x200054f0
 8004178:	00000000 	.word	0x00000000
 800417c:	200047b4 	.word	0x200047b4
 8004180:	200047c8 	.word	0x200047c8
 8004184:	200004c8 	.word	0x200004c8
 8004188:	2000d5c0 	.word	0x2000d5c0
 800418c:	2000d63c 	.word	0x2000d63c
 8004190:	20000088 	.word	0x20000088

08004194 <gimbal_set_mode>:
 * @brief     set the gimbal board work mode:
 * 				patrol | detected armor | Auto_Poilt | IDLE(no action) | Debug(remote control)
 * @param[in] gimbal: main gimbal handler
 * @param[in] mode: Board work mode
 * */
void gimbal_set_mode(Gimbal_t *gbal, BoardMode_t mode){
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	460b      	mov	r3, r1
 800419e:	70fb      	strb	r3, [r7, #3]
	gbal->gimbal_mode = mode;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	78fa      	ldrb	r2, [r7, #3]
 80041a4:	f883 2ad3 	strb.w	r2, [r3, #2771]	; 0xad3
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <gimbal_set_act_mode>:
 * @brief     determime the mode for gimbal actions:
 * 				follow gimbal (master) | follow chassis (slave) or independent
 * @param[in] gimbal: main gimbal handler
 * @param[in] mode: act mode
 * */
void gimbal_set_act_mode(Gimbal_t *gbal, BoardActMode_t mode){
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
	gbal->gimbal_act_mode = mode;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	f883 2ad1 	strb.w	r2, [r3, #2769]	; 0xad1
	gbal->prev_gimbal_act_mode = mode;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	f883 2ad2 	strb.w	r2, [r3, #2770]	; 0xad2
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <gimbal_set_motor_mode>:
/*
 * @brief 	  set motor mode: gyro | encoder
 * @param[in] gimbal: main gimbal handler
 * @param[in] mode: motor mode
 * */
void gimbal_set_motor_mode(Gimbal_t *gbal, GimbalMotorMode_t mode){
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	460b      	mov	r3, r1
 80041e6:	70fb      	strb	r3, [r7, #3]
	gbal->gimbal_motor_mode = mode;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	78fa      	ldrb	r2, [r7, #3]
 80041ec:	f883 2ad0 	strb.w	r2, [r3, #2768]	; 0xad0
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <gimbal_task_init>:

/*
 * @brief     the initialization process of the gimbal task,
 * @param[in] gimbal: main gimbal handler
 * */
void gimbal_task_init(Gimbal_t *gbal){
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
	/* reset rc data */
	rc.ctrl.ch0 = 0;
 8004204:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <gimbal_task_init+0xd4>)
 8004206:	2200      	movs	r2, #0
 8004208:	801a      	strh	r2, [r3, #0]
	rc.ctrl.ch1 = 0;
 800420a:	4b31      	ldr	r3, [pc, #196]	; (80042d0 <gimbal_task_init+0xd4>)
 800420c:	2200      	movs	r2, #0
 800420e:	805a      	strh	r2, [r3, #2]
	rc.ctrl.ch2 = 0;
 8004210:	4b2f      	ldr	r3, [pc, #188]	; (80042d0 <gimbal_task_init+0xd4>)
 8004212:	2200      	movs	r2, #0
 8004214:	809a      	strh	r2, [r3, #4]
	rc.ctrl.ch3 = 0;
 8004216:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <gimbal_task_init+0xd4>)
 8004218:	2200      	movs	r2, #0
 800421a:	80da      	strh	r2, [r3, #6]
	rc.ctrl.s1 = SW_MID;
 800421c:	4b2c      	ldr	r3, [pc, #176]	; (80042d0 <gimbal_task_init+0xd4>)
 800421e:	2203      	movs	r2, #3
 8004220:	721a      	strb	r2, [r3, #8]
	rc.ctrl.s2 = SW_MID;
 8004222:	4b2b      	ldr	r3, [pc, #172]	; (80042d0 <gimbal_task_init+0xd4>)
 8004224:	2203      	movs	r2, #3
 8004226:	725a      	strb	r2, [r3, #9]

	/* Waiting for imu to be set normal temp */
	osDelay(GIMBAL_INIT_TIME_MS);
 8004228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800422c:	f00c f9c9 	bl	80105c2 <osDelay>

	/* init motor pid */
	// angular pid based on radian(-pi, pi), speed pid based on rpm(-15000, 15000)
	motor_init(yaw_id, max_out_angle_yaw,  max_I_out_angle_yaw, max_err_angle_yaw, kp_angle_yaw, ki_angle_yaw, kd_angle_yaw,
 8004230:	ed9f 5a28 	vldr	s10, [pc, #160]	; 80042d4 <gimbal_task_init+0xd8>
 8004234:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 8004238:	ed9f 4a27 	vldr	s8, [pc, #156]	; 80042d8 <gimbal_task_init+0xdc>
 800423c:	eddf 3a27 	vldr	s7, [pc, #156]	; 80042dc <gimbal_task_init+0xe0>
 8004240:	ed9f 3a27 	vldr	s6, [pc, #156]	; 80042e0 <gimbal_task_init+0xe4>
 8004244:	eddf 2a27 	vldr	s5, [pc, #156]	; 80042e4 <gimbal_task_init+0xe8>
 8004248:	f643 2298 	movw	r2, #15000	; 0x3a98
 800424c:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80042d4 <gimbal_task_init+0xd8>
 8004250:	eddf 1a21 	vldr	s3, [pc, #132]	; 80042d8 <gimbal_task_init+0xdc>
 8004254:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80042e8 <gimbal_task_init+0xec>
 8004258:	eddf 0a24 	vldr	s1, [pc, #144]	; 80042ec <gimbal_task_init+0xf0>
 800425c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80042d4 <gimbal_task_init+0xd8>
 8004260:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 8004264:	2004      	movs	r0, #4
 8004266:	f002 ff1b 	bl	80070a0 <motor_init>
					   max_out_spd_yaw, max_I_out_spd_yaw, max_err_spd_yaw, kp_spd_yaw, ki_spd_yaw, kd_spd_yaw,
					   kf_spd_yaw);//spd ff gain
	motor_init(pitch_id, max_out_angle_pitch,  max_I_out_angle_pitch, max_err_angle_pitch, kp_angle_pitch, ki_angle_pitch, kd_angle_pitch,
 800426a:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 80042d4 <gimbal_task_init+0xd8>
 800426e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8004272:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 80042f0 <gimbal_task_init+0xf4>
 8004276:	eddf 3a1f 	vldr	s7, [pc, #124]	; 80042f4 <gimbal_task_init+0xf8>
 800427a:	ed9f 3a19 	vldr	s6, [pc, #100]	; 80042e0 <gimbal_task_init+0xe4>
 800427e:	eddf 2a19 	vldr	s5, [pc, #100]	; 80042e4 <gimbal_task_init+0xe8>
 8004282:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004286:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80042d4 <gimbal_task_init+0xd8>
 800428a:	eddf 1a13 	vldr	s3, [pc, #76]	; 80042d8 <gimbal_task_init+0xdc>
 800428e:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80042e8 <gimbal_task_init+0xec>
 8004292:	eddf 0a19 	vldr	s1, [pc, #100]	; 80042f8 <gimbal_task_init+0xfc>
 8004296:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80042d4 <gimbal_task_init+0xd8>
 800429a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800429e:	2005      	movs	r0, #5
 80042a0:	f002 fefe 	bl	80070a0 <motor_init>
					     max_out_spd_pitch, max_I_out_spd_pitch, max_err_spd_pitch, kp_spd_pitch, ki_spd_pitch, kd_spd_pitch,
					     kf_spd_pitch);//spd ff gain

	/* set init gimbal mode */
	gimbal_set_mode(gbal, PATROL_MODE);     // patrol mode
 80042a4:	2100      	movs	r1, #0
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff74 	bl	8004194 <gimbal_set_mode>
	gimbal_set_act_mode(gbal, INDPET_MODE); // indepedent mode
 80042ac:	2103      	movs	r1, #3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff80 	bl	80041b4 <gimbal_set_act_mode>
	gimbal_set_motor_mode(gbal, ENCODE_MODE);
 80042b4:	2101      	movs	r1, #1
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7ff ff90 	bl	80041dc <gimbal_set_motor_mode>

	/* reset gimbal data */
	gimbal_reset_data(gbal);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f8eb 	bl	8004498 <gimbal_reset_data>

	/* set comm packs init target number */
	gimbal_angle_message.message.vision.target_num = 0;
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <gimbal_task_init+0x100>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	615a      	str	r2, [r3, #20]
}
 80042c8:	bf00      	nop
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	2000d6c0 	.word	0x2000d6c0
 80042d4:	00000000 	.word	0x00000000
 80042d8:	3dcccccd 	.word	0x3dcccccd
 80042dc:	438e8000 	.word	0x438e8000
 80042e0:	459c4000 	.word	0x459c4000
 80042e4:	453b8000 	.word	0x453b8000
 80042e8:	44610000 	.word	0x44610000
 80042ec:	43fa0000 	.word	0x43fa0000
 80042f0:	3c23d70a 	.word	0x3c23d70a
 80042f4:	42a00000 	.word	0x42a00000
 80042f8:	42c80000 	.word	0x42c80000
 80042fc:	20000084 	.word	0x20000084

08004300 <gimbal_calibration_reset>:
 * @brief     the initialization process of the gimbal task,
 * 			  centering and ranging the motors using ecd
 * @param[in] gimbal: main gimbal handler
 * */
uint8_t gimbal_cali_done_flag = 0;
void gimbal_calibration_reset(Gimbal_t *gbal){
 8004300:	b580      	push	{r7, lr}
 8004302:	ed2d 8b02 	vpush	{d8}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	 /* reset the calibration flag first*/
	 gimbal_cali_done_flag = 0;
 800430c:	4b57      	ldr	r3, [pc, #348]	; (800446c <gimbal_calibration_reset+0x16c>)
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
	 uint16_t counter = 0;
 8004312:	2300      	movs	r3, #0
 8004314:	83fb      	strh	r3, [r7, #30]

	 /* init ramp functions*/
	 ramp_init(&(gbal->yaw_ramp), 1500);//1.5s init
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3374      	adds	r3, #116	; 0x74
 800431a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800431e:	4618      	mov	r0, r3
 8004320:	f7fe fd15 	bl	8002d4e <ramp_init>
	 ramp_init(&(gbal->pitch_ramp), 1500);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3388      	adds	r3, #136	; 0x88
 8004328:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fd0e 	bl	8002d4e <ramp_init>

	 /* created temp var to store the ramp calc value */
	 // use local variables so it won't affect the process angle
	 // so we can reset at any time
	 float temp_pitch_ramp_output = 0.0f;
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	61bb      	str	r3, [r7, #24]
	 float temp_yaw_ramp_output   = 0.0f;
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
	 float cur_pitch_radian       = 0.0f;
 800433e:	f04f 0300 	mov.w	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
	 float cur_yaw_radian         = 0.0f;
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	60fb      	str	r3, [r7, #12]

	 for(;;){
		 //get feedback first
		 gimbal_get_ecd_fb_data(gbal,
 800434a:	4a49      	ldr	r2, [pc, #292]	; (8004470 <gimbal_calibration_reset+0x170>)
 800434c:	4949      	ldr	r1, [pc, #292]	; (8004474 <gimbal_calibration_reset+0x174>)
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fa8a 	bl	8004868 <gimbal_get_ecd_fb_data>
								&(motor_data[yaw_id].motor_feedback),
								&(motor_data[pitch_id].motor_feedback));
		 cur_pitch_radian = in_out_map(gbal->pitch_ecd_fb.rx_angle, -4095, 4096, -PI, PI);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 800435a:	ee07 3a90 	vmov	s15, r3
 800435e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004362:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8004478 <gimbal_calibration_reset+0x178>
 8004366:	eddf 1a45 	vldr	s3, [pc, #276]	; 800447c <gimbal_calibration_reset+0x17c>
 800436a:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8004480 <gimbal_calibration_reset+0x180>
 800436e:	eddf 0a45 	vldr	s1, [pc, #276]	; 8004484 <gimbal_calibration_reset+0x184>
 8004372:	eeb0 0a67 	vmov.f32	s0, s15
 8004376:	f7fe fd84 	bl	8002e82 <in_out_map>
 800437a:	ed87 0a04 	vstr	s0, [r7, #16]
		 cur_yaw_radian   = in_out_map(gbal->yaw_ecd_fb.rx_angle, -4095, 4096, -PI, PI);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004384:	ee07 3a90 	vmov	s15, r3
 8004388:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800438c:	ed9f 2a3a 	vldr	s4, [pc, #232]	; 8004478 <gimbal_calibration_reset+0x178>
 8004390:	eddf 1a3a 	vldr	s3, [pc, #232]	; 800447c <gimbal_calibration_reset+0x17c>
 8004394:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8004480 <gimbal_calibration_reset+0x180>
 8004398:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8004484 <gimbal_calibration_reset+0x184>
 800439c:	eeb0 0a67 	vmov.f32	s0, s15
 80043a0:	f7fe fd6f 	bl	8002e82 <in_out_map>
 80043a4:	ed87 0a03 	vstr	s0, [r7, #12]
		 //apply ramp algo's form: ramp_out = cur + (tar - cur)*ramp_calc
		 //all the angles here are relative angle
		 temp_pitch_ramp_output = cur_pitch_radian + (0 - cur_pitch_radian)*ramp_calculate(&(gbal->pitch_ramp));
 80043a8:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8004488 <gimbal_calibration_reset+0x188>
 80043ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80043b0:	ee37 8a67 	vsub.f32	s16, s14, s15
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3388      	adds	r3, #136	; 0x88
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fe fcd9 	bl	8002d70 <ramp_calculate>
 80043be:	eef0 7a40 	vmov.f32	s15, s0
 80043c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80043c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80043ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ce:	edc7 7a06 	vstr	s15, [r7, #24]
		 temp_yaw_ramp_output   = cur_yaw_radian + (0 - cur_yaw_radian)*ramp_calculate(&(gbal->yaw_ramp));
 80043d2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004488 <gimbal_calibration_reset+0x188>
 80043d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80043da:	ee37 8a67 	vsub.f32	s16, s14, s15
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3374      	adds	r3, #116	; 0x74
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fcc4 	bl	8002d70 <ramp_calculate>
 80043e8:	eef0 7a40 	vmov.f32	s15, s0
 80043ec:	ee68 7a27 	vmul.f32	s15, s16, s15
 80043f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80043f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f8:	edc7 7a05 	vstr	s15, [r7, #20]
		 set_motor_can_volt( temp_yaw_ramp_output,
 80043fc:	4b23      	ldr	r3, [pc, #140]	; (800448c <gimbal_calibration_reset+0x18c>)
 80043fe:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 8004402:	2201      	movs	r2, #1
 8004404:	2100      	movs	r1, #0
 8004406:	2000      	movs	r0, #0
 8004408:	edd7 0a06 	vldr	s1, [r7, #24]
 800440c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004410:	f002 fea4 	bl	800715c <set_motor_can_volt>
				 	 	 	 temp_pitch_ramp_output,
							 0, 0,
							 DUAL_LOOP_PID_CONTROL,
							 gimbal.gimbal_motor_mode);
		 counter++;
 8004414:	8bfb      	ldrh	r3, [r7, #30]
 8004416:	3301      	adds	r3, #1
 8004418:	83fb      	strh	r3, [r7, #30]
		 /* when the err of cali angle smaller */
		 if(fabs(cur_pitch_radian)< (2.0f * DEGREE2RAD)){ //|| counter >= 50000 /*timeout*/ //&& fabs(cur_pitch_radian)< (2.0f * DEGREE2RAD)
 800441a:	edd7 7a04 	vldr	s15, [r7, #16]
 800441e:	eef0 7ae7 	vabs.f32	s15, s15
 8004422:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004490 <gimbal_calibration_reset+0x190>
 8004426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800442e:	d512      	bpl.n	8004456 <gimbal_calibration_reset+0x156>
			 /* cali done */
			 motor_data[pitch_id].tx_data = 0;
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <gimbal_calibration_reset+0x194>)
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
			 motor_data[yaw_id].tx_data = 0;
 8004438:	4b16      	ldr	r3, [pc, #88]	; (8004494 <gimbal_calibration_reset+0x194>)
 800443a:	2200      	movs	r2, #0
 800443c:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
			 gbal->pitch_ramp.count = 0;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
			 gbal->yaw_ramp.count = 0;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	675a      	str	r2, [r3, #116]	; 0x74
			 gimbal_cali_done_flag = 1;
 800444e:	4b07      	ldr	r3, [pc, #28]	; (800446c <gimbal_calibration_reset+0x16c>)
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
			 break;
 8004454:	e003      	b.n	800445e <gimbal_calibration_reset+0x15e>
		 }
		 osDelay(1);
 8004456:	2001      	movs	r0, #1
 8004458:	f00c f8b3 	bl	80105c2 <osDelay>
		 gimbal_get_ecd_fb_data(gbal,
 800445c:	e775      	b.n	800434a <gimbal_calibration_reset+0x4a>
	 }
//	 HAL_GPIO_WritePin(GPIOG, LD_C_Pin, RESET);
}
 800445e:	bf00      	nop
 8004460:	3720      	adds	r7, #32
 8004462:	46bd      	mov	sp, r7
 8004464:	ecbd 8b02 	vpop	{d8}
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200004c9 	.word	0x200004c9
 8004470:	20005584 	.word	0x20005584
 8004474:	200054f0 	.word	0x200054f0
 8004478:	40490fdb 	.word	0x40490fdb
 800447c:	c0490fdb 	.word	0xc0490fdb
 8004480:	45800000 	.word	0x45800000
 8004484:	c57ff000 	.word	0xc57ff000
 8004488:	00000000 	.word	0x00000000
 800448c:	20004740 	.word	0x20004740
 8004490:	3d0efa39 	.word	0x3d0efa39
 8004494:	20005218 	.word	0x20005218

08004498 <gimbal_reset_data>:

/*
 * @brief     Reset all data internal gimbal struct
 * @param[in] gimbal: main gimbal handler
 * */
void gimbal_reset_data(Gimbal_t *gbal){
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	gbal->yaw_ang_rate = 0.0f;			//not used
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	601a      	str	r2, [r3, #0]
	gbal->pitch_ang_rate = 0.0f;        //not used
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	605a      	str	r2, [r3, #4]
	gbal->yaw_speed_rate = 0.0f;		//not used
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	609a      	str	r2, [r3, #8]
	gbal->pitch_speed_rate = 0.0f;		//not used
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	60da      	str	r2, [r3, #12]

	gbal->yaw_cur_abs_angle = 0.0f;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	615a      	str	r2, [r3, #20]
	gbal->yaw_prev_angle = 0.0f;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	61da      	str	r2, [r3, #28]
	gbal->pitch_cur_abs_angle = 0.0f;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	625a      	str	r2, [r3, #36]	; 0x24
	gbal->pitch_prev_angle = 0.0f;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	62da      	str	r2, [r3, #44]	; 0x2c

	gbal->yaw_total_turns = 0;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	; 0x30
	gbal->pitch_total_turns = 0;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	635a      	str	r2, [r3, #52]	; 0x34
	gbal->final_abs_yaw = 0;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
	gbal->final_abs_pitch = 0;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f04f 0200 	mov.w	r2, #0
 80044fe:	63da      	str	r2, [r3, #60]	; 0x3c

	gbal->yaw_cur_rel_angle = 0.0f;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f04f 0200 	mov.w	r2, #0
 8004506:	619a      	str	r2, [r3, #24]
	gbal->pitch_cur_rel_angle = 0.0f;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f04f 0200 	mov.w	r2, #0
 800450e:	629a      	str	r2, [r3, #40]	; 0x28

	gbal->yaw_turns_count = 0;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	gbal->yaw_ecd_center = YAW_ECD_CENTER;					//center position of the yaw motor - encoder
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f44f 721b 	mov.w	r2, #620	; 0x26c
 800451e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	gbal->pitch_ecd_center = PITCH_ECD_CENTER;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f640 6274 	movw	r2, #3700	; 0xe74
 8004528:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	gbal->gyro_offset_slope = -1.84228e-10;
 800452c:	6879      	ldr	r1, [r7, #4]
 800452e:	a34d      	add	r3, pc, #308	; (adr r3, 8004664 <gimbal_reset_data+0x1cc>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	gbal->gyro_offset_count = 0;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	649a      	str	r2, [r3, #72]	; 0x48
	gbal->euler_angle.timestamp = dwt_getCnt_us();
 800453e:	f002 fd09 	bl	8006f54 <dwt_getCnt_us>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	gbal->yaw_tar_angle = 0.0f;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
	gbal->pitch_tar_angle = 0.0f;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f04f 0200 	mov.w	r2, #0
 8004558:	621a      	str	r2, [r3, #32]
	gbal->yaw_tar_spd = 0.0f;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	gbal->pitch_tar_spd = 0.0f;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	gbal->axis.vx = 0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	64da      	str	r2, [r3, #76]	; 0x4c
	gbal->axis.vy = 0;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	651a      	str	r2, [r3, #80]	; 0x50
	gbal->axis.wz = 0;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f04f 0200 	mov.w	r2, #0
 8004580:	655a      	str	r2, [r3, #84]	; 0x54

	init_folp_filter(&gbal->folp_f_yaw, 0.90f);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8004588:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8004650 <gimbal_reset_data+0x1b8>
 800458c:	4618      	mov	r0, r3
 800458e:	f7fe fca6 	bl	8002ede <init_folp_filter>
	init_folp_filter(&gbal->folp_f_pitch, 0.99f);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f603 2394 	addw	r3, r3, #2708	; 0xa94
 8004598:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004654 <gimbal_reset_data+0x1bc>
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fc9e 	bl	8002ede <init_folp_filter>


	init_ewma_filter(&gbal->ewma_f_x, 0.50f);//0.65 for older client
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	33dc      	adds	r3, #220	; 0xdc
 80045a6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7fe fd04 	bl	8002fb8 <init_ewma_filter>
	init_ewma_filter(&gbal->ewma_f_y, 0.50f);//0.6 for older client
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	33e8      	adds	r3, #232	; 0xe8
 80045b4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fcfd 	bl	8002fb8 <init_ewma_filter>
	init_ewma_filter(&gbal->ewma_f_aim_yaw, 0.95f);//0.65 for older client
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f603 236c 	addw	r3, r3, #2668	; 0xa6c
 80045c4:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8004658 <gimbal_reset_data+0x1c0>
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7fe fcf5 	bl	8002fb8 <init_ewma_filter>
	init_ewma_filter(&gbal->ewma_f_aim_pitch, 0.95f);//0.6 for older client
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f603 2378 	addw	r3, r3, #2680	; 0xa78
 80045d4:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004658 <gimbal_reset_data+0x1c0>
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fced 	bl	8002fb8 <init_ewma_filter>

	init_swm_filter(&gbal->swm_f_x, 50);// window size 50
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	33f4      	adds	r3, #244	; 0xf4
 80045e2:	2132      	movs	r1, #50	; 0x32
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7fe fd4d 	bl	8003084 <init_swm_filter>
	init_swm_filter(&gbal->swm_f_y, 50);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 80045f0:	2132      	movs	r1, #50	; 0x32
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fd46 	bl	8003084 <init_swm_filter>

	memset(&(gbal->ahrs_sensor), 0, sizeof(AhrsSensor_t));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	339c      	adds	r3, #156	; 0x9c
 80045fc:	2230      	movs	r2, #48	; 0x30
 80045fe:	2100      	movs	r1, #0
 8004600:	4618      	mov	r0, r3
 8004602:	f00d fc99 	bl	8011f38 <memset>
	memset(&(gbal->euler_angle), 0, sizeof(Attitude_t));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	33cc      	adds	r3, #204	; 0xcc
 800460a:	2210      	movs	r2, #16
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f00d fc92 	bl	8011f38 <memset>
	memset(&(gbal->yaw_ecd_fb), 0, sizeof(Motor_Feedback_Data_t));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3362      	adds	r3, #98	; 0x62
 8004618:	2208      	movs	r2, #8
 800461a:	2100      	movs	r1, #0
 800461c:	4618      	mov	r0, r3
 800461e:	f00d fc8b 	bl	8011f38 <memset>
	memset(&(gbal->pitch_ecd_fb), 0, sizeof(Motor_Feedback_Data_t));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	336a      	adds	r3, #106	; 0x6a
 8004626:	2208      	movs	r2, #8
 8004628:	2100      	movs	r1, #0
 800462a:	4618      	mov	r0, r3
 800462c:	f00d fc84 	bl	8011f38 <memset>

	kalmanCreate(&(gbal->kalman_f), 0.001, 0.01);//0.0005 0.02
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f603 23a4 	addw	r3, r3, #2724	; 0xaa4
 8004636:	eddf 0a09 	vldr	s1, [pc, #36]	; 800465c <gimbal_reset_data+0x1c4>
 800463a:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8004660 <gimbal_reset_data+0x1c8>
 800463e:	4618      	mov	r0, r3
 8004640:	f7fe fbca 	bl	8002dd8 <kalmanCreate>
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	f3af 8000 	nop.w
 8004650:	3f666666 	.word	0x3f666666
 8004654:	3f7d70a4 	.word	0x3f7d70a4
 8004658:	3f733333 	.word	0x3f733333
 800465c:	3c23d70a 	.word	0x3c23d70a
 8004660:	3a83126f 	.word	0x3a83126f
 8004664:	4de6c37d 	.word	0x4de6c37d
 8004668:	bde951f2 	.word	0xbde951f2

0800466c <gimbal_get_raw_mpu_data>:
/******************  MODE SELECTION FUNCTIONS BELOW ********************/
void gimbal_get_raw_mpu_data(Gimbal_t *gbal, IMU_t *imu_hldr){
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
	memcpy(&(gbal->ahrs_sensor), &(imu_hldr->ahrs_sensor), sizeof(AhrsSensor_t));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f103 009c 	add.w	r0, r3, #156	; 0x9c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	3348      	adds	r3, #72	; 0x48
 8004680:	2230      	movs	r2, #48	; 0x30
 8004682:	4619      	mov	r1, r3
 8004684:	f00d fc4a 	bl	8011f1c <memcpy>
}
 8004688:	bf00      	nop
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <gimbal_get_euler_angle>:
/*
 * @brief     Copy the gyroscope data from imu and calculate quaternion
 * 			  and euler's angle through attitude-breakdown algorithms.
 * @param[in] gimbal: main gimbal handler
 * */
void gimbal_get_euler_angle(Gimbal_t *gbal){
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
	gimbal_get_raw_mpu_data(gbal, &imu); // copy data to avoid mem leaks
 8004698:	4908      	ldr	r1, [pc, #32]	; (80046bc <gimbal_get_euler_angle+0x2c>)
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ffe6 	bl	800466c <gimbal_get_raw_mpu_data>
//	atti_math_calc(&gbal->ahrs_sensor, &gbal->euler_angle); //complementary filter parsed angle
//	mahony_ahrs_update(&(gbal->ahrs_sensor), &(gbal->euler_angle));	//mahony algo
	madgwick_ahrs_update(&(gbal->ahrs_sensor), &(gbal->euler_angle));  //madgwick algo
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f103 029c 	add.w	r2, r3, #156	; 0x9c
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	33cc      	adds	r3, #204	; 0xcc
 80046aa:	4619      	mov	r1, r3
 80046ac:	4610      	mov	r0, r2
 80046ae:	f7fc fc47 	bl	8000f40 <madgwick_ahrs_update>
}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	200045f4 	.word	0x200045f4

080046c0 <gimbal_gyro_update_abs_angle>:
/*
 * @brief     Copy the gyroscope data from imu and calculate quaternion
 * 			  and euler's absolute angle through attitude-breakdown algorithms.
 * @param[in] gbal: main gimbal handler
 * */
void gimbal_gyro_update_abs_angle(Gimbal_t *gbal){
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	 /* get timestamp */
	 uint32_t DWTcnt = dwt_getCnt_us();// systemclock_core 168MHz ->usec
 80046c8:	f002 fc44 	bl	8006f54 <dwt_getCnt_us>
 80046cc:	60f8      	str	r0, [r7, #12]
	 uint32_t delta_t = DWTcnt - gbal->euler_angle.timestamp;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	60bb      	str	r3, [r7, #8]
	 if(delta_t < 3000){
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d802      	bhi.n	80046ea <gimbal_gyro_update_abs_angle+0x2a>
         delta_t = 3000;//random setting, avoid overflow
 80046e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80046e8:	60bb      	str	r3, [r7, #8]
     /* Cumulative number of compensation counts */
//     gbal->gyro_offset_count += 1;
	 }
	 gimbal_get_euler_angle(gbal);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7ff ffd0 	bl	8004690 <gimbal_get_euler_angle>
	 /* filter the yaw angle data to handle shift */
	 gbal->euler_angle.yaw = first_order_low_pass_filter(&(gbal->folp_f_yaw), gbal->euler_angle.yaw);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f603 2284 	addw	r2, r3, #2692	; 0xa84
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80046fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004700:	4610      	mov	r0, r2
 8004702:	f7fe fc07 	bl	8002f14 <first_order_low_pass_filter>
 8004706:	eef0 7a40 	vmov.f32	s15, s0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	edc3 7a35 	vstr	s15, [r3, #212]	; 0xd4
	 gbal->euler_angle.pitch = first_order_low_pass_filter(&(gbal->folp_f_pitch), gbal->euler_angle.pitch);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f603 2294 	addw	r2, r3, #2708	; 0xa94
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edd3 7a34 	vldr	s15, [r3, #208]	; 0xd0
 800471c:	eeb0 0a67 	vmov.f32	s0, s15
 8004720:	4610      	mov	r0, r2
 8004722:	f7fe fbf7 	bl	8002f14 <first_order_low_pass_filter>
 8004726:	eef0 7a40 	vmov.f32	s15, s0
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	edc3 7a34 	vstr	s15, [r3, #208]	; 0xd0
//	 gbal->euler_angle.yaw = KalmanFilter(&(gbal->kalman_f), gbal->euler_angle.yaw);

	 /* apply an integral linear offset for yaw angle */
	 gbal->yaw_prev_angle = gbal->yaw_cur_abs_angle;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695a      	ldr	r2, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	61da      	str	r2, [r3, #28]
	 gbal->yaw_cur_abs_angle = gbal->euler_angle.yaw; //- delta_t *gbal->gyro_offset_slope*gbal->gyro_offset_count;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	615a      	str	r2, [r3, #20]
	 if(gbal->yaw_cur_abs_angle - gbal->yaw_prev_angle >= 5.0f) // 300 degrees
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	ed93 7a05 	vldr	s14, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	edd3 7a07 	vldr	s15, [r3, #28]
 800474e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004752:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8004756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	db0a      	blt.n	8004776 <gimbal_gyro_update_abs_angle+0xb6>
		 gbal->yaw_total_turns++;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800476a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
 8004774:	e018      	b.n	80047a8 <gimbal_gyro_update_abs_angle+0xe8>
	 else if(gbal->yaw_cur_abs_angle - gbal->yaw_prev_angle <= -5.0f)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	ed93 7a05 	vldr	s14, [r3, #20]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004786:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800478a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d809      	bhi.n	80047a8 <gimbal_gyro_update_abs_angle+0xe8>
	 	 gbal->yaw_total_turns--;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800479a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800479e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	 gbal->final_abs_yaw = gbal->yaw_cur_abs_angle - PI*gbal->yaw_total_turns;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80047b4:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8004864 <gimbal_gyro_update_abs_angle+0x1a4>
 80047b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80047bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	 gbal->euler_angle.timestamp = DWTcnt;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	 /* update the turns */
//	 gimbal_update_turns(gbal, PI);
	 /* apply first order filter to pitch angle */
//	 gbal->euler_angle.pitch = first_order_low_pass_filter(&(gbal->folp_f), gbal->euler_angle.pitch);
	 gbal->pitch_cur_abs_angle = gbal->euler_angle.pitch;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24
	 if(gbal->pitch_cur_abs_angle - gbal->pitch_prev_angle >= 5.0f) // 300 degrees
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80047e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80047ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f4:	db0a      	blt.n	800480c <gimbal_gyro_update_abs_angle+0x14c>
	 		 gbal->pitch_total_turns++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80047fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
 800480a:	e018      	b.n	800483e <gimbal_gyro_update_abs_angle+0x17e>
	 else if(gbal->pitch_cur_abs_angle - gbal->pitch_prev_angle <= -5.0f)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8004818:	ee77 7a67 	vsub.f32	s15, s14, s15
 800481c:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 8004820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004828:	d809      	bhi.n	800483e <gimbal_gyro_update_abs_angle+0x17e>
		 gbal->pitch_total_turns--;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8004830:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004834:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	 gbal->final_abs_pitch = gbal->pitch_cur_abs_angle - PI*gbal->pitch_total_turns;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800484a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8004864 <gimbal_gyro_update_abs_angle+0x1a4>
 800484e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	 /* update angular velocity */
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40490fdb 	.word	0x40490fdb

08004868 <gimbal_get_ecd_fb_data>:
/*
 * @brief     update the relevant encoder angle
 * @param[in] gbal: main gimbal handler
 * */
void gimbal_get_ecd_fb_data(Gimbal_t *gbal, Motor_Feedback_Data_t *yaw_motor_fb, Motor_Feedback_Data_t *pitch_motor_fb){
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
	memcpy(&(gbal->yaw_ecd_fb), yaw_motor_fb, sizeof(Motor_Feedback_Data_t));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	3362      	adds	r3, #98	; 0x62
 8004878:	2208      	movs	r2, #8
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f00d fb4d 	bl	8011f1c <memcpy>
	gbal->yaw_ecd_fb.rx_angle = gimbal_get_ecd_rel_angle(gbal->yaw_ecd_fb.rx_angle, gbal->yaw_ecd_center);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f9b3 2062 	ldrsh.w	r2, [r3, #98]	; 0x62
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 800488e:	4619      	mov	r1, r3
 8004890:	4610      	mov	r0, r2
 8004892:	f000 f822 	bl	80048da <gimbal_get_ecd_rel_angle>
 8004896:	4603      	mov	r3, r0
 8004898:	461a      	mov	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	memcpy(&(gbal->pitch_ecd_fb), pitch_motor_fb, sizeof(Motor_Feedback_Data_t));
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	336a      	adds	r3, #106	; 0x6a
 80048a4:	2208      	movs	r2, #8
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f00d fb37 	bl	8011f1c <memcpy>
	gbal->pitch_ecd_fb.rx_angle = gimbal_get_ecd_rel_angle(gbal->pitch_ecd_fb.rx_angle, gbal->pitch_ecd_center);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f9b3 206a 	ldrsh.w	r2, [r3, #106]	; 0x6a
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 80048ba:	4619      	mov	r1, r3
 80048bc:	4610      	mov	r0, r2
 80048be:	f000 f80c 	bl	80048da <gimbal_get_ecd_rel_angle>
 80048c2:	4603      	mov	r3, r0
 80048c4:	461a      	mov	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	gimbal_update_ecd_rel_angle(gbal);
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f849 	bl	8004964 <gimbal_update_ecd_rel_angle>
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <gimbal_get_ecd_rel_angle>:
 * @brief     Get relative angle of gimbal motors.
 * @param[in] raw_ecd: abs yaw ecd angle from feedback
 * @param[in] center_offset: the center offset of ecd mode
 * */
int16_t gimbal_get_ecd_rel_angle(int16_t raw_ecd, int16_t center_offset)
{
 80048da:	b480      	push	{r7}
 80048dc:	b085      	sub	sp, #20
 80048de:	af00      	add	r7, sp, #0
 80048e0:	4603      	mov	r3, r0
 80048e2:	460a      	mov	r2, r1
 80048e4:	80fb      	strh	r3, [r7, #6]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80bb      	strh	r3, [r7, #4]
  /* declare a 16-bit signed integer tmp to store the relative angle */
  int16_t tmp = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	81fb      	strh	r3, [r7, #14]

  /*  check if the center offset is in the upper half of the ecd range (4096-8191) */
  if (center_offset >= 4096){
 80048ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f6:	db16      	blt.n	8004926 <gimbal_get_ecd_rel_angle+0x4c>
    /*  check if the raw ecd value is in the same half circle as the center offset */
    if (raw_ecd > center_offset - 4096)
 80048f8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80048fc:	f6a3 72ff 	subw	r2, r3, #4095	; 0xfff
 8004900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004904:	429a      	cmp	r2, r3
 8004906:	dc05      	bgt.n	8004914 <gimbal_get_ecd_rel_angle+0x3a>
      /*  the raw ecd value is in the same half circle as the center offset
          so, simply subtract the center offset from the raw ecd to get the relative angle */
      tmp = raw_ecd - center_offset;
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	88bb      	ldrh	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	b29b      	uxth	r3, r3
 8004910:	81fb      	strh	r3, [r7, #14]
 8004912:	e01e      	b.n	8004952 <gimbal_get_ecd_rel_angle+0x78>
    else
      /*  the raw ecd value is in the different half circle from the center offset
          subtract the center offset from the raw ecd plus 8192 to get the relative angle */
      tmp = raw_ecd + 8192 - center_offset;
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	88bb      	ldrh	r3, [r7, #4]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	b29b      	uxth	r3, r3
 800491c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004920:	b29b      	uxth	r3, r3
 8004922:	81fb      	strh	r3, [r7, #14]
 8004924:	e015      	b.n	8004952 <gimbal_get_ecd_rel_angle+0x78>
  }
  /*  check if the center offset is in the lower half of the ecd range (0-4095) */
  else{
    /*  check if the raw ecd value is in the different half circle from the center offset */
    if (raw_ecd > center_offset + 4096)
 8004926:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800492a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800492e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004932:	429a      	cmp	r2, r3
 8004934:	dd08      	ble.n	8004948 <gimbal_get_ecd_rel_angle+0x6e>
      /*  the raw ecd value is in the different half circle from the center offset
          subtract the center offset and 8192 from the raw ecd to get the relative angle */
      tmp = raw_ecd - 8192 - center_offset;
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	88bb      	ldrh	r3, [r7, #4]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	b29b      	uxth	r3, r3
 800493e:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8004942:	b29b      	uxth	r3, r3
 8004944:	81fb      	strh	r3, [r7, #14]
 8004946:	e004      	b.n	8004952 <gimbal_get_ecd_rel_angle+0x78>
    else
      /*  the raw ecd value is in the same half circle as the center offset
          so, simply subtract the center offset from the raw ecd to get the relative angle */
      tmp = raw_ecd - center_offset;
 8004948:	88fa      	ldrh	r2, [r7, #6]
 800494a:	88bb      	ldrh	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	b29b      	uxth	r3, r3
 8004950:	81fb      	strh	r3, [r7, #14]
  }
  return tmp;
 8004952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004956:	4618      	mov	r0, r3
 8004958:	3714      	adds	r7, #20
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
	...

08004964 <gimbal_update_ecd_rel_angle>:
/*
 * @brief     Update gimbal motor relative and mapped angle using encoder
 * @param[in] gbal: main gimbal handler
 * */
void gimbal_update_ecd_rel_angle(Gimbal_t *gbal){
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	gbal->yaw_cur_rel_angle = in_out_map(gbal->yaw_ecd_fb.rx_angle,-4095,4096,-PI,PI);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	ed9f 2a16 	vldr	s4, [pc, #88]	; 80049d4 <gimbal_update_ecd_rel_angle+0x70>
 800497e:	eddf 1a16 	vldr	s3, [pc, #88]	; 80049d8 <gimbal_update_ecd_rel_angle+0x74>
 8004982:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80049dc <gimbal_update_ecd_rel_angle+0x78>
 8004986:	eddf 0a16 	vldr	s1, [pc, #88]	; 80049e0 <gimbal_update_ecd_rel_angle+0x7c>
 800498a:	eeb0 0a67 	vmov.f32	s0, s15
 800498e:	f7fe fa78 	bl	8002e82 <in_out_map>
 8004992:	eef0 7a40 	vmov.f32	s15, s0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	edc3 7a06 	vstr	s15, [r3, #24]
	gbal->pitch_cur_rel_angle = in_out_map(gbal->pitch_ecd_fb.rx_angle,-4095,4096,-PI,PI);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049aa:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 80049d4 <gimbal_update_ecd_rel_angle+0x70>
 80049ae:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80049d8 <gimbal_update_ecd_rel_angle+0x74>
 80049b2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80049dc <gimbal_update_ecd_rel_angle+0x78>
 80049b6:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80049e0 <gimbal_update_ecd_rel_angle+0x7c>
 80049ba:	eeb0 0a67 	vmov.f32	s0, s15
 80049be:	f7fe fa60 	bl	8002e82 <in_out_map>
 80049c2:	eef0 7a40 	vmov.f32	s15, s0
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40490fdb 	.word	0x40490fdb
 80049d8:	c0490fdb 	.word	0xc0490fdb
 80049dc:	45800000 	.word	0x45800000
 80049e0:	c57ff000 	.word	0xc57ff000

080049e4 <gimbal_set_limited_angle>:
/*
 * @brief     set the target angle with limited range
 * @param[in] gbal: main gimbal handler
 * @param[in] target yaw and pitch relative angle(-pi, pi)
 */
void gimbal_set_limited_angle(Gimbal_t *gbal, float yaw_target_angle, float pitch_target_angle){
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80049f0:	edc7 0a01 	vstr	s1, [r7, #4]
	gbal->yaw_tar_angle = yaw_target_angle;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68ba      	ldr	r2, [r7, #8]
 80049f8:	611a      	str	r2, [r3, #16]
	gbal->pitch_tar_angle = pitch_target_angle;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	621a      	str	r2, [r3, #32]
	/* only set limit for yaw where is no slipring */
//	VAL_LIMIT(gbal->yaw_tar_angle,
//				   -PI,
//				    PI);
	/* set the limit for pitch */
	VAL_LIMIT(gbal->pitch_tar_angle,
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a06:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a44 <gimbal_set_limited_angle+0x60>
 8004a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	d803      	bhi.n	8004a1c <gimbal_set_limited_angle+0x38>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <gimbal_set_limited_angle+0x64>)
 8004a18:	621a      	str	r2, [r3, #32]
				   -PITCH_GYRO_DELTA,
					PITCH_GYRO_DELTA);
}
 8004a1a:	e00d      	b.n	8004a38 <gimbal_set_limited_angle+0x54>
	VAL_LIMIT(gbal->pitch_tar_angle,
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a22:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004a4c <gimbal_set_limited_angle+0x68>
 8004a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2e:	da00      	bge.n	8004a32 <gimbal_set_limited_angle+0x4e>
}
 8004a30:	e002      	b.n	8004a38 <gimbal_set_limited_angle+0x54>
	VAL_LIMIT(gbal->pitch_tar_angle,
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4a06      	ldr	r2, [pc, #24]	; (8004a50 <gimbal_set_limited_angle+0x6c>)
 8004a36:	621a      	str	r2, [r3, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr
 8004a44:	bfb2b8c7 	.word	0xbfb2b8c7
 8004a48:	bfb2b8c7 	.word	0xbfb2b8c7
 8004a4c:	3fb2b8c7 	.word	0x3fb2b8c7
 8004a50:	3fb2b8c7 	.word	0x3fb2b8c7

08004a54 <gimbal_update_comm_info>:
    VAL_LIMIT(gbal->yaw_tar_spd, -5000, 5000);
}

#ifndef GIMBAL_MOTOR_DEBUG
/******************************** For Comms Below ********************************/
static void gimbal_update_comm_info(Gimbal_t *gbal, CommMessageUnion_t *cmu){
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
	float temp_angle = YAW_POSITIVE_DIR * gbal->yaw_cur_rel_angle * YAW_GEAR_RATIO;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	60fb      	str	r3, [r7, #12]
	cmu->comm_ga.angle_data[0] = -temp_angle;//the direction of this are inverse.
 8004a64:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a68:	eef1 7a67 	vneg.f32	s15, s15
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	edc3 7a00 	vstr	s15, [r3]
	cmu->comm_ga.angle_data[1] = gbal->yaw_cur_abs_angle;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695a      	ldr	r2, [r3, #20]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	605a      	str	r2, [r3, #4]
	cmu->comm_ga.angle_data[2] = 0;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	609a      	str	r2, [r3, #8]
	cmu->comm_ga.angle_data[3] = 0;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
	cmu->comm_ga.send_flag = 1;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	741a      	strb	r2, [r3, #16]
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <gimbal_update_rc_rel_angle>:

static void gimbal_update_rc_rel_angle(Gimbal_t *gbal, RemoteControl_t *rc_hdlr){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
	float cur_yaw_target = 0.0;
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
	float cur_pitch_target = 0.0;
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
	float delta_yaw= 0.0;
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
	float delta_pitch = 0.0;
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
	//FIXME: not memcpy, may overwrite previous data, only test
	/* get the latest delta angle of pitch and yaw motor */
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d12a      	bne.n	8004b1e <gimbal_update_rc_rel_angle+0x82>
		//TODO fine tune the precision of the controller
		delta_yaw = in_out_map(rc_hdlr->ctrl.ch0, -CHANNEL_OFFSET_MAX_ABS_VAL, CHANNEL_OFFSET_MAX_ABS_VAL,
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ace:	ee07 3a90 	vmov	s15, r3
 8004ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ad6:	ed9f 2a71 	vldr	s4, [pc, #452]	; 8004c9c <gimbal_update_rc_rel_angle+0x200>
 8004ada:	eddf 1a71 	vldr	s3, [pc, #452]	; 8004ca0 <gimbal_update_rc_rel_angle+0x204>
 8004ade:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8004ca4 <gimbal_update_rc_rel_angle+0x208>
 8004ae2:	eddf 0a71 	vldr	s1, [pc, #452]	; 8004ca8 <gimbal_update_rc_rel_angle+0x20c>
 8004ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aea:	f7fe f9ca 	bl	8002e82 <in_out_map>
 8004aee:	ed87 0a03 	vstr	s0, [r7, #12]
										-0.5*0.16667*PI, 0.5*0.16667*PI);//(-15d, 15d)
		delta_pitch = in_out_map(rc_hdlr->ctrl.ch1, -CHANNEL_OFFSET_MAX_ABS_VAL, CHANNEL_OFFSET_MAX_ABS_VAL,
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004af8:	ee07 3a90 	vmov	s15, r3
 8004afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b00:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 8004cac <gimbal_update_rc_rel_angle+0x210>
 8004b04:	eddf 1a6a 	vldr	s3, [pc, #424]	; 8004cb0 <gimbal_update_rc_rel_angle+0x214>
 8004b08:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8004ca4 <gimbal_update_rc_rel_angle+0x208>
 8004b0c:	eddf 0a66 	vldr	s1, [pc, #408]	; 8004ca8 <gimbal_update_rc_rel_angle+0x20c>
 8004b10:	eeb0 0a67 	vmov.f32	s0, s15
 8004b14:	f7fe f9b5 	bl	8002e82 <in_out_map>
 8004b18:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b1c:	e05e      	b.n	8004bdc <gimbal_update_rc_rel_angle+0x140>
										-0.39*0.16667*PI, 0.391*0.16667*PI);//(-12d, 12d)
	}
	else if(rc_hdlr->control_mode == PC_MODE){
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d159      	bne.n	8004bdc <gimbal_update_rc_rel_angle+0x140>
		//TODO fine tune the precision of the mouse
		/* expotional filter applied here */
		rc_hdlr->pc.mouse.x = ewma_filter(&gbal->ewma_f_x, rc_hdlr->pc.mouse.x);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004b34:	ee07 3a90 	vmov	s15, r3
 8004b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b40:	4610      	mov	r0, r2
 8004b42:	f7fe fa51 	bl	8002fe8 <ewma_filter>
 8004b46:	eef0 7a40 	vmov.f32	s15, s0
 8004b4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b4e:	ee17 3a90 	vmov	r3, s15
 8004b52:	b21a      	sxth	r2, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	819a      	strh	r2, [r3, #12]
//		rc_hdlr->pc.mouse.x = sliding_window_mean_filter(&gbal->swm_f_x, rc_hdlr->pc.mouse.x);
		delta_yaw = in_out_map(rc_hdlr->pc.mouse.x, -MOUSE_MAX_SPEED_VALUE, MOUSE_MAX_SPEED_VALUE,
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b66:	ed9f 2a53 	vldr	s4, [pc, #332]	; 8004cb4 <gimbal_update_rc_rel_angle+0x218>
 8004b6a:	eddf 1a53 	vldr	s3, [pc, #332]	; 8004cb8 <gimbal_update_rc_rel_angle+0x21c>
 8004b6e:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8004cbc <gimbal_update_rc_rel_angle+0x220>
 8004b72:	eddf 0a53 	vldr	s1, [pc, #332]	; 8004cc0 <gimbal_update_rc_rel_angle+0x224>
 8004b76:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7a:	f7fe f982 	bl	8002e82 <in_out_map>
 8004b7e:	ed87 0a03 	vstr	s0, [r7, #12]
												-30*PI, 30*PI);// 1000 -> 2*pi, old value +-30*PI
		rc_hdlr->pc.mouse.y = ewma_filter(&gbal->ewma_f_y, rc_hdlr->pc.mouse.y);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f103 02e8 	add.w	r2, r3, #232	; 0xe8
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004b8e:	ee07 3a90 	vmov	s15, r3
 8004b92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b96:	eeb0 0a67 	vmov.f32	s0, s15
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	f7fe fa24 	bl	8002fe8 <ewma_filter>
 8004ba0:	eef0 7a40 	vmov.f32	s15, s0
 8004ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ba8:	ee17 3a90 	vmov	r3, s15
 8004bac:	b21a      	sxth	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	81da      	strh	r2, [r3, #14]
//		rc_hdlr->pc.mouse.y = sliding_window_mean_filter(&gbal->swm_f_y, rc_hdlr->pc.mouse.y);
		delta_pitch = in_out_map(rc_hdlr->pc.mouse.y, -MOUSE_MAX_SPEED_VALUE, MOUSE_MAX_SPEED_VALUE,
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004bb8:	ee07 3a90 	vmov	s15, r3
 8004bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bc0:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8004cb4 <gimbal_update_rc_rel_angle+0x218>
 8004bc4:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8004cb8 <gimbal_update_rc_rel_angle+0x21c>
 8004bc8:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 8004cbc <gimbal_update_rc_rel_angle+0x220>
 8004bcc:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8004cc0 <gimbal_update_rc_rel_angle+0x224>
 8004bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8004bd4:	f7fe f955 	bl	8002e82 <in_out_map>
 8004bd8:	ed87 0a02 	vstr	s0, [r7, #8]
												-30*PI, 30*PI);// 1000 -> 2*pi, old value +-30*PI
	}
	/* get the latest angle position of pitch and yaw motor */
	gimbal_get_ecd_fb_data(&gimbal,
 8004bdc:	4a39      	ldr	r2, [pc, #228]	; (8004cc4 <gimbal_update_rc_rel_angle+0x228>)
 8004bde:	493a      	ldr	r1, [pc, #232]	; (8004cc8 <gimbal_update_rc_rel_angle+0x22c>)
 8004be0:	483a      	ldr	r0, [pc, #232]	; (8004ccc <gimbal_update_rc_rel_angle+0x230>)
 8004be2:	f7ff fe41 	bl	8004868 <gimbal_get_ecd_fb_data>
						   &(motor_data[yaw_id].motor_feedback),
						   &(motor_data[pitch_id].motor_feedback));
	/* NOTE: Even if the target was beyond pi, the motor still tracked the same dir bc of spd loop and phase delay,
	 * and right about next time, the feedback of motor would be changed from pi to -pi(or inverse), which will
	 * also update the target into right scale of angle */
	if(gbal->gimbal_motor_mode == GYRO_MODE){
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d116      	bne.n	8004c1e <gimbal_update_rc_rel_angle+0x182>
		cur_yaw_target = gbal->yaw_cur_abs_angle - delta_yaw;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	ed93 7a05 	vldr	s14, [r3, #20]
 8004bf6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bfe:	edc7 7a05 	vstr	s15, [r7, #20]
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch * PITCH_GEAR_RATIO;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004c08:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c0c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004c10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c18:	edc7 7a04 	vstr	s15, [r7, #16]
 8004c1c:	e015      	b.n	8004c4a <gimbal_update_rc_rel_angle+0x1ae>
	}
	else{
		cur_yaw_target = gbal->yaw_cur_rel_angle - delta_yaw;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	ed93 7a06 	vldr	s14, [r3, #24]
 8004c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c2c:	edc7 7a05 	vstr	s15, [r7, #20]
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch * PITCH_GEAR_RATIO;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8004c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c3a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8004c3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c46:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	/* avoid small noise to spin the yaw */
	if(fabs(delta_yaw)> 1.0f*DEGREE2RAD){
 8004c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c4e:	eef0 7ae7 	vabs.f32	s15, s15
 8004c52:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004cd0 <gimbal_update_rc_rel_angle+0x234>
 8004c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	dd02      	ble.n	8004c66 <gimbal_update_rc_rel_angle+0x1ca>
		gbal->yaw_tar_angle = cur_yaw_target;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	611a      	str	r2, [r3, #16]
	}
	if(fabs(delta_pitch)> 1.0f*DEGREE2RAD)
 8004c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c6a:	eef0 7ae7 	vabs.f32	s15, s15
 8004c6e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004cd0 <gimbal_update_rc_rel_angle+0x234>
 8004c72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7a:	dd02      	ble.n	8004c82 <gimbal_update_rc_rel_angle+0x1e6>
		gbal->pitch_tar_angle = cur_pitch_target;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	621a      	str	r2, [r3, #32]
	/* independent mode don't allow set yaw angle */
	if(gbal->gimbal_act_mode == INDPET_MODE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3ad1 	ldrb.w	r3, [r3, #2769]	; 0xad1
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d103      	bne.n	8004c94 <gimbal_update_rc_rel_angle+0x1f8>
		gbal->yaw_tar_angle = 0;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	611a      	str	r2, [r3, #16]
}
 8004c94:	bf00      	nop
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	3e860b42 	.word	0x3e860b42
 8004ca0:	be860b42 	.word	0xbe860b42
 8004ca4:	44250000 	.word	0x44250000
 8004ca8:	c4250000 	.word	0xc4250000
 8004cac:	3e51a510 	.word	0x3e51a510
 8004cb0:	be511bcd 	.word	0xbe511bcd
 8004cb4:	42bc7edd 	.word	0x42bc7edd
 8004cb8:	c2bc7edd 	.word	0xc2bc7edd
 8004cbc:	46ea6000 	.word	0x46ea6000
 8004cc0:	c6ea6000 	.word	0xc6ea6000
 8004cc4:	20005584 	.word	0x20005584
 8004cc8:	200054f0 	.word	0x200054f0
 8004ccc:	20004740 	.word	0x20004740
 8004cd0:	3c8efa39 	.word	0x3c8efa39

08004cd4 <gimbal_rc_mode_selection>:
 * @brief     mode selection based on remote controller
 * @param[in] chassis: main chassis handler
 * @param[in] rc: main remote controller handler
 * */

static void gimbal_rc_mode_selection(Gimbal_t* gbal, RemoteControl_t *rc_hdlr){
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
#ifndef MANUAL_SET_GIMBAL_MODES
	BoardMode_t    board_mode = IDLE_MODE;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	73fb      	strb	r3, [r7, #15]
	BoardActMode_t act_mode   = INDPET_MODE;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	73bb      	strb	r3, [r7, #14]
	GimbalMotorMode_t motor_mode = ENCODE_MODE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	737b      	strb	r3, [r7, #13]
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d132      	bne.n	8004d5a <gimbal_rc_mode_selection+0x86>
		if(rc_hdlr->ctrl.s1 == SW_MID){
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	7a1b      	ldrb	r3, [r3, #8]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d102      	bne.n	8004d02 <gimbal_rc_mode_selection+0x2e>
			/* if s1 down, then just shut down everything */
			board_mode = IDLE_MODE;
 8004cfc:	2304      	movs	r3, #4
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e05a      	b.n	8004db8 <gimbal_rc_mode_selection+0xe4>
		}
		else{
			/* else just set up to patrol mode */
			board_mode = PATROL_MODE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
			if(rc_hdlr->ctrl.s1 == SW_UP){
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	7a1b      	ldrb	r3, [r3, #8]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d110      	bne.n	8004d30 <gimbal_rc_mode_selection+0x5c>
				/* chassis follow gimbal center while follow yaw axis */
				act_mode = GIMBAL_CENTER;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73bb      	strb	r3, [r7, #14]
				motor_mode = GYRO_MODE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	737b      	strb	r3, [r7, #13]
				if(rc_hdlr->ctrl.s1 == SW_UP && rc_hdlr->ctrl.s2 == SW_DOWN){
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	7a1b      	ldrb	r3, [r3, #8]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d14c      	bne.n	8004db8 <gimbal_rc_mode_selection+0xe4>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	7a5b      	ldrb	r3, [r3, #9]
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d148      	bne.n	8004db8 <gimbal_rc_mode_selection+0xe4>
					/* spinning chassis while follow yaw axis */
					act_mode = SELF_GYRO;
 8004d26:	2302      	movs	r3, #2
 8004d28:	73bb      	strb	r3, [r7, #14]
					motor_mode = GYRO_MODE;//ENCODE_MODE
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	737b      	strb	r3, [r7, #13]
 8004d2e:	e043      	b.n	8004db8 <gimbal_rc_mode_selection+0xe4>
				}
			}
			else if(rc_hdlr->ctrl.s1 == SW_DOWN){
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	7a1b      	ldrb	r3, [r3, #8]
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d13f      	bne.n	8004db8 <gimbal_rc_mode_selection+0xe4>
				/* chassis only follow yaw axis */
				act_mode = GIMBAL_FOLLOW;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73bb      	strb	r3, [r7, #14]
				motor_mode = ENCODE_MODE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	737b      	strb	r3, [r7, #13]
				if(rc_hdlr->ctrl.s1 == SW_DOWN && rc_hdlr->ctrl.s2 == SW_DOWN){
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	7a1b      	ldrb	r3, [r3, #8]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d137      	bne.n	8004db8 <gimbal_rc_mode_selection+0xe4>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	7a5b      	ldrb	r3, [r3, #9]
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d133      	bne.n	8004db8 <gimbal_rc_mode_selection+0xe4>
					/* independent mode */
					act_mode = INDPET_MODE;
 8004d50:	2303      	movs	r3, #3
 8004d52:	73bb      	strb	r3, [r7, #14]
					motor_mode = ENCODE_MODE;
 8004d54:	2301      	movs	r3, #1
 8004d56:	737b      	strb	r3, [r7, #13]
 8004d58:	e02e      	b.n	8004db8 <gimbal_rc_mode_selection+0xe4>
			}
		}
	}

	/* pc mode selection */
	else if(rc_hdlr->control_mode == PC_MODE){
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d129      	bne.n	8004db8 <gimbal_rc_mode_selection+0xe4>
		/* from comm rc pack to obtain mode */
		board_mode = gbal->gimbal_mode;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3ad3 	ldrb.w	r3, [r3, #2771]	; 0xad3
 8004d6a:	73fb      	strb	r3, [r7, #15]
		act_mode = gbal->gimbal_act_mode;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 3ad1 	ldrb.w	r3, [r3, #2769]	; 0xad1
 8004d72:	73bb      	strb	r3, [r7, #14]

		/* update motor mode */
		if(rc_hdlr->pc.mouse.right_click.status == PRESSED)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	7ddb      	ldrb	r3, [r3, #23]
 8004d78:	2b03      	cmp	r3, #3
 8004d7a:	d102      	bne.n	8004d82 <gimbal_rc_mode_selection+0xae>
			board_mode = AUTO_AIM_MODE;
 8004d7c:	2302      	movs	r3, #2
 8004d7e:	73fb      	strb	r3, [r7, #15]
 8004d80:	e003      	b.n	8004d8a <gimbal_rc_mode_selection+0xb6>
		else{
			board_mode = gbal->gimbal_mode;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3ad3 	ldrb.w	r3, [r3, #2771]	; 0xad3
 8004d88:	73fb      	strb	r3, [r7, #15]
		}

		if(act_mode == GIMBAL_FOLLOW){
 8004d8a:	7bbb      	ldrb	r3, [r7, #14]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d102      	bne.n	8004d96 <gimbal_rc_mode_selection+0xc2>
			motor_mode = ENCODE_MODE;
 8004d90:	2301      	movs	r3, #1
 8004d92:	737b      	strb	r3, [r7, #13]
 8004d94:	e010      	b.n	8004db8 <gimbal_rc_mode_selection+0xe4>
		}
		else if(act_mode == INDPET_MODE){
 8004d96:	7bbb      	ldrb	r3, [r7, #14]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d102      	bne.n	8004da2 <gimbal_rc_mode_selection+0xce>
			motor_mode = ENCODE_MODE;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	737b      	strb	r3, [r7, #13]
 8004da0:	e00a      	b.n	8004db8 <gimbal_rc_mode_selection+0xe4>
		}
		else if(act_mode == GIMBAL_CENTER){
 8004da2:	7bbb      	ldrb	r3, [r7, #14]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <gimbal_rc_mode_selection+0xda>
			motor_mode = GYRO_MODE;
 8004da8:	2300      	movs	r3, #0
 8004daa:	737b      	strb	r3, [r7, #13]
 8004dac:	e004      	b.n	8004db8 <gimbal_rc_mode_selection+0xe4>
		}
		else if(act_mode == SELF_GYRO){
 8004dae:	7bbb      	ldrb	r3, [r7, #14]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d101      	bne.n	8004db8 <gimbal_rc_mode_selection+0xe4>
			motor_mode = GYRO_MODE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	737b      	strb	r3, [r7, #13]
	GimbalMotorMode_t motor_mode = ENCODE_MODE;
	rc_hdlr->control_mode = PC_MODE;
#endif

	/* set modes */
	gimbal_set_mode(gbal, board_mode);
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff f9e9 	bl	8004194 <gimbal_set_mode>
	gimbal_set_act_mode(gbal, act_mode);// act mode only works when debuging with rc
 8004dc2:	7bbb      	ldrb	r3, [r7, #14]
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff f9f4 	bl	80041b4 <gimbal_set_act_mode>
	gimbal_set_motor_mode(gbal, motor_mode);
 8004dcc:	7b7b      	ldrb	r3, [r7, #13]
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff fa03 	bl	80041dc <gimbal_set_motor_mode>
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <gimbal_update_autoaim_rel_angle>:

/******************************** For Comms Above **************************************/
/******************************** For Auto Aiming Below ********************************/
static void gimbal_update_autoaim_rel_angle(Gimbal_t *gbal, RemoteControl_t *rc_hdlr, UC_Auto_Aim_Pack_t *pack){
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	; 0x28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
	float cur_yaw_target = 0.0;
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	627b      	str	r3, [r7, #36]	; 0x24
	float cur_pitch_target = 0.0;
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	623b      	str	r3, [r7, #32]
	float delta_yaw= 0.0;
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	61fb      	str	r3, [r7, #28]
	float delta_pitch = 0.0;
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	61bb      	str	r3, [r7, #24]

	if(rc_hdlr->control_mode == PC_MODE){
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d135      	bne.n	8004e7a <gimbal_update_autoaim_rel_angle+0x9a>
		/* filter applied here, TODO may add kalman filter here, depends on data input */
		float filtered_delta_yaw = ewma_filter(&gbal->ewma_f_aim_yaw, pack->delta_yaw);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f603 226c 	addw	r2, r3, #2668	; 0xa6c
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f7fe f8e2 	bl	8002fe8 <ewma_filter>
 8004e24:	ed87 0a05 	vstr	s0, [r7, #20]
//		pack->yaw_data = sliding_window_mean_filter(&gbal->swm_f_aim_yaw, pack->yaw_data);
		delta_yaw = in_out_map(filtered_delta_yaw, -180.0, 180.0, -PI,PI);// 1000 -> 2*pi, old value +-30*PI
 8004e28:	ed9f 2a40 	vldr	s4, [pc, #256]	; 8004f2c <gimbal_update_autoaim_rel_angle+0x14c>
 8004e2c:	eddf 1a40 	vldr	s3, [pc, #256]	; 8004f30 <gimbal_update_autoaim_rel_angle+0x150>
 8004e30:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8004f34 <gimbal_update_autoaim_rel_angle+0x154>
 8004e34:	eddf 0a40 	vldr	s1, [pc, #256]	; 8004f38 <gimbal_update_autoaim_rel_angle+0x158>
 8004e38:	ed97 0a05 	vldr	s0, [r7, #20]
 8004e3c:	f7fe f821 	bl	8002e82 <in_out_map>
 8004e40:	ed87 0a07 	vstr	s0, [r7, #28]

		float filtered_delta_pitch = ewma_filter(&gbal->ewma_f_aim_pitch, pack->delta_pitch);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f603 2278 	addw	r2, r3, #2680	; 0xa78
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e50:	eeb0 0a67 	vmov.f32	s0, s15
 8004e54:	4610      	mov	r0, r2
 8004e56:	f7fe f8c7 	bl	8002fe8 <ewma_filter>
 8004e5a:	ed87 0a04 	vstr	s0, [r7, #16]
//		pack->pitch_data = sliding_window_mean_filter(&gbal->swm_f_aim_pitch, pack->yaw_data);
		delta_pitch = in_out_map(filtered_delta_pitch, -180.0, 180.0, -PI,PI);// 1000 -> 2*pi, old value +-30*PI
 8004e5e:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8004f2c <gimbal_update_autoaim_rel_angle+0x14c>
 8004e62:	eddf 1a33 	vldr	s3, [pc, #204]	; 8004f30 <gimbal_update_autoaim_rel_angle+0x150>
 8004e66:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004f34 <gimbal_update_autoaim_rel_angle+0x154>
 8004e6a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8004f38 <gimbal_update_autoaim_rel_angle+0x158>
 8004e6e:	ed97 0a04 	vldr	s0, [r7, #16]
 8004e72:	f7fe f806 	bl	8002e82 <in_out_map>
 8004e76:	ed87 0a06 	vstr	s0, [r7, #24]
	}
	/* get the latest angle position of pitch and yaw motor */
	gimbal_get_ecd_fb_data(&gimbal,
 8004e7a:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <gimbal_update_autoaim_rel_angle+0x15c>)
 8004e7c:	4930      	ldr	r1, [pc, #192]	; (8004f40 <gimbal_update_autoaim_rel_angle+0x160>)
 8004e7e:	4831      	ldr	r0, [pc, #196]	; (8004f44 <gimbal_update_autoaim_rel_angle+0x164>)
 8004e80:	f7ff fcf2 	bl	8004868 <gimbal_get_ecd_fb_data>
						   &(motor_data[yaw_id].motor_feedback),
						   &(motor_data[pitch_id].motor_feedback));
	/* NOTE: Even if the target was beyond pi, the motor still tracked the same dir bc of spd loop and phase delay,
	 * and right about next time, the feedback of motor would be changed from pi to -pi(or inverse), which will
	 * also update the target into right scale of angle */
	if(gbal->gimbal_motor_mode == GYRO_MODE){
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d112      	bne.n	8004eb4 <gimbal_update_autoaim_rel_angle+0xd4>
		cur_yaw_target = gbal->yaw_cur_abs_angle - delta_yaw; // only yaw use abs values
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	ed93 7a05 	vldr	s14, [r3, #20]
 8004e94:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e9c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004ea6:	ed97 7a06 	vldr	s14, [r7, #24]
 8004eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eae:	edc7 7a08 	vstr	s15, [r7, #32]
 8004eb2:	e011      	b.n	8004ed8 <gimbal_update_autoaim_rel_angle+0xf8>
	}
	else{
		cur_yaw_target = gbal->yaw_cur_rel_angle - delta_yaw;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	ed93 7a06 	vldr	s14, [r3, #24]
 8004eba:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004ecc:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed4:	edc7 7a08 	vstr	s15, [r7, #32]
	}
	/* avoid small noise to spin the yaw */
	if(fabs(delta_yaw)>= 1.0f*DEGREE2RAD)
 8004ed8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004edc:	eef0 7ae7 	vabs.f32	s15, s15
 8004ee0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004f48 <gimbal_update_autoaim_rel_angle+0x168>
 8004ee4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eec:	db02      	blt.n	8004ef4 <gimbal_update_autoaim_rel_angle+0x114>
		gbal->yaw_tar_angle = cur_yaw_target;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	611a      	str	r2, [r3, #16]
	if(fabs(delta_pitch)>= 1.0f*DEGREE2RAD)
 8004ef4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ef8:	eef0 7ae7 	vabs.f32	s15, s15
 8004efc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004f48 <gimbal_update_autoaim_rel_angle+0x168>
 8004f00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f08:	db02      	blt.n	8004f10 <gimbal_update_autoaim_rel_angle+0x130>
		gbal->pitch_tar_angle = cur_pitch_target;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	621a      	str	r2, [r3, #32]
	/* independent mode don't allow set yaw angle */
	if(gbal->gimbal_act_mode == INDPET_MODE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f893 3ad1 	ldrb.w	r3, [r3, #2769]	; 0xad1
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d103      	bne.n	8004f22 <gimbal_update_autoaim_rel_angle+0x142>
		gbal->yaw_tar_angle = 0;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	611a      	str	r2, [r3, #16]
}
 8004f22:	bf00      	nop
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40490fdb 	.word	0x40490fdb
 8004f30:	c0490fdb 	.word	0xc0490fdb
 8004f34:	43340000 	.word	0x43340000
 8004f38:	c3340000 	.word	0xc3340000
 8004f3c:	20005584 	.word	0x20005584
 8004f40:	200054f0 	.word	0x200054f0
 8004f44:	20004740 	.word	0x20004740
 8004f48:	3c8efa39 	.word	0x3c8efa39

08004f4c <gimbal_cmd_exec>:
 * @brief     Execute the cmd set by previous gimbal function. Usually the last called func.
 * @param[in] gbal: main gimbal handler
 * @param[in] mode: DUAL_LOOP_PID_CONTROL/SINGLE_LOOP_PID_CONTROL/GIMBAL_STOP
 * retval 	  None
 */
void gimbal_cmd_exec(Gimbal_t *gbal, uint8_t mode){
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	460b      	mov	r3, r1
 8004f56:	70fb      	strb	r3, [r7, #3]
	if(mode == DUAL_LOOP_PID_CONTROL)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d112      	bne.n	8004f84 <gimbal_cmd_exec+0x38>
	 /* set motor voltage through cascade pid controller */
		  set_motor_can_volt(gimbal.yaw_tar_angle,
 8004f5e:	4b2f      	ldr	r3, [pc, #188]	; (800501c <gimbal_cmd_exec+0xd0>)
 8004f60:	edd3 7a04 	vldr	s15, [r3, #16]
 8004f64:	4b2d      	ldr	r3, [pc, #180]	; (800501c <gimbal_cmd_exec+0xd0>)
 8004f66:	ed93 7a08 	vldr	s14, [r3, #32]
 8004f6a:	78fa      	ldrb	r2, [r7, #3]
 8004f6c:	4b2b      	ldr	r3, [pc, #172]	; (800501c <gimbal_cmd_exec+0xd0>)
 8004f6e:	f893 3ad0 	ldrb.w	r3, [r3, #2768]	; 0xad0
 8004f72:	2100      	movs	r1, #0
 8004f74:	2000      	movs	r0, #0
 8004f76:	eef0 0a47 	vmov.f32	s1, s14
 8004f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f7e:	f002 f8ed 	bl	800715c <set_motor_can_volt>
	}
	else{
		motor_data[pitch_id].tx_data = 0;
		motor_data[yaw_id].tx_data = 0;
	}
}
 8004f82:	e047      	b.n	8005014 <gimbal_cmd_exec+0xc8>
	else if(mode == SINGLE_LOOP_PID_CONTROL){ // only spd control
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d13c      	bne.n	8005004 <gimbal_cmd_exec+0xb8>
		motor_data[pitch_id].tx_data = pid_single_loop_control(gbal->pitch_tar_spd,
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8004f90:	ee07 3a90 	vmov	s15, r3
 8004f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
														motor_data[pitch_id].motor_feedback.rx_rpm);
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <gimbal_cmd_exec+0xd4>)
 8004f9a:	f9b3 336e 	ldrsh.w	r3, [r3, #878]	; 0x36e
		motor_data[pitch_id].tx_data = pid_single_loop_control(gbal->pitch_tar_spd,
 8004f9e:	ee07 3a10 	vmov	s14, r3
 8004fa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004fa6:	eef0 0a47 	vmov.f32	s1, s14
 8004faa:	481e      	ldr	r0, [pc, #120]	; (8005024 <gimbal_cmd_exec+0xd8>)
 8004fac:	eeb0 0a67 	vmov.f32	s0, s15
 8004fb0:	f7fd fe92 	bl	8002cd8 <pid_single_loop_control>
 8004fb4:	eef0 7a40 	vmov.f32	s15, s0
 8004fb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fbc:	ee17 2a90 	vmov	r2, s15
 8004fc0:	4b17      	ldr	r3, [pc, #92]	; (8005020 <gimbal_cmd_exec+0xd4>)
 8004fc2:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
		motor_data[yaw_id].tx_data = pid_single_loop_control(gbal->yaw_tar_spd,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8004fcc:	ee07 3a90 	vmov	s15, r3
 8004fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
														motor_data[yaw_id].motor_feedback.rx_rpm);
 8004fd4:	4b12      	ldr	r3, [pc, #72]	; (8005020 <gimbal_cmd_exec+0xd4>)
 8004fd6:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
		motor_data[yaw_id].tx_data = pid_single_loop_control(gbal->yaw_tar_spd,
 8004fda:	ee07 3a10 	vmov	s14, r3
 8004fde:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004fe2:	eef0 0a47 	vmov.f32	s1, s14
 8004fe6:	4810      	ldr	r0, [pc, #64]	; (8005028 <gimbal_cmd_exec+0xdc>)
 8004fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8004fec:	f7fd fe74 	bl	8002cd8 <pid_single_loop_control>
 8004ff0:	eef0 7a40 	vmov.f32	s15, s0
 8004ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ff8:	ee17 2a90 	vmov	r2, s15
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <gimbal_cmd_exec+0xd4>)
 8004ffe:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
}
 8005002:	e007      	b.n	8005014 <gimbal_cmd_exec+0xc8>
		motor_data[pitch_id].tx_data = 0;
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <gimbal_cmd_exec+0xd4>)
 8005006:	2200      	movs	r2, #0
 8005008:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
		motor_data[yaw_id].tx_data = 0;
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <gimbal_cmd_exec+0xd4>)
 800500e:	2200      	movs	r2, #0
 8005010:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20004740 	.word	0x20004740
 8005020:	20005218 	.word	0x20005218
 8005024:	2000553c 	.word	0x2000553c
 8005028:	200054a8 	.word	0x200054a8

0800502c <Shoot_Task_Func>:
int16_t shoot_counter= 0;
extern TIM_HandleTypeDef htim1;

//FIXME: Once we have referee system, we can limit the motor power
void Shoot_Task_Func(void const * argument)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  shoot_task_init(&shoot);
 8005034:	4849      	ldr	r0, [pc, #292]	; (800515c <Shoot_Task_Func+0x130>)
 8005036:	f000 f89d 	bl	8005174 <shoot_task_init>

  /* set task exec period */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 10ms
 800503a:	2301      	movs	r3, #1
 800503c:	60fb      	str	r3, [r7, #12]

  /* init the task ticks */
  xLastWakeTime = xTaskGetTickCount();
 800503e:	f00b ffa5 	bl	8010f8c <xTaskGetTickCount>
 8005042:	4603      	mov	r3, r0
 8005044:	60bb      	str	r3, [r7, #8]

  for(;;)
  {
	  //FIXME: rc debug needed
//	  if(gimbal.gimbal_mode == DEBUG_MODE)
	  shoot_mode_rc_selection(&shoot, &rc);
 8005046:	4946      	ldr	r1, [pc, #280]	; (8005160 <Shoot_Task_Func+0x134>)
 8005048:	4844      	ldr	r0, [pc, #272]	; (800515c <Shoot_Task_Func+0x130>)
 800504a:	f000 fb6b 	bl	8005724 <shoot_mode_rc_selection>

	  /* select lid status */
	  shoot_lid_status_selection(&shoot, &rc);
 800504e:	4944      	ldr	r1, [pc, #272]	; (8005160 <Shoot_Task_Func+0x134>)
 8005050:	4842      	ldr	r0, [pc, #264]	; (800515c <Shoot_Task_Func+0x130>)
 8005052:	f000 fb9f 	bl	8005794 <shoot_lid_status_selection>

	  /* get feedback of the magazine motor */
	  shoot_mag_get_rel_angle(&shoot);
 8005056:	4841      	ldr	r0, [pc, #260]	; (800515c <Shoot_Task_Func+0x130>)
 8005058:	f000 faba 	bl	80055d0 <shoot_mag_get_rel_angle>

	  /* check the magazine status */
	  shoot_detect_mag_status(&shoot);
 800505c:	483f      	ldr	r0, [pc, #252]	; (800515c <Shoot_Task_Func+0x130>)
 800505e:	f000 fbb1 	bl	80057c4 <shoot_detect_mag_status>

	 /* determine if open lid */
	 if(shoot.lid_status == OPEN){//if sentry, delete this function
 8005062:	4b3e      	ldr	r3, [pc, #248]	; (800515c <Shoot_Task_Func+0x130>)
 8005064:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005068:	2b00      	cmp	r3, #0
 800506a:	d104      	bne.n	8005076 <Shoot_Task_Func+0x4a>
		set_servo_value(SERVO_PWM_OPEN_LID);
 800506c:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8005070:	f000 f9c6 	bl	8005400 <set_servo_value>
 8005074:	e007      	b.n	8005086 <Shoot_Task_Func+0x5a>
	 }
	 else if(shoot.lid_status == CLOSE){
 8005076:	4b39      	ldr	r3, [pc, #228]	; (800515c <Shoot_Task_Func+0x130>)
 8005078:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800507c:	2b01      	cmp	r3, #1
 800507e:	d102      	bne.n	8005086 <Shoot_Task_Func+0x5a>
		set_servo_value(SERVO_PWM_CLOSE_LID);
 8005080:	20b4      	movs	r0, #180	; 0xb4
 8005082:	f000 f9bd 	bl	8005400 <set_servo_value>
	 }

	 /* formal shoot task functions begins */
	 if(shoot.shoot_act_mode == SHOOT_CEASE){
 8005086:	4b35      	ldr	r3, [pc, #212]	; (800515c <Shoot_Task_Func+0x130>)
 8005088:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800508c:	2b03      	cmp	r3, #3
 800508e:	d106      	bne.n	800509e <Shoot_Task_Func+0x72>
		shoot.mag_turns_counter = 0;//clear magazine turns
 8005090:	4b32      	ldr	r3, [pc, #200]	; (800515c <Shoot_Task_Func+0x130>)
 8005092:	2200      	movs	r2, #0
 8005094:	615a      	str	r2, [r3, #20]
		shoot_stop(&shoot);
 8005096:	4831      	ldr	r0, [pc, #196]	; (800515c <Shoot_Task_Func+0x130>)
 8005098:	f000 f9c4 	bl	8005424 <shoot_stop>
 800509c:	e053      	b.n	8005146 <Shoot_Task_Func+0x11a>
//	  		buzzer_stop();
	 }
	 else if(shoot.shoot_act_mode == SHOOT_RESERVE){
 800509e:	4b2f      	ldr	r3, [pc, #188]	; (800515c <Shoot_Task_Func+0x130>)
 80050a0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d128      	bne.n	80050fa <Shoot_Task_Func+0xce>
		  /* reserve the magazine motor for a while */
		  //FIXME: didn't consider if the reserve spin also stuck
		  shoot_reserve_flag = 1;
 80050a8:	4b2e      	ldr	r3, [pc, #184]	; (8005164 <Shoot_Task_Func+0x138>)
 80050aa:	2201      	movs	r2, #1
 80050ac:	701a      	strb	r2, [r3, #0]
		  while(shoot_reserve_counter<20){//20*100ms = 2s
 80050ae:	e019      	b.n	80050e4 <Shoot_Task_Func+0xb8>
			  set_mag_motor_angle(&shoot, shoot.mag_cur_angle - 0.3*PI);
 80050b0:	4b2a      	ldr	r3, [pc, #168]	; (800515c <Shoot_Task_Func+0x130>)
 80050b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80050b6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8005168 <Shoot_Task_Func+0x13c>
 80050ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050be:	eeb0 0a67 	vmov.f32	s0, s15
 80050c2:	4826      	ldr	r0, [pc, #152]	; (800515c <Shoot_Task_Func+0x130>)
 80050c4:	f000 f970 	bl	80053a8 <set_mag_motor_angle>
#ifndef USE_CAN_FRIC
			  set_fric_motor_speed(&shoot, LEVEL_ONE_PWM);
#else
			  set_fric_motor_current(&shoot, LEVEL_ONE_CAN_SPD);
 80050c8:	f241 3188 	movw	r1, #5000	; 0x1388
 80050cc:	4823      	ldr	r0, [pc, #140]	; (800515c <Shoot_Task_Func+0x130>)
 80050ce:	f000 f986 	bl	80053de <set_fric_motor_current>
#endif
			  shoot_execute(&shoot);
 80050d2:	4822      	ldr	r0, [pc, #136]	; (800515c <Shoot_Task_Func+0x130>)
 80050d4:	f000 fa06 	bl	80054e4 <shoot_execute>
			  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80050d8:	f107 0308 	add.w	r3, r7, #8
 80050dc:	68f9      	ldr	r1, [r7, #12]
 80050de:	4618      	mov	r0, r3
 80050e0:	f00b fd98 	bl	8010c14 <vTaskDelayUntil>
		  while(shoot_reserve_counter<20){//20*100ms = 2s
 80050e4:	4b21      	ldr	r3, [pc, #132]	; (800516c <Shoot_Task_Func+0x140>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b13      	cmp	r3, #19
 80050ea:	d9e1      	bls.n	80050b0 <Shoot_Task_Func+0x84>
		  }
		  /* reset timer13 flag and counter */
		  shoot_reserve_flag = 0;
 80050ec:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <Shoot_Task_Func+0x138>)
 80050ee:	2200      	movs	r2, #0
 80050f0:	701a      	strb	r2, [r3, #0]
		  shoot_reserve_counter = 0;
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <Shoot_Task_Func+0x140>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e025      	b.n	8005146 <Shoot_Task_Func+0x11a>
	  }
	  else if(shoot.shoot_act_mode == SHOOT_ONCE){
 80050fa:	4b18      	ldr	r3, [pc, #96]	; (800515c <Shoot_Task_Func+0x130>)
 80050fc:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10a      	bne.n	800511a <Shoot_Task_Func+0xee>
		 /* need referee system to determine shooting spd */
		  set_mag_motor_angle(&shoot, 0.3*PI);
 8005104:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8005168 <Shoot_Task_Func+0x13c>
 8005108:	4814      	ldr	r0, [pc, #80]	; (800515c <Shoot_Task_Func+0x130>)
 800510a:	f000 f94d 	bl	80053a8 <set_mag_motor_angle>
#ifndef USE_CAN_FRIC
		  set_fric_motor_speed(&shoot, LEVEL_ONE_PWM);
#else
		  set_fric_motor_current(&shoot, LEVEL_ONE_CAN_SPD);
 800510e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005112:	4812      	ldr	r0, [pc, #72]	; (800515c <Shoot_Task_Func+0x130>)
 8005114:	f000 f963 	bl	80053de <set_fric_motor_current>
 8005118:	e015      	b.n	8005146 <Shoot_Task_Func+0x11a>
#endif
	  }
	  else if(shoot.shoot_act_mode == SHOOT_CONT){
 800511a:	4b10      	ldr	r3, [pc, #64]	; (800515c <Shoot_Task_Func+0x130>)
 800511c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005120:	2b01      	cmp	r3, #1
 8005122:	d110      	bne.n	8005146 <Shoot_Task_Func+0x11a>
			  /* auto aimming engage */
			  /* Well I guess we don't need this any more since we should control the shooting
			   * at any time during competition due to shooting heat */
		  }
		  /* FIXME need referee system to determine shooting spd */
		  set_mag_motor_angle(&shoot, shoot.mag_cur_angle + SHOOT_CONT_MAG_SPEED);//keep spinning
 8005124:	4b0d      	ldr	r3, [pc, #52]	; (800515c <Shoot_Task_Func+0x130>)
 8005126:	edd3 7a02 	vldr	s15, [r3, #8]
 800512a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005170 <Shoot_Task_Func+0x144>
 800512e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005132:	eeb0 0a67 	vmov.f32	s0, s15
 8005136:	4809      	ldr	r0, [pc, #36]	; (800515c <Shoot_Task_Func+0x130>)
 8005138:	f000 f936 	bl	80053a8 <set_mag_motor_angle>
#ifndef USE_CAN_FRIC
		  set_fric_motor_speed(&shoot, LEVEL_ONE_PWM);
#else
		  set_fric_motor_current(&shoot, LEVEL_ONE_CAN_SPD);
 800513c:	f241 3188 	movw	r1, #5000	; 0x1388
 8005140:	4806      	ldr	r0, [pc, #24]	; (800515c <Shoot_Task_Func+0x130>)
 8005142:	f000 f94c 	bl	80053de <set_fric_motor_current>
#endif
	  }
	  shoot_execute(&shoot);
 8005146:	4805      	ldr	r0, [pc, #20]	; (800515c <Shoot_Task_Func+0x130>)
 8005148:	f000 f9cc 	bl	80054e4 <shoot_execute>

	  /* delay until wake time */
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800514c:	f107 0308 	add.w	r3, r7, #8
 8005150:	68f9      	ldr	r1, [r7, #12]
 8005152:	4618      	mov	r0, r3
 8005154:	f00b fd5e 	bl	8010c14 <vTaskDelayUntil>
	  shoot_mode_rc_selection(&shoot, &rc);
 8005158:	e775      	b.n	8005046 <Shoot_Task_Func+0x1a>
 800515a:	bf00      	nop
 800515c:	2000d648 	.word	0x2000d648
 8005160:	2000d6c0 	.word	0x2000d6c0
 8005164:	20000780 	.word	0x20000780
 8005168:	3f71463a 	.word	0x3f71463a
 800516c:	20000781 	.word	0x20000781
 8005170:	40490fdb 	.word	0x40490fdb

08005174 <shoot_task_init>:
/**
  * @brief     shoot task initialization
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_task_init(Shoot_t *sht){
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
	/* init pid of magazine motor */
	// Note this is only for 2006, the pid params need to fine tune with the actual payload
	motor_init(mag_2006_id, max_out_angle_mag_2006,  max_I_out_angle_mag_2006, max_err_angle_mag_2006, //angular loop
 800517c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8005180:	eddf 4a27 	vldr	s9, [pc, #156]	; 8005220 <shoot_task_init+0xac>
 8005184:	ed9f 4a27 	vldr	s8, [pc, #156]	; 8005224 <shoot_task_init+0xb0>
 8005188:	eef2 3a0e 	vmov.f32	s7, #46	; 0x41700000  15.0
 800518c:	ed9f 3a26 	vldr	s6, [pc, #152]	; 8005228 <shoot_task_init+0xb4>
 8005190:	eddf 2a26 	vldr	s5, [pc, #152]	; 800522c <shoot_task_init+0xb8>
 8005194:	f242 720f 	movw	r2, #9999	; 0x270f
 8005198:	ed9f 2a21 	vldr	s4, [pc, #132]	; 8005220 <shoot_task_init+0xac>
 800519c:	eddf 1a20 	vldr	s3, [pc, #128]	; 8005220 <shoot_task_init+0xac>
 80051a0:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8005230 <shoot_task_init+0xbc>
 80051a4:	eddf 0a23 	vldr	s1, [pc, #140]	; 8005234 <shoot_task_init+0xc0>
 80051a8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8005220 <shoot_task_init+0xac>
 80051ac:	f242 7110 	movw	r1, #10000	; 0x2710
 80051b0:	2006      	movs	r0, #6
 80051b2:	f001 ff75 	bl	80070a0 <motor_init>
//							max_out_spd_mag_3508, max_I_out_spd_mag_3508, max_err_spd_mag_3508, //spd loop
//								kp_spd_mag_3508, ki_spd_mag_3508, kd_spd_mag_3508,
//							kf_spd_mag_3508);//spd ff gain

	/* init friction motors */
	shoot_firc_init(&shoot);
 80051b6:	4820      	ldr	r0, [pc, #128]	; (8005238 <shoot_task_init+0xc4>)
 80051b8:	f000 f846 	bl	8005248 <shoot_firc_init>
#ifndef USE_CAN_FRIC
	ramp_init(&shoot.fric_left_ramp, (LEVEL_ONE_PWM-MIN_PWM_ON_TIME));
	ramp_init(&shoot.fric_right_ramp, (LEVEL_ONE_PWM-MIN_PWM_ON_TIME));
#else
	ramp_init(&shoot.fric_left_ramp, FRIC_CAN_RAMP_DELAY);
 80051bc:	211e      	movs	r1, #30
 80051be:	481f      	ldr	r0, [pc, #124]	; (800523c <shoot_task_init+0xc8>)
 80051c0:	f7fd fdc5 	bl	8002d4e <ramp_init>
	ramp_init(&shoot.fric_right_ramp, FRIC_CAN_RAMP_DELAY);
 80051c4:	211e      	movs	r1, #30
 80051c6:	481e      	ldr	r0, [pc, #120]	; (8005240 <shoot_task_init+0xcc>)
 80051c8:	f7fd fdc1 	bl	8002d4e <ramp_init>
#endif

	/* init servo motor */
	shoot_servo_init();
 80051cc:	f000 f8be 	bl	800534c <shoot_servo_init>

	/* init parameters */
	shoot_params_init(sht);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f887 	bl	80052e4 <shoot_params_init>

	/* reset feedback value */
	memset(&(sht->mag_fb), 0, sizeof(Motor_Feedback_Data_t));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3332      	adds	r3, #50	; 0x32
 80051da:	2208      	movs	r2, #8
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f00c feaa 	bl	8011f38 <memset>
	memset(&(sht->left_fric_fb), 0, sizeof(Motor_Feedback_Data_t));
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	333a      	adds	r3, #58	; 0x3a
 80051e8:	2208      	movs	r2, #8
 80051ea:	2100      	movs	r1, #0
 80051ec:	4618      	mov	r0, r3
 80051ee:	f00c fea3 	bl	8011f38 <memset>
	memset(&(sht->right_fric_fb), 0, sizeof(Motor_Feedback_Data_t));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	3342      	adds	r3, #66	; 0x42
 80051f6:	2208      	movs	r2, #8
 80051f8:	2100      	movs	r1, #0
 80051fa:	4618      	mov	r0, r3
 80051fc:	f00c fe9c 	bl	8011f38 <memset>

	/* set shoot mode */
	set_shoot_mode(sht, SHOOT_CEASE);
 8005200:	2103      	movs	r1, #3
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8b0 	bl	8005368 <set_shoot_mode>
	set_lid_status(sht, CLOSE);
 8005208:	2101      	movs	r1, #1
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8bc 	bl	8005388 <set_lid_status>

	/* set comm packs init target number */
	vision_message.message.vision.target_num = 0;
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <shoot_task_init+0xd0>)
 8005212:	2200      	movs	r2, #0
 8005214:	615a      	str	r2, [r3, #20]
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	00000000 	.word	0x00000000
 8005224:	3c23d70a 	.word	0x3c23d70a
 8005228:	459c4000 	.word	0x459c4000
 800522c:	43fa0000 	.word	0x43fa0000
 8005230:	44610000 	.word	0x44610000
 8005234:	426ec2d4 	.word	0x426ec2d4
 8005238:	2000d648 	.word	0x2000d648
 800523c:	2000d694 	.word	0x2000d694
 8005240:	2000d6a8 	.word	0x2000d6a8
 8005244:	2000023c 	.word	0x2000023c

08005248 <shoot_firc_init>:
/**
  * @brief     friction wheel motor init, depends on motors type
  * @param[in] None
  * @retval    None
  */
void shoot_firc_init(Shoot_t *sht){
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MIN_PWM_ON_TIME);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, MIN_PWM_ON_TIME);
	osDelay(3000);
#else
	/* the pid params need to fine tune with the actual payload */
	motor_init(fric_left_id, max_out_spd_fric,  max_I_out_spd_fric, max_err_spd_fric, kp_spd_fric, ki_spd_fric, kd_spd_fric,
 8005250:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80052d0 <shoot_firc_init+0x88>
 8005254:	eddf 4a1e 	vldr	s9, [pc, #120]	; 80052d0 <shoot_firc_init+0x88>
 8005258:	ed9f 4a1d 	vldr	s8, [pc, #116]	; 80052d0 <shoot_firc_init+0x88>
 800525c:	eddf 3a1c 	vldr	s7, [pc, #112]	; 80052d0 <shoot_firc_init+0x88>
 8005260:	ed9f 3a1b 	vldr	s6, [pc, #108]	; 80052d0 <shoot_firc_init+0x88>
 8005264:	eddf 2a1a 	vldr	s5, [pc, #104]	; 80052d0 <shoot_firc_init+0x88>
 8005268:	2200      	movs	r2, #0
 800526a:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 80052d4 <shoot_firc_init+0x8c>
 800526e:	eddf 1a1a 	vldr	s3, [pc, #104]	; 80052d8 <shoot_firc_init+0x90>
 8005272:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 8005276:	eddf 0a19 	vldr	s1, [pc, #100]	; 80052dc <shoot_firc_init+0x94>
 800527a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80052e0 <shoot_firc_init+0x98>
 800527e:	f643 2198 	movw	r1, #15000	; 0x3a98
 8005282:	2000      	movs	r0, #0
 8005284:	f001 ff0c 	bl	80070a0 <motor_init>
							 0, 0, 0, 0, 0, 0,//no second loop
							 0);//spd ff gain
	motor_init(fric_right_id, max_out_spd_fric,  max_I_out_spd_fric, max_err_spd_fric, kp_spd_fric, ki_spd_fric, kd_spd_fric,
 8005288:	ed9f 5a11 	vldr	s10, [pc, #68]	; 80052d0 <shoot_firc_init+0x88>
 800528c:	eddf 4a10 	vldr	s9, [pc, #64]	; 80052d0 <shoot_firc_init+0x88>
 8005290:	ed9f 4a0f 	vldr	s8, [pc, #60]	; 80052d0 <shoot_firc_init+0x88>
 8005294:	eddf 3a0e 	vldr	s7, [pc, #56]	; 80052d0 <shoot_firc_init+0x88>
 8005298:	ed9f 3a0d 	vldr	s6, [pc, #52]	; 80052d0 <shoot_firc_init+0x88>
 800529c:	eddf 2a0c 	vldr	s5, [pc, #48]	; 80052d0 <shoot_firc_init+0x88>
 80052a0:	2200      	movs	r2, #0
 80052a2:	ed9f 2a0c 	vldr	s4, [pc, #48]	; 80052d4 <shoot_firc_init+0x8c>
 80052a6:	eddf 1a0c 	vldr	s3, [pc, #48]	; 80052d8 <shoot_firc_init+0x90>
 80052aa:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
 80052ae:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80052dc <shoot_firc_init+0x94>
 80052b2:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80052e0 <shoot_firc_init+0x98>
 80052b6:	f643 2198 	movw	r1, #15000	; 0x3a98
 80052ba:	2001      	movs	r0, #1
 80052bc:	f001 fef0 	bl	80070a0 <motor_init>
							 0, 0, 0, 0, 0, 0,//no second loop
							 0);//spd ff gain
	set_fric_motor_current(sht, 0);
 80052c0:	2100      	movs	r1, #0
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f88b 	bl	80053de <set_fric_motor_current>
#endif
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	00000000 	.word	0x00000000
 80052d4:	3dcccccd 	.word	0x3dcccccd
 80052d8:	3e99999a 	.word	0x3e99999a
 80052dc:	459c4000 	.word	0x459c4000
 80052e0:	43fa0000 	.word	0x43fa0000

080052e4 <shoot_params_init>:

void shoot_params_init(Shoot_t *sht){
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	sht->mag_cur_angle = 0;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	609a      	str	r2, [r3, #8]
	sht->mag_tar_angle = 0;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f04f 0200 	mov.w	r2, #0
 80052fa:	605a      	str	r2, [r3, #4]
	sht->mag_pre_ecd_angle = 0;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f04f 0200 	mov.w	r2, #0
 8005302:	60da      	str	r2, [r3, #12]
	sht->mag_tar_spd   = 0;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
#ifndef USE_CAN_FRIC
	sht->fric_tar_spd = MIN_PWM_ON_TIME;
#else
	sht->fric_can_tar_spd = 0;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	sht->mag_turns_counter = 0;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	615a      	str	r2, [r3, #20]
	sht->mag_center_offset = 0;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	821a      	strh	r2, [r3, #16]
	sht->prev_angle_reset = 1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	769a      	strb	r2, [r3, #26]
	sht->fric_engage_flag = 0;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sht->fric_left_cur_spd = 0;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	841a      	strh	r2, [r3, #32]
	sht->fric_right_cur_spd = 0;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	845a      	strh	r2, [r3, #34]	; 0x22
	sht->fric_counter = 0;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <shoot_servo_init>:

void shoot_servo_init(void){
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
	/* Start PWM */
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8005350:	2100      	movs	r1, #0
 8005352:	4804      	ldr	r0, [pc, #16]	; (8005364 <shoot_servo_init+0x18>)
 8005354:	f009 f9e8 	bl	800e728 <HAL_TIM_PWM_Start>

	/* adjust to zero degree */
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, SERVO_PWM_CLOSE_LID);
 8005358:	4b02      	ldr	r3, [pc, #8]	; (8005364 <shoot_servo_init+0x18>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	22b4      	movs	r2, #180	; 0xb4
 800535e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005360:	bf00      	nop
 8005362:	bd80      	pop	{r7, pc}
 8005364:	2000dc20 	.word	0x2000dc20

08005368 <set_shoot_mode>:
  * @brief     set the shoot action mode
  * @param[in] main struct of shoot task
  * @param[in] mode: shoot act mode
  * @retval    None
  */
void set_shoot_mode(Shoot_t *sht, ShootActMode_t mode){
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
	sht->shoot_act_mode = mode;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	78fa      	ldrb	r2, [r7, #3]
 8005378:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <set_lid_status>:

void set_lid_status(Shoot_t *sht, ShootLidStatus_t status){
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	460b      	mov	r3, r1
 8005392:	70fb      	strb	r3, [r7, #3]
	sht->lid_status = status;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	78fa      	ldrb	r2, [r7, #3]
 8005398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <set_mag_motor_angle>:
void set_mag_motor_speed(Shoot_t *sht, float spd){
	sht->mag_tar_spd = spd;
}


void set_mag_motor_angle(Shoot_t *sht, float tar_angle){//-pi, pi
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	ed87 0a00 	vstr	s0, [r7]
	if(sht->shoot_act_mode == SHOOT_ONCE){
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d103      	bne.n	80053c6 <set_mag_motor_angle+0x1e>
		/* for once, the input target is a rel angle of current shaft */
		sht->mag_tar_angle = tar_angle;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	683a      	ldr	r2, [r7, #0]
 80053c2:	605a      	str	r2, [r3, #4]
	else{
		/* for burst shooting, just set the input target */
		sht->mag_tar_angle = tar_angle; // (-pi, pi)
		sht->mag_turns_counter = 0;
	}
}
 80053c4:	e005      	b.n	80053d2 <set_mag_motor_angle+0x2a>
		sht->mag_tar_angle = tar_angle; // (-pi, pi)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	605a      	str	r2, [r3, #4]
		sht->mag_turns_counter = 0;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	615a      	str	r2, [r3, #20]
}
 80053d2:	bf00      	nop
 80053d4:	370c      	adds	r7, #12
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <set_fric_motor_current>:

void set_fric_motor_speed(Shoot_t *sht, int16_t spd){
	sht->fric_tar_spd = spd;
}

void set_fric_motor_current(Shoot_t *sht, int16_t spd){
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	807b      	strh	r3, [r7, #2]
	sht->fric_can_tar_spd = spd;
 80053ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
	...

08005400 <set_servo_value>:

void set_servo_value(uint16_t pwm_value){
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwm_value);
 800540a:	4b05      	ldr	r3, [pc, #20]	; (8005420 <set_servo_value+0x20>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	88fa      	ldrh	r2, [r7, #6]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	2000dab8 	.word	0x2000dab8

08005424 <shoot_stop>:
/**
  * @brief     shoot cease fire
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_stop(Shoot_t *sht){
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

	/* stop magazine motor first */
	set_mag_motor_angle(sht, 0);
 800542c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005474 <shoot_stop+0x50>
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff ffb9 	bl	80053a8 <set_mag_motor_angle>
	sht->mag_cur_angle = 0;//ensure the err is 0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	609a      	str	r2, [r3, #8]
	sht->fric_right_ramp.count = 0;
	sht->fric_engage_flag = 0;
	sht->fric_left_cur_spd = 0;
	sht->fric_right_cur_spd = 0;
#else
	set_fric_motor_current(sht, 0);
 800543e:	2100      	movs	r1, #0
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ffcc 	bl	80053de <set_fric_motor_current>
	sht->fric_engage_flag = 0;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sht->fric_left_ramp.count = 0;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	64da      	str	r2, [r3, #76]	; 0x4c
	sht->fric_right_ramp.count = 0;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	661a      	str	r2, [r3, #96]	; 0x60
	sht->fric_left_cur_spd = 0;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	841a      	strh	r2, [r3, #32]
	sht->fric_right_cur_spd = 0;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	845a      	strh	r2, [r3, #34]	; 0x22
	sht->fric_counter = 0;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
}
 800546c:	bf00      	nop
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	00000000 	.word	0x00000000

08005478 <shoot_fric_can_engagement>:
  * @brief     friction engage functions, for can-based motor
  * @param[in] shoot main struct
  * @param[in] target can torque current -> rpm / speed
  * @retval    None
  */
void shoot_fric_can_engagement(Shoot_t *sht, uint16_t target_can){
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af02      	add	r7, sp, #8
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	807b      	strh	r3, [r7, #2]
	/* obtain motor feedback for determining the current rpm */
	shoot_fric_get_feedback(sht);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f877 	bl	8005578 <shoot_fric_get_feedback>
	sht->fric_left_cur_spd = sht->left_fric_fb.rx_rpm;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8005490:	b29a      	uxth	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	841a      	strh	r2, [r3, #32]
	sht->fric_right_cur_spd = sht->right_fric_fb.rx_rpm;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800549c:	b29a      	uxth	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	845a      	strh	r2, [r3, #34]	; 0x22

	if(sht->fric_engage_flag == 0){
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d108      	bne.n	80054be <shoot_fric_can_engagement+0x46>
		/* engage fric wheel using ramp funcion */
//		  sht->fric_can_tar_spd  = ramp_calculate(&shoot.fric_left_ramp)  * target_can;
//		  sht->fric_can_tar_spd  = ramp_calculate(&shoot.fric_right_ramp) * target_can;
		/* engage fric wheel without ramp funcion */
		  sht->fric_can_tar_spd = target_can;
 80054ac:	887a      	ldrh	r2, [r7, #2]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24
		  sht->fric_counter++; // delay counter, when counter reaches given value then engage mag
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80054bc:	e002      	b.n	80054c4 <shoot_fric_can_engagement+0x4c>
		  	  	  	  	  	   // delay time = fric_counter * ABStaskdelay
		}
	else{
		sht->fric_can_tar_spd = target_can;
 80054be:	887a      	ldrh	r2, [r7, #2]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* update send value of CAN */
	set_motor_can_current(-sht->fric_can_tar_spd, // left  fric
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	4258      	negs	r0, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054ce:	2300      	movs	r3, #0
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	2300      	movs	r3, #0
 80054d4:	2200      	movs	r2, #0
 80054d6:	f001 ff75 	bl	80073c4 <set_motor_can_current>
						  sht->fric_can_tar_spd,// right fric
						  0,
						  0,
						  SINGLE_LOOP_PID_CONTROL);

}
 80054da:	bf00      	nop
 80054dc:	3708      	adds	r7, #8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <shoot_execute>:
  * @brief     shoot main execute function
  * 			call this to engage fire process
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_execute(Shoot_t *sht){
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	6078      	str	r0, [r7, #4]
	}
    else
    	shoot_fric_pwm_engagement(sht, sht->fric_tar_spd);
#else
	/* try single loop first, not considering single shoot using angle loop */
	if(sht->shoot_act_mode == SHOOT_CEASE || sht->shoot_act_mode == SHOOT_RESERVE){
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d004      	beq.n	8005500 <shoot_execute+0x1c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d10b      	bne.n	8005518 <shoot_execute+0x34>
		set_motor_can_current(sht->fric_can_tar_spd, // left  fric
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a58      	ldr	r0, [r3, #36]	; 0x24
							  -sht->fric_can_tar_spd,// right fric
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		set_motor_can_current(sht->fric_can_tar_spd, // left  fric
 8005508:	4259      	negs	r1, r3
 800550a:	2300      	movs	r3, #0
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	2300      	movs	r3, #0
 8005510:	2200      	movs	r2, #0
 8005512:	f001 ff57 	bl	80073c4 <set_motor_can_current>
 8005516:	e013      	b.n	8005540 <shoot_execute+0x5c>
							  0,
							  0,
							  SINGLE_LOOP_PID_CONTROL);
	}else{
		shoot_fric_can_engagement(sht, sht->fric_can_tar_spd);//
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	b29b      	uxth	r3, r3
 800551e:	4619      	mov	r1, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ffa9 	bl	8005478 <shoot_fric_can_engagement>
		if(sht->fric_engage_flag == 0 && sht->fric_counter >=FRIC_CAN_RAMP_DELAY){
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d107      	bne.n	8005540 <shoot_execute+0x5c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	2b1d      	cmp	r3, #29
 8005536:	d903      	bls.n	8005540 <shoot_execute+0x5c>
//			osDelay(500);
			sht->fric_engage_flag = 1;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
#endif
	/* activate magazine later */
	if(sht->shoot_act_mode == SHOOT_CEASE || sht->shoot_act_mode == SHOOT_RESERVE)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005546:	2b03      	cmp	r3, #3
 8005548:	d004      	beq.n	8005554 <shoot_execute+0x70>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8005550:	2b02      	cmp	r3, #2
 8005552:	d103      	bne.n	800555c <shoot_execute+0x78>
		shoot_mag_dual_loop_control(&shoot);
 8005554:	4807      	ldr	r0, [pc, #28]	; (8005574 <shoot_execute+0x90>)
 8005556:	f000 f8b7 	bl	80056c8 <shoot_mag_dual_loop_control>
	else if(sht->fric_engage_flag == 1) // frictions are engaged
		shoot_mag_dual_loop_control(&shoot);
}
 800555a:	e007      	b.n	800556c <shoot_execute+0x88>
	else if(sht->fric_engage_flag == 1) // frictions are engaged
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005562:	2b01      	cmp	r3, #1
 8005564:	d102      	bne.n	800556c <shoot_execute+0x88>
		shoot_mag_dual_loop_control(&shoot);
 8005566:	4803      	ldr	r0, [pc, #12]	; (8005574 <shoot_execute+0x90>)
 8005568:	f000 f8ae 	bl	80056c8 <shoot_mag_dual_loop_control>
}
 800556c:	bf00      	nop
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	2000d648 	.word	0x2000d648

08005578 <shoot_fric_get_feedback>:
/**
  * @brief     shoot mode selection based on
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_fric_get_feedback(Shoot_t *sht){
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	memcpy(&(sht->left_fric_fb), &motor_data[fric_left_id].motor_feedback, sizeof(Motor_Feedback_Data_t));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	333a      	adds	r3, #58	; 0x3a
 8005584:	2208      	movs	r2, #8
 8005586:	4907      	ldr	r1, [pc, #28]	; (80055a4 <shoot_fric_get_feedback+0x2c>)
 8005588:	4618      	mov	r0, r3
 800558a:	f00c fcc7 	bl	8011f1c <memcpy>
	memcpy(&(sht->right_fric_fb), &motor_data[fric_right_id].motor_feedback, sizeof(Motor_Feedback_Data_t));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	3342      	adds	r3, #66	; 0x42
 8005592:	2208      	movs	r2, #8
 8005594:	4904      	ldr	r1, [pc, #16]	; (80055a8 <shoot_fric_get_feedback+0x30>)
 8005596:	4618      	mov	r0, r3
 8005598:	f00c fcc0 	bl	8011f1c <memcpy>

}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	200052a0 	.word	0x200052a0
 80055a8:	20005334 	.word	0x20005334

080055ac <shoot_mag_get_feedback>:
/**
  * @brief     shoot mode selection based on
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_mag_get_feedback(Shoot_t *sht){
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
	memcpy(&(sht->mag_fb), &motor_data[mag_2006_id].motor_feedback, sizeof(Motor_Feedback_Data_t));
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3332      	adds	r3, #50	; 0x32
 80055b8:	2208      	movs	r2, #8
 80055ba:	4904      	ldr	r1, [pc, #16]	; (80055cc <shoot_mag_get_feedback+0x20>)
 80055bc:	4618      	mov	r0, r3
 80055be:	f00c fcad 	bl	8011f1c <memcpy>
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20005618 	.word	0x20005618

080055d0 <shoot_mag_get_rel_angle>:

void shoot_mag_get_rel_angle(Shoot_t *sht){
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* get latest feedback of mag motor */
	shoot_mag_get_feedback(sht);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7ff ffe7 	bl	80055ac <shoot_mag_get_feedback>
	/* update truns */
	shoot_mag_update_turns(sht, sht->mag_fb.rx_angle, sht->mag_pre_ecd_angle);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f9b3 1032 	ldrsh.w	r1, [r3, #50]	; 0x32
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80055ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055ee:	ee17 3a90 	vmov	r3, s15
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f83c 	bl	8005674 <shoot_mag_update_turns>
	/* calca current mag angle, range is roughly (0, 2pi)*/
	sht->mag_cur_angle = (sht->mag_turns_counter*2*PI / SHOOT_MAG_GEAR_RATIO) + // the angle the turns has been done
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800560a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800566c <shoot_mag_get_rel_angle+0x9c>
 800560e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005612:	eef3 6a03 	vmov.f32	s13, #51	; 0x41980000  19.0
 8005616:	ee87 7aa6 	vdiv.f32	s14, s15, s13
						 (sht->mag_fb.rx_angle/8192*(2*PI)/SHOOT_MAG_GEAR_RATIO);// the current rx angle
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005620:	2b00      	cmp	r3, #0
 8005622:	da02      	bge.n	800562a <shoot_mag_get_rel_angle+0x5a>
 8005624:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8005628:	331f      	adds	r3, #31
 800562a:	135b      	asrs	r3, r3, #13
 800562c:	b21b      	sxth	r3, r3
 800562e:	ee07 3a90 	vmov	s15, r3
 8005632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005636:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005670 <shoot_mag_get_rel_angle+0xa0>
 800563a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800563e:	eeb3 6a03 	vmov.f32	s12, #51	; 0x41980000  19.0
 8005642:	eec6 7a86 	vdiv.f32	s15, s13, s12
	sht->mag_cur_angle = (sht->mag_turns_counter*2*PI / SHOOT_MAG_GEAR_RATIO) + // the angle the turns has been done
 8005646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	edc3 7a02 	vstr	s15, [r3, #8]
	/* mapped from encoder value to (-pi, pi) */
	sht->mag_pre_ecd_angle = sht->mag_fb.rx_angle;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	edc3 7a03 	vstr	s15, [r3, #12]
	/* update turns */
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40490fdb 	.word	0x40490fdb
 8005670:	40c90fdb 	.word	0x40c90fdb

08005674 <shoot_mag_update_turns>:
 * @brief     Get latest turns of magazine motor from previous ecd angle.
 * @param[in] raw_ecd: abs yaw ecd angle from feedback
 * @param[in] prev_ecd: the center offset of ecd mode
 * */
int16_t shoot_mag_update_turns(Shoot_t *sht, int16_t raw_ecd, int16_t prev_ecd)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	807b      	strh	r3, [r7, #2]
 8005680:	4613      	mov	r3, r2
 8005682:	803b      	strh	r3, [r7, #0]
	//FiXME: this 4096 value actually depends on sampling time of the fedback
	//		 we now assume that the motor would not spin beyond half a cycle between
	//	     two samples.(depends on the rpm and task ticks, use uart to output)
    if (raw_ecd - prev_ecd < -4096)//fine tuning here
 8005684:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005688:	f9b7 3000 	ldrsh.w	r3, [r7]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8005692:	da05      	bge.n	80056a0 <shoot_mag_update_turns+0x2c>
    	sht->mag_turns_counter++;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	695b      	ldr	r3, [r3, #20]
 8005698:	1c5a      	adds	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	615a      	str	r2, [r3, #20]
 800569e:	e00c      	b.n	80056ba <shoot_mag_update_turns+0x46>
    else if (raw_ecd - prev_ecd > 4096)
 80056a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ae:	dd04      	ble.n	80056ba <shoot_mag_update_turns+0x46>
        sht->mag_turns_counter--;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	1e5a      	subs	r2, r3, #1
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	615a      	str	r2, [r3, #20]
    return 0;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <shoot_mag_dual_loop_control>:
/*
 * @brief     angle/spd dual control of magazine motor
 * @param[in] main shoot struct
 * @param[in] prev_ecd: the center offset of ecd mode
 * */
void shoot_mag_dual_loop_control(Shoot_t *sht){
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	/* This is only for 2006 motor, used for infantry and sentry */
	motor_data[mag_2006_id].tx_data = pid_dual_loop_control(sht->mag_tar_angle,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	ed93 7a02 	vldr	s14, [r3, #8]
												 &(motor_data[mag_2006_id].motor_info.f_pid),
												 &(motor_data[mag_2006_id].motor_info.s_pid),
												 sht->mag_cur_angle,
												 sht->mag_fb.rx_rpm);//pid without ff
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
	motor_data[mag_2006_id].tx_data = pid_dual_loop_control(sht->mag_tar_angle,
 80056e2:	ee06 3a90 	vmov	s13, r3
 80056e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80056ea:	eeb0 1a66 	vmov.f32	s2, s13
 80056ee:	eef0 0a47 	vmov.f32	s1, s14
 80056f2:	4909      	ldr	r1, [pc, #36]	; (8005718 <shoot_mag_dual_loop_control+0x50>)
 80056f4:	4809      	ldr	r0, [pc, #36]	; (800571c <shoot_mag_dual_loop_control+0x54>)
 80056f6:	eeb0 0a67 	vmov.f32	s0, s15
 80056fa:	f7fd fb03 	bl	8002d04 <pid_dual_loop_control>
 80056fe:	eef0 7a40 	vmov.f32	s15, s0
 8005702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005706:	ee17 2a90 	vmov	r2, s15
 800570a:	4b05      	ldr	r3, [pc, #20]	; (8005720 <shoot_mag_dual_loop_control+0x58>)
 800570c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
//	motor_data[mag_3508_id].tx_data = pid_dual_loop_control(sht->mag_tar_angle,
//												 &(motor_data[mag_3508_id].motor_info.f_pid),
//												 &(motor_data[mag_3508_id].motor_info.s_pid),
//												 sht->mag_cur_angle,
//												 sht->mag_fb.rx_rpm);
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	200055d0 	.word	0x200055d0
 800571c:	20005594 	.word	0x20005594
 8005720:	20005218 	.word	0x20005218

08005724 <shoot_mode_rc_selection>:
  * @brief     shoot mode selection based on input rc switch
  * @param[in] shoot main struct
  * @param[in] rc main struct
  * @retval    None
  */
static void shoot_mode_rc_selection(Shoot_t *sht, RemoteControl_t *rc){
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	ShootActMode_t mode;
	if(rc->control_mode == CTRLER_MODE){
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005734:	2b00      	cmp	r3, #0
 8005736:	d112      	bne.n	800575e <shoot_mode_rc_selection+0x3a>
		/* always judge cease fire first */
		if (rc->ctrl.s2 == SW_UP && rc->ctrl.s1 != SW_MID) {
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	7a5b      	ldrb	r3, [r3, #9]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d106      	bne.n	800574e <shoot_mode_rc_selection+0x2a>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	7a1b      	ldrb	r3, [r3, #8]
 8005744:	2b03      	cmp	r3, #3
 8005746:	d002      	beq.n	800574e <shoot_mode_rc_selection+0x2a>
			mode = SHOOT_CONT;
 8005748:	2301      	movs	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	e001      	b.n	8005752 <shoot_mode_rc_selection+0x2e>
		} else {
			mode = SHOOT_CEASE;
 800574e:	2303      	movs	r3, #3
 8005750:	73fb      	strb	r3, [r7, #15]
		}
		set_shoot_mode(sht, mode);
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f7ff fe06 	bl	8005368 <set_shoot_mode>
			}

		}
		set_shoot_mode(sht, mode);
	}
}
 800575c:	e016      	b.n	800578c <shoot_mode_rc_selection+0x68>
	else if(rc->control_mode == PC_MODE){
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005764:	2b01      	cmp	r3, #1
 8005766:	d111      	bne.n	800578c <shoot_mode_rc_selection+0x68>
		if(rc->pc.mouse.left_click.status == RELEASED){
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	7d1b      	ldrb	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <shoot_mode_rc_selection+0x52>
			mode = SHOOT_CEASE;
 8005770:	2303      	movs	r3, #3
 8005772:	73fb      	strb	r3, [r7, #15]
 8005774:	e005      	b.n	8005782 <shoot_mode_rc_selection+0x5e>
			if(rc->pc.mouse.left_click.status == PRESSED){
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	7d1b      	ldrb	r3, [r3, #20]
 800577a:	2b03      	cmp	r3, #3
 800577c:	d101      	bne.n	8005782 <shoot_mode_rc_selection+0x5e>
				mode = SHOOT_CONT;//SHOOT_CONT;
 800577e:	2301      	movs	r3, #1
 8005780:	73fb      	strb	r3, [r7, #15]
		set_shoot_mode(sht, mode);
 8005782:	7bfb      	ldrb	r3, [r7, #15]
 8005784:	4619      	mov	r1, r3
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fdee 	bl	8005368 <set_shoot_mode>
}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <shoot_lid_status_selection>:
  * @brief     determine if we need to open/close lid
  * @param[in] shoot main struct
  * @param[in] rc main struct
  * @retval    None
  */
static void shoot_lid_status_selection(Shoot_t *sht, RemoteControl_t *rc){
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
	if(rc->pc.key.C.status == PRESSED)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d104      	bne.n	80057b2 <shoot_lid_status_selection+0x1e>
		set_lid_status(sht, OPEN);
 80057a8:	2100      	movs	r1, #0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fdec 	bl	8005388 <set_lid_status>
	else
		set_lid_status(sht, CLOSE);
}
 80057b0:	e003      	b.n	80057ba <shoot_lid_status_selection+0x26>
		set_lid_status(sht, CLOSE);
 80057b2:	2101      	movs	r1, #1
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f7ff fde7 	bl	8005388 <set_lid_status>
}
 80057ba:	bf00      	nop
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <shoot_detect_mag_status>:
  * @brief     check if we need to reserve the mag motor
  * @param[in] shoot main struct
  * @param[in] rc main struct
  * @retval    None
  */
void shoot_detect_mag_status(Shoot_t *sht){
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
	if(sht->shoot_act_mode != SHOOT_CEASE){
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d02a      	beq.n	800582c <shoot_detect_mag_status+0x68>
		/* check if the magazine motor stuck */
		if(abs(sht->mag_fb.rx_rpm)<=10)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bfb8      	it	lt
 80057e0:	425b      	neglt	r3, r3
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b0a      	cmp	r3, #10
 80057e6:	d803      	bhi.n	80057f0 <shoot_detect_mag_status+0x2c>
			/* engage check process */
			shoot_check_flag = 1;
 80057e8:	4b12      	ldr	r3, [pc, #72]	; (8005834 <shoot_detect_mag_status+0x70>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	e005      	b.n	80057fc <shoot_detect_mag_status+0x38>
		else{
			/* if not, clear flag and counter*/
			shoot_check_flag = 0;
 80057f0:	4b10      	ldr	r3, [pc, #64]	; (8005834 <shoot_detect_mag_status+0x70>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	701a      	strb	r2, [r3, #0]
			shoot_check_counter = 0;
 80057f6:	4b10      	ldr	r3, [pc, #64]	; (8005838 <shoot_detect_mag_status+0x74>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	801a      	strh	r2, [r3, #0]
		}

		/* if the flag has been set and count more than 1s */
		//FIXME: Need to test the actual check duration
		if(shoot_check_flag != 1 || (shoot_check_flag == 1 && shoot_check_counter < 10) )
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <shoot_detect_mag_status+0x70>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d112      	bne.n	800582a <shoot_detect_mag_status+0x66>
 8005804:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <shoot_detect_mag_status+0x70>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d103      	bne.n	8005814 <shoot_detect_mag_status+0x50>
 800580c:	4b0a      	ldr	r3, [pc, #40]	; (8005838 <shoot_detect_mag_status+0x74>)
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2b09      	cmp	r3, #9
 8005812:	d90a      	bls.n	800582a <shoot_detect_mag_status+0x66>
			return;// motor process normally or check time less than 2s
		else{//shoot_check_counter >= 20
			/* set auto reserve process */
			set_shoot_mode(sht, SHOOT_RESERVE);
 8005814:	2102      	movs	r1, #2
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f7ff fda6 	bl	8005368 <set_shoot_mode>
			/* clear flags and counter */
			shoot_check_flag = 0;
 800581c:	4b05      	ldr	r3, [pc, #20]	; (8005834 <shoot_detect_mag_status+0x70>)
 800581e:	2200      	movs	r2, #0
 8005820:	701a      	strb	r2, [r3, #0]
			shoot_check_counter = 0;
 8005822:	4b05      	ldr	r3, [pc, #20]	; (8005838 <shoot_detect_mag_status+0x74>)
 8005824:	2200      	movs	r2, #0
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e000      	b.n	800582c <shoot_detect_mag_status+0x68>
			return;// motor process normally or check time less than 2s
 800582a:	bf00      	nop
		}
	}
}
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000782 	.word	0x20000782
 8005838:	20000784 	.word	0x20000784

0800583c <Comm_Task_Func>:
* @brief Function implementing the Comm_Task thread. Set for the comm task bw upper and lower boards
* @param argument: Not used
* @retval None
*/
void Comm_Task_Func(void const * argument)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	while(1){
		if(USART_COMM == 1){
			usart_comm_process();
		}
		else{
			if(board_status == CHASSIS_BOARD)
 8005844:	4b07      	ldr	r3, [pc, #28]	; (8005864 <Comm_Task_Func+0x28>)
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d103      	bne.n	8005854 <Comm_Task_Func+0x18>
				can_comm_process(&chassis_comm);
 800584c:	4806      	ldr	r0, [pc, #24]	; (8005868 <Comm_Task_Func+0x2c>)
 800584e:	f000 f89d 	bl	800598c <can_comm_process>
 8005852:	e7f7      	b.n	8005844 <Comm_Task_Func+0x8>
			else if(board_status == GIMBAL_BOARD)
 8005854:	4b03      	ldr	r3, [pc, #12]	; (8005864 <Comm_Task_Func+0x28>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f3      	bne.n	8005844 <Comm_Task_Func+0x8>
				can_comm_process(&gimbal_comm);
 800585c:	4803      	ldr	r0, [pc, #12]	; (800586c <Comm_Task_Func+0x30>)
 800585e:	f000 f895 	bl	800598c <can_comm_process>
		if(USART_COMM == 1){
 8005862:	e7ef      	b.n	8005844 <Comm_Task_Func+0x8>
 8005864:	2000469c 	.word	0x2000469c
 8005868:	200046e0 	.word	0x200046e0
 800586c:	200057d0 	.word	0x200057d0

08005870 <can_comm_subscribe_process>:
/**
* @brief CAN commnication message subscription
* @param None
* @retval None
*/
void can_comm_subscribe_process(void){
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0
	if(board_status == CHASSIS_BOARD){
 8005874:	4b19      	ldr	r3, [pc, #100]	; (80058dc <can_comm_subscribe_process+0x6c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d114      	bne.n	80058a6 <can_comm_subscribe_process+0x36>
		comm_subscribe(&chassis_comm.sub_list, COMM_REMOTE_CONTROL, Transmitter);
 800587c:	2201      	movs	r2, #1
 800587e:	2102      	movs	r1, #2
 8005880:	4817      	ldr	r0, [pc, #92]	; (80058e0 <can_comm_subscribe_process+0x70>)
 8005882:	f003 f80b 	bl	800889c <comm_subscribe>
		comm_subscribe(&chassis_comm.sub_list, COMM_PC_CONTROL, Transmitter);
 8005886:	2201      	movs	r2, #1
 8005888:	2104      	movs	r1, #4
 800588a:	4815      	ldr	r0, [pc, #84]	; (80058e0 <can_comm_subscribe_process+0x70>)
 800588c:	f003 f806 	bl	800889c <comm_subscribe>
		comm_subscribe(&chassis_comm.sub_list, COMM_EXT_PC_CONTROL, Transmitter);
 8005890:	2201      	movs	r2, #1
 8005892:	2120      	movs	r1, #32
 8005894:	4812      	ldr	r0, [pc, #72]	; (80058e0 <can_comm_subscribe_process+0x70>)
 8005896:	f003 f801 	bl	800889c <comm_subscribe>
		comm_subscribe(&chassis_comm.sub_list, COMM_GIMBAL_ANGLE, Receiver);
 800589a:	2200      	movs	r2, #0
 800589c:	2101      	movs	r1, #1
 800589e:	4810      	ldr	r0, [pc, #64]	; (80058e0 <can_comm_subscribe_process+0x70>)
 80058a0:	f002 fffc 	bl	800889c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_GIMBAL_ANGLE, Transmitter);
		comm_subscribe(&gimbal_comm.sub_list, COMM_REMOTE_CONTROL, Receiver);
		comm_subscribe(&gimbal_comm.sub_list, COMM_PC_CONTROL, Receiver);
		comm_subscribe(&gimbal_comm.sub_list, COMM_EXT_PC_CONTROL, Receiver);
	}
}
 80058a4:	e017      	b.n	80058d6 <can_comm_subscribe_process+0x66>
	else if(board_status == GIMBAL_BOARD){
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <can_comm_subscribe_process+0x6c>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d113      	bne.n	80058d6 <can_comm_subscribe_process+0x66>
		comm_subscribe(&gimbal_comm.sub_list, COMM_GIMBAL_ANGLE, Transmitter);
 80058ae:	2201      	movs	r2, #1
 80058b0:	2101      	movs	r1, #1
 80058b2:	480c      	ldr	r0, [pc, #48]	; (80058e4 <can_comm_subscribe_process+0x74>)
 80058b4:	f002 fff2 	bl	800889c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_REMOTE_CONTROL, Receiver);
 80058b8:	2200      	movs	r2, #0
 80058ba:	2102      	movs	r1, #2
 80058bc:	4809      	ldr	r0, [pc, #36]	; (80058e4 <can_comm_subscribe_process+0x74>)
 80058be:	f002 ffed 	bl	800889c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_PC_CONTROL, Receiver);
 80058c2:	2200      	movs	r2, #0
 80058c4:	2104      	movs	r1, #4
 80058c6:	4807      	ldr	r0, [pc, #28]	; (80058e4 <can_comm_subscribe_process+0x74>)
 80058c8:	f002 ffe8 	bl	800889c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_EXT_PC_CONTROL, Receiver);
 80058cc:	2200      	movs	r2, #0
 80058ce:	2120      	movs	r1, #32
 80058d0:	4804      	ldr	r0, [pc, #16]	; (80058e4 <can_comm_subscribe_process+0x74>)
 80058d2:	f002 ffe3 	bl	800889c <comm_subscribe>
}
 80058d6:	bf00      	nop
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	2000469c 	.word	0x2000469c
 80058e0:	20004734 	.word	0x20004734
 80058e4:	20005824 	.word	0x20005824

080058e8 <can_comm_reset_config>:
/**
* @brief CAN commnication struct initialization
* @param None
* @retval None
*/
void can_comm_reset_config(BoardComm_t *comm){
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	comm->comm_mode = CAN_COMM_MODE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
	comm->can_comm.comm_id = IDLE_COMM_ID;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80058fc:	605a      	str	r2, [r3, #4]
	/* init rx buffer */

	for(int i = 0; i < TOTAL_COMM_ID; i++) {
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e025      	b.n	8005950 <can_comm_reset_config+0x68>
		if(i<4)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b03      	cmp	r3, #3
 8005908:	dc06      	bgt.n	8005918 <can_comm_reset_config+0x30>
			comm->can_comm.tx_data[i] = 0;
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3304      	adds	r3, #4
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	4413      	add	r3, r2
 8005914:	2200      	movs	r2, #0
 8005916:	809a      	strh	r2, [r3, #4]
		comm->can_comm.rx_data[i][0] = 0;
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	3302      	adds	r3, #2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	2200      	movs	r2, #0
 8005924:	809a      	strh	r2, [r3, #4]
		comm->can_comm.rx_data[i][1] = 0;
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4413      	add	r3, r2
 800592e:	2200      	movs	r2, #0
 8005930:	82da      	strh	r2, [r3, #22]
		comm->can_comm.rx_data[i][2] = 0;
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	4413      	add	r3, r2
 800593a:	2200      	movs	r2, #0
 800593c:	831a      	strh	r2, [r3, #24]
		comm->can_comm.rx_data[i][3] = 0;
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	00db      	lsls	r3, r3, #3
 8005944:	4413      	add	r3, r2
 8005946:	2200      	movs	r2, #0
 8005948:	835a      	strh	r2, [r3, #26]
	for(int i = 0; i < TOTAL_COMM_ID; i++) {
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3301      	adds	r3, #1
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b06      	cmp	r3, #6
 8005954:	ddd6      	ble.n	8005904 <can_comm_reset_config+0x1c>
	}
    comm->can_comm.can_send_comm_data = can_send_comm_data;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a09      	ldr	r2, [pc, #36]	; (8005980 <can_comm_reset_config+0x98>)
 800595a:	64da      	str	r2, [r3, #76]	; 0x4c
    comm->can_comm.can_recv_comm_data = can_recv_comm_data;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a09      	ldr	r2, [pc, #36]	; (8005984 <can_comm_reset_config+0x9c>)
 8005960:	651a      	str	r2, [r3, #80]	; 0x50

    /* init subscription list */
    memset(&comm->sub_list, 0, sizeof(CommMessageSublist_t));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3354      	adds	r3, #84	; 0x54
 8005966:	2204      	movs	r2, #4
 8005968:	2100      	movs	r1, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f00c fae4 	bl	8011f38 <memset>
	/* init fifo queue */
	queueM_init(&canqm);
 8005970:	4805      	ldr	r0, [pc, #20]	; (8005988 <can_comm_reset_config+0xa0>)
 8005972:	f7fc ffff 	bl	8002974 <queueM_init>
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	08005d4d 	.word	0x08005d4d
 8005984:	08005e11 	.word	0x08005e11
 8005988:	2000d5bc 	.word	0x2000d5bc

0800598c <can_comm_process>:
* @brief CAN communication process
* @param None
* @retval None
*/
/* Task exec time: 3ms */
void can_comm_process(BoardComm_t *comm){
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(3); // 200hz make sure this task quicker than rc app
 8005994:	2303      	movs	r3, #3
 8005996:	60fb      	str	r3, [r7, #12]

	/* reset the comm struct configure */
	can_comm_reset_config(comm);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f7ff ffa5 	bl	80058e8 <can_comm_reset_config>
	/* subscribe the message before starting comms */
	can_comm_subscribe_process();
 800599e:	f7ff ff67 	bl	8005870 <can_comm_subscribe_process>

	/* init the task ticks */
    xLastWakeTime = xTaskGetTickCount();
 80059a2:	f00b faf3 	bl	8010f8c <xTaskGetTickCount>
 80059a6:	4603      	mov	r3, r0
 80059a8:	60bb      	str	r3, [r7, #8]

	for(;;){

		/* recv data */
		comm->can_comm.can_recv_comm_data(&hcan2, 8, comm->can_comm.rx_data);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	3214      	adds	r2, #20
 80059b2:	2108      	movs	r1, #8
 80059b4:	48a8      	ldr	r0, [pc, #672]	; (8005c58 <can_comm_process+0x2cc>)
 80059b6:	4798      	blx	r3
		/* process data */
		if(isSubscribed(&comm->sub_list, COMM_GIMBAL_ANGLE) == SUB_SUCCESS){
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3354      	adds	r3, #84	; 0x54
 80059bc:	2101      	movs	r1, #1
 80059be:	4618      	mov	r0, r3
 80059c0:	f003 f816 	bl	80089f0 <isSubscribed>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d138      	bne.n	8005a3c <can_comm_process+0xb0>
			switch(gimbal_angle_message.role){
 80059ca:	4ba4      	ldr	r3, [pc, #656]	; (8005c5c <can_comm_process+0x2d0>)
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01b      	beq.n	8005a0a <can_comm_process+0x7e>
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d137      	bne.n	8005a46 <can_comm_process+0xba>
			 	 /* need to scale and re-scale angle data in both side */
				case Transmitter:
					if(gimbal_angle_message.message.comm_ga.send_flag == 1){
 80059d6:	4ba1      	ldr	r3, [pc, #644]	; (8005c5c <can_comm_process+0x2d0>)
 80059d8:	7d1b      	ldrb	r3, [r3, #20]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d130      	bne.n	8005a40 <can_comm_process+0xb4>
						process_tx_data_ftoi16(gimbal_angle_message.message.comm_ga.angle_data, comm->can_comm.tx_data, 4, ANGLE_COMM_SCALE_FACTOR);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	330c      	adds	r3, #12
 80059e2:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 8005c60 <can_comm_process+0x2d4>
 80059e6:	2204      	movs	r2, #4
 80059e8:	4619      	mov	r1, r3
 80059ea:	489e      	ldr	r0, [pc, #632]	; (8005c64 <can_comm_process+0x2d8>)
 80059ec:	f000 f950 	bl	8005c90 <process_tx_data_ftoi16>
						comm->can_comm.can_send_comm_data(&hcan2, comm->can_comm.tx_data, ANGLE_COMM_ID);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	f102 010c 	add.w	r1, r2, #12
 80059fa:	f240 3201 	movw	r2, #769	; 0x301
 80059fe:	4896      	ldr	r0, [pc, #600]	; (8005c58 <can_comm_process+0x2cc>)
 8005a00:	4798      	blx	r3
						gimbal_angle_message.message.comm_ga.send_flag = 0;//reset flag to avoid message flooding
 8005a02:	4b96      	ldr	r3, [pc, #600]	; (8005c5c <can_comm_process+0x2d0>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	751a      	strb	r2, [r3, #20]
					}
					break;
 8005a08:	e01a      	b.n	8005a40 <can_comm_process+0xb4>
				case Receiver:
					if(can_comm_rx[ANGLE_IDX].comm_id == ANGLE_COMM_ID){
 8005a0a:	4b97      	ldr	r3, [pc, #604]	; (8005c68 <can_comm_process+0x2dc>)
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	f240 3201 	movw	r2, #769	; 0x301
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d116      	bne.n	8005a44 <can_comm_process+0xb8>
						process_rx_data_i16tof(comm, gimbal_angle_message.message.comm_ga.angle_data, ANGLE_COMM_SCALE_FACTOR, ANGLE_IDX);
 8005a16:	2201      	movs	r2, #1
 8005a18:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8005c60 <can_comm_process+0x2d4>
 8005a1c:	4991      	ldr	r1, [pc, #580]	; (8005c64 <can_comm_process+0x2d8>)
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f963 	bl	8005cea <process_rx_data_i16tof>
						chassis.gimbal_yaw_rel_angle = gimbal_angle_message.message.comm_ga.angle_data[0];//can_rx_scale_buffer[ANGLE_IDX][0];
 8005a24:	4b8d      	ldr	r3, [pc, #564]	; (8005c5c <can_comm_process+0x2d0>)
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	4a90      	ldr	r2, [pc, #576]	; (8005c6c <can_comm_process+0x2e0>)
 8005a2a:	6193      	str	r3, [r2, #24]
						chassis.gimbal_yaw_abs_angle = gimbal_angle_message.message.comm_ga.angle_data[1];//can_rx_scale_buffer[ANGLE_IDX][1];
 8005a2c:	4b8b      	ldr	r3, [pc, #556]	; (8005c5c <can_comm_process+0x2d0>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	4a8e      	ldr	r2, [pc, #568]	; (8005c6c <can_comm_process+0x2e0>)
 8005a32:	61d3      	str	r3, [r2, #28]
						can_comm_rx[ANGLE_IDX].comm_id = 0;//reset id to avoid message flooding
 8005a34:	4b8c      	ldr	r3, [pc, #560]	; (8005c68 <can_comm_process+0x2dc>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	60da      	str	r2, [r3, #12]
					}
					break;
 8005a3a:	e003      	b.n	8005a44 <can_comm_process+0xb8>
			}
		}
 8005a3c:	bf00      	nop
 8005a3e:	e002      	b.n	8005a46 <can_comm_process+0xba>
					break;
 8005a40:	bf00      	nop
 8005a42:	e000      	b.n	8005a46 <can_comm_process+0xba>
					break;
 8005a44:	bf00      	nop
		if(isSubscribed(&comm->sub_list, COMM_REMOTE_CONTROL) == SUB_SUCCESS){
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3354      	adds	r3, #84	; 0x54
 8005a4a:	2102      	movs	r1, #2
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f002 ffcf 	bl	80089f0 <isSubscribed>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d15c      	bne.n	8005b12 <can_comm_process+0x186>
			switch(rc_message.role){
 8005a58:	4b85      	ldr	r3, [pc, #532]	; (8005c70 <can_comm_process+0x2e4>)
 8005a5a:	785b      	ldrb	r3, [r3, #1]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d019      	beq.n	8005a94 <can_comm_process+0x108>
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d15b      	bne.n	8005b1c <can_comm_process+0x190>
				case Transmitter:
					if(rc_message.message.comm_rc.send_flag == 1){
 8005a64:	4b82      	ldr	r3, [pc, #520]	; (8005c70 <can_comm_process+0x2e4>)
 8005a66:	7b1b      	ldrb	r3, [r3, #12]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d154      	bne.n	8005b16 <can_comm_process+0x18a>
						memcpy(comm->can_comm.tx_data, &(rc_message.message.comm_rc.rc_data), sizeof(rc_message.message.comm_rc.rc_data));
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	2208      	movs	r2, #8
 8005a72:	4980      	ldr	r1, [pc, #512]	; (8005c74 <can_comm_process+0x2e8>)
 8005a74:	4618      	mov	r0, r3
 8005a76:	f00c fa51 	bl	8011f1c <memcpy>
						comm->can_comm.can_send_comm_data(&hcan2, comm->can_comm.tx_data, RC_COMM_ID);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	f102 010c 	add.w	r1, r2, #12
 8005a84:	f240 3202 	movw	r2, #770	; 0x302
 8005a88:	4873      	ldr	r0, [pc, #460]	; (8005c58 <can_comm_process+0x2cc>)
 8005a8a:	4798      	blx	r3
						rc_message.message.comm_rc.send_flag = 0;//reset flag to avoid message flooding
 8005a8c:	4b78      	ldr	r3, [pc, #480]	; (8005c70 <can_comm_process+0x2e4>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	731a      	strb	r2, [r3, #12]
					}
					break;
 8005a92:	e040      	b.n	8005b16 <can_comm_process+0x18a>
				case Receiver:
					if(can_comm_rx[RC_IDX].comm_id == RC_COMM_ID){
 8005a94:	4b74      	ldr	r3, [pc, #464]	; (8005c68 <can_comm_process+0x2dc>)
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	f240 3202 	movw	r2, #770	; 0x302
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d13c      	bne.n	8005b1a <can_comm_process+0x18e>
						rc.ctrl.s1  = comm->can_comm.rx_data[RC_IDX][2];
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b73      	ldr	r3, [pc, #460]	; (8005c78 <can_comm_process+0x2ec>)
 8005aaa:	721a      	strb	r2, [r3, #8]
						rc.ctrl.s2  = comm->can_comm.rx_data[RC_IDX][3];
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	4b70      	ldr	r3, [pc, #448]	; (8005c78 <can_comm_process+0x2ec>)
 8005ab6:	725a      	strb	r2, [r3, #9]
						if(rc.ctrl.s1 == SW_MID && rc.ctrl.s2 == SW_DOWN){
 8005ab8:	4b6f      	ldr	r3, [pc, #444]	; (8005c78 <can_comm_process+0x2ec>)
 8005aba:	7a1b      	ldrb	r3, [r3, #8]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d116      	bne.n	8005aee <can_comm_process+0x162>
 8005ac0:	4b6d      	ldr	r3, [pc, #436]	; (8005c78 <can_comm_process+0x2ec>)
 8005ac2:	7a5b      	ldrb	r3, [r3, #9]
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d112      	bne.n	8005aee <can_comm_process+0x162>
							rc.control_mode = PC_MODE;
 8005ac8:	4b6b      	ldr	r3, [pc, #428]	; (8005c78 <can_comm_process+0x2ec>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
							/* update gimbal mode */
							//FIXME: if have multiple gimbals, we need to change this.
							gimbal.gimbal_mode = comm->can_comm.rx_data[RC_IDX][0];
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <can_comm_process+0x2f0>)
 8005ada:	f883 2ad3 	strb.w	r2, [r3, #2771]	; 0xad3
							gimbal.gimbal_act_mode = comm->can_comm.rx_data[RC_IDX][1];
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <can_comm_process+0x2f0>)
 8005ae8:	f883 2ad1 	strb.w	r2, [r3, #2769]	; 0xad1
 8005aec:	e00d      	b.n	8005b0a <can_comm_process+0x17e>
						}
						else{
							rc.control_mode = CTRLER_MODE;
 8005aee:	4b62      	ldr	r3, [pc, #392]	; (8005c78 <can_comm_process+0x2ec>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
							/* get normal controller data*/
							rc.ctrl.ch0 = comm->can_comm.rx_data[RC_IDX][0];
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8005afc:	4b5e      	ldr	r3, [pc, #376]	; (8005c78 <can_comm_process+0x2ec>)
 8005afe:	801a      	strh	r2, [r3, #0]
							rc.ctrl.ch1 = comm->can_comm.rx_data[RC_IDX][1];
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8005b06:	4b5c      	ldr	r3, [pc, #368]	; (8005c78 <can_comm_process+0x2ec>)
 8005b08:	805a      	strh	r2, [r3, #2]
						}
						can_comm_rx[RC_IDX].comm_id = 0;//reset id to avoid message flooding
 8005b0a:	4b57      	ldr	r3, [pc, #348]	; (8005c68 <can_comm_process+0x2dc>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	619a      	str	r2, [r3, #24]
					}

					break;
 8005b10:	e003      	b.n	8005b1a <can_comm_process+0x18e>
			 }
		}
 8005b12:	bf00      	nop
 8005b14:	e002      	b.n	8005b1c <can_comm_process+0x190>
					break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <can_comm_process+0x190>
					break;
 8005b1a:	bf00      	nop
		if(isSubscribed(&comm->sub_list, COMM_PC_CONTROL) == SUB_SUCCESS){
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	3354      	adds	r3, #84	; 0x54
 8005b20:	2104      	movs	r1, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f002 ff64 	bl	80089f0 <isSubscribed>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d13d      	bne.n	8005baa <can_comm_process+0x21e>
			switch(pc_message.role){
 8005b2e:	4b54      	ldr	r3, [pc, #336]	; (8005c80 <can_comm_process+0x2f4>)
 8005b30:	785b      	ldrb	r3, [r3, #1]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d019      	beq.n	8005b6a <can_comm_process+0x1de>
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d13c      	bne.n	8005bb4 <can_comm_process+0x228>
				case Transmitter:
					if(pc_message.message.comm_pc.send_flag == 1){
 8005b3a:	4b51      	ldr	r3, [pc, #324]	; (8005c80 <can_comm_process+0x2f4>)
 8005b3c:	7b1b      	ldrb	r3, [r3, #12]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d135      	bne.n	8005bae <can_comm_process+0x222>
						memcpy(comm->can_comm.tx_data, &(pc_message.message.comm_pc.pc_data), sizeof(pc_message.message.comm_pc.pc_data));
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	330c      	adds	r3, #12
 8005b46:	2208      	movs	r2, #8
 8005b48:	494e      	ldr	r1, [pc, #312]	; (8005c84 <can_comm_process+0x2f8>)
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f00c f9e6 	bl	8011f1c <memcpy>
						comm->can_comm.can_send_comm_data(&hcan2, comm->can_comm.tx_data, PC_COMM_ID);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	f102 010c 	add.w	r1, r2, #12
 8005b5a:	f240 3203 	movw	r2, #771	; 0x303
 8005b5e:	483e      	ldr	r0, [pc, #248]	; (8005c58 <can_comm_process+0x2cc>)
 8005b60:	4798      	blx	r3
						pc_message.message.comm_pc.send_flag = 0;//reset flag to avoid message flooding
 8005b62:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <can_comm_process+0x2f4>)
 8005b64:	2200      	movs	r2, #0
 8005b66:	731a      	strb	r2, [r3, #12]
					}
					break;
 8005b68:	e021      	b.n	8005bae <can_comm_process+0x222>
				case Receiver:
					if(can_comm_rx[PC_IDX].comm_id == PC_COMM_ID){
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <can_comm_process+0x2dc>)
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	f240 3203 	movw	r2, #771	; 0x303
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d11d      	bne.n	8005bb2 <can_comm_process+0x226>
						rc.pc.mouse.x = comm->can_comm.rx_data[PC_IDX][0];
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8005b7c:	4b3e      	ldr	r3, [pc, #248]	; (8005c78 <can_comm_process+0x2ec>)
 8005b7e:	819a      	strh	r2, [r3, #12]
						rc.pc.mouse.y = comm->can_comm.rx_data[PC_IDX][1];
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8005b86:	4b3c      	ldr	r3, [pc, #240]	; (8005c78 <can_comm_process+0x2ec>)
 8005b88:	81da      	strh	r2, [r3, #14]
						rc.pc.mouse.left_click.status  = comm->can_comm.rx_data[PC_IDX][2];
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	4b39      	ldr	r3, [pc, #228]	; (8005c78 <can_comm_process+0x2ec>)
 8005b94:	751a      	strb	r2, [r3, #20]
						rc.pc.mouse.right_click.status  = comm->can_comm.rx_data[PC_IDX][3];
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	4b36      	ldr	r3, [pc, #216]	; (8005c78 <can_comm_process+0x2ec>)
 8005ba0:	75da      	strb	r2, [r3, #23]
						can_comm_rx[PC_IDX].comm_id = 0;//reset id to avoid message flooding
 8005ba2:	4b31      	ldr	r3, [pc, #196]	; (8005c68 <can_comm_process+0x2dc>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	625a      	str	r2, [r3, #36]	; 0x24
					}
					break;
 8005ba8:	e003      	b.n	8005bb2 <can_comm_process+0x226>
			 }
		}
 8005baa:	bf00      	nop
 8005bac:	e002      	b.n	8005bb4 <can_comm_process+0x228>
					break;
 8005bae:	bf00      	nop
 8005bb0:	e000      	b.n	8005bb4 <can_comm_process+0x228>
					break;
 8005bb2:	bf00      	nop

		if(isSubscribed(&comm->sub_list, COMM_EXT_PC_CONTROL) == SUB_SUCCESS){
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	3354      	adds	r3, #84	; 0x54
 8005bb8:	2120      	movs	r1, #32
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f002 ff18 	bl	80089f0 <isSubscribed>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d13c      	bne.n	8005c40 <can_comm_process+0x2b4>
					switch(pc_ext_message.role){
 8005bc6:	4b30      	ldr	r3, [pc, #192]	; (8005c88 <can_comm_process+0x2fc>)
 8005bc8:	785b      	ldrb	r3, [r3, #1]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d019      	beq.n	8005c02 <can_comm_process+0x276>
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d13b      	bne.n	8005c4a <can_comm_process+0x2be>
						case Transmitter:
							if(pc_ext_message.message.comm_ext_pc.send_flag == 1){
 8005bd2:	4b2d      	ldr	r3, [pc, #180]	; (8005c88 <can_comm_process+0x2fc>)
 8005bd4:	7b1b      	ldrb	r3, [r3, #12]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d134      	bne.n	8005c44 <can_comm_process+0x2b8>
								memcpy(comm->can_comm.tx_data, &(pc_ext_message.message.comm_ext_pc.pc_data), sizeof(pc_ext_message.message.comm_ext_pc.pc_data));
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	330c      	adds	r3, #12
 8005bde:	2208      	movs	r2, #8
 8005be0:	492a      	ldr	r1, [pc, #168]	; (8005c8c <can_comm_process+0x300>)
 8005be2:	4618      	mov	r0, r3
 8005be4:	f00c f99a 	bl	8011f1c <memcpy>
								comm->can_comm.can_send_comm_data(&hcan2, comm->can_comm.tx_data, PC_EXT_KEY_ID);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	f102 010c 	add.w	r1, r2, #12
 8005bf2:	f240 3206 	movw	r2, #774	; 0x306
 8005bf6:	4818      	ldr	r0, [pc, #96]	; (8005c58 <can_comm_process+0x2cc>)
 8005bf8:	4798      	blx	r3
								pc_ext_message.message.comm_ext_pc.send_flag = 0;//reset flag to avoid message flooding
 8005bfa:	4b23      	ldr	r3, [pc, #140]	; (8005c88 <can_comm_process+0x2fc>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	731a      	strb	r2, [r3, #12]
							}
							break;
 8005c00:	e020      	b.n	8005c44 <can_comm_process+0x2b8>
						case Receiver:
							if(can_comm_rx[PC_EXT_KEY_IDX].comm_id == PC_EXT_KEY_ID){
 8005c02:	4b19      	ldr	r3, [pc, #100]	; (8005c68 <can_comm_process+0x2dc>)
 8005c04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c06:	f240 3206 	movw	r2, #774	; 0x306
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d11c      	bne.n	8005c48 <can_comm_process+0x2bc>
								rc.pc.key.C.status = comm->can_comm.rx_data[PC_EXT_KEY_IDX][0];
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4b18      	ldr	r3, [pc, #96]	; (8005c78 <can_comm_process+0x2ec>)
 8005c18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
								rc.pc.key.V.status = comm->can_comm.rx_data[PC_EXT_KEY_IDX][1];
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	4b14      	ldr	r3, [pc, #80]	; (8005c78 <can_comm_process+0x2ec>)
 8005c26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
								rc.pc.key.B.status  = comm->can_comm.rx_data[PC_EXT_KEY_IDX][2];
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	4b11      	ldr	r3, [pc, #68]	; (8005c78 <can_comm_process+0x2ec>)
 8005c34:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
//								rc.pc.mouse.right_click.status  = comm->can_comm.rx_data[PC_EXT_KEY_IDX][3];
								can_comm_rx[PC_EXT_KEY_IDX].comm_id = 0;//reset id to avoid message flooding
 8005c38:	4b0b      	ldr	r3, [pc, #44]	; (8005c68 <can_comm_process+0x2dc>)
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	649a      	str	r2, [r3, #72]	; 0x48
							}
							break;
 8005c3e:	e003      	b.n	8005c48 <can_comm_process+0x2bc>
					 }
				}
 8005c40:	bf00      	nop
 8005c42:	e002      	b.n	8005c4a <can_comm_process+0x2be>
							break;
 8005c44:	bf00      	nop
 8005c46:	e000      	b.n	8005c4a <can_comm_process+0x2be>
							break;
 8005c48:	bf00      	nop

		/* delay until wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8005c4a:	f107 0308 	add.w	r3, r7, #8
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f00a ffdf 	bl	8010c14 <vTaskDelayUntil>
		comm->can_comm.can_recv_comm_data(&hcan2, 8, comm->can_comm.rx_data);
 8005c56:	e6a8      	b.n	80059aa <can_comm_process+0x1e>
 8005c58:	2000d8d4 	.word	0x2000d8d4
 8005c5c:	20000084 	.word	0x20000084
 8005c60:	461b283d 	.word	0x461b283d
 8005c64:	20000088 	.word	0x20000088
 8005c68:	200004d4 	.word	0x200004d4
 8005c6c:	2000d528 	.word	0x2000d528
 8005c70:	200000dc 	.word	0x200000dc
 8005c74:	200000e0 	.word	0x200000e0
 8005c78:	2000d6c0 	.word	0x2000d6c0
 8005c7c:	20004740 	.word	0x20004740
 8005c80:	20000134 	.word	0x20000134
 8005c84:	20000138 	.word	0x20000138
 8005c88:	2000018c 	.word	0x2000018c
 8005c8c:	20000190 	.word	0x20000190

08005c90 <process_tx_data_ftoi16>:
/**
* @brief CAN commnication send data float to int16
* @param comm: main comm app struct
* 		 scale_factor: corresponding scale_factor
*/
void process_tx_data_ftoi16(float* input_data, int16_t* output_data, int length, float scale_factor){
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < length; i++) {
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	617b      	str	r3, [r7, #20]
 8005ca4:	e016      	b.n	8005cd4 <process_tx_data_ftoi16+0x44>
        output_data[i] = (int16_t)(input_data[i] * scale_factor);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	ed93 7a00 	vldr	s14, [r3]
 8005cb2:	edd7 7a00 	vldr	s15, [r7]
 8005cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005cc6:	ee17 2a90 	vmov	r2, s15
 8005cca:	b212      	sxth	r2, r2
 8005ccc:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < length; i++) {
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	3301      	adds	r3, #1
 8005cd2:	617b      	str	r3, [r7, #20]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	dbe4      	blt.n	8005ca6 <process_tx_data_ftoi16+0x16>
    }
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <process_rx_data_i16tof>:
/**
* @brief CAN commnication recving data int16 to float
* @param comm: main comm app struct
* 		 scale_factor: corresponding scale_factor
*/
void process_rx_data_i16tof(BoardComm_t *comm, float *output_buffer, float scale_factor, uint32_t idx) {
 8005cea:	b480      	push	{r7}
 8005cec:	b087      	sub	sp, #28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	ed87 0a01 	vstr	s0, [r7, #4]
 8005cf8:	603a      	str	r2, [r7, #0]
	/*we cannot set the output buffer as a local variable in this fucntion
	 * since it may cause "dangling pointer" problem */
    for (int i = 0; i < 4; i++) {
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	e01a      	b.n	8005d36 <process_rx_data_i16tof+0x4c>
//        comm->can_comm.rx_data[idx][i] = (comm->can_comm.rx_data[idx][i*2] << 8) | comm->can_comm.rx_data[1][i*2+1];
        output_buffer[i] = (float)comm->can_comm.rx_data[idx][i] / scale_factor;
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	0099      	lsls	r1, r3, #2
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	440b      	add	r3, r1
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	005b      	lsls	r3, r3, #1
 8005d0e:	4413      	add	r3, r2
 8005d10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	4413      	add	r3, r2
 8005d24:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d2c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3301      	adds	r3, #1
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	2b03      	cmp	r3, #3
 8005d3a:	dde1      	ble.n	8005d00 <process_rx_data_i16tof+0x16>
    }
}
 8005d3c:	bf00      	nop
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
	...

08005d4c <can_send_comm_data>:
* @param CAN_HandleTypeDef object: hcan pointer refer to a HAL CAN structure
* 		 int32_t* send_data: The data is ready to be sent
* 		 uint32_t comm_id：
* @retval None
*/
void can_send_comm_data(CAN_HandleTypeDef* hcan, int16_t* send_data, uint32_t comm_id){
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08c      	sub	sp, #48	; 0x30
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
	uint8_t comm_can_send_data[8];
//	uint32_t send_mail_box;
	CAN_TxHeaderTypeDef  comm_tx_message;

	comm_tx_message.IDE = CAN_ID_STD;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61bb      	str	r3, [r7, #24]
	comm_tx_message.RTR = CAN_RTR_DATA;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	61fb      	str	r3, [r7, #28]
	comm_tx_message.DLC = 0x08;
 8005d60:	2308      	movs	r3, #8
 8005d62:	623b      	str	r3, [r7, #32]
	comm_tx_message.StdId = comm_id;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	613b      	str	r3, [r7, #16]

	comm_can_send_data[0] = send_data[0] >> 8;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d6e:	121b      	asrs	r3, r3, #8
 8005d70:	b21b      	sxth	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	comm_can_send_data[1] = send_data[0];
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	comm_can_send_data[2] = send_data[1] >> 8;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	3302      	adds	r3, #2
 8005d88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d8c:	121b      	asrs	r3, r3, #8
 8005d8e:	b21b      	sxth	r3, r3
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	comm_can_send_data[3] = send_data[1];
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	3302      	adds	r3, #2
 8005d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	comm_can_send_data[4] = send_data[2] >> 8;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	3304      	adds	r3, #4
 8005da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dac:	121b      	asrs	r3, r3, #8
 8005dae:	b21b      	sxth	r3, r3
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	comm_can_send_data[5] = send_data[2];
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	3304      	adds	r3, #4
 8005dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	comm_can_send_data[6] = send_data[3] >> 8;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	3306      	adds	r3, #6
 8005dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dcc:	121b      	asrs	r3, r3, #8
 8005dce:	b21b      	sxth	r3, r3
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	comm_can_send_data[7] = send_data[3];
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	3306      	adds	r3, #6
 8005dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* send to fifo queue*/
	enqueueCanMessage(&comm_tx_message, canQueue, &canqm, comm_can_send_data);
 8005de4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005de8:	f107 0010 	add.w	r0, r7, #16
 8005dec:	4a06      	ldr	r2, [pc, #24]	; (8005e08 <can_send_comm_data+0xbc>)
 8005dee:	4907      	ldr	r1, [pc, #28]	; (8005e0c <can_send_comm_data+0xc0>)
 8005df0:	f7fc fdd0 	bl	8002994 <enqueueCanMessage>

//	if(HAL_CAN_GetTxMailboxesFreeLevel(hcan)>0){
		sendNextCanMessage(hcan, canQueue, &canqm);
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <can_send_comm_data+0xbc>)
 8005df6:	4905      	ldr	r1, [pc, #20]	; (8005e0c <can_send_comm_data+0xc0>)
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f7fc fe1b 	bl	8002a34 <sendNextCanMessage>
//		HAL_CAN_AddTxMessage(hcan, &comm_tx_message, comm_can_send_data, (uint32_t *)CAN_TX_MAILBOX0);
//	}
}
 8005dfe:	bf00      	nop
 8005e00:	3730      	adds	r7, #48	; 0x30
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	2000d5bc 	.word	0x2000d5bc
 8005e0c:	20005828 	.word	0x20005828

08005e10 <can_recv_comm_data>:
* @brief CAN commnication receiving function, activated for CAN2 comms
* @param CAN_HandleTypeDef object: A can pointer refer to a CAN structure
* 		 int32_t* send_data: The data is ready to be sent
* @retval None
*/
void can_recv_comm_data(CAN_HandleTypeDef* hcan, uint32_t data_len, int16_t (*rx_buffer)[TOTAL_COMM_ID][4]){
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b088      	sub	sp, #32
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
	uint8_t comm_temp_rx_buffer[8];
	for(int i=0;i<TOTAL_COMM_ID;i++){
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61fb      	str	r3, [r7, #28]
 8005e20:	e042      	b.n	8005ea8 <can_recv_comm_data+0x98>
		memcpy(comm_temp_rx_buffer, can_comm_rx[i].comm_rx_buffer, data_len);
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	4613      	mov	r3, r2
 8005e26:	005b      	lsls	r3, r3, #1
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <can_recv_comm_data+0xa8>)
 8005e2e:	4413      	add	r3, r2
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	f107 0314 	add.w	r3, r7, #20
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f00c f86f 	bl	8011f1c <memcpy>
		(*rx_buffer)[i][0] = (int16_t)(comm_temp_rx_buffer[0] << 8 | comm_temp_rx_buffer[1]);
 8005e3e:	7d3b      	ldrb	r3, [r7, #20]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	b21a      	sxth	r2, r3
 8005e44:	7d7b      	ldrb	r3, [r7, #21]
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	b219      	sxth	r1, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
		(*rx_buffer)[i][1] = (int16_t)(comm_temp_rx_buffer[2] << 8 | comm_temp_rx_buffer[3]);
 8005e54:	7dbb      	ldrb	r3, [r7, #22]
 8005e56:	021b      	lsls	r3, r3, #8
 8005e58:	b21a      	sxth	r2, r3
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
 8005e5c:	b21b      	sxth	r3, r3
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	b219      	sxth	r1, r3
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4413      	add	r3, r2
 8005e6a:	460a      	mov	r2, r1
 8005e6c:	805a      	strh	r2, [r3, #2]
		(*rx_buffer)[i][2] = (int16_t)(comm_temp_rx_buffer[4] << 8 | comm_temp_rx_buffer[5]);
 8005e6e:	7e3b      	ldrb	r3, [r7, #24]
 8005e70:	021b      	lsls	r3, r3, #8
 8005e72:	b21a      	sxth	r2, r3
 8005e74:	7e7b      	ldrb	r3, [r7, #25]
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	b219      	sxth	r1, r3
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	460a      	mov	r2, r1
 8005e86:	809a      	strh	r2, [r3, #4]
		(*rx_buffer)[i][3] = (int16_t)(comm_temp_rx_buffer[6] << 8 | comm_temp_rx_buffer[7]);
 8005e88:	7ebb      	ldrb	r3, [r7, #26]
 8005e8a:	021b      	lsls	r3, r3, #8
 8005e8c:	b21a      	sxth	r2, r3
 8005e8e:	7efb      	ldrb	r3, [r7, #27]
 8005e90:	b21b      	sxth	r3, r3
 8005e92:	4313      	orrs	r3, r2
 8005e94:	b219      	sxth	r1, r3
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	00db      	lsls	r3, r3, #3
 8005e9c:	4413      	add	r3, r2
 8005e9e:	460a      	mov	r2, r1
 8005ea0:	80da      	strh	r2, [r3, #6]
	for(int i=0;i<TOTAL_COMM_ID;i++){
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	61fb      	str	r3, [r7, #28]
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	2b06      	cmp	r3, #6
 8005eac:	ddb9      	ble.n	8005e22 <can_recv_comm_data+0x12>
	}
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	3720      	adds	r7, #32
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	200004d4 	.word	0x200004d4

08005ebc <RC_Task_Func>:
/**
  * @brief     main remote control task
  * @param[in] None
  * @retval    None
  */
void RC_Task_Func(){
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5); // 100Hz, make sure this task slower than comm app
 8005ec2:	2305      	movs	r3, #5
 8005ec4:	607b      	str	r3, [r7, #4]

	/* init rc task */
	rc_task_init(&rc);
 8005ec6:	480d      	ldr	r0, [pc, #52]	; (8005efc <RC_Task_Func+0x40>)
 8005ec8:	f000 f822 	bl	8005f10 <rc_task_init>

	/* reset rc test */
	rc_reset(&rc);
 8005ecc:	480b      	ldr	r0, [pc, #44]	; (8005efc <RC_Task_Func+0x40>)
 8005ece:	f000 fb53 	bl	8006578 <rc_reset>

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8005ed2:	f00b f85b 	bl	8010f8c <xTaskGetTickCount>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	603b      	str	r3, [r7, #0]

	for(;;){

		rc_process_rx_data(&rc, rc_rx_buffer);
 8005eda:	4909      	ldr	r1, [pc, #36]	; (8005f00 <RC_Task_Func+0x44>)
 8005edc:	4807      	ldr	r0, [pc, #28]	; (8005efc <RC_Task_Func+0x40>)
 8005ede:	f000 f8b5 	bl	800604c <rc_process_rx_data>
		rc_update_comm_pack(&rc, &(rc_message.message.comm_rc), &(pc_message.message.comm_pc),&(pc_ext_message.message.comm_ext_pc));
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <RC_Task_Func+0x48>)
 8005ee4:	4a08      	ldr	r2, [pc, #32]	; (8005f08 <RC_Task_Func+0x4c>)
 8005ee6:	4909      	ldr	r1, [pc, #36]	; (8005f0c <RC_Task_Func+0x50>)
 8005ee8:	4804      	ldr	r0, [pc, #16]	; (8005efc <RC_Task_Func+0x40>)
 8005eea:	f000 fac9 	bl	8006480 <rc_update_comm_pack>

		/* delay until wake time */
	    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8005eee:	463b      	mov	r3, r7
 8005ef0:	6879      	ldr	r1, [r7, #4]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f00a fe8e 	bl	8010c14 <vTaskDelayUntil>
		rc_process_rx_data(&rc, rc_rx_buffer);
 8005ef8:	e7ef      	b.n	8005eda <RC_Task_Func+0x1e>
 8005efa:	bf00      	nop
 8005efc:	2000d6c0 	.word	0x2000d6c0
 8005f00:	2000d98c 	.word	0x2000d98c
 8005f04:	20000190 	.word	0x20000190
 8005f08:	20000138 	.word	0x20000138
 8005f0c:	200000e0 	.word	0x200000e0

08005f10 <rc_task_init>:
/**
  * @brief     init all the struct before task begin
  * @param[in] main rc struct
  * @retval    None
  */
void rc_task_init(RemoteControl_t *rc_hdlr){
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
	/* controller init */
	rc_hdlr->ctrl.ch0 = 0;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	801a      	strh	r2, [r3, #0]
	rc_hdlr->ctrl.ch1 = 0;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	805a      	strh	r2, [r3, #2]
	rc_hdlr->ctrl.ch2 = 0;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	809a      	strh	r2, [r3, #4]
	rc_hdlr->ctrl.ch3 = 0;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	80da      	strh	r2, [r3, #6]
	rc_hdlr->ctrl.s1 = SW_MID; //idle mode
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2203      	movs	r2, #3
 8005f34:	721a      	strb	r2, [r3, #8]
	rc_hdlr->ctrl.s2 = SW_MID; //cease fire
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2203      	movs	r2, #3
 8005f3a:	725a      	strb	r2, [r3, #9]

	/* pc init */
	rc_hdlr->pc.mouse.x = 0;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	819a      	strh	r2, [r3, #12]
	rc_hdlr->pc.mouse.y = 0;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	81da      	strh	r2, [r3, #14]
	rc_hdlr->pc.mouse.z = 0;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	821a      	strh	r2, [r3, #16]
	rc_hdlr->pc.mouse.click_l = 0;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	749a      	strb	r2, [r3, #18]
	rc_hdlr->pc.mouse.click_r = 0;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	74da      	strb	r2, [r3, #19]

	rc_key_init(&rc_hdlr->pc.key.W);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	333c      	adds	r3, #60	; 0x3c
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fb1e 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.A);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	333f      	adds	r3, #63	; 0x3f
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fb19 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.S);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3342      	adds	r3, #66	; 0x42
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 fb14 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.D);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3345      	adds	r3, #69	; 0x45
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fb0f 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.Q);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	3348      	adds	r3, #72	; 0x48
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fb0a 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.E);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	334b      	adds	r3, #75	; 0x4b
 8005f90:	4618      	mov	r0, r3
 8005f92:	f000 fb05 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.R);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	334e      	adds	r3, #78	; 0x4e
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 fb00 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.V);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	3351      	adds	r3, #81	; 0x51
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 fafb 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.Ctrl);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3354      	adds	r3, #84	; 0x54
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f000 faf6 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.F);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3357      	adds	r3, #87	; 0x57
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 faf1 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.Shift);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	335a      	adds	r3, #90	; 0x5a
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 faec 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.G);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	335d      	adds	r3, #93	; 0x5d
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fae7 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.C);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3360      	adds	r3, #96	; 0x60
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fae2 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.B);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3363      	adds	r3, #99	; 0x63
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f000 fadd 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.mouse.left_click);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3314      	adds	r3, #20
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 fad8 	bl	80065a0 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.mouse.right_click);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3317      	adds	r3, #23
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fad3 	bl	80065a0 <rc_key_init>


	/* init low pass params */
	rc_hdlr->pc.mouse.x_folp.a = 0.95;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a12      	ldr	r2, [pc, #72]	; (8006048 <rc_task_init+0x138>)
 8005ffe:	629a      	str	r2, [r3, #40]	; 0x28
	rc_hdlr->pc.mouse.x_folp.cur_data = 0;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f04f 0200 	mov.w	r2, #0
 8006006:	61da      	str	r2, [r3, #28]
	rc_hdlr->pc.mouse.x_folp.last_output_data = 0;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	625a      	str	r2, [r3, #36]	; 0x24
	rc_hdlr->pc.mouse.x_folp.output_data = 0;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	621a      	str	r2, [r3, #32]

	rc_hdlr->pc.mouse.y_folp.a = 0.95;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a0b      	ldr	r2, [pc, #44]	; (8006048 <rc_task_init+0x138>)
 800601c:	639a      	str	r2, [r3, #56]	; 0x38
	rc_hdlr->pc.mouse.y_folp.cur_data = 0;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	62da      	str	r2, [r3, #44]	; 0x2c
	rc_hdlr->pc.mouse.y_folp.last_output_data = 0;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	635a      	str	r2, [r3, #52]	; 0x34
	rc_hdlr->pc.mouse.y_folp.output_data = 0;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	631a      	str	r2, [r3, #48]	; 0x30

	/* apply deflaut mode */
	rc_hdlr->control_mode = CTRLER_MODE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 800603e:	bf00      	nop
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	3f733333 	.word	0x3f733333

0800604c <rc_process_rx_data>:
/**
  * @brief     rc process recv data from dbus
  * @param[in] main rc struct
  * @retval    None
  */
void rc_process_rx_data(RemoteControl_t *rc_hdlr, uint8_t *rc_rx_buffer){
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
	/* no matter what mode, read switch data */
	rc_hdlr->ctrl.s1   = ((rc_rx_buffer[5] >> 4)& 0x000C) >> 2;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	3305      	adds	r3, #5
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	b2db      	uxtb	r3, r3
 8006060:	109b      	asrs	r3, r3, #2
 8006062:	b2db      	uxtb	r3, r3
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	b2da      	uxtb	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	721a      	strb	r2, [r3, #8]
	rc_hdlr->ctrl.s2   = ((rc_rx_buffer[5] >> 4)& 0x0003);      //may use this as mode swap indicator
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	3305      	adds	r3, #5
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	091b      	lsrs	r3, r3, #4
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 0303 	and.w	r3, r3, #3
 800607c:	b2da      	uxtb	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	725a      	strb	r2, [r3, #9]

	/* currently hard coding */
	if(rc_hdlr->ctrl.s1 == SW_MID && rc_hdlr->ctrl.s2 == SW_DOWN)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	7a1b      	ldrb	r3, [r3, #8]
 8006086:	2b03      	cmp	r3, #3
 8006088:	d108      	bne.n	800609c <rc_process_rx_data+0x50>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	7a5b      	ldrb	r3, [r3, #9]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d104      	bne.n	800609c <rc_process_rx_data+0x50>
		rc_hdlr->control_mode = PC_MODE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800609a:	e003      	b.n	80060a4 <rc_process_rx_data+0x58>
	else
		rc_hdlr->control_mode = CTRLER_MODE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	if(rc_hdlr->control_mode == CTRLER_MODE){
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 80ab 	bne.w	8006206 <rc_process_rx_data+0x1ba>
		/* remote controller parse process */
		rc_hdlr->ctrl.ch0  = ((rc_rx_buffer[0]| (rc_rx_buffer[1] << 8)) & 0x07ff) - CHANNEL_CENTER;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	b21a      	sxth	r2, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	3301      	adds	r3, #1
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	b21b      	sxth	r3, r3
 80060c0:	4313      	orrs	r3, r2
 80060c2:	b21b      	sxth	r3, r3
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	b21a      	sxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	801a      	strh	r2, [r3, #0]
		rc_hdlr->ctrl.ch1  = (((rc_rx_buffer[1] >> 3) | (rc_rx_buffer[2] << 5)) & 0x07ff) - CHANNEL_CENTER;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	3301      	adds	r3, #1
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	08db      	lsrs	r3, r3, #3
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	b21a      	sxth	r2, r3
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	3302      	adds	r3, #2
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	015b      	lsls	r3, r3, #5
 80060ec:	b21b      	sxth	r3, r3
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80060fe:	b29b      	uxth	r3, r3
 8006100:	b21a      	sxth	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	805a      	strh	r2, [r3, #2]
		rc_hdlr->ctrl.ch2  = (((rc_rx_buffer[2] >> 6) | (rc_rx_buffer[3] << 2) | (rc_rx_buffer[4] << 10)) & 0x07ff) - CHANNEL_CENTER;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	3302      	adds	r3, #2
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	099b      	lsrs	r3, r3, #6
 800610e:	b2db      	uxtb	r3, r3
 8006110:	b21a      	sxth	r2, r3
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	3303      	adds	r3, #3
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	b21b      	sxth	r3, r3
 800611c:	4313      	orrs	r3, r2
 800611e:	b21a      	sxth	r2, r3
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	3304      	adds	r3, #4
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	029b      	lsls	r3, r3, #10
 8006128:	b21b      	sxth	r3, r3
 800612a:	4313      	orrs	r3, r2
 800612c:	b21b      	sxth	r3, r3
 800612e:	b29b      	uxth	r3, r3
 8006130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006134:	b29b      	uxth	r3, r3
 8006136:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800613a:	b29b      	uxth	r3, r3
 800613c:	b21a      	sxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	809a      	strh	r2, [r3, #4]
		rc_hdlr->ctrl.ch3  = (((rc_rx_buffer[4] >> 1) | (rc_rx_buffer[5] << 7)) & 0x07ff) - CHANNEL_CENTER;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	3304      	adds	r3, #4
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	b21a      	sxth	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	3305      	adds	r3, #5
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	01db      	lsls	r3, r3, #7
 8006156:	b21b      	sxth	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b21b      	sxth	r3, r3
 800615c:	b29b      	uxth	r3, r3
 800615e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006162:	b29b      	uxth	r3, r3
 8006164:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006168:	b29b      	uxth	r3, r3
 800616a:	b21a      	sxth	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	80da      	strh	r2, [r3, #6]
		rc_hdlr->ctrl.wheel = ((rc_rx_buffer[16]|(rc_rx_buffer[17]<<8))&0x07FF) - CHANNEL_CENTER;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	3310      	adds	r3, #16
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	b21a      	sxth	r2, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	3311      	adds	r3, #17
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	b21b      	sxth	r3, r3
 8006182:	4313      	orrs	r3, r2
 8006184:	b21b      	sxth	r3, r3
 8006186:	b29b      	uxth	r3, r3
 8006188:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800618c:	b29b      	uxth	r3, r3
 800618e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006192:	b29b      	uxth	r3, r3
 8006194:	b21a      	sxth	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	815a      	strh	r2, [r3, #10]

		/* calibration process to avoid some unexpected values */
		if ((abs(rc_hdlr->ctrl.ch0)  > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch1) > CHANNEL_OFFSET_MAX_ABS_VAL) || \
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bfb8      	it	lt
 80061a4:	425b      	neglt	r3, r3
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80061ac:	d81e      	bhi.n	80061ec <rc_process_rx_data+0x1a0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	bfb8      	it	lt
 80061b8:	425b      	neglt	r3, r3
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80061c0:	d814      	bhi.n	80061ec <rc_process_rx_data+0x1a0>
			 (abs(rc_hdlr->ctrl.ch2) > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch3) > CHANNEL_OFFSET_MAX_ABS_VAL))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bfb8      	it	lt
 80061cc:	425b      	neglt	r3, r3
 80061ce:	b29b      	uxth	r3, r3
		if ((abs(rc_hdlr->ctrl.ch0)  > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch1) > CHANNEL_OFFSET_MAX_ABS_VAL) || \
 80061d0:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80061d4:	d80a      	bhi.n	80061ec <rc_process_rx_data+0x1a0>
			 (abs(rc_hdlr->ctrl.ch2) > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch3) > CHANNEL_OFFSET_MAX_ABS_VAL))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bfb8      	it	lt
 80061e0:	425b      	neglt	r3, r3
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80061e8:	f240 8143 	bls.w	8006472 <rc_process_rx_data+0x426>
		  {
			rc.ctrl.ch0 = 0;
 80061ec:	4ba3      	ldr	r3, [pc, #652]	; (800647c <rc_process_rx_data+0x430>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	801a      	strh	r2, [r3, #0]
			rc.ctrl.ch1 = 0;
 80061f2:	4ba2      	ldr	r3, [pc, #648]	; (800647c <rc_process_rx_data+0x430>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	805a      	strh	r2, [r3, #2]
			rc.ctrl.ch2 = 0;
 80061f8:	4ba0      	ldr	r3, [pc, #640]	; (800647c <rc_process_rx_data+0x430>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	809a      	strh	r2, [r3, #4]
			rc.ctrl.ch3 = 0;
 80061fe:	4b9f      	ldr	r3, [pc, #636]	; (800647c <rc_process_rx_data+0x430>)
 8006200:	2200      	movs	r2, #0
 8006202:	80da      	strh	r2, [r3, #6]

		rc_key_scan(&rc_hdlr->pc.mouse.left_click, rc_hdlr->pc.mouse.click_l, 0x0001);
		rc_key_scan(&rc_hdlr->pc.mouse.right_click, rc_hdlr->pc.mouse.click_r, 0x0001);

	}
}
 8006204:	e135      	b.n	8006472 <rc_process_rx_data+0x426>
	else if(rc_hdlr->control_mode == PC_MODE){
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800620c:	2b01      	cmp	r3, #1
 800620e:	f040 8130 	bne.w	8006472 <rc_process_rx_data+0x426>
		rc_hdlr->pc.mouse.x = rc_rx_buffer[6] | (rc_rx_buffer[7] << 8);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	3306      	adds	r3, #6
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	b21a      	sxth	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	3307      	adds	r3, #7
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	b21b      	sxth	r3, r3
 8006224:	4313      	orrs	r3, r2
 8006226:	b21a      	sxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	819a      	strh	r2, [r3, #12]
		rc_hdlr->pc.mouse.y = rc_rx_buffer[8] | (rc_rx_buffer[9] << 8);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	3308      	adds	r3, #8
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b21a      	sxth	r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	3309      	adds	r3, #9
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	b21b      	sxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b21a      	sxth	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	81da      	strh	r2, [r3, #14]
		rc_hdlr->pc.mouse.z = rc_rx_buffer[10] | (rc_rx_buffer[11] << 8);//why the official parse process has z axis??
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	330a      	adds	r3, #10
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	b21a      	sxth	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	330b      	adds	r3, #11
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	b21b      	sxth	r3, r3
 8006258:	4313      	orrs	r3, r2
 800625a:	b21a      	sxth	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	821a      	strh	r2, [r3, #16]
		rc_hdlr->pc.mouse.click_l = rc_rx_buffer[12];
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	7b1a      	ldrb	r2, [r3, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	749a      	strb	r2, [r3, #18]
		rc_hdlr->pc.mouse.click_r = rc_rx_buffer[13];
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	7b5a      	ldrb	r2, [r3, #13]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	74da      	strb	r2, [r3, #19]
		rc_hdlr->pc.key.key_buffer = rc_rx_buffer[14] | (rc_rx_buffer[15] << 8);//multiple keys reading
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	330e      	adds	r3, #14
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	b21a      	sxth	r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	330f      	adds	r3, #15
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	021b      	lsls	r3, r3, #8
 8006280:	b21b      	sxth	r3, r3
 8006282:	4313      	orrs	r3, r2
 8006284:	b21b      	sxth	r3, r3
 8006286:	b29a      	uxth	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		rc_key_scan(&rc_hdlr->pc.key.W, rc_hdlr->pc.key.key_buffer, KEY_BOARD_W);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800629a:	2201      	movs	r2, #1
 800629c:	4619      	mov	r1, r3
 800629e:	f000 f992 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.S, rc_hdlr->pc.key.key_buffer, KEY_BOARD_S);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f103 0042 	add.w	r0, r3, #66	; 0x42
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80062ae:	2202      	movs	r2, #2
 80062b0:	4619      	mov	r1, r3
 80062b2:	f000 f988 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.A, rc_hdlr->pc.key.key_buffer, KEY_BOARD_A);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f103 003f 	add.w	r0, r3, #63	; 0x3f
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80062c2:	2204      	movs	r2, #4
 80062c4:	4619      	mov	r1, r3
 80062c6:	f000 f97e 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.D, rc_hdlr->pc.key.key_buffer, KEY_BOARD_D);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f103 0045 	add.w	r0, r3, #69	; 0x45
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80062d6:	2208      	movs	r2, #8
 80062d8:	4619      	mov	r1, r3
 80062da:	f000 f974 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.Shift, rc_hdlr->pc.key.key_buffer, KEY_BOARD_SHIFT);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80062ea:	2210      	movs	r2, #16
 80062ec:	4619      	mov	r1, r3
 80062ee:	f000 f96a 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.Ctrl, rc_hdlr->pc.key.key_buffer, KEY_BOARD_CTRL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80062fe:	2220      	movs	r2, #32
 8006300:	4619      	mov	r1, r3
 8006302:	f000 f960 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.Q, rc_hdlr->pc.key.key_buffer, KEY_BOARD_Q);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006312:	2240      	movs	r2, #64	; 0x40
 8006314:	4619      	mov	r1, r3
 8006316:	f000 f956 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.E, rc_hdlr->pc.key.key_buffer, KEY_BOARD_E);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f103 004b 	add.w	r0, r3, #75	; 0x4b
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006326:	2280      	movs	r2, #128	; 0x80
 8006328:	4619      	mov	r1, r3
 800632a:	f000 f94c 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.R, rc_hdlr->pc.key.key_buffer, KEY_BOARD_R);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f103 004e 	add.w	r0, r3, #78	; 0x4e
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800633a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800633e:	4619      	mov	r1, r3
 8006340:	f000 f941 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.F, rc_hdlr->pc.key.key_buffer, KEY_BOARD_F);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f103 0057 	add.w	r0, r3, #87	; 0x57
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006354:	4619      	mov	r1, r3
 8006356:	f000 f936 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.G, rc_hdlr->pc.key.key_buffer, KEY_BOARD_G);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f103 005d 	add.w	r0, r3, #93	; 0x5d
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006366:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800636a:	4619      	mov	r1, r3
 800636c:	f000 f92b 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.C, rc_hdlr->pc.key.key_buffer, KEY_BOARD_C);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800637c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006380:	4619      	mov	r1, r3
 8006382:	f000 f920 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.V, rc_hdlr->pc.key.key_buffer, KEY_BOARD_V);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f103 0051 	add.w	r0, r3, #81	; 0x51
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006396:	4619      	mov	r1, r3
 8006398:	f000 f915 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.B, rc_hdlr->pc.key.key_buffer, KEY_BOARD_B);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f103 0063 	add.w	r0, r3, #99	; 0x63
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80063a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80063ac:	4619      	mov	r1, r3
 80063ae:	f000 f90a 	bl	80065c6 <rc_key_scan>
		rc_hdlr->pc.mouse.x = first_order_low_pass_filter(&rc_hdlr->pc.mouse.x_folp, rc_hdlr->pc.mouse.x);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f103 021c 	add.w	r2, r3, #28
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063c6:	eeb0 0a67 	vmov.f32	s0, s15
 80063ca:	4610      	mov	r0, r2
 80063cc:	f7fc fda2 	bl	8002f14 <first_order_low_pass_filter>
 80063d0:	eef0 7a40 	vmov.f32	s15, s0
 80063d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063d8:	ee17 3a90 	vmov	r3, s15
 80063dc:	b21a      	sxth	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	819a      	strh	r2, [r3, #12]
		rc_hdlr->pc.mouse.y = first_order_low_pass_filter(&rc_hdlr->pc.mouse.y_folp, rc_hdlr->pc.mouse.y);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063f6:	eeb0 0a67 	vmov.f32	s0, s15
 80063fa:	4610      	mov	r0, r2
 80063fc:	f7fc fd8a 	bl	8002f14 <first_order_low_pass_filter>
 8006400:	eef0 7a40 	vmov.f32	s15, s0
 8006404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006408:	ee17 3a90 	vmov	r3, s15
 800640c:	b21a      	sxth	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	81da      	strh	r2, [r3, #14]
		if ((abs(rc_hdlr->pc.mouse.x)  > MOUSE_MAX_SPEED_VALUE) ||(abs(rc_hdlr->pc.mouse.x) > MOUSE_MAX_SPEED_VALUE)){
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	bfb8      	it	lt
 800641c:	425b      	neglt	r3, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	f247 5230 	movw	r2, #30000	; 0x7530
 8006424:	4293      	cmp	r3, r2
 8006426:	d80a      	bhi.n	800643e <rc_process_rx_data+0x3f2>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800642e:	2b00      	cmp	r3, #0
 8006430:	bfb8      	it	lt
 8006432:	425b      	neglt	r3, r3
 8006434:	b29b      	uxth	r3, r3
 8006436:	f247 5230 	movw	r2, #30000	; 0x7530
 800643a:	4293      	cmp	r3, r2
 800643c:	d905      	bls.n	800644a <rc_process_rx_data+0x3fe>
			rc_hdlr->pc.mouse.x = 0;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	819a      	strh	r2, [r3, #12]
			rc_hdlr->pc.mouse.y = 0;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	81da      	strh	r2, [r3, #14]
		rc_key_scan(&rc_hdlr->pc.mouse.left_click, rc_hdlr->pc.mouse.click_l, 0x0001);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f103 0014 	add.w	r0, r3, #20
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7c9b      	ldrb	r3, [r3, #18]
 8006454:	b29b      	uxth	r3, r3
 8006456:	2201      	movs	r2, #1
 8006458:	4619      	mov	r1, r3
 800645a:	f000 f8b4 	bl	80065c6 <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.mouse.right_click, rc_hdlr->pc.mouse.click_r, 0x0001);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f103 0017 	add.w	r0, r3, #23
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	7cdb      	ldrb	r3, [r3, #19]
 8006468:	b29b      	uxth	r3, r3
 800646a:	2201      	movs	r2, #1
 800646c:	4619      	mov	r1, r3
 800646e:	f000 f8aa 	bl	80065c6 <rc_key_scan>
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	2000d6c0 	.word	0x2000d6c0

08006480 <rc_update_comm_pack>:
  * @brief     update the remote comm pack
  * @param[in] main rc struct
  * @param[in] comm rc struct
  * @retval    None
  */
static void rc_update_comm_pack(RemoteControl_t *rc_hdlr, CommRemoteControl_t *comm_rc, CommPCControl_t *comm_pc, CommExtPCControl_t *comm_ext_pc){
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
	if(rc_hdlr->control_mode == CTRLER_MODE){
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11a      	bne.n	80064ce <rc_update_comm_pack+0x4e>
		comm_rc->rc_data[0] = rc_hdlr->ctrl.ch0;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	801a      	strh	r2, [r3, #0]
		comm_rc->rc_data[1] = rc_hdlr->ctrl.ch1;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	805a      	strh	r2, [r3, #2]
		comm_rc->rc_data[2]  = rc_hdlr->ctrl.s1;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	7a1b      	ldrb	r3, [r3, #8]
 80064b0:	b21a      	sxth	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	809a      	strh	r2, [r3, #4]
		comm_rc->rc_data[3]  = rc_hdlr->ctrl.s2;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	7a5b      	ldrb	r3, [r3, #9]
 80064ba:	b21a      	sxth	r2, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	80da      	strh	r2, [r3, #6]
		comm_rc->send_flag = 1;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2201      	movs	r2, #1
 80064c4:	721a      	strb	r2, [r3, #8]

		/* not send pc data */
		comm_pc->send_flag = 0;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	721a      	strb	r2, [r3, #8]
		comm_ext_pc->pc_data[3] = 0;
		comm_ext_pc->send_flag = 1;


	}
}
 80064cc:	e04c      	b.n	8006568 <rc_update_comm_pack+0xe8>
	else if(rc_hdlr->control_mode == PC_MODE){
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d147      	bne.n	8006568 <rc_update_comm_pack+0xe8>
		comm_rc->rc_data[0] = chassis.chassis_mode;//board mode
 80064d8:	4b26      	ldr	r3, [pc, #152]	; (8006574 <rc_update_comm_pack+0xf4>)
 80064da:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80064de:	b21a      	sxth	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	801a      	strh	r2, [r3, #0]
		comm_rc->rc_data[1] = chassis.chassis_act_mode;//act_mode
 80064e4:	4b23      	ldr	r3, [pc, #140]	; (8006574 <rc_update_comm_pack+0xf4>)
 80064e6:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80064ea:	b21a      	sxth	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	805a      	strh	r2, [r3, #2]
		comm_rc->rc_data[2]  = rc_hdlr->ctrl.s1;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	7a1b      	ldrb	r3, [r3, #8]
 80064f4:	b21a      	sxth	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	809a      	strh	r2, [r3, #4]
		comm_rc->rc_data[3]  = rc_hdlr->ctrl.s2;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	7a5b      	ldrb	r3, [r3, #9]
 80064fe:	b21a      	sxth	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	80da      	strh	r2, [r3, #6]
		comm_rc->send_flag = 1;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2201      	movs	r2, #1
 8006508:	721a      	strb	r2, [r3, #8]
		comm_pc->pc_data[0] = rc_hdlr->pc.mouse.x;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	801a      	strh	r2, [r3, #0]
		comm_pc->pc_data[1] = rc_hdlr->pc.mouse.y;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	805a      	strh	r2, [r3, #2]
		comm_pc->pc_data[2]  = rc_hdlr->pc.mouse.left_click.status;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	7d1b      	ldrb	r3, [r3, #20]
 8006522:	b21a      	sxth	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	809a      	strh	r2, [r3, #4]
		comm_pc->pc_data[3]  = rc_hdlr->pc.mouse.right_click.status;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	7ddb      	ldrb	r3, [r3, #23]
 800652c:	b21a      	sxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	80da      	strh	r2, [r3, #6]
		comm_pc->send_flag = 1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	721a      	strb	r2, [r3, #8]
		comm_ext_pc->pc_data[0] = rc_hdlr->pc.key.C.status;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800653e:	b21a      	sxth	r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	801a      	strh	r2, [r3, #0]
		comm_ext_pc->pc_data[1] = rc_hdlr->pc.key.V.status;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800654a:	b21a      	sxth	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	805a      	strh	r2, [r3, #2]
		comm_ext_pc->pc_data[2] = rc_hdlr->pc.key.B.status;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8006556:	b21a      	sxth	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	809a      	strh	r2, [r3, #4]
		comm_ext_pc->pc_data[3] = 0;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2200      	movs	r2, #0
 8006560:	80da      	strh	r2, [r3, #6]
		comm_ext_pc->send_flag = 1;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2201      	movs	r2, #1
 8006566:	721a      	strb	r2, [r3, #8]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	2000d528 	.word	0x2000d528

08006578 <rc_reset>:
/**
  * @brief     reset everything when error occurs
  * @param[in] main rc struct
  * @retval    None
  */
void rc_reset(RemoteControl_t *rc_hdlr){
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	/* stop DMA */
	HAL_UART_DMAStop(&huart3);
 8006580:	4805      	ldr	r0, [pc, #20]	; (8006598 <rc_reset+0x20>)
 8006582:	f008 ff60 	bl	800f446 <HAL_UART_DMAStop>
	/* try to reconnect to rc */
	HAL_UART_Receive_DMA(&huart3, rc_rx_buffer, DBUS_BUFFER_LEN);
 8006586:	2212      	movs	r2, #18
 8006588:	4904      	ldr	r1, [pc, #16]	; (800659c <rc_reset+0x24>)
 800658a:	4803      	ldr	r0, [pc, #12]	; (8006598 <rc_reset+0x20>)
 800658c:	f008 ff2b 	bl	800f3e6 <HAL_UART_Receive_DMA>
}
 8006590:	bf00      	nop
 8006592:	3708      	adds	r7, #8
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	2000dd28 	.word	0x2000dd28
 800659c:	2000d98c 	.word	0x2000d98c

080065a0 <rc_key_init>:
/**
  * @brief	   key object initialization
  * @param[in] key object
  * @retval    None
  */
void rc_key_init(KeyObject_t *key){
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
	key->status = RELEASED;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	701a      	strb	r2, [r3, #0]
	key->pre_status = RELEASED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	705a      	strb	r2, [r3, #1]
	key->status_count = 0;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	709a      	strb	r2, [r3, #2]
}
 80065ba:	bf00      	nop
 80065bc:	370c      	adds	r7, #12
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <rc_key_scan>:
/**
  * @brief	   key object initialization
  * @param[in] key object
  * @retval    None
  */
void rc_key_scan(KeyObject_t *key_obj, uint16_t key_buffer, uint16_t compare_key){
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	460b      	mov	r3, r1
 80065d0:	807b      	strh	r3, [r7, #2]
 80065d2:	4613      	mov	r3, r2
 80065d4:	803b      	strh	r3, [r7, #0]
	if(key_buffer & compare_key)
 80065d6:	887a      	ldrh	r2, [r7, #2]
 80065d8:	883b      	ldrh	r3, [r7, #0]
 80065da:	4013      	ands	r3, r2
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d006      	beq.n	80065f0 <rc_key_scan+0x2a>
		key_obj->status_count++;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	789b      	ldrb	r3, [r3, #2]
 80065e6:	3301      	adds	r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	709a      	strb	r2, [r3, #2]
 80065ee:	e002      	b.n	80065f6 <rc_key_scan+0x30>
	else
		key_obj->status_count = 0;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	709a      	strb	r2, [r3, #2]
	rc_get_key_status(key_obj);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f804 	bl	8006604 <rc_get_key_status>
}
 80065fc:	bf00      	nop
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <rc_get_key_status>:
/**
  * @brief     get the current key status based on the count
  * @param[in] key object
  * @retval    current key status
  */
KeyStatus_t rc_get_key_status(KeyObject_t *key){
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	key->pre_status = key->status;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	781a      	ldrb	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	705a      	strb	r2, [r3, #1]
	if(key->status_count > 1){// hold pressed
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	789b      	ldrb	r3, [r3, #2]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d919      	bls.n	8006650 <rc_get_key_status+0x4c>
		switch(key->pre_status){
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b02      	cmp	r3, #2
 8006622:	dc02      	bgt.n	800662a <rc_get_key_status+0x26>
 8006624:	2b00      	cmp	r3, #0
 8006626:	da03      	bge.n	8006630 <rc_get_key_status+0x2c>
 8006628:	e00a      	b.n	8006640 <rc_get_key_status+0x3c>
 800662a:	2b03      	cmp	r3, #3
 800662c:	d004      	beq.n	8006638 <rc_get_key_status+0x34>
 800662e:	e007      	b.n	8006640 <rc_get_key_status+0x3c>
			/* in this case, we have 2 possible pre status */
			case RELEASED:
			case PRESSED_TO_RELEASE:
			case RELEASED_TO_PRESS: key->status = PRESSED;break;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2203      	movs	r2, #3
 8006634:	701a      	strb	r2, [r3, #0]
 8006636:	e003      	b.n	8006640 <rc_get_key_status+0x3c>
			case PRESSED: key->status = PRESSED;break;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2203      	movs	r2, #3
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	bf00      	nop
		}
		if(key->status_count > 100)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	789b      	ldrb	r3, [r3, #2]
 8006644:	2b64      	cmp	r3, #100	; 0x64
 8006646:	d93c      	bls.n	80066c2 <rc_get_key_status+0xbe>
			key->status_count = 100; //avoid infinite addition
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2264      	movs	r2, #100	; 0x64
 800664c:	709a      	strb	r2, [r3, #2]
 800664e:	e038      	b.n	80066c2 <rc_get_key_status+0xbe>
	}
	else if(key->status_count == 1){ // rising edge triggered
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	789b      	ldrb	r3, [r3, #2]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d115      	bne.n	8006684 <rc_get_key_status+0x80>
		switch(key->pre_status){
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b03      	cmp	r3, #3
 800665e:	d009      	beq.n	8006674 <rc_get_key_status+0x70>
 8006660:	2b03      	cmp	r3, #3
 8006662:	dc2e      	bgt.n	80066c2 <rc_get_key_status+0xbe>
 8006664:	2b01      	cmp	r3, #1
 8006666:	dc02      	bgt.n	800666e <rc_get_key_status+0x6a>
 8006668:	2b00      	cmp	r3, #0
 800666a:	da03      	bge.n	8006674 <rc_get_key_status+0x70>
 800666c:	e029      	b.n	80066c2 <rc_get_key_status+0xbe>
 800666e:	2b02      	cmp	r3, #2
 8006670:	d004      	beq.n	800667c <rc_get_key_status+0x78>
 8006672:	e026      	b.n	80066c2 <rc_get_key_status+0xbe>
			/* in this case , we have 2 possible pre status */
			case RELEASED_TO_PRESS:
			case PRESSED:
			case RELEASED: key->status = RELEASED_TO_PRESS;break;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	701a      	strb	r2, [r3, #0]
 800667a:	e022      	b.n	80066c2 <rc_get_key_status+0xbe>
			case PRESSED_TO_RELEASE:key->status = RELEASED_TO_PRESS;break;// count not ++, indicate																	 // not pressed
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	e01e      	b.n	80066c2 <rc_get_key_status+0xbe>
		}
	}
	else if(key->status_count == 0){ // released
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	789b      	ldrb	r3, [r3, #2]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d119      	bne.n	80066c0 <rc_get_key_status+0xbc>
		switch(key->pre_status){
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	785b      	ldrb	r3, [r3, #1]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d00d      	beq.n	80066b0 <rc_get_key_status+0xac>
 8006694:	2b03      	cmp	r3, #3
 8006696:	dc14      	bgt.n	80066c2 <rc_get_key_status+0xbe>
 8006698:	2b01      	cmp	r3, #1
 800669a:	dc02      	bgt.n	80066a2 <rc_get_key_status+0x9e>
 800669c:	2b00      	cmp	r3, #0
 800669e:	da03      	bge.n	80066a8 <rc_get_key_status+0xa4>
 80066a0:	e00f      	b.n	80066c2 <rc_get_key_status+0xbe>
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d008      	beq.n	80066b8 <rc_get_key_status+0xb4>
 80066a6:	e00c      	b.n	80066c2 <rc_get_key_status+0xbe>
			/* in this case , we have 3 possible pre status */
			case RELEASED_TO_PRESS:
			case RELEASED: key->status = RELEASED;break;//release
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	701a      	strb	r2, [r3, #0]
 80066ae:	e008      	b.n	80066c2 <rc_get_key_status+0xbe>
			case PRESSED: key->status  =  PRESSED_TO_RELEASE;break;//just release, falling edge triggered
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2202      	movs	r2, #2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e004      	b.n	80066c2 <rc_get_key_status+0xbe>
			case PRESSED_TO_RELEASE:key->status = RELEASED;break; // release
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	e000      	b.n	80066c2 <rc_get_key_status+0xbe>
		}
	}
 80066c0:	bf00      	nop
	return key->status;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	781b      	ldrb	r3, [r3, #0]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
	...

080066d4 <IMU_Task_Function>:
/**
  * @brief     IMU task main entry function
  * @retval    None
  */
/* Task execution time (per loop): 1 ms */
void IMU_Task_Function(void){
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5); // task exec period 1ms
 80066da:	2305      	movs	r3, #5
 80066dc:	607b      	str	r3, [r7, #4]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 80066de:	f00a fc55 	bl	8010f8c <xTaskGetTickCount>
 80066e2:	4603      	mov	r3, r0
 80066e4:	603b      	str	r3, [r7, #0]

	/* main imu task begins */
	for(;;){

		/* set watch point */
		if( imu_init_flag != 1){//gimbal_cali_done_flag == 1 &&
 80066e6:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <IMU_Task_Function+0x80>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d023      	beq.n	8006736 <IMU_Task_Function+0x62>

			/* init imu parameters */
			imu_task_init();
 80066ee:	f000 f839 	bl	8006764 <imu_task_init>

			while(imu.temp_status != NORMAL){
 80066f2:	e00d      	b.n	8006710 <IMU_Task_Function+0x3c>
				imu.temp = get_BMI088_temperature();
 80066f4:	f001 fc02 	bl	8007efc <get_BMI088_temperature>
 80066f8:	eef0 7a40 	vmov.f32	s15, s0
 80066fc:	4b16      	ldr	r3, [pc, #88]	; (8006758 <IMU_Task_Function+0x84>)
 80066fe:	edc3 7a00 	vstr	s15, [r3]
				imu_temp_pid_control();
 8006702:	f000 f891 	bl	8006828 <imu_temp_pid_control>
				vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006706:	463b      	mov	r3, r7
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	4618      	mov	r0, r3
 800670c:	f00a fa82 	bl	8010c14 <vTaskDelayUntil>
			while(imu.temp_status != NORMAL){
 8006710:	4b11      	ldr	r3, [pc, #68]	; (8006758 <IMU_Task_Function+0x84>)
 8006712:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1ec      	bne.n	80066f4 <IMU_Task_Function+0x20>
			}

			/* set the offset when the temperature reach normal status */
			__HAL_TIM_SET_COMPARE(&IMU_TMP_PWM_HTIM, IMU_TMP_PWM_CHANNEL, 1000);//small current to keep tmp
 800671a:	4b10      	ldr	r3, [pc, #64]	; (800675c <IMU_Task_Function+0x88>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006722:	635a      	str	r2, [r3, #52]	; 0x34
			bmi088_get_offset();
 8006724:	f001 fe3e 	bl	80083a4 <bmi088_get_offset>

			/* imu init finished */
			imu_init_flag = 1;
 8006728:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <IMU_Task_Function+0x80>)
 800672a:	2201      	movs	r2, #1
 800672c:	701a      	strb	r2, [r3, #0]
			buzzer_play_mario(300);
 800672e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006732:	f000 fb83 	bl	8006e3c <buzzer_play_mario>
			}

		/* IMU temperature PID control*/
		imu_temp_pid_control();
 8006736:	f000 f877 	bl	8006828 <imu_temp_pid_control>
		/* read the mpu data */
		if(imu_init_flag == 1){
 800673a:	4b06      	ldr	r3, [pc, #24]	; (8006754 <IMU_Task_Function+0x80>)
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d102      	bne.n	8006748 <IMU_Task_Function+0x74>
			bmi088_get_data(&imu.ahrs_sensor);
 8006742:	4807      	ldr	r0, [pc, #28]	; (8006760 <IMU_Task_Function+0x8c>)
 8006744:	f001 fd0c 	bl	8008160 <bmi088_get_data>
		}

		/* delay utill wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006748:	463b      	mov	r3, r7
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	4618      	mov	r0, r3
 800674e:	f00a fa61 	bl	8010c14 <vTaskDelayUntil>
		if( imu_init_flag != 1){//gimbal_cali_done_flag == 1 &&
 8006752:	e7c8      	b.n	80066e6 <IMU_Task_Function+0x12>
 8006754:	200004ca 	.word	0x200004ca
 8006758:	200045f4 	.word	0x200045f4
 800675c:	2000db48 	.word	0x2000db48
 8006760:	2000463c 	.word	0x2000463c

08006764 <imu_task_init>:

	}
}

void imu_task_init(void){
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
	/* inint bmi088 */
	bmi088_device_init();
 8006768:	f001 fd40 	bl	80081ec <bmi088_device_init>
	ist8310_init();
 800676c:	f001 fec8 	bl	8008500 <ist8310_init>
	/* init sensor pid */
	pid_param_init(&(imu.tmp_pid), 2000, 1500, 25, 800, 0.15, 0.05);
 8006770:	ed9f 2a16 	vldr	s4, [pc, #88]	; 80067cc <imu_task_init+0x68>
 8006774:	eddf 1a16 	vldr	s3, [pc, #88]	; 80067d0 <imu_task_init+0x6c>
 8006778:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80067d4 <imu_task_init+0x70>
 800677c:	eef3 0a09 	vmov.f32	s1, #57	; 0x41c80000  25.0
 8006780:	ed9f 0a15 	vldr	s0, [pc, #84]	; 80067d8 <imu_task_init+0x74>
 8006784:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006788:	4814      	ldr	r0, [pc, #80]	; (80067dc <imu_task_init+0x78>)
 800678a:	f7fc f9d1 	bl	8002b30 <pid_param_init>
	set_imu_temp_status(&imu, ABNORMAL);
 800678e:	2101      	movs	r1, #1
 8006790:	4813      	ldr	r0, [pc, #76]	; (80067e0 <imu_task_init+0x7c>)
 8006792:	f000 f827 	bl	80067e4 <set_imu_temp_status>
	imu.imu_mode = GA_MODE; // forbid ist8310
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <imu_task_init+0x7c>)
 8006798:	2201      	movs	r2, #1
 800679a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if(imu.imu_mode == GA_MODE){
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <imu_task_init+0x7c>)
 80067a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d10b      	bne.n	80067c0 <imu_task_init+0x5c>
    	// no use ist8310
		imu.ahrs_sensor.mx = 0.0f;
 80067a8:	4b0d      	ldr	r3, [pc, #52]	; (80067e0 <imu_task_init+0x7c>)
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	661a      	str	r2, [r3, #96]	; 0x60
		imu.ahrs_sensor.my = 0.0f;
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <imu_task_init+0x7c>)
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	665a      	str	r2, [r3, #100]	; 0x64
		imu.ahrs_sensor.mz = 0.0f;
 80067b8:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <imu_task_init+0x7c>)
 80067ba:	f04f 0200 	mov.w	r2, #0
 80067be:	669a      	str	r2, [r3, #104]	; 0x68
    }
//	imu.sample_time = DWT_Get();
	imu.temp = 0.0;
 80067c0:	4b07      	ldr	r3, [pc, #28]	; (80067e0 <imu_task_init+0x7c>)
 80067c2:	f04f 0200 	mov.w	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	3d4ccccd 	.word	0x3d4ccccd
 80067d0:	3e19999a 	.word	0x3e19999a
 80067d4:	44480000 	.word	0x44480000
 80067d8:	44bb8000 	.word	0x44bb8000
 80067dc:	200045fc 	.word	0x200045fc
 80067e0:	200045f4 	.word	0x200045f4

080067e4 <set_imu_temp_status>:
  * @brief     set IMU temp status
  * @param[in] pimu: main imu sturct
  * @param[in] status: IMU_temp_status enum variable
  * @retval    None
  */
void set_imu_temp_status(IMU_t *pimu, IMU_temp_status status){
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
	pimu->temp_status = status;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	78fa      	ldrb	r2, [r7, #3]
 80067f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80067f8:	bf00      	nop
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <set_imu_pwm>:

void set_imu_pwm(IMU_t *pimu, uint16_t pwm){
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	807b      	strh	r3, [r7, #2]
	 __HAL_TIM_SET_COMPARE(&IMU_TMP_PWM_HTIM, IMU_TMP_PWM_CHANNEL, pwm);
 8006810:	4b04      	ldr	r3, [pc, #16]	; (8006824 <set_imu_pwm+0x20>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	887a      	ldrh	r2, [r7, #2]
 8006816:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr
 8006824:	2000db48 	.word	0x2000db48

08006828 <imu_temp_pid_control>:
  * @brief  temperature of imu pid control
  * @param[in]: Not used
  * @retval 0
  */
int32_t imu_temp_pid_control(void)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
  float temp=imu.temp;
 800682e:	4b37      	ldr	r3, [pc, #220]	; (800690c <imu_temp_pid_control+0xe4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	607b      	str	r3, [r7, #4]
  pid_single_loop_control(DEFAULT_IMU_TEMP, &(imu.tmp_pid), temp); // pid control
 8006834:	edd7 0a01 	vldr	s1, [r7, #4]
 8006838:	4835      	ldr	r0, [pc, #212]	; (8006910 <imu_temp_pid_control+0xe8>)
 800683a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8006914 <imu_temp_pid_control+0xec>
 800683e:	f7fc fa4b 	bl	8002cd8 <pid_single_loop_control>

  if(temp <= (DEFAULT_IMU_TEMP+0.1f) && temp >= (DEFAULT_IMU_TEMP-0.1f)){
 8006842:	edd7 7a01 	vldr	s15, [r7, #4]
 8006846:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006918 <imu_temp_pid_control+0xf0>
 800684a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006852:	d81f      	bhi.n	8006894 <imu_temp_pid_control+0x6c>
 8006854:	edd7 7a01 	vldr	s15, [r7, #4]
 8006858:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800691c <imu_temp_pid_control+0xf4>
 800685c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006864:	db16      	blt.n	8006894 <imu_temp_pid_control+0x6c>
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 8006866:	2200      	movs	r2, #0
 8006868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800686c:	482c      	ldr	r0, [pc, #176]	; (8006920 <imu_temp_pid_control+0xf8>)
 800686e:	f005 fed9 	bl	800c624 <HAL_GPIO_WritePin>
	  set_imu_pwm(&imu, imu.tmp_pid.total_out);
 8006872:	4b26      	ldr	r3, [pc, #152]	; (800690c <imu_temp_pid_control+0xe4>)
 8006874:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800687c:	ee17 3a90 	vmov	r3, s15
 8006880:	b29b      	uxth	r3, r3
 8006882:	4619      	mov	r1, r3
 8006884:	4821      	ldr	r0, [pc, #132]	; (800690c <imu_temp_pid_control+0xe4>)
 8006886:	f7ff ffbd 	bl	8006804 <set_imu_pwm>
	  set_imu_temp_status(&imu, NORMAL);
 800688a:	2100      	movs	r1, #0
 800688c:	481f      	ldr	r0, [pc, #124]	; (800690c <imu_temp_pid_control+0xe4>)
 800688e:	f7ff ffa9 	bl	80067e4 <set_imu_temp_status>
 8006892:	e035      	b.n	8006900 <imu_temp_pid_control+0xd8>
  }
  else if(temp > DEFAULT_IMU_TEMP + 0.1f){
 8006894:	edd7 7a01 	vldr	s15, [r7, #4]
 8006898:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006918 <imu_temp_pid_control+0xf0>
 800689c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	dd16      	ble.n	80068d4 <imu_temp_pid_control+0xac>
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80068a6:	2201      	movs	r2, #1
 80068a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068ac:	481c      	ldr	r0, [pc, #112]	; (8006920 <imu_temp_pid_control+0xf8>)
 80068ae:	f005 feb9 	bl	800c624 <HAL_GPIO_WritePin>
	  set_imu_pwm(&imu, imu.tmp_pid.total_out);
 80068b2:	4b16      	ldr	r3, [pc, #88]	; (800690c <imu_temp_pid_control+0xe4>)
 80068b4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80068b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068bc:	ee17 3a90 	vmov	r3, s15
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4619      	mov	r1, r3
 80068c4:	4811      	ldr	r0, [pc, #68]	; (800690c <imu_temp_pid_control+0xe4>)
 80068c6:	f7ff ff9d 	bl	8006804 <set_imu_pwm>
	  set_imu_temp_status(&imu, ABNORMAL);
 80068ca:	2101      	movs	r1, #1
 80068cc:	480f      	ldr	r0, [pc, #60]	; (800690c <imu_temp_pid_control+0xe4>)
 80068ce:	f7ff ff89 	bl	80067e4 <set_imu_temp_status>
 80068d2:	e015      	b.n	8006900 <imu_temp_pid_control+0xd8>
  }
  else{
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80068d4:	2201      	movs	r2, #1
 80068d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80068da:	4811      	ldr	r0, [pc, #68]	; (8006920 <imu_temp_pid_control+0xf8>)
 80068dc:	f005 fea2 	bl	800c624 <HAL_GPIO_WritePin>
	  set_imu_pwm(&imu, imu.tmp_pid.total_out);
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <imu_temp_pid_control+0xe4>)
 80068e2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80068e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ea:	ee17 3a90 	vmov	r3, s15
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	4619      	mov	r1, r3
 80068f2:	4806      	ldr	r0, [pc, #24]	; (800690c <imu_temp_pid_control+0xe4>)
 80068f4:	f7ff ff86 	bl	8006804 <set_imu_pwm>
	  set_imu_temp_status(&imu, ABNORMAL);
 80068f8:	2101      	movs	r1, #1
 80068fa:	4804      	ldr	r0, [pc, #16]	; (800690c <imu_temp_pid_control+0xe4>)
 80068fc:	f7ff ff72 	bl	80067e4 <set_imu_temp_status>
  }
  return 0;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	200045f4 	.word	0x200045f4
 8006910:	200045fc 	.word	0x200045fc
 8006914:	42340000 	.word	0x42340000
 8006918:	42346666 	.word	0x42346666
 800691c:	4233999a 	.word	0x4233999a
 8006920:	40021c00 	.word	0x40021c00

08006924 <Referee_Task_Func>:
/**
  * @brief     main ref sys task function
  * @param[in] None
  * @retval    None
  */
void Referee_Task_Func(void const * argument){
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	referee_init(&referee);
 800692c:	4809      	ldr	r0, [pc, #36]	; (8006954 <Referee_Task_Func+0x30>)
 800692e:	f000 f815 	bl	800695c <referee_init>

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10); // task exec period 10ms
 8006932:	230a      	movs	r3, #10
 8006934:	60fb      	str	r3, [r7, #12]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8006936:	f00a fb29 	bl	8010f8c <xTaskGetTickCount>
 800693a:	4603      	mov	r3, r0
 800693c:	60bb      	str	r3, [r7, #8]
	for(;;){
		referee_read_data(&referee, ref_rx_frame);
 800693e:	4906      	ldr	r1, [pc, #24]	; (8006958 <Referee_Task_Func+0x34>)
 8006940:	4804      	ldr	r0, [pc, #16]	; (8006954 <Referee_Task_Func+0x30>)
 8006942:	f000 f855 	bl	80069f0 <referee_read_data>

		/* delay until wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006946:	f107 0308 	add.w	r3, r7, #8
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	4618      	mov	r0, r3
 800694e:	f00a f961 	bl	8010c14 <vTaskDelayUntil>
		referee_read_data(&referee, ref_rx_frame);
 8006952:	e7f4      	b.n	800693e <Referee_Task_Func+0x1a>
 8006954:	2000d72c 	.word	0x2000d72c
 8006958:	20000790 	.word	0x20000790

0800695c <referee_init>:
/**
  * @brief     init ref sys struct
  * @param[in] main ref struct
  * @retval    None
  */
void referee_init(Referee_t *ref){
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]

	memset(&(ref->header), 0, sizeof(frame_header_t));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2205      	movs	r2, #5
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f00b fae4 	bl	8011f38 <memset>

	memset(&(ref->game_status_data),  0, sizeof(game_status_t));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	332e      	adds	r3, #46	; 0x2e
 8006974:	220b      	movs	r2, #11
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f00b fadd 	bl	8011f38 <memset>
	memset(&(ref->HP_data), 		  0, sizeof(game_robot_HP_t));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3339      	adds	r3, #57	; 0x39
 8006982:	2220      	movs	r2, #32
 8006984:	2100      	movs	r1, #0
 8006986:	4618      	mov	r0, r3
 8006988:	f00b fad6 	bl	8011f38 <memset>
	memset(&(ref->robot_status_data), 0, sizeof(robot_status_t));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3359      	adds	r3, #89	; 0x59
 8006990:	220d      	movs	r2, #13
 8006992:	2100      	movs	r1, #0
 8006994:	4618      	mov	r0, r3
 8006996:	f00b facf 	bl	8011f38 <memset>
	memset(&(ref->power_heat_data),   0, sizeof(power_heat_data_t));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	3366      	adds	r3, #102	; 0x66
 800699e:	2210      	movs	r2, #16
 80069a0:	2100      	movs	r1, #0
 80069a2:	4618      	mov	r0, r3
 80069a4:	f00b fac8 	bl	8011f38 <memset>
	memset(&(ref->shoot_data), 		  0, sizeof(shoot_data_t));
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	3376      	adds	r3, #118	; 0x76
 80069ac:	2207      	movs	r2, #7
 80069ae:	2100      	movs	r1, #0
 80069b0:	4618      	mov	r0, r3
 80069b2:	f00b fac1 	bl	8011f38 <memset>
	memset(&(ref->ui_intrect_data),   0, sizeof(robot_interaction_data_t));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	337d      	adds	r3, #125	; 0x7d
 80069ba:	2277      	movs	r2, #119	; 0x77
 80069bc:	2100      	movs	r1, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	f00b faba 	bl	8011f38 <memset>
	memset(&(ref->custom_robot_data), 0, sizeof(custom_robot_data_t));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	33f4      	adds	r3, #244	; 0xf4
 80069c8:	221e      	movs	r2, #30
 80069ca:	2100      	movs	r1, #0
 80069cc:	4618      	mov	r0, r3
 80069ce:	f00b fab3 	bl	8011f38 <memset>

	ref->robot_status_data.robot_level = 1;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	ref->ref_cmd_id = IDLE_ID;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <referee_read_data>:
  * @brief     init ref sys struct
  * @param[in] main ref struct
  * @param[in] received frame (array) from ref sys // abodoned, directly copy within uart3 dma
  * @retval    None
  */
void referee_read_data(Referee_t *ref, uint8_t *rx_frame){
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]

	referee_parsed_flag = 0;
 80069fa:	4b40      	ldr	r3, [pc, #256]	; (8006afc <referee_read_data+0x10c>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	801a      	strh	r2, [r3, #0]

	if (rx_frame == NULL) {
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d075      	beq.n	8006af2 <referee_read_data+0x102>
		// frame is NULL, return
		return;
	}
	/* copy frame header */
	memcpy(&ref->header, rx_frame, HEADER_LEN);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2205      	movs	r2, #5
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f00b fa85 	bl	8011f1c <memcpy>

	/* frame header CRC8 verification */
	// FIXME: We don't know if we still need crc8 verification. if not , probably just update the pointer
//	if(ref->header.sof == SOF_ID && Verify_CRC8_Check_Sum(&(ref->header), HEADER_LEN) == 1){
	if(ref->header.sof == SOF_ID){
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2ba5      	cmp	r3, #165	; 0xa5
 8006a18:	d106      	bne.n	8006a28 <referee_read_data+0x38>
		/* successfully verified */
		ref->ref_cmd_id = *(uint16_t *)(rx_frame + HEADER_LEN); //point to the addr of the cmd id
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	f8b3 2005 	ldrh.w	r2, [r3, #5]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112
 8006a26:	e006      	b.n	8006a36 <referee_read_data+0x46>
	}
	else{
		ref->ref_cmd_id = IDLE_ID;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
	}

	//uint8_t ref_data_index = HEADER_LEN + CMD_LEN;// an index value pointed to current data addr
	memcpy(ref->ref_data, rx_frame + HEADER_LEN + CMD_LEN, sizeof(ref->ref_data));//pointer to the beginning of the data addr
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	1d58      	adds	r0, r3, #5
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	3307      	adds	r3, #7
 8006a3e:	2229      	movs	r2, #41	; 0x29
 8006a40:	4619      	mov	r1, r3
 8006a42:	f00b fa6b 	bl	8011f1c <memcpy>


	/* parse the frame and get referee data */
	switch(ref->ref_cmd_id){
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	f240 2207 	movw	r2, #519	; 0x207
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d03f      	beq.n	8006ad6 <referee_read_data+0xe6>
 8006a56:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8006a5a:	da46      	bge.n	8006aea <referee_read_data+0xfa>
 8006a5c:	f240 2202 	movw	r2, #514	; 0x202
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d02e      	beq.n	8006ac2 <referee_read_data+0xd2>
 8006a64:	f240 2202 	movw	r2, #514	; 0x202
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	dc3e      	bgt.n	8006aea <referee_read_data+0xfa>
 8006a6c:	f240 2201 	movw	r2, #513	; 0x201
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d01c      	beq.n	8006aae <referee_read_data+0xbe>
 8006a74:	f240 2201 	movw	r2, #513	; 0x201
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	dc36      	bgt.n	8006aea <referee_read_data+0xfa>
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d002      	beq.n	8006a86 <referee_read_data+0x96>
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d00a      	beq.n	8006a9a <referee_read_data+0xaa>
 8006a84:	e031      	b.n	8006aea <referee_read_data+0xfa>
		case GAME_STAT_ID: {
			memcpy(&(ref->game_status_data), ref->ref_data, sizeof(game_status_t));break;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	3305      	adds	r3, #5
 8006a90:	220b      	movs	r2, #11
 8006a92:	4619      	mov	r1, r3
 8006a94:	f00b fa42 	bl	8011f1c <memcpy>
 8006a98:	e027      	b.n	8006aea <referee_read_data+0xfa>
		}
		case GMAE_HP_ID: {
			memcpy(&(ref->HP_data), ref->ref_data, sizeof(game_robot_HP_t));break;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3305      	adds	r3, #5
 8006aa4:	2220      	movs	r2, #32
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	f00b fa38 	bl	8011f1c <memcpy>
 8006aac:	e01d      	b.n	8006aea <referee_read_data+0xfa>
		}
		case ROBOT_STAT_ID: {
			memcpy(&(ref->robot_status_data), ref->ref_data, sizeof(robot_status_t));break;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f103 0059 	add.w	r0, r3, #89	; 0x59
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3305      	adds	r3, #5
 8006ab8:	220d      	movs	r2, #13
 8006aba:	4619      	mov	r1, r3
 8006abc:	f00b fa2e 	bl	8011f1c <memcpy>
 8006ac0:	e013      	b.n	8006aea <referee_read_data+0xfa>
		}
		case POWER_HEAT_ID: {
			memcpy(&(ref->power_heat_data), ref->ref_data, sizeof(power_heat_data_t));break;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f103 0066 	add.w	r0, r3, #102	; 0x66
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	3305      	adds	r3, #5
 8006acc:	2210      	movs	r2, #16
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f00b fa24 	bl	8011f1c <memcpy>
 8006ad4:	e009      	b.n	8006aea <referee_read_data+0xfa>
		}
		case SHOOT_ID: {
			memcpy(&(ref->shoot_data), ref->ref_data, sizeof(shoot_data_t));break;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f103 0076 	add.w	r0, r3, #118	; 0x76
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	3305      	adds	r3, #5
 8006ae0:	2207      	movs	r2, #7
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	f00b fa1a 	bl	8011f1c <memcpy>
 8006ae8:	bf00      	nop
		}

	}

	referee_parsed_flag = 1;
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <referee_read_data+0x10c>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	801a      	strh	r2, [r3, #0]
 8006af0:	e000      	b.n	8006af4 <referee_read_data+0x104>
		return;
 8006af2:	bf00      	nop
}
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200004cc 	.word	0x200004cc

08006b00 <Timer_Task_Func>:
* @retval None
*/

/* Task execution time (per loop): 1ms */
//FIXME: this task takes too much time to run, try to optimize it within 2-3ms
void Timer_Task_Func(void const * argument){
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b086      	sub	sp, #24
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	6078      	str	r0, [r7, #4]

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 1ms
 8006b08:	2301      	movs	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8006b0c:	f00a fa3e 	bl	8010f8c <xTaskGetTickCount>
 8006b10:	4603      	mov	r3, r0
 8006b12:	60bb      	str	r3, [r7, #8]

	for (;;){

		//FIXME: may put this read fucntion to can pending callback function
		Motor_Data_Read(&hcan1);
 8006b14:	4824      	ldr	r0, [pc, #144]	; (8006ba8 <Timer_Task_Func+0xa8>)
 8006b16:	f000 fa2f 	bl	8006f78 <Motor_Data_Read>
		/* CAN data  */
		if(board_status == CHASSIS_BOARD){
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <Timer_Task_Func+0xac>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d115      	bne.n	8006b4e <Timer_Task_Func+0x4e>
			Motor_Data_Send(&hcan1, MOTOR_3508_STDID,
 8006b22:	4b23      	ldr	r3, [pc, #140]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b24:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8006b28:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b2a:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 8006b2e:	4b20      	ldr	r3, [pc, #128]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b30:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8006b34:	4a1e      	ldr	r2, [pc, #120]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b36:	f8d2 224c 	ldr.w	r2, [r2, #588]	; 0x24c
 8006b3a:	9201      	str	r2, [sp, #4]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	4603      	mov	r3, r0
 8006b40:	460a      	mov	r2, r1
 8006b42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b46:	4818      	ldr	r0, [pc, #96]	; (8006ba8 <Timer_Task_Func+0xa8>)
 8006b48:	f000 fa72 	bl	8007030 <Motor_Data_Send>
 8006b4c:	e024      	b.n	8006b98 <Timer_Task_Func+0x98>
							motor_data[0].tx_data,
							motor_data[1].tx_data,
							motor_data[2].tx_data,
							motor_data[3].tx_data);
		}
		else if(board_status == GIMBAL_BOARD){
 8006b4e:	4b17      	ldr	r3, [pc, #92]	; (8006bac <Timer_Task_Func+0xac>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d120      	bne.n	8006b98 <Timer_Task_Func+0x98>
			Motor_Data_Send(&hcan1, MOTOR_6020_STDID,
 8006b56:	4b16      	ldr	r3, [pc, #88]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b58:	f8d3 22e0 	ldr.w	r2, [r3, #736]	; 0x2e0
 8006b5c:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b5e:	f8d3 1374 	ldr.w	r1, [r3, #884]	; 0x374
 8006b62:	4b13      	ldr	r3, [pc, #76]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b64:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8006b68:	2000      	movs	r0, #0
 8006b6a:	9001      	str	r0, [sp, #4]
 8006b6c:	9300      	str	r3, [sp, #0]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006b74:	480c      	ldr	r0, [pc, #48]	; (8006ba8 <Timer_Task_Func+0xa8>)
 8006b76:	f000 fa5b 	bl	8007030 <Motor_Data_Send>
							motor_data[4].tx_data,
							motor_data[5].tx_data,
							motor_data[6].tx_data,
							0);
#ifdef USE_CAN_FRIC
			Motor_Data_Send(&hcan1, MOTOR_3508_STDID,
 8006b7a:	4b0d      	ldr	r3, [pc, #52]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b7c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006b80:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <Timer_Task_Func+0xb0>)
 8006b82:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8006b86:	2100      	movs	r1, #0
 8006b88:	9101      	str	r1, [sp, #4]
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	9100      	str	r1, [sp, #0]
 8006b8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b92:	4805      	ldr	r0, [pc, #20]	; (8006ba8 <Timer_Task_Func+0xa8>)
 8006b94:	f000 fa4c 	bl	8007030 <Motor_Data_Send>
							0);
#endif
		}

		/* delay until wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006b98:	f107 0308 	add.w	r3, r7, #8
 8006b9c:	68f9      	ldr	r1, [r7, #12]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f00a f838 	bl	8010c14 <vTaskDelayUntil>
		Motor_Data_Read(&hcan1);
 8006ba4:	e7b6      	b.n	8006b14 <Timer_Task_Func+0x14>
 8006ba6:	bf00      	nop
 8006ba8:	2000d8fc 	.word	0x2000d8fc
 8006bac:	2000469c 	.word	0x2000469c
 8006bb0:	20005218 	.word	0x20005218

08006bb4 <WatchDog_Task_Function>:
/**
  * @brief     watch dog task main entry function
  * @retval    None
  */
/* Task execution time (per loop): 100 ms */
void WatchDog_Task_Function(void){
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
	/* define wd global flag */
	static uint8_t wd_daemon_flag = 0;

	/* init the watch dog program */
	wdg_task_init();
 8006bba:	f000 f81b 	bl	8006bf4 <wdg_task_init>

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100); // task exec period 1ms
 8006bbe:	2364      	movs	r3, #100	; 0x64
 8006bc0:	607b      	str	r3, [r7, #4]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8006bc2:	f00a f9e3 	bl	8010f8c <xTaskGetTickCount>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	603b      	str	r3, [r7, #0]

	/* main imu task begins */
	for(;;){

		/* self check progress*/
		if(self_check_system() == CHECK_OK)
 8006bca:	f001 ff27 	bl	8008a1c <self_check_system>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d103      	bne.n	8006bdc <WatchDog_Task_Function+0x28>
			wd_daemon_flag = 0;//pass
 8006bd4:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <WatchDog_Task_Function+0x3c>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	701a      	strb	r2, [r3, #0]
 8006bda:	e002      	b.n	8006be2 <WatchDog_Task_Function+0x2e>
		else
			wd_daemon_flag = 1;//fail
 8006bdc:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <WatchDog_Task_Function+0x3c>)
 8006bde:	2201      	movs	r2, #1
 8006be0:	701a      	strb	r2, [r3, #0]
		//       but currently just feed dog whatever the check pass or fail
#ifdef USE_IWDG
		wdg_daemon_feed_dog();
#endif
		/* delay utill wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006be2:	463b      	mov	r3, r7
 8006be4:	6879      	ldr	r1, [r7, #4]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f00a f814 	bl	8010c14 <vTaskDelayUntil>
		if(self_check_system() == CHECK_OK)
 8006bec:	e7ed      	b.n	8006bca <WatchDog_Task_Function+0x16>
 8006bee:	bf00      	nop
 8006bf0:	200004ce 	.word	0x200004ce

08006bf4 <wdg_task_init>:

	}
}

void wdg_task_init(void){
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
	/* set a binary watch dog semaphore */
	wdgSemaphore = xSemaphoreCreateBinary();
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	f009 fe11 	bl	8010824 <xQueueGenericCreate>
 8006c02:	4603      	mov	r3, r0
 8006c04:	4a01      	ldr	r2, [pc, #4]	; (8006c0c <wdg_task_init+0x18>)
 8006c06:	6013      	str	r3, [r2, #0]
}
 8006c08:	bf00      	nop
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	2000d840 	.word	0x2000d840

08006c10 <buzzer_init>:
 * param[in] times want to be buzzed
 * param[in] delay duration
 * retval None
 * author Haoran
 */
void buzzer_init(Buzzer_t *buzz){
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	buzz->buzz_times = 0;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	721a      	strb	r2, [r3, #8]
	buzz->buzzer_tick = 0;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
	buzz->times_tick  =0;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(&BUZZ_HTIM, BUZZ_PWM_CH);
 8006c2a:	2108      	movs	r1, #8
 8006c2c:	4803      	ldr	r0, [pc, #12]	; (8006c3c <buzzer_init+0x2c>)
 8006c2e:	f007 fd7b 	bl	800e728 <HAL_TIM_PWM_Start>
}
 8006c32:	bf00      	nop
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	2000db00 	.word	0x2000db00

08006c40 <buzzer_set_tune>:

void buzzer_set_tune(uint16_t tune, uint16_t ctrl){
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	4603      	mov	r3, r0
 8006c48:	460a      	mov	r2, r1
 8006c4a:	80fb      	strh	r3, [r7, #6]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	80bb      	strh	r3, [r7, #4]
    /* set Auto-reload value for the timer */
    __HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM, tune);
 8006c50:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <buzzer_set_tune+0x34>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	88fa      	ldrh	r2, [r7, #6]
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	4a06      	ldr	r2, [pc, #24]	; (8006c74 <buzzer_set_tune+0x34>)
 8006c5c:	60d3      	str	r3, [r2, #12]
    /* set compare value to control duty cycle */
    __HAL_TIM_SET_COMPARE(&BUZZ_HTIM, BUZZ_PWM_CH, ctrl);
 8006c5e:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <buzzer_set_tune+0x34>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	88ba      	ldrh	r2, [r7, #4]
 8006c64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c66:	bf00      	nop
 8006c68:	370c      	adds	r7, #12
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	2000db00 	.word	0x2000db00

08006c78 <buzzer_alarm_times>:
 * param[in] times want to be buzzed
 * param[in] delay duration
 * retval None
 * author Haoran
 */
void buzzer_alarm_times(uint8_t times, uint16_t duration, Buzzer_t *buzz){
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	603a      	str	r2, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
 8006c84:	460b      	mov	r3, r1
 8006c86:	80bb      	strh	r3, [r7, #4]
	/* check if a period of alarm has been called */
	uint32_t cur_ticks = HAL_GetTick();
 8006c88:	f003 ff72 	bl	800ab70 <HAL_GetTick>
 8006c8c:	60f8      	str	r0, [r7, #12]
    if(cur_ticks - buzz->buzzer_tick > duration){
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	1ad2      	subs	r2, r2, r3
 8006c96:	88bb      	ldrh	r3, [r7, #4]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d909      	bls.n	8006cb0 <buzzer_alarm_times+0x38>
        buzz->buzzer_tick = cur_ticks;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	601a      	str	r2, [r3, #0]
        buzz->times_tick = cur_ticks;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	605a      	str	r2, [r3, #4]
        buzz->buzz_times = times; // Set the number of times buzzer should play
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	79fa      	ldrb	r2, [r7, #7]
 8006cac:	721a      	strb	r2, [r3, #8]
        else{
            buzz->buzz_times--;
            buzz->times_tick = cur_ticks;
        }
    }
}
 8006cae:	e025      	b.n	8006cfc <buzzer_alarm_times+0x84>
    else if(buzz->buzz_times != 0){
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	7a1b      	ldrb	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d021      	beq.n	8006cfc <buzzer_alarm_times+0x84>
        if(cur_ticks - buzz->times_tick < 200){			     //use Hal_GetTick to use for both
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	2bc7      	cmp	r3, #199	; 0xc7
 8006cc2:	d805      	bhi.n	8006cd0 <buzzer_alarm_times+0x58>
            buzzer_set_tune(7135, 100); // play the tone c1  //in freertos and normal program
 8006cc4:	2164      	movs	r1, #100	; 0x64
 8006cc6:	f641 30df 	movw	r0, #7135	; 0x1bdf
 8006cca:	f7ff ffb9 	bl	8006c40 <buzzer_set_tune>
}
 8006cce:	e015      	b.n	8006cfc <buzzer_alarm_times+0x84>
        else if(cur_ticks - buzz->times_tick < 400){
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	1ad3      	subs	r3, r2, r3
 8006cd8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006cdc:	d205      	bcs.n	8006cea <buzzer_alarm_times+0x72>
            buzzer_set_tune(7135, 0);  // silence the buzzer
 8006cde:	2100      	movs	r1, #0
 8006ce0:	f641 30df 	movw	r0, #7135	; 0x1bdf
 8006ce4:	f7ff ffac 	bl	8006c40 <buzzer_set_tune>
}
 8006ce8:	e008      	b.n	8006cfc <buzzer_alarm_times+0x84>
            buzz->buzz_times--;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	7a1b      	ldrb	r3, [r3, #8]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	721a      	strb	r2, [r3, #8]
            buzz->times_tick = cur_ticks;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	605a      	str	r2, [r3, #4]
}
 8006cfc:	bf00      	nop
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <buzzer_play_g0>:


/* below are the buzzer tune play functions, used for imu task and for fun! */
void buzzer_play_g0(int32_t duration){
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <buzzer_play_g0+0x44>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2200      	movs	r2, #0
 8006d12:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 35);
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,9523);
 8006d14:	4b0c      	ldr	r3, [pc, #48]	; (8006d48 <buzzer_play_g0+0x44>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f242 5233 	movw	r2, #9523	; 0x2533
 8006d1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <buzzer_play_g0+0x44>)
 8006d20:	f242 5233 	movw	r2, #9523	; 0x2533
 8006d24:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 8006d26:	4b08      	ldr	r3, [pc, #32]	; (8006d48 <buzzer_play_g0+0x44>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2264      	movs	r2, #100	; 0x64
 8006d2c:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f009 fc46 	bl	80105c2 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 8006d36:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <buzzer_play_g0+0x44>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006d3e:	bf00      	nop
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	2000db00 	.word	0x2000db00

08006d4c <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 8006d54:	4b0e      	ldr	r3, [pc, #56]	; (8006d90 <buzzer_play_c1+0x44>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 35);
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,7135);
 8006d5c:	4b0c      	ldr	r3, [pc, #48]	; (8006d90 <buzzer_play_c1+0x44>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8006d64:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <buzzer_play_c1+0x44>)
 8006d68:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8006d6c:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 8006d6e:	4b08      	ldr	r3, [pc, #32]	; (8006d90 <buzzer_play_c1+0x44>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2264      	movs	r2, #100	; 0x64
 8006d74:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f009 fc22 	bl	80105c2 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 8006d7e:	4b04      	ldr	r3, [pc, #16]	; (8006d90 <buzzer_play_c1+0x44>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2200      	movs	r2, #0
 8006d84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006d86:	bf00      	nop
 8006d88:	3708      	adds	r7, #8
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	2000db00 	.word	0x2000db00

08006d94 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
}

void buzzer_play_e1(int32_t duration){
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 25);
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <buzzer_play_e1+0x44>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2200      	movs	r2, #0
 8006da2:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,5662);
 8006da4:	4b0c      	ldr	r3, [pc, #48]	; (8006dd8 <buzzer_play_e1+0x44>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f241 621e 	movw	r2, #5662	; 0x161e
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c
 8006dae:	4b0a      	ldr	r3, [pc, #40]	; (8006dd8 <buzzer_play_e1+0x44>)
 8006db0:	f241 621e 	movw	r2, #5662	; 0x161e
 8006db4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 8006db6:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <buzzer_play_e1+0x44>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2264      	movs	r2, #100	; 0x64
 8006dbc:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f009 fbfe 	bl	80105c2 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 8006dc6:	4b04      	ldr	r3, [pc, #16]	; (8006dd8 <buzzer_play_e1+0x44>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006dce:	bf00      	nop
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	2000db00 	.word	0x2000db00

08006ddc <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
}

void buzzer_play_g1(int32_t duration){
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 21);
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <buzzer_play_g1+0x44>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2200      	movs	r2, #0
 8006dea:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,4761);
 8006dec:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <buzzer_play_g1+0x44>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f241 2299 	movw	r2, #4761	; 0x1299
 8006df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8006df6:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <buzzer_play_g1+0x44>)
 8006df8:	f241 2299 	movw	r2, #4761	; 0x1299
 8006dfc:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 8006dfe:	4b08      	ldr	r3, [pc, #32]	; (8006e20 <buzzer_play_g1+0x44>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2264      	movs	r2, #100	; 0x64
 8006e04:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f009 fbda 	bl	80105c2 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 8006e0e:	4b04      	ldr	r3, [pc, #16]	; (8006e20 <buzzer_play_g1+0x44>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006e16:	bf00      	nop
 8006e18:	3708      	adds	r7, #8
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	2000db00 	.word	0x2000db00

08006e24 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
}

void buzzer_rest(int32_t duration){
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f009 fbc7 	bl	80105c2 <osDelay>
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <buzzer_play_mario>:
	buzzer_play_b1(duration);
	buzzer_play_c2(duration);
}


void buzzer_play_mario(int32_t bpm){
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7f9 fb6d 	bl	8000524 <__aeabi_i2d>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	f04f 0000 	mov.w	r0, #0
 8006e52:	492d      	ldr	r1, [pc, #180]	; (8006f08 <buzzer_play_mario+0xcc>)
 8006e54:	f7f9 fcfa 	bl	800084c <__aeabi_ddiv>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	f04f 0200 	mov.w	r2, #0
 8006e64:	4b29      	ldr	r3, [pc, #164]	; (8006f0c <buzzer_play_mario+0xd0>)
 8006e66:	f7f9 fbc7 	bl	80005f8 <__aeabi_dmul>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7f9 fe71 	bl	8000b58 <__aeabi_d2iz>
 8006e76:	4603      	mov	r3, r0
 8006e78:	60fb      	str	r3, [r7, #12]
	int32_t eighth=(double)60/bpm*1000*0.5;
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7f9 fb52 	bl	8000524 <__aeabi_i2d>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	f04f 0000 	mov.w	r0, #0
 8006e88:	491f      	ldr	r1, [pc, #124]	; (8006f08 <buzzer_play_mario+0xcc>)
 8006e8a:	f7f9 fcdf 	bl	800084c <__aeabi_ddiv>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	4b1c      	ldr	r3, [pc, #112]	; (8006f0c <buzzer_play_mario+0xd0>)
 8006e9c:	f7f9 fbac 	bl	80005f8 <__aeabi_dmul>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	4610      	mov	r0, r2
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	4b18      	ldr	r3, [pc, #96]	; (8006f10 <buzzer_play_mario+0xd4>)
 8006eae:	f7f9 fba3 	bl	80005f8 <__aeabi_dmul>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	4610      	mov	r0, r2
 8006eb8:	4619      	mov	r1, r3
 8006eba:	f7f9 fe4d 	bl	8000b58 <__aeabi_d2iz>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	60bb      	str	r3, [r7, #8]

	buzzer_play_e1(eighth);
 8006ec2:	68b8      	ldr	r0, [r7, #8]
 8006ec4:	f7ff ff66 	bl	8006d94 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 8006ec8:	68b8      	ldr	r0, [r7, #8]
 8006eca:	f7ff ff63 	bl	8006d94 <buzzer_play_e1>
	buzzer_rest(eighth);
 8006ece:	68b8      	ldr	r0, [r7, #8]
 8006ed0:	f7ff ffa8 	bl	8006e24 <buzzer_rest>
	buzzer_play_e1(eighth);
 8006ed4:	68b8      	ldr	r0, [r7, #8]
 8006ed6:	f7ff ff5d 	bl	8006d94 <buzzer_play_e1>
	buzzer_rest(eighth);
 8006eda:	68b8      	ldr	r0, [r7, #8]
 8006edc:	f7ff ffa2 	bl	8006e24 <buzzer_rest>
	buzzer_play_c1(eighth);
 8006ee0:	68b8      	ldr	r0, [r7, #8]
 8006ee2:	f7ff ff33 	bl	8006d4c <buzzer_play_c1>
	buzzer_play_e1(quarter);
 8006ee6:	68f8      	ldr	r0, [r7, #12]
 8006ee8:	f7ff ff54 	bl	8006d94 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f7ff ff75 	bl	8006ddc <buzzer_play_g1>
	buzzer_rest(quarter);
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7ff ff96 	bl	8006e24 <buzzer_rest>
	buzzer_play_g0(quarter);
 8006ef8:	68f8      	ldr	r0, [r7, #12]
 8006efa:	f7ff ff03 	bl	8006d04 <buzzer_play_g0>
}
 8006efe:	bf00      	nop
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	404e0000 	.word	0x404e0000
 8006f0c:	408f4000 	.word	0x408f4000
 8006f10:	3fe00000 	.word	0x3fe00000

08006f14 <dwt_init>:

/**
  * @brief     DWT init function
  * @retval    None
  */
void dwt_init(void) {
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8006f18:	4b0c      	ldr	r3, [pc, #48]	; (8006f4c <dwt_init+0x38>)
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10e      	bne.n	8006f42 <dwt_init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable Debug Core
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <dwt_init+0x38>)
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <dwt_init+0x38>)
 8006f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f2e:	60d3      	str	r3, [r2, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable Cycle Counter
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <dwt_init+0x3c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a06      	ldr	r2, [pc, #24]	; (8006f50 <dwt_init+0x3c>)
 8006f36:	f043 0301 	orr.w	r3, r3, #1
 8006f3a:	6013      	str	r3, [r2, #0]
        DWT->CYCCNT = 0; // Reset Cycle Counter Value
 8006f3c:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <dwt_init+0x3c>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	605a      	str	r2, [r3, #4]
    }
}
 8006f42:	bf00      	nop
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	e000edf0 	.word	0xe000edf0
 8006f50:	e0001000 	.word	0xe0001000

08006f54 <dwt_getCnt_us>:
/**
  * @brief    get timestamp from dwt
  * @retval   time count of dwt
  */
uint32_t dwt_getCnt_us(void){
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / SYSTEM_CORE_FREQ;//unit: usec
 8006f58:	4b05      	ldr	r3, [pc, #20]	; (8006f70 <dwt_getCnt_us+0x1c>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	08db      	lsrs	r3, r3, #3
 8006f5e:	4a05      	ldr	r2, [pc, #20]	; (8006f74 <dwt_getCnt_us+0x20>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	085b      	lsrs	r3, r3, #1
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	e0001000 	.word	0xe0001000
 8006f74:	18618619 	.word	0x18618619

08006f78 <Motor_Data_Read>:
/**
  * @brief     Read feedback from the motor sensor
  * @param[in] can1/can2 type header
  * @retval    None
  */
void Motor_Data_Read(CAN_HandleTypeDef* hcan) {
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
	uint8_t motorStatus[MOTOR_COUNT];
	for (int i=0; i<MOTOR_COUNT; i++){
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	e046      	b.n	8007014 <Motor_Data_Read+0x9c>
		memcpy(motorStatus, can_rx_buffer[i], 8);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	4a27      	ldr	r2, [pc, #156]	; (8007028 <Motor_Data_Read+0xb0>)
 8006f8c:	441a      	add	r2, r3
 8006f8e:	f107 030c 	add.w	r3, r7, #12
 8006f92:	6810      	ldr	r0, [r2, #0]
 8006f94:	6851      	ldr	r1, [r2, #4]
 8006f96:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus[0] << 8 | motorStatus[1]);
 8006f98:	7b3b      	ldrb	r3, [r7, #12]
 8006f9a:	021b      	lsls	r3, r3, #8
 8006f9c:	b21a      	sxth	r2, r3
 8006f9e:	7b7b      	ldrb	r3, [r7, #13]
 8006fa0:	b21b      	sxth	r3, r3
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	b218      	sxth	r0, r3
 8006fa6:	4a21      	ldr	r2, [pc, #132]	; (800702c <Motor_Data_Read+0xb4>)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2194      	movs	r1, #148	; 0x94
 8006fac:	fb01 f303 	mul.w	r3, r1, r3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3388      	adds	r3, #136	; 0x88
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus[2] << 8 | motorStatus[3]);
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	021b      	lsls	r3, r3, #8
 8006fbc:	b21a      	sxth	r2, r3
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	b218      	sxth	r0, r3
 8006fc6:	4a19      	ldr	r2, [pc, #100]	; (800702c <Motor_Data_Read+0xb4>)
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	2194      	movs	r1, #148	; 0x94
 8006fcc:	fb01 f303 	mul.w	r3, r1, r3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	338a      	adds	r3, #138	; 0x8a
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus[4] << 8 | motorStatus[5]);
 8006fd8:	7c3b      	ldrb	r3, [r7, #16]
 8006fda:	021b      	lsls	r3, r3, #8
 8006fdc:	b21a      	sxth	r2, r3
 8006fde:	7c7b      	ldrb	r3, [r7, #17]
 8006fe0:	b21b      	sxth	r3, r3
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	b218      	sxth	r0, r3
 8006fe6:	4a11      	ldr	r2, [pc, #68]	; (800702c <Motor_Data_Read+0xb4>)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2194      	movs	r1, #148	; 0x94
 8006fec:	fb01 f303 	mul.w	r3, r1, r3
 8006ff0:	4413      	add	r3, r2
 8006ff2:	338c      	adds	r3, #140	; 0x8c
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus[6]);
 8006ff8:	7cbb      	ldrb	r3, [r7, #18]
 8006ffa:	b218      	sxth	r0, r3
 8006ffc:	4a0b      	ldr	r2, [pc, #44]	; (800702c <Motor_Data_Read+0xb4>)
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2194      	movs	r1, #148	; 0x94
 8007002:	fb01 f303 	mul.w	r3, r1, r3
 8007006:	4413      	add	r3, r2
 8007008:	338e      	adds	r3, #142	; 0x8e
 800700a:	4602      	mov	r2, r0
 800700c:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<MOTOR_COUNT; i++){
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	3301      	adds	r3, #1
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	2b07      	cmp	r3, #7
 8007018:	ddb5      	ble.n	8006f86 <Motor_Data_Read+0xe>
	}
}
 800701a:	bf00      	nop
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	200046a0 	.word	0x200046a0
 800702c:	20005218 	.word	0x20005218

08007030 <Motor_Data_Send>:
  * @param[in] can1/can2 type header
  * @param[in] Stdid of can device
  * @param[in] data set to different can devices
  * @retval    None
  */
void Motor_Data_Send(CAN_HandleTypeDef* hcan, int32_t id, int32_t d1, int32_t d2, int32_t d3, int32_t d4){
 8007030:	b580      	push	{r7, lr}
 8007032:	b08c      	sub	sp, #48	; 0x30
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
	CAN_TxHeaderTypeDef  tx_header;
	uint8_t				 tx_data[8];

	tx_header.StdId = id;
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 8007042:	2300      	movs	r3, #0
 8007044:	623b      	str	r3, [r7, #32]
	tx_header.RTR = CAN_RTR_DATA;
 8007046:	2300      	movs	r3, #0
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header.DLC = 0x08;
 800704a:	2308      	movs	r3, #8
 800704c:	62bb      	str	r3, [r7, #40]	; 0x28

	tx_data[0] = d1 >> 8;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	121b      	asrs	r3, r3, #8
 8007052:	b2db      	uxtb	r3, r3
 8007054:	743b      	strb	r3, [r7, #16]
	tx_data[1] = d1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	747b      	strb	r3, [r7, #17]
	tx_data[2] = d2 >> 8;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	121b      	asrs	r3, r3, #8
 8007060:	b2db      	uxtb	r3, r3
 8007062:	74bb      	strb	r3, [r7, #18]
	tx_data[3] = d2;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	74fb      	strb	r3, [r7, #19]
	tx_data[4] = d3 >> 8;
 800706a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706c:	121b      	asrs	r3, r3, #8
 800706e:	b2db      	uxtb	r3, r3
 8007070:	753b      	strb	r3, [r7, #20]
	tx_data[5] = d3;
 8007072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007074:	b2db      	uxtb	r3, r3
 8007076:	757b      	strb	r3, [r7, #21]
	tx_data[6] = d4 >> 8;
 8007078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800707a:	121b      	asrs	r3, r3, #8
 800707c:	b2db      	uxtb	r3, r3
 800707e:	75bb      	strb	r3, [r7, #22]
	tx_data[7] = d4;
 8007080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007082:	b2db      	uxtb	r3, r3
 8007084:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_AddTxMessage(hcan, &tx_header, tx_data, (uint32_t*)CAN_TX_MAILBOX0);
 8007086:	f107 0210 	add.w	r2, r7, #16
 800708a:	f107 0118 	add.w	r1, r7, #24
 800708e:	2301      	movs	r3, #1
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f003 ffbd 	bl	800b010 <HAL_CAN_AddTxMessage>
}
 8007096:	bf00      	nop
 8007098:	3730      	adds	r7, #48	; 0x30
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <motor_init>:
  * @brief     initialize the motor parameters
  * @retval    None
  */
void motor_init(uint8_t motor_id, int32_t max_out_f, float max_i_out_f, float max_err_f, float kp_f, float ki_f, float kd_f,
								  int32_t max_out_s, float max_i_out_s, float max_err_s, float kp_s, float ki_s, float kd_s,
								  float kf){
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	; 0x38
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	6339      	str	r1, [r7, #48]	; 0x30
 80070aa:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 80070ae:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 80070b2:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 80070b6:	edc7 1a08 	vstr	s3, [r7, #32]
 80070ba:	ed87 2a07 	vstr	s4, [r7, #28]
 80070be:	61ba      	str	r2, [r7, #24]
 80070c0:	edc7 2a05 	vstr	s5, [r7, #20]
 80070c4:	ed87 3a04 	vstr	s6, [r7, #16]
 80070c8:	edc7 3a03 	vstr	s7, [r7, #12]
 80070cc:	ed87 4a02 	vstr	s8, [r7, #8]
 80070d0:	edc7 4a01 	vstr	s9, [r7, #4]
 80070d4:	ed87 5a00 	vstr	s10, [r7]
 80070d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	pid_param_init(&(motor_data[motor_id].motor_info.f_pid), max_out_f, max_i_out_f, max_err_f, kp_f, ki_f, kd_f);
 80070dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80070e0:	2294      	movs	r2, #148	; 0x94
 80070e2:	fb02 f303 	mul.w	r3, r2, r3
 80070e6:	4a1c      	ldr	r2, [pc, #112]	; (8007158 <motor_init+0xb8>)
 80070e8:	4413      	add	r3, r2
 80070ea:	3304      	adds	r3, #4
 80070ec:	ed97 2a07 	vldr	s4, [r7, #28]
 80070f0:	edd7 1a08 	vldr	s3, [r7, #32]
 80070f4:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80070f8:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80070fc:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8007100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007102:	4618      	mov	r0, r3
 8007104:	f7fb fd14 	bl	8002b30 <pid_param_init>
	pid_param_init(&(motor_data[motor_id].motor_info.s_pid), max_out_s, max_i_out_s, max_err_s, kp_s, ki_s, kd_s);
 8007108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800710c:	2294      	movs	r2, #148	; 0x94
 800710e:	fb02 f303 	mul.w	r3, r2, r3
 8007112:	3340      	adds	r3, #64	; 0x40
 8007114:	4a10      	ldr	r2, [pc, #64]	; (8007158 <motor_init+0xb8>)
 8007116:	4413      	add	r3, r2
 8007118:	ed97 2a01 	vldr	s4, [r7, #4]
 800711c:	edd7 1a02 	vldr	s3, [r7, #8]
 8007120:	ed97 1a03 	vldr	s2, [r7, #12]
 8007124:	edd7 0a04 	vldr	s1, [r7, #16]
 8007128:	ed97 0a05 	vldr	s0, [r7, #20]
 800712c:	69b9      	ldr	r1, [r7, #24]
 800712e:	4618      	mov	r0, r3
 8007130:	f7fb fcfe 	bl	8002b30 <pid_param_init>
	ff_param_init(&(motor_data[motor_id].motor_info.ff), kf);
 8007134:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007138:	2294      	movs	r2, #148	; 0x94
 800713a:	fb02 f303 	mul.w	r3, r2, r3
 800713e:	3378      	adds	r3, #120	; 0x78
 8007140:	4a05      	ldr	r2, [pc, #20]	; (8007158 <motor_init+0xb8>)
 8007142:	4413      	add	r3, r2
 8007144:	3304      	adds	r3, #4
 8007146:	ed97 0a00 	vldr	s0, [r7]
 800714a:	4618      	mov	r0, r3
 800714c:	f7fb fcb2 	bl	8002ab4 <ff_param_init>
}
 8007150:	bf00      	nop
 8007152:	3738      	adds	r7, #56	; 0x38
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	20005218 	.word	0x20005218

0800715c <set_motor_can_volt>:
  * @param[in] can1/can2 type header
  * @param[in] Stdid of can device
  * @param[in] velocity/angle set to different can devices
  * @retval    None
  */
void set_motor_can_volt(float a1, float a2, int32_t v3, int32_t v4, int32_t control_indicator, GimbalMotorMode_t mode){
 800715c:	b580      	push	{r7, lr}
 800715e:	ed2d 8b02 	vpush	{d8}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	ed87 0a05 	vstr	s0, [r7, #20]
 800716a:	edc7 0a04 	vstr	s1, [r7, #16]
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]
 8007174:	70fb      	strb	r3, [r7, #3]

	if(control_indicator == DUAL_LOOP_PID_CONTROL && mode == ENCODE_MODE){
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b01      	cmp	r3, #1
 800717a:	d17b      	bne.n	8007274 <set_motor_can_volt+0x118>
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d178      	bne.n	8007274 <set_motor_can_volt+0x118>
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 8007182:	ed97 0a05 	vldr	s0, [r7, #20]
 8007186:	4882      	ldr	r0, [pc, #520]	; (8007390 <set_motor_can_volt+0x234>)
 8007188:	f7fb fcab 	bl	8002ae2 <feedforward>
 800718c:	eeb0 8a40 	vmov.f32	s16, s0
														  &(motor_data[yaw_id].motor_info.f_pid),
														  &(motor_data[yaw_id].motor_info.s_pid),
														  in_out_map(gimbal_get_ecd_rel_angle(motor_data[yaw_id].motor_feedback.rx_angle, YAW_ECD_CENTER),
 8007190:	4b80      	ldr	r3, [pc, #512]	; (8007394 <set_motor_can_volt+0x238>)
 8007192:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8007196:	f44f 711b 	mov.w	r1, #620	; 0x26c
 800719a:	4618      	mov	r0, r3
 800719c:	f7fd fb9d 	bl	80048da <gimbal_get_ecd_rel_angle>
 80071a0:	4603      	mov	r3, r0
 80071a2:	ee07 3a90 	vmov	s15, r3
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 80071a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071aa:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 8007398 <set_motor_can_volt+0x23c>
 80071ae:	eddf 1a7b 	vldr	s3, [pc, #492]	; 800739c <set_motor_can_volt+0x240>
 80071b2:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 80073a0 <set_motor_can_volt+0x244>
 80071b6:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80073a4 <set_motor_can_volt+0x248>
 80071ba:	eeb0 0a67 	vmov.f32	s0, s15
 80071be:	f7fb fe60 	bl	8002e82 <in_out_map>
 80071c2:	eeb0 7a40 	vmov.f32	s14, s0
														  			 -4095,4095,-PI,PI),
														  motor_data[yaw_id].motor_feedback.rx_rpm);
 80071c6:	4b73      	ldr	r3, [pc, #460]	; (8007394 <set_motor_can_volt+0x238>)
 80071c8:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071d4:	eeb0 1a67 	vmov.f32	s2, s15
 80071d8:	eef0 0a47 	vmov.f32	s1, s14
 80071dc:	4972      	ldr	r1, [pc, #456]	; (80073a8 <set_motor_can_volt+0x24c>)
 80071de:	4873      	ldr	r0, [pc, #460]	; (80073ac <set_motor_can_volt+0x250>)
 80071e0:	eeb0 0a48 	vmov.f32	s0, s16
 80071e4:	f7fb fd8e 	bl	8002d04 <pid_dual_loop_control>
 80071e8:	eef0 7a40 	vmov.f32	s15, s0
 80071ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071f0:	ee17 2a90 	vmov	r2, s15
 80071f4:	4b67      	ldr	r3, [pc, #412]	; (8007394 <set_motor_can_volt+0x238>)
 80071f6:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff
 80071fa:	ed97 0a04 	vldr	s0, [r7, #16]
 80071fe:	486c      	ldr	r0, [pc, #432]	; (80073b0 <set_motor_can_volt+0x254>)
 8007200:	f7fb fc6f 	bl	8002ae2 <feedforward>
 8007204:	eeb0 8a40 	vmov.f32	s16, s0
														  &(motor_data[pitch_id].motor_info.f_pid),
														  &(motor_data[pitch_id].motor_info.s_pid),
                                    					  in_out_map(gimbal_get_ecd_rel_angle(motor_data[pitch_id].motor_feedback.rx_angle, PITCH_ECD_CENTER),
 8007208:	4b62      	ldr	r3, [pc, #392]	; (8007394 <set_motor_can_volt+0x238>)
 800720a:	f9b3 336c 	ldrsh.w	r3, [r3, #876]	; 0x36c
 800720e:	f640 6174 	movw	r1, #3700	; 0xe74
 8007212:	4618      	mov	r0, r3
 8007214:	f7fd fb61 	bl	80048da <gimbal_get_ecd_rel_angle>
 8007218:	4603      	mov	r3, r0
 800721a:	ee07 3a90 	vmov	s15, r3
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff
 800721e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007222:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 8007398 <set_motor_can_volt+0x23c>
 8007226:	eddf 1a5d 	vldr	s3, [pc, #372]	; 800739c <set_motor_can_volt+0x240>
 800722a:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 80073a0 <set_motor_can_volt+0x244>
 800722e:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80073a4 <set_motor_can_volt+0x248>
 8007232:	eeb0 0a67 	vmov.f32	s0, s15
 8007236:	f7fb fe24 	bl	8002e82 <in_out_map>
 800723a:	eeb0 7a40 	vmov.f32	s14, s0
																     -4095,4095,-PI,PI),
														  motor_data[pitch_id].motor_feedback.rx_rpm);
 800723e:	4b55      	ldr	r3, [pc, #340]	; (8007394 <set_motor_can_volt+0x238>)
 8007240:	f9b3 336e 	ldrsh.w	r3, [r3, #878]	; 0x36e
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800724c:	eeb0 1a67 	vmov.f32	s2, s15
 8007250:	eef0 0a47 	vmov.f32	s1, s14
 8007254:	4957      	ldr	r1, [pc, #348]	; (80073b4 <set_motor_can_volt+0x258>)
 8007256:	4858      	ldr	r0, [pc, #352]	; (80073b8 <set_motor_can_volt+0x25c>)
 8007258:	eeb0 0a48 	vmov.f32	s0, s16
 800725c:	f7fb fd52 	bl	8002d04 <pid_dual_loop_control>
 8007260:	eef0 7a40 	vmov.f32	s15, s0
 8007264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007268:	ee17 2a90 	vmov	r2, s15
 800726c:	4b49      	ldr	r3, [pc, #292]	; (8007394 <set_motor_can_volt+0x238>)
 800726e:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8007272:	e086      	b.n	8007382 <set_motor_can_volt+0x226>
		}
	else if(control_indicator == DUAL_LOOP_PID_CONTROL && mode == GYRO_MODE){
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d163      	bne.n	8007342 <set_motor_can_volt+0x1e6>
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d160      	bne.n	8007342 <set_motor_can_volt+0x1e6>
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 8007280:	ed97 0a05 	vldr	s0, [r7, #20]
 8007284:	4842      	ldr	r0, [pc, #264]	; (8007390 <set_motor_can_volt+0x234>)
 8007286:	f7fb fc2c 	bl	8002ae2 <feedforward>
 800728a:	eef0 6a40 	vmov.f32	s13, s0
 800728e:	4b4b      	ldr	r3, [pc, #300]	; (80073bc <set_motor_can_volt+0x260>)
 8007290:	edd3 7a05 	vldr	s15, [r3, #20]
														  &(motor_data[yaw_id].motor_info.f_pid),
														  &(motor_data[yaw_id].motor_info.s_pid),
														  gimbal.yaw_cur_abs_angle,
														  motor_data[yaw_id].motor_feedback.rx_rpm);//pid+ff
 8007294:	4b3f      	ldr	r3, [pc, #252]	; (8007394 <set_motor_can_volt+0x238>)
 8007296:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 800729a:	ee07 3a10 	vmov	s14, r3
 800729e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80072a2:	eeb0 1a47 	vmov.f32	s2, s14
 80072a6:	eef0 0a67 	vmov.f32	s1, s15
 80072aa:	493f      	ldr	r1, [pc, #252]	; (80073a8 <set_motor_can_volt+0x24c>)
 80072ac:	483f      	ldr	r0, [pc, #252]	; (80073ac <set_motor_can_volt+0x250>)
 80072ae:	eeb0 0a66 	vmov.f32	s0, s13
 80072b2:	f7fb fd27 	bl	8002d04 <pid_dual_loop_control>
 80072b6:	eef0 7a40 	vmov.f32	s15, s0
 80072ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072be:	ee17 2a90 	vmov	r2, s15
 80072c2:	4b34      	ldr	r3, [pc, #208]	; (8007394 <set_motor_can_volt+0x238>)
 80072c4:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff, pitch always use rel angle from encoder
 80072c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80072cc:	4838      	ldr	r0, [pc, #224]	; (80073b0 <set_motor_can_volt+0x254>)
 80072ce:	f7fb fc08 	bl	8002ae2 <feedforward>
 80072d2:	eeb0 8a40 	vmov.f32	s16, s0
														  &(motor_data[pitch_id].motor_info.f_pid),
														  &(motor_data[pitch_id].motor_info.s_pid),
														  in_out_map(gimbal_get_ecd_rel_angle(motor_data[pitch_id].motor_feedback.rx_angle, PITCH_ECD_CENTER),
 80072d6:	4b2f      	ldr	r3, [pc, #188]	; (8007394 <set_motor_can_volt+0x238>)
 80072d8:	f9b3 336c 	ldrsh.w	r3, [r3, #876]	; 0x36c
 80072dc:	f640 6174 	movw	r1, #3700	; 0xe74
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fd fafa 	bl	80048da <gimbal_get_ecd_rel_angle>
 80072e6:	4603      	mov	r3, r0
 80072e8:	ee07 3a90 	vmov	s15, r3
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff, pitch always use rel angle from encoder
 80072ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072f0:	ed9f 2a29 	vldr	s4, [pc, #164]	; 8007398 <set_motor_can_volt+0x23c>
 80072f4:	eddf 1a29 	vldr	s3, [pc, #164]	; 800739c <set_motor_can_volt+0x240>
 80072f8:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80073a0 <set_motor_can_volt+0x244>
 80072fc:	eddf 0a29 	vldr	s1, [pc, #164]	; 80073a4 <set_motor_can_volt+0x248>
 8007300:	eeb0 0a67 	vmov.f32	s0, s15
 8007304:	f7fb fdbd 	bl	8002e82 <in_out_map>
 8007308:	eeb0 7a40 	vmov.f32	s14, s0
														  		     -4095,4095,-PI,PI),
//														  gimbal.pitch_cur_abs_angle,
														  motor_data[pitch_id].motor_feedback.rx_rpm);//pid+ff
 800730c:	4b21      	ldr	r3, [pc, #132]	; (8007394 <set_motor_can_volt+0x238>)
 800730e:	f9b3 336e 	ldrsh.w	r3, [r3, #878]	; 0x36e
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff, pitch always use rel angle from encoder
 8007312:	ee07 3a90 	vmov	s15, r3
 8007316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800731a:	eeb0 1a67 	vmov.f32	s2, s15
 800731e:	eef0 0a47 	vmov.f32	s1, s14
 8007322:	4924      	ldr	r1, [pc, #144]	; (80073b4 <set_motor_can_volt+0x258>)
 8007324:	4824      	ldr	r0, [pc, #144]	; (80073b8 <set_motor_can_volt+0x25c>)
 8007326:	eeb0 0a48 	vmov.f32	s0, s16
 800732a:	f7fb fceb 	bl	8002d04 <pid_dual_loop_control>
 800732e:	eef0 7a40 	vmov.f32	s15, s0
 8007332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007336:	ee17 2a90 	vmov	r2, s15
 800733a:	4b16      	ldr	r3, [pc, #88]	; (8007394 <set_motor_can_volt+0x238>)
 800733c:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8007340:	e01f      	b.n	8007382 <set_motor_can_volt+0x226>


	}
	else if(control_indicator == SINGLE_LOOP_PID_CONTROL){
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d11c      	bne.n	8007382 <set_motor_can_volt+0x226>
			// only for spd control, dual loop control in the shoot app
			motor_data[mag_2006_id].tx_data = pid_single_loop_control(v3,
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	ee07 3a90 	vmov	s15, r3
 800734e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
															&(motor_data[mag_2006_id].motor_info.s_pid),
														      motor_data[mag_2006_id].motor_feedback.rx_rpm);
 8007352:	4b10      	ldr	r3, [pc, #64]	; (8007394 <set_motor_can_volt+0x238>)
 8007354:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
			motor_data[mag_2006_id].tx_data = pid_single_loop_control(v3,
 8007358:	ee07 3a10 	vmov	s14, r3
 800735c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007360:	eef0 0a47 	vmov.f32	s1, s14
 8007364:	4816      	ldr	r0, [pc, #88]	; (80073c0 <set_motor_can_volt+0x264>)
 8007366:	eeb0 0a67 	vmov.f32	s0, s15
 800736a:	f7fb fcb5 	bl	8002cd8 <pid_single_loop_control>
 800736e:	eef0 7a40 	vmov.f32	s15, s0
 8007372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007376:	ee17 2a90 	vmov	r2, s15
 800737a:	4b06      	ldr	r3, [pc, #24]	; (8007394 <set_motor_can_volt+0x238>)
 800737c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			/* not applied */
//			motor_data[7].tx_data = pid_single_loop_control(v4,
//															motor_data[7].motor_info.f_pid,
//															motor_data[7].motor_feedback.rx_rpm);
		}
}
 8007380:	e7ff      	b.n	8007382 <set_motor_can_volt+0x226>
 8007382:	bf00      	nop
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	ecbd 8b02 	vpop	{d8}
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	200054e4 	.word	0x200054e4
 8007394:	20005218 	.word	0x20005218
 8007398:	40490fdb 	.word	0x40490fdb
 800739c:	c0490fdb 	.word	0xc0490fdb
 80073a0:	457ff000 	.word	0x457ff000
 80073a4:	c57ff000 	.word	0xc57ff000
 80073a8:	200054a8 	.word	0x200054a8
 80073ac:	2000546c 	.word	0x2000546c
 80073b0:	20005578 	.word	0x20005578
 80073b4:	2000553c 	.word	0x2000553c
 80073b8:	20005500 	.word	0x20005500
 80073bc:	20004740 	.word	0x20004740
 80073c0:	200055d0 	.word	0x200055d0

080073c4 <set_motor_can_current>:



void set_motor_can_current(int32_t v1, int32_t v2, int32_t v3, int32_t v4, int32_t control_indicator){
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	60f8      	str	r0, [r7, #12]
 80073cc:	60b9      	str	r1, [r7, #8]
 80073ce:	607a      	str	r2, [r7, #4]
 80073d0:	603b      	str	r3, [r7, #0]
	if(control_indicator == DUAL_LOOP_PID_CONTROL){// only for hero magazine
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	f000 80ac 	beq.w	8007532 <set_motor_can_current+0x16e>
		/* implemented in shoot app */
	}
	else if(control_indicator == SINGLE_LOOP_SHOOT_CONTROL){
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d138      	bne.n	8007452 <set_motor_can_current+0x8e>
		motor_data[fric_left_id].tx_data = pid_single_loop_control(v1,
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
																&(motor_data[fric_left_id].motor_info.f_pid),
															    motor_data[fric_left_id].motor_feedback.rx_current);
 80073ea:	4b54      	ldr	r3, [pc, #336]	; (800753c <set_motor_can_current+0x178>)
 80073ec:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
		motor_data[fric_left_id].tx_data = pid_single_loop_control(v1,
 80073f0:	ee07 3a10 	vmov	s14, r3
 80073f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80073f8:	eef0 0a47 	vmov.f32	s1, s14
 80073fc:	4850      	ldr	r0, [pc, #320]	; (8007540 <set_motor_can_current+0x17c>)
 80073fe:	eeb0 0a67 	vmov.f32	s0, s15
 8007402:	f7fb fc69 	bl	8002cd8 <pid_single_loop_control>
 8007406:	eef0 7a40 	vmov.f32	s15, s0
 800740a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800740e:	ee17 2a90 	vmov	r2, s15
 8007412:	4b4a      	ldr	r3, [pc, #296]	; (800753c <set_motor_can_current+0x178>)
 8007414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		motor_data[fric_right_id].tx_data = pid_single_loop_control(v2,
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	ee07 3a90 	vmov	s15, r3
 800741e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
																&(motor_data[fric_right_id].motor_info.f_pid),
																motor_data[fric_right_id].motor_feedback.rx_current);
 8007422:	4b46      	ldr	r3, [pc, #280]	; (800753c <set_motor_can_current+0x178>)
 8007424:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
		motor_data[fric_right_id].tx_data = pid_single_loop_control(v2,
 8007428:	ee07 3a10 	vmov	s14, r3
 800742c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007430:	eef0 0a47 	vmov.f32	s1, s14
 8007434:	4843      	ldr	r0, [pc, #268]	; (8007544 <set_motor_can_current+0x180>)
 8007436:	eeb0 0a67 	vmov.f32	s0, s15
 800743a:	f7fb fc4d 	bl	8002cd8 <pid_single_loop_control>
 800743e:	eef0 7a40 	vmov.f32	s15, s0
 8007442:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007446:	ee17 2a90 	vmov	r2, s15
 800744a:	4b3c      	ldr	r3, [pc, #240]	; (800753c <set_motor_can_current+0x178>)
 800744c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
													    motor_data[wheel_id3].motor_feedback.rx_rpm);
		motor_data[wheel_id4].tx_data = pid_single_loop_control(v4,
														&(motor_data[wheel_id4].motor_info.f_pid),
													    motor_data[wheel_id4].motor_feedback.rx_rpm);
	}
}
 8007450:	e06f      	b.n	8007532 <set_motor_can_current+0x16e>
		motor_data[wheel_id1].tx_data = pid_single_loop_control(v1,
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	ee07 3a90 	vmov	s15, r3
 8007458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id1].motor_feedback.rx_rpm);
 800745c:	4b37      	ldr	r3, [pc, #220]	; (800753c <set_motor_can_current+0x178>)
 800745e:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
		motor_data[wheel_id1].tx_data = pid_single_loop_control(v1,
 8007462:	ee07 3a10 	vmov	s14, r3
 8007466:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800746a:	eef0 0a47 	vmov.f32	s1, s14
 800746e:	4834      	ldr	r0, [pc, #208]	; (8007540 <set_motor_can_current+0x17c>)
 8007470:	eeb0 0a67 	vmov.f32	s0, s15
 8007474:	f7fb fc30 	bl	8002cd8 <pid_single_loop_control>
 8007478:	eef0 7a40 	vmov.f32	s15, s0
 800747c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007480:	ee17 2a90 	vmov	r2, s15
 8007484:	4b2d      	ldr	r3, [pc, #180]	; (800753c <set_motor_can_current+0x178>)
 8007486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		motor_data[wheel_id2].tx_data = pid_single_loop_control(v2,
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	ee07 3a90 	vmov	s15, r3
 8007490:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id2].motor_feedback.rx_rpm);
 8007494:	4b29      	ldr	r3, [pc, #164]	; (800753c <set_motor_can_current+0x178>)
 8007496:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	; 0x11e
		motor_data[wheel_id2].tx_data = pid_single_loop_control(v2,
 800749a:	ee07 3a10 	vmov	s14, r3
 800749e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074a2:	eef0 0a47 	vmov.f32	s1, s14
 80074a6:	4827      	ldr	r0, [pc, #156]	; (8007544 <set_motor_can_current+0x180>)
 80074a8:	eeb0 0a67 	vmov.f32	s0, s15
 80074ac:	f7fb fc14 	bl	8002cd8 <pid_single_loop_control>
 80074b0:	eef0 7a40 	vmov.f32	s15, s0
 80074b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074b8:	ee17 2a90 	vmov	r2, s15
 80074bc:	4b1f      	ldr	r3, [pc, #124]	; (800753c <set_motor_can_current+0x178>)
 80074be:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		motor_data[wheel_id3].tx_data = pid_single_loop_control(v3,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	ee07 3a90 	vmov	s15, r3
 80074c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id3].motor_feedback.rx_rpm);
 80074cc:	4b1b      	ldr	r3, [pc, #108]	; (800753c <set_motor_can_current+0x178>)
 80074ce:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
		motor_data[wheel_id3].tx_data = pid_single_loop_control(v3,
 80074d2:	ee07 3a10 	vmov	s14, r3
 80074d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80074da:	eef0 0a47 	vmov.f32	s1, s14
 80074de:	481a      	ldr	r0, [pc, #104]	; (8007548 <set_motor_can_current+0x184>)
 80074e0:	eeb0 0a67 	vmov.f32	s0, s15
 80074e4:	f7fb fbf8 	bl	8002cd8 <pid_single_loop_control>
 80074e8:	eef0 7a40 	vmov.f32	s15, s0
 80074ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f0:	ee17 2a90 	vmov	r2, s15
 80074f4:	4b11      	ldr	r3, [pc, #68]	; (800753c <set_motor_can_current+0x178>)
 80074f6:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		motor_data[wheel_id4].tx_data = pid_single_loop_control(v4,
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id4].motor_feedback.rx_rpm);
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <set_motor_can_current+0x178>)
 8007506:	f9b3 3246 	ldrsh.w	r3, [r3, #582]	; 0x246
		motor_data[wheel_id4].tx_data = pid_single_loop_control(v4,
 800750a:	ee07 3a10 	vmov	s14, r3
 800750e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007512:	eef0 0a47 	vmov.f32	s1, s14
 8007516:	480d      	ldr	r0, [pc, #52]	; (800754c <set_motor_can_current+0x188>)
 8007518:	eeb0 0a67 	vmov.f32	s0, s15
 800751c:	f7fb fbdc 	bl	8002cd8 <pid_single_loop_control>
 8007520:	eef0 7a40 	vmov.f32	s15, s0
 8007524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007528:	ee17 2a90 	vmov	r2, s15
 800752c:	4b03      	ldr	r3, [pc, #12]	; (800753c <set_motor_can_current+0x178>)
 800752e:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20005218 	.word	0x20005218
 8007540:	2000521c 	.word	0x2000521c
 8007544:	200052b0 	.word	0x200052b0
 8007548:	20005344 	.word	0x20005344
 800754c:	200053d8 	.word	0x200053d8

08007550 <BMI088_init>:
    {BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3, BMI088_GYRO_INT3_INT4_IO_MAP_ERROR}

};

uint8_t BMI088_init(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b082      	sub	sp, #8
 8007554:	af00      	add	r7, sp, #0
    uint8_t ERROR = BMI088_NO_ERROR;
 8007556:	2300      	movs	r3, #0
 8007558:	71fb      	strb	r3, [r7, #7]
    // GPIO and SPI  Init .
    BMI088_GPIO_Init();
 800755a:	f000 fd5b 	bl	8008014 <BMI088_GPIO_Init>
    BMI088_Com_Init();
 800755e:	f000 fd60 	bl	8008022 <BMI088_Com_Init>

    // self test pass and init
    if (bmi088_accel_self_test() != BMI088_NO_ERROR)
 8007562:	f000 f975 	bl	8007850 <bmi088_accel_self_test>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <BMI088_init+0x26>
    {
        ERROR |= BMI088_SELF_TEST_ACCEL_ERROR;
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007572:	71fb      	strb	r3, [r7, #7]
 8007574:	e006      	b.n	8007584 <BMI088_init+0x34>
    }
    else
    {
        ERROR |= bmi088_accel_init();
 8007576:	f000 f81b 	bl	80075b0 <bmi088_accel_init>
 800757a:	4603      	mov	r3, r0
 800757c:	461a      	mov	r2, r3
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	4313      	orrs	r3, r2
 8007582:	71fb      	strb	r3, [r7, #7]
    }

    if (bmi088_gyro_self_test() != BMI088_NO_ERROR)
 8007584:	f000 fb38 	bl	8007bf8 <bmi088_gyro_self_test>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <BMI088_init+0x48>
    {
        ERROR |= BMI088_SELF_TEST_GYRO_ERROR;
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007594:	71fb      	strb	r3, [r7, #7]
 8007596:	e006      	b.n	80075a6 <BMI088_init+0x56>
    }
    else
    {
        ERROR |= bmi088_gyro_init();
 8007598:	f000 f8c2 	bl	8007720 <bmi088_gyro_init>
 800759c:	4603      	mov	r3, r0
 800759e:	461a      	mov	r2, r3
 80075a0:	79fb      	ldrb	r3, [r7, #7]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	71fb      	strb	r3, [r7, #7]
    }
    return ERROR;
 80075a6:	79fb      	ldrb	r3, [r7, #7]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <bmi088_accel_init>:

uint8_t bmi088_accel_init(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	71fb      	strb	r3, [r7, #7]

    //check commiunication
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 80075be:	f000 fd89 	bl	80080d4 <BMI088_ACCEL_NS_L>
 80075c2:	2080      	movs	r0, #128	; 0x80
 80075c4:	f000 fdb6 	bl	8008134 <BMI088_Read_Write_Byte>
 80075c8:	2055      	movs	r0, #85	; 0x55
 80075ca:	f000 fdb3 	bl	8008134 <BMI088_Read_Write_Byte>
 80075ce:	2055      	movs	r0, #85	; 0x55
 80075d0:	f000 fdb0 	bl	8008134 <BMI088_Read_Write_Byte>
 80075d4:	4603      	mov	r3, r0
 80075d6:	71bb      	strb	r3, [r7, #6]
 80075d8:	f000 fd88 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80075dc:	2096      	movs	r0, #150	; 0x96
 80075de:	f000 fd35 	bl	800804c <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 80075e2:	f000 fd77 	bl	80080d4 <BMI088_ACCEL_NS_L>
 80075e6:	2080      	movs	r0, #128	; 0x80
 80075e8:	f000 fda4 	bl	8008134 <BMI088_Read_Write_Byte>
 80075ec:	2055      	movs	r0, #85	; 0x55
 80075ee:	f000 fda1 	bl	8008134 <BMI088_Read_Write_Byte>
 80075f2:	2055      	movs	r0, #85	; 0x55
 80075f4:	f000 fd9e 	bl	8008134 <BMI088_Read_Write_Byte>
 80075f8:	4603      	mov	r3, r0
 80075fa:	71bb      	strb	r3, [r7, #6]
 80075fc:	f000 fd76 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007600:	2096      	movs	r0, #150	; 0x96
 8007602:	f000 fd23 	bl	800804c <BMI088_Delay_us>

    //accel software reset
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8007606:	f000 fd65 	bl	80080d4 <BMI088_ACCEL_NS_L>
 800760a:	21b6      	movs	r1, #182	; 0xb6
 800760c:	207e      	movs	r0, #126	; 0x7e
 800760e:	f000 fcb0 	bl	8007f72 <BMI088_Write_Single_Reg>
 8007612:	f000 fd6b 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007616:	2050      	movs	r0, #80	; 0x50
 8007618:	f000 fd0a 	bl	8008030 <BMI088_Delay_ms>

    //check commiunication is normal after reset
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 800761c:	f000 fd5a 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007620:	2080      	movs	r0, #128	; 0x80
 8007622:	f000 fd87 	bl	8008134 <BMI088_Read_Write_Byte>
 8007626:	2055      	movs	r0, #85	; 0x55
 8007628:	f000 fd84 	bl	8008134 <BMI088_Read_Write_Byte>
 800762c:	2055      	movs	r0, #85	; 0x55
 800762e:	f000 fd81 	bl	8008134 <BMI088_Read_Write_Byte>
 8007632:	4603      	mov	r3, r0
 8007634:	71bb      	strb	r3, [r7, #6]
 8007636:	f000 fd59 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800763a:	2096      	movs	r0, #150	; 0x96
 800763c:	f000 fd06 	bl	800804c <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007640:	f000 fd48 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007644:	2080      	movs	r0, #128	; 0x80
 8007646:	f000 fd75 	bl	8008134 <BMI088_Read_Write_Byte>
 800764a:	2055      	movs	r0, #85	; 0x55
 800764c:	f000 fd72 	bl	8008134 <BMI088_Read_Write_Byte>
 8007650:	2055      	movs	r0, #85	; 0x55
 8007652:	f000 fd6f 	bl	8008134 <BMI088_Read_Write_Byte>
 8007656:	4603      	mov	r3, r0
 8007658:	71bb      	strb	r3, [r7, #6]
 800765a:	f000 fd47 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800765e:	2096      	movs	r0, #150	; 0x96
 8007660:	f000 fcf4 	bl	800804c <BMI088_Delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8007664:	79bb      	ldrb	r3, [r7, #6]
 8007666:	2b1e      	cmp	r3, #30
 8007668:	d001      	beq.n	800766e <bmi088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 800766a:	23ff      	movs	r3, #255	; 0xff
 800766c:	e052      	b.n	8007714 <bmi088_accel_init+0x164>
    }

    //set accel sonsor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_Write_ACCEL_Reg_Num; write_reg_num++)
 800766e:	2300      	movs	r3, #0
 8007670:	71fb      	strb	r3, [r7, #7]
 8007672:	e04b      	b.n	800770c <bmi088_accel_init+0x15c>
    {

        BMI088_ACCEL_Write_Single_Reg(write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][0], write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][1]);
 8007674:	f000 fd2e 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007678:	79fa      	ldrb	r2, [r7, #7]
 800767a:	4928      	ldr	r1, [pc, #160]	; (800771c <bmi088_accel_init+0x16c>)
 800767c:	4613      	mov	r3, r2
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	4413      	add	r3, r2
 8007682:	440b      	add	r3, r1
 8007684:	7818      	ldrb	r0, [r3, #0]
 8007686:	79fa      	ldrb	r2, [r7, #7]
 8007688:	4924      	ldr	r1, [pc, #144]	; (800771c <bmi088_accel_init+0x16c>)
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	440b      	add	r3, r1
 8007692:	3301      	adds	r3, #1
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	4619      	mov	r1, r3
 8007698:	f000 fc6b 	bl	8007f72 <BMI088_Write_Single_Reg>
 800769c:	f000 fd26 	bl	80080ec <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80076a0:	2096      	movs	r0, #150	; 0x96
 80076a2:	f000 fcd3 	bl	800804c <BMI088_Delay_us>

        BMI088_ACCEL_Read_Single_Reg(write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][0], res);
 80076a6:	f000 fd15 	bl	80080d4 <BMI088_ACCEL_NS_L>
 80076aa:	79fa      	ldrb	r2, [r7, #7]
 80076ac:	491b      	ldr	r1, [pc, #108]	; (800771c <bmi088_accel_init+0x16c>)
 80076ae:	4613      	mov	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	440b      	add	r3, r1
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fd38 	bl	8008134 <BMI088_Read_Write_Byte>
 80076c4:	2055      	movs	r0, #85	; 0x55
 80076c6:	f000 fd35 	bl	8008134 <BMI088_Read_Write_Byte>
 80076ca:	2055      	movs	r0, #85	; 0x55
 80076cc:	f000 fd32 	bl	8008134 <BMI088_Read_Write_Byte>
 80076d0:	4603      	mov	r3, r0
 80076d2:	71bb      	strb	r3, [r7, #6]
 80076d4:	f000 fd0a 	bl	80080ec <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80076d8:	2096      	movs	r0, #150	; 0x96
 80076da:	f000 fcb7 	bl	800804c <BMI088_Delay_us>

        if (res != write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][1])
 80076de:	79fa      	ldrb	r2, [r7, #7]
 80076e0:	490e      	ldr	r1, [pc, #56]	; (800771c <bmi088_accel_init+0x16c>)
 80076e2:	4613      	mov	r3, r2
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4413      	add	r3, r2
 80076e8:	440b      	add	r3, r1
 80076ea:	3301      	adds	r3, #1
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	79ba      	ldrb	r2, [r7, #6]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d008      	beq.n	8007706 <bmi088_accel_init+0x156>
        {
            return write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][2];
 80076f4:	79fa      	ldrb	r2, [r7, #7]
 80076f6:	4909      	ldr	r1, [pc, #36]	; (800771c <bmi088_accel_init+0x16c>)
 80076f8:	4613      	mov	r3, r2
 80076fa:	005b      	lsls	r3, r3, #1
 80076fc:	4413      	add	r3, r2
 80076fe:	440b      	add	r3, r1
 8007700:	3302      	adds	r3, #2
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	e006      	b.n	8007714 <bmi088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_Write_ACCEL_Reg_Num; write_reg_num++)
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	3301      	adds	r3, #1
 800770a:	71fb      	strb	r3, [r7, #7]
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	2b05      	cmp	r3, #5
 8007710:	d9b0      	bls.n	8007674 <bmi088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000014 	.word	0x20000014

08007720 <bmi088_gyro_init>:

uint8_t bmi088_gyro_init(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 800772a:	2300      	movs	r3, #0
 800772c:	71bb      	strb	r3, [r7, #6]

    //check commiunication
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 800772e:	f000 fce9 	bl	8008104 <BMI088_GYRO_NS_L>
 8007732:	1dbb      	adds	r3, r7, #6
 8007734:	4619      	mov	r1, r3
 8007736:	2000      	movs	r0, #0
 8007738:	f000 fc2f 	bl	8007f9a <BMI088_Read_Single_Reg>
 800773c:	f000 fcee 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007740:	2096      	movs	r0, #150	; 0x96
 8007742:	f000 fc83 	bl	800804c <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007746:	f000 fcdd 	bl	8008104 <BMI088_GYRO_NS_L>
 800774a:	1dbb      	adds	r3, r7, #6
 800774c:	4619      	mov	r1, r3
 800774e:	2000      	movs	r0, #0
 8007750:	f000 fc23 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007754:	f000 fce2 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007758:	2096      	movs	r0, #150	; 0x96
 800775a:	f000 fc77 	bl	800804c <BMI088_Delay_us>

    //reset the gyro SENSOR
    BMI088_GYRO_Write_Single_Reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800775e:	f000 fcd1 	bl	8008104 <BMI088_GYRO_NS_L>
 8007762:	21b6      	movs	r1, #182	; 0xb6
 8007764:	2014      	movs	r0, #20
 8007766:	f000 fc04 	bl	8007f72 <BMI088_Write_Single_Reg>
 800776a:	f000 fcd7 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 800776e:	2050      	movs	r0, #80	; 0x50
 8007770:	f000 fc5e 	bl	8008030 <BMI088_Delay_ms>
    //check commiunication is normal after reset
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007774:	f000 fcc6 	bl	8008104 <BMI088_GYRO_NS_L>
 8007778:	1dbb      	adds	r3, r7, #6
 800777a:	4619      	mov	r1, r3
 800777c:	2000      	movs	r0, #0
 800777e:	f000 fc0c 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007782:	f000 fccb 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007786:	2096      	movs	r0, #150	; 0x96
 8007788:	f000 fc60 	bl	800804c <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 800778c:	f000 fcba 	bl	8008104 <BMI088_GYRO_NS_L>
 8007790:	1dbb      	adds	r3, r7, #6
 8007792:	4619      	mov	r1, r3
 8007794:	2000      	movs	r0, #0
 8007796:	f000 fc00 	bl	8007f9a <BMI088_Read_Single_Reg>
 800779a:	f000 fcbf 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800779e:	2096      	movs	r0, #150	; 0x96
 80077a0:	f000 fc54 	bl	800804c <BMI088_Delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 80077a4:	79bb      	ldrb	r3, [r7, #6]
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	d001      	beq.n	80077ae <bmi088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 80077aa:	23ff      	movs	r3, #255	; 0xff
 80077ac:	e049      	b.n	8007842 <bmi088_gyro_init+0x122>
    }

    //set gyro sonsor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_Write_GYRO_Reg_Num; write_reg_num++)
 80077ae:	2300      	movs	r3, #0
 80077b0:	71fb      	strb	r3, [r7, #7]
 80077b2:	e042      	b.n	800783a <bmi088_gyro_init+0x11a>
    {

        BMI088_GYRO_Write_Single_Reg(write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][0], write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][1]);
 80077b4:	f000 fca6 	bl	8008104 <BMI088_GYRO_NS_L>
 80077b8:	79fa      	ldrb	r2, [r7, #7]
 80077ba:	4924      	ldr	r1, [pc, #144]	; (800784c <bmi088_gyro_init+0x12c>)
 80077bc:	4613      	mov	r3, r2
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	4413      	add	r3, r2
 80077c2:	440b      	add	r3, r1
 80077c4:	7818      	ldrb	r0, [r3, #0]
 80077c6:	79fa      	ldrb	r2, [r7, #7]
 80077c8:	4920      	ldr	r1, [pc, #128]	; (800784c <bmi088_gyro_init+0x12c>)
 80077ca:	4613      	mov	r3, r2
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4413      	add	r3, r2
 80077d0:	440b      	add	r3, r1
 80077d2:	3301      	adds	r3, #1
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	4619      	mov	r1, r3
 80077d8:	f000 fbcb 	bl	8007f72 <BMI088_Write_Single_Reg>
 80077dc:	f000 fc9e 	bl	800811c <BMI088_GYRO_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80077e0:	2096      	movs	r0, #150	; 0x96
 80077e2:	f000 fc33 	bl	800804c <BMI088_Delay_us>

        BMI088_GYRO_Read_Single_Reg(write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][0], res);
 80077e6:	f000 fc8d 	bl	8008104 <BMI088_GYRO_NS_L>
 80077ea:	79fa      	ldrb	r2, [r7, #7]
 80077ec:	4917      	ldr	r1, [pc, #92]	; (800784c <bmi088_gyro_init+0x12c>)
 80077ee:	4613      	mov	r3, r2
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	4413      	add	r3, r2
 80077f4:	440b      	add	r3, r1
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	1dba      	adds	r2, r7, #6
 80077fa:	4611      	mov	r1, r2
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fbcc 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007802:	f000 fc8b 	bl	800811c <BMI088_GYRO_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007806:	2096      	movs	r0, #150	; 0x96
 8007808:	f000 fc20 	bl	800804c <BMI088_Delay_us>

        if (res != write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][1])
 800780c:	79fa      	ldrb	r2, [r7, #7]
 800780e:	490f      	ldr	r1, [pc, #60]	; (800784c <bmi088_gyro_init+0x12c>)
 8007810:	4613      	mov	r3, r2
 8007812:	005b      	lsls	r3, r3, #1
 8007814:	4413      	add	r3, r2
 8007816:	440b      	add	r3, r1
 8007818:	3301      	adds	r3, #1
 800781a:	781a      	ldrb	r2, [r3, #0]
 800781c:	79bb      	ldrb	r3, [r7, #6]
 800781e:	429a      	cmp	r2, r3
 8007820:	d008      	beq.n	8007834 <bmi088_gyro_init+0x114>
        {
            return write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][2];
 8007822:	79fa      	ldrb	r2, [r7, #7]
 8007824:	4909      	ldr	r1, [pc, #36]	; (800784c <bmi088_gyro_init+0x12c>)
 8007826:	4613      	mov	r3, r2
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	4413      	add	r3, r2
 800782c:	440b      	add	r3, r1
 800782e:	3302      	adds	r3, #2
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	e006      	b.n	8007842 <bmi088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_Write_GYRO_Reg_Num; write_reg_num++)
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	3301      	adds	r3, #1
 8007838:	71fb      	strb	r3, [r7, #7]
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	2b05      	cmp	r3, #5
 800783e:	d9b9      	bls.n	80077b4 <bmi088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	20000028 	.word	0x20000028

08007850 <bmi088_accel_self_test>:

uint8_t bmi088_accel_self_test(void)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0

    int16_t self_test_accel[2][3];

    uint8_t buf[6] = {0, 0, 0, 0, 0, 0};
 8007856:	4ad1      	ldr	r2, [pc, #836]	; (8007b9c <bmi088_accel_self_test+0x34c>)
 8007858:	463b      	mov	r3, r7
 800785a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800785e:	6018      	str	r0, [r3, #0]
 8007860:	3304      	adds	r3, #4
 8007862:	8019      	strh	r1, [r3, #0]
    uint8_t res = 0;
 8007864:	2300      	movs	r3, #0
 8007866:	75bb      	strb	r3, [r7, #22]

    uint8_t write_reg_num = 0;
 8007868:	2300      	movs	r3, #0
 800786a:	75fb      	strb	r3, [r7, #23]
        {BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_POSITIVE_SIGNAL, BMI088_ACC_PWR_CONF_ERROR},
        {BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_NEGATIVE_SIGNAL, BMI088_ACC_PWR_CONF_ERROR}

    };
    //check commiunication is normal
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 800786c:	f000 fc32 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007870:	2080      	movs	r0, #128	; 0x80
 8007872:	f000 fc5f 	bl	8008134 <BMI088_Read_Write_Byte>
 8007876:	2055      	movs	r0, #85	; 0x55
 8007878:	f000 fc5c 	bl	8008134 <BMI088_Read_Write_Byte>
 800787c:	2055      	movs	r0, #85	; 0x55
 800787e:	f000 fc59 	bl	8008134 <BMI088_Read_Write_Byte>
 8007882:	4603      	mov	r3, r0
 8007884:	75bb      	strb	r3, [r7, #22]
 8007886:	f000 fc31 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800788a:	2096      	movs	r0, #150	; 0x96
 800788c:	f000 fbde 	bl	800804c <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007890:	f000 fc20 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007894:	2080      	movs	r0, #128	; 0x80
 8007896:	f000 fc4d 	bl	8008134 <BMI088_Read_Write_Byte>
 800789a:	2055      	movs	r0, #85	; 0x55
 800789c:	f000 fc4a 	bl	8008134 <BMI088_Read_Write_Byte>
 80078a0:	2055      	movs	r0, #85	; 0x55
 80078a2:	f000 fc47 	bl	8008134 <BMI088_Read_Write_Byte>
 80078a6:	4603      	mov	r3, r0
 80078a8:	75bb      	strb	r3, [r7, #22]
 80078aa:	f000 fc1f 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80078ae:	2096      	movs	r0, #150	; 0x96
 80078b0:	f000 fbcc 	bl	800804c <BMI088_Delay_us>

    // reset  bmi088 accel SENSOR and wait for > 50ms
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 80078b4:	f000 fc0e 	bl	80080d4 <BMI088_ACCEL_NS_L>
 80078b8:	21b6      	movs	r1, #182	; 0xb6
 80078ba:	207e      	movs	r0, #126	; 0x7e
 80078bc:	f000 fb59 	bl	8007f72 <BMI088_Write_Single_Reg>
 80078c0:	f000 fc14 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 80078c4:	2050      	movs	r0, #80	; 0x50
 80078c6:	f000 fbb3 	bl	8008030 <BMI088_Delay_ms>

    //check commiunication is normal
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 80078ca:	f000 fc03 	bl	80080d4 <BMI088_ACCEL_NS_L>
 80078ce:	2080      	movs	r0, #128	; 0x80
 80078d0:	f000 fc30 	bl	8008134 <BMI088_Read_Write_Byte>
 80078d4:	2055      	movs	r0, #85	; 0x55
 80078d6:	f000 fc2d 	bl	8008134 <BMI088_Read_Write_Byte>
 80078da:	2055      	movs	r0, #85	; 0x55
 80078dc:	f000 fc2a 	bl	8008134 <BMI088_Read_Write_Byte>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75bb      	strb	r3, [r7, #22]
 80078e4:	f000 fc02 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80078e8:	2096      	movs	r0, #150	; 0x96
 80078ea:	f000 fbaf 	bl	800804c <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 80078ee:	f000 fbf1 	bl	80080d4 <BMI088_ACCEL_NS_L>
 80078f2:	2080      	movs	r0, #128	; 0x80
 80078f4:	f000 fc1e 	bl	8008134 <BMI088_Read_Write_Byte>
 80078f8:	2055      	movs	r0, #85	; 0x55
 80078fa:	f000 fc1b 	bl	8008134 <BMI088_Read_Write_Byte>
 80078fe:	2055      	movs	r0, #85	; 0x55
 8007900:	f000 fc18 	bl	8008134 <BMI088_Read_Write_Byte>
 8007904:	4603      	mov	r3, r0
 8007906:	75bb      	strb	r3, [r7, #22]
 8007908:	f000 fbf0 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800790c:	2096      	movs	r0, #150	; 0x96
 800790e:	f000 fb9d 	bl	800804c <BMI088_Delay_us>

    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8007912:	7dbb      	ldrb	r3, [r7, #22]
 8007914:	2b1e      	cmp	r3, #30
 8007916:	d001      	beq.n	800791c <bmi088_accel_self_test+0xcc>
    {
        return BMI088_NO_SENSOR;
 8007918:	23ff      	movs	r3, #255	; 0xff
 800791a:	e168      	b.n	8007bee <bmi088_accel_self_test+0x39e>
    }

    // set the accel register
    for (write_reg_num = 0; write_reg_num < 4; write_reg_num++)
 800791c:	2300      	movs	r3, #0
 800791e:	75fb      	strb	r3, [r7, #23]
 8007920:	e04e      	b.n	80079c0 <bmi088_accel_self_test+0x170>
    {

        BMI088_ACCEL_Write_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][0], write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][1]);
 8007922:	f000 fbd7 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007926:	7dfa      	ldrb	r2, [r7, #23]
 8007928:	499d      	ldr	r1, [pc, #628]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 800792a:	4613      	mov	r3, r2
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	4413      	add	r3, r2
 8007930:	440b      	add	r3, r1
 8007932:	7818      	ldrb	r0, [r3, #0]
 8007934:	7dfa      	ldrb	r2, [r7, #23]
 8007936:	499a      	ldr	r1, [pc, #616]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	440b      	add	r3, r1
 8007940:	3301      	adds	r3, #1
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	4619      	mov	r1, r3
 8007946:	f000 fb14 	bl	8007f72 <BMI088_Write_Single_Reg>
 800794a:	f000 fbcf 	bl	80080ec <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800794e:	2096      	movs	r0, #150	; 0x96
 8007950:	f000 fb7c 	bl	800804c <BMI088_Delay_us>

        BMI088_ACCEL_Read_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][0], res);
 8007954:	f000 fbbe 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007958:	7dfa      	ldrb	r2, [r7, #23]
 800795a:	4991      	ldr	r1, [pc, #580]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 800795c:	4613      	mov	r3, r2
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	4413      	add	r3, r2
 8007962:	440b      	add	r3, r1
 8007964:	781b      	ldrb	r3, [r3, #0]
 8007966:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800796a:	b2db      	uxtb	r3, r3
 800796c:	4618      	mov	r0, r3
 800796e:	f000 fbe1 	bl	8008134 <BMI088_Read_Write_Byte>
 8007972:	2055      	movs	r0, #85	; 0x55
 8007974:	f000 fbde 	bl	8008134 <BMI088_Read_Write_Byte>
 8007978:	2055      	movs	r0, #85	; 0x55
 800797a:	f000 fbdb 	bl	8008134 <BMI088_Read_Write_Byte>
 800797e:	4603      	mov	r3, r0
 8007980:	75bb      	strb	r3, [r7, #22]
 8007982:	f000 fbb3 	bl	80080ec <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007986:	2096      	movs	r0, #150	; 0x96
 8007988:	f000 fb60 	bl	800804c <BMI088_Delay_us>

        if (res != write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][1])
 800798c:	7dfa      	ldrb	r2, [r7, #23]
 800798e:	4984      	ldr	r1, [pc, #528]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 8007990:	4613      	mov	r3, r2
 8007992:	005b      	lsls	r3, r3, #1
 8007994:	4413      	add	r3, r2
 8007996:	440b      	add	r3, r1
 8007998:	3301      	adds	r3, #1
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	7dba      	ldrb	r2, [r7, #22]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d008      	beq.n	80079b4 <bmi088_accel_self_test+0x164>
        {
            return write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][2];
 80079a2:	7dfa      	ldrb	r2, [r7, #23]
 80079a4:	497e      	ldr	r1, [pc, #504]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 80079a6:	4613      	mov	r3, r2
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	4413      	add	r3, r2
 80079ac:	440b      	add	r3, r1
 80079ae:	3302      	adds	r3, #2
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	e11c      	b.n	8007bee <bmi088_accel_self_test+0x39e>
        }
        // accel conf and accel range  . the two register set need wait for > 50ms
        BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 80079b4:	2050      	movs	r0, #80	; 0x50
 80079b6:	f000 fb3b 	bl	8008030 <BMI088_Delay_ms>
    for (write_reg_num = 0; write_reg_num < 4; write_reg_num++)
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
 80079bc:	3301      	adds	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d9ad      	bls.n	8007922 <bmi088_accel_self_test+0xd2>
    }

    // self test include postive and negative
    for (write_reg_num = 0; write_reg_num < 2; write_reg_num++)
 80079c6:	2300      	movs	r3, #0
 80079c8:	75fb      	strb	r3, [r7, #23]
 80079ca:	e096      	b.n	8007afa <bmi088_accel_self_test+0x2aa>
    {

        BMI088_ACCEL_Write_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][0], write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][1]);
 80079cc:	f000 fb82 	bl	80080d4 <BMI088_ACCEL_NS_L>
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	1d1a      	adds	r2, r3, #4
 80079d4:	4972      	ldr	r1, [pc, #456]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 80079d6:	4613      	mov	r3, r2
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	4413      	add	r3, r2
 80079dc:	440b      	add	r3, r1
 80079de:	7818      	ldrb	r0, [r3, #0]
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	1d1a      	adds	r2, r3, #4
 80079e4:	496e      	ldr	r1, [pc, #440]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 80079e6:	4613      	mov	r3, r2
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	4413      	add	r3, r2
 80079ec:	440b      	add	r3, r1
 80079ee:	3301      	adds	r3, #1
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	f000 fabd 	bl	8007f72 <BMI088_Write_Single_Reg>
 80079f8:	f000 fb78 	bl	80080ec <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80079fc:	2096      	movs	r0, #150	; 0x96
 80079fe:	f000 fb25 	bl	800804c <BMI088_Delay_us>

        BMI088_ACCEL_Read_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][0], res);
 8007a02:	f000 fb67 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007a06:	7dfb      	ldrb	r3, [r7, #23]
 8007a08:	1d1a      	adds	r2, r3, #4
 8007a0a:	4965      	ldr	r1, [pc, #404]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	005b      	lsls	r3, r3, #1
 8007a10:	4413      	add	r3, r2
 8007a12:	440b      	add	r3, r1
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f000 fb89 	bl	8008134 <BMI088_Read_Write_Byte>
 8007a22:	2055      	movs	r0, #85	; 0x55
 8007a24:	f000 fb86 	bl	8008134 <BMI088_Read_Write_Byte>
 8007a28:	2055      	movs	r0, #85	; 0x55
 8007a2a:	f000 fb83 	bl	8008134 <BMI088_Read_Write_Byte>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	75bb      	strb	r3, [r7, #22]
 8007a32:	f000 fb5b 	bl	80080ec <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007a36:	2096      	movs	r0, #150	; 0x96
 8007a38:	f000 fb08 	bl	800804c <BMI088_Delay_us>

        if (res != write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][1])
 8007a3c:	7dfb      	ldrb	r3, [r7, #23]
 8007a3e:	1d1a      	adds	r2, r3, #4
 8007a40:	4957      	ldr	r1, [pc, #348]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 8007a42:	4613      	mov	r3, r2
 8007a44:	005b      	lsls	r3, r3, #1
 8007a46:	4413      	add	r3, r2
 8007a48:	440b      	add	r3, r1
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	7dba      	ldrb	r2, [r7, #22]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d009      	beq.n	8007a68 <bmi088_accel_self_test+0x218>
        {
            return write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][2];
 8007a54:	7dfb      	ldrb	r3, [r7, #23]
 8007a56:	1d1a      	adds	r2, r3, #4
 8007a58:	4951      	ldr	r1, [pc, #324]	; (8007ba0 <bmi088_accel_self_test+0x350>)
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4413      	add	r3, r2
 8007a60:	440b      	add	r3, r1
 8007a62:	3302      	adds	r3, #2
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	e0c2      	b.n	8007bee <bmi088_accel_self_test+0x39e>
        }
        // accel conf and accel range  . the two register set need wait for > 50ms
        BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007a68:	2050      	movs	r0, #80	; 0x50
 8007a6a:	f000 fae1 	bl	8008030 <BMI088_Delay_ms>

        // read response accel
        BMI088_ACCEL_Read_Muli_Reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8007a6e:	f000 fb31 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007a72:	2092      	movs	r0, #146	; 0x92
 8007a74:	f000 fb5e 	bl	8008134 <BMI088_Read_Write_Byte>
 8007a78:	463b      	mov	r3, r7
 8007a7a:	2206      	movs	r2, #6
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	2012      	movs	r0, #18
 8007a80:	f000 faa3 	bl	8007fca <BMI088_Read_Muli_Reg>
 8007a84:	f000 fb32 	bl	80080ec <BMI088_ACCEL_NS_H>

        self_test_accel[write_reg_num][0] = (int16_t)((buf[1]) << 8) | buf[0];
 8007a88:	787b      	ldrb	r3, [r7, #1]
 8007a8a:	021b      	lsls	r3, r3, #8
 8007a8c:	b219      	sxth	r1, r3
 8007a8e:	783b      	ldrb	r3, [r7, #0]
 8007a90:	b21b      	sxth	r3, r3
 8007a92:	7dfa      	ldrb	r2, [r7, #23]
 8007a94:	430b      	orrs	r3, r1
 8007a96:	b219      	sxth	r1, r3
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	005b      	lsls	r3, r3, #1
 8007aa0:	f107 0218 	add.w	r2, r7, #24
 8007aa4:	4413      	add	r3, r2
 8007aa6:	3b10      	subs	r3, #16
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	801a      	strh	r2, [r3, #0]
        self_test_accel[write_reg_num][1] = (int16_t)((buf[3]) << 8) | buf[2];
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	021b      	lsls	r3, r3, #8
 8007ab0:	b219      	sxth	r1, r3
 8007ab2:	78bb      	ldrb	r3, [r7, #2]
 8007ab4:	b21b      	sxth	r3, r3
 8007ab6:	7dfa      	ldrb	r2, [r7, #23]
 8007ab8:	430b      	orrs	r3, r1
 8007aba:	b219      	sxth	r1, r3
 8007abc:	4613      	mov	r3, r2
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	4413      	add	r3, r2
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	f107 0218 	add.w	r2, r7, #24
 8007ac8:	4413      	add	r3, r2
 8007aca:	3b0e      	subs	r3, #14
 8007acc:	460a      	mov	r2, r1
 8007ace:	801a      	strh	r2, [r3, #0]
        self_test_accel[write_reg_num][2] = (int16_t)((buf[5]) << 8) | buf[4];
 8007ad0:	797b      	ldrb	r3, [r7, #5]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	b219      	sxth	r1, r3
 8007ad6:	793b      	ldrb	r3, [r7, #4]
 8007ad8:	b21b      	sxth	r3, r3
 8007ada:	7dfa      	ldrb	r2, [r7, #23]
 8007adc:	430b      	orrs	r3, r1
 8007ade:	b219      	sxth	r1, r3
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	005b      	lsls	r3, r3, #1
 8007ae4:	4413      	add	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	f107 0218 	add.w	r2, r7, #24
 8007aec:	4413      	add	r3, r2
 8007aee:	3b0c      	subs	r3, #12
 8007af0:	460a      	mov	r2, r1
 8007af2:	801a      	strh	r2, [r3, #0]
    for (write_reg_num = 0; write_reg_num < 2; write_reg_num++)
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	3301      	adds	r3, #1
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	2b01      	cmp	r3, #1
 8007afe:	f67f af65 	bls.w	80079cc <bmi088_accel_self_test+0x17c>
    }

    //set self test off
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_OFF);
 8007b02:	f000 fae7 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007b06:	2100      	movs	r1, #0
 8007b08:	206d      	movs	r0, #109	; 0x6d
 8007b0a:	f000 fa32 	bl	8007f72 <BMI088_Write_Single_Reg>
 8007b0e:	f000 faed 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007b12:	2096      	movs	r0, #150	; 0x96
 8007b14:	f000 fa9a 	bl	800804c <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_SELF_TEST, res);
 8007b18:	f000 fadc 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007b1c:	20ed      	movs	r0, #237	; 0xed
 8007b1e:	f000 fb09 	bl	8008134 <BMI088_Read_Write_Byte>
 8007b22:	2055      	movs	r0, #85	; 0x55
 8007b24:	f000 fb06 	bl	8008134 <BMI088_Read_Write_Byte>
 8007b28:	2055      	movs	r0, #85	; 0x55
 8007b2a:	f000 fb03 	bl	8008134 <BMI088_Read_Write_Byte>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75bb      	strb	r3, [r7, #22]
 8007b32:	f000 fadb 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007b36:	2096      	movs	r0, #150	; 0x96
 8007b38:	f000 fa88 	bl	800804c <BMI088_Delay_us>

    if (res != (BMI088_ACC_SELF_TEST_OFF))
 8007b3c:	7dbb      	ldrb	r3, [r7, #22]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d001      	beq.n	8007b46 <bmi088_accel_self_test+0x2f6>
    {
        return BMI088_ACC_SELF_TEST_ERROR;
 8007b42:	2304      	movs	r3, #4
 8007b44:	e053      	b.n	8007bee <bmi088_accel_self_test+0x39e>
    }

    //reset the accel SENSOR
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8007b46:	f000 fac5 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007b4a:	21b6      	movs	r1, #182	; 0xb6
 8007b4c:	207e      	movs	r0, #126	; 0x7e
 8007b4e:	f000 fa10 	bl	8007f72 <BMI088_Write_Single_Reg>
 8007b52:	f000 facb 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007b56:	2050      	movs	r0, #80	; 0x50
 8007b58:	f000 fa6a 	bl	8008030 <BMI088_Delay_ms>

    if ((self_test_accel[0][0] - self_test_accel[1][0] < 1365) || (self_test_accel[0][1] - self_test_accel[1][1] < 1365) || (self_test_accel[0][2] - self_test_accel[1][2] < 680))
 8007b5c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007b60:	461a      	mov	r2, r3
 8007b62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	f240 5254 	movw	r2, #1364	; 0x554
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	dd12      	ble.n	8007b96 <bmi088_accel_self_test+0x346>
 8007b70:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007b74:	461a      	mov	r2, r3
 8007b76:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f240 5254 	movw	r2, #1364	; 0x554
 8007b80:	4293      	cmp	r3, r2
 8007b82:	dd08      	ble.n	8007b96 <bmi088_accel_self_test+0x346>
 8007b84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8007b94:	da06      	bge.n	8007ba4 <bmi088_accel_self_test+0x354>
    {
        return BMI088_SELF_TEST_ACCEL_ERROR;
 8007b96:	2380      	movs	r3, #128	; 0x80
 8007b98:	e029      	b.n	8007bee <bmi088_accel_self_test+0x39e>
 8007b9a:	bf00      	nop
 8007b9c:	080153f8 	.word	0x080153f8
 8007ba0:	08015590 	.word	0x08015590
    }

    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007ba4:	f000 fa96 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007ba8:	2080      	movs	r0, #128	; 0x80
 8007baa:	f000 fac3 	bl	8008134 <BMI088_Read_Write_Byte>
 8007bae:	2055      	movs	r0, #85	; 0x55
 8007bb0:	f000 fac0 	bl	8008134 <BMI088_Read_Write_Byte>
 8007bb4:	2055      	movs	r0, #85	; 0x55
 8007bb6:	f000 fabd 	bl	8008134 <BMI088_Read_Write_Byte>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75bb      	strb	r3, [r7, #22]
 8007bbe:	f000 fa95 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007bc2:	2096      	movs	r0, #150	; 0x96
 8007bc4:	f000 fa42 	bl	800804c <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007bc8:	f000 fa84 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007bcc:	2080      	movs	r0, #128	; 0x80
 8007bce:	f000 fab1 	bl	8008134 <BMI088_Read_Write_Byte>
 8007bd2:	2055      	movs	r0, #85	; 0x55
 8007bd4:	f000 faae 	bl	8008134 <BMI088_Read_Write_Byte>
 8007bd8:	2055      	movs	r0, #85	; 0x55
 8007bda:	f000 faab 	bl	8008134 <BMI088_Read_Write_Byte>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75bb      	strb	r3, [r7, #22]
 8007be2:	f000 fa83 	bl	80080ec <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007be6:	2096      	movs	r0, #150	; 0x96
 8007be8:	f000 fa30 	bl	800804c <BMI088_Delay_us>

    return BMI088_NO_ERROR;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop

08007bf8 <bmi088_gyro_self_test>:

uint8_t bmi088_gyro_self_test(void)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	71bb      	strb	r3, [r7, #6]
    uint8_t retry = 0;
 8007c02:	2300      	movs	r3, #0
 8007c04:	71fb      	strb	r3, [r7, #7]
    //check commiunication is normal
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007c06:	f000 fa7d 	bl	8008104 <BMI088_GYRO_NS_L>
 8007c0a:	1dbb      	adds	r3, r7, #6
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	2000      	movs	r0, #0
 8007c10:	f000 f9c3 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007c14:	f000 fa82 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007c18:	2096      	movs	r0, #150	; 0x96
 8007c1a:	f000 fa17 	bl	800804c <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007c1e:	f000 fa71 	bl	8008104 <BMI088_GYRO_NS_L>
 8007c22:	1dbb      	adds	r3, r7, #6
 8007c24:	4619      	mov	r1, r3
 8007c26:	2000      	movs	r0, #0
 8007c28:	f000 f9b7 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007c2c:	f000 fa76 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007c30:	2096      	movs	r0, #150	; 0x96
 8007c32:	f000 fa0b 	bl	800804c <BMI088_Delay_us>
    //reset the gyro SENSOR
    BMI088_GYRO_Write_Single_Reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 8007c36:	f000 fa65 	bl	8008104 <BMI088_GYRO_NS_L>
 8007c3a:	21b6      	movs	r1, #182	; 0xb6
 8007c3c:	2014      	movs	r0, #20
 8007c3e:	f000 f998 	bl	8007f72 <BMI088_Write_Single_Reg>
 8007c42:	f000 fa6b 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007c46:	2050      	movs	r0, #80	; 0x50
 8007c48:	f000 f9f2 	bl	8008030 <BMI088_Delay_ms>
    //check commiunication is normal after reset
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007c4c:	f000 fa5a 	bl	8008104 <BMI088_GYRO_NS_L>
 8007c50:	1dbb      	adds	r3, r7, #6
 8007c52:	4619      	mov	r1, r3
 8007c54:	2000      	movs	r0, #0
 8007c56:	f000 f9a0 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007c5a:	f000 fa5f 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007c5e:	2096      	movs	r0, #150	; 0x96
 8007c60:	f000 f9f4 	bl	800804c <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007c64:	f000 fa4e 	bl	8008104 <BMI088_GYRO_NS_L>
 8007c68:	1dbb      	adds	r3, r7, #6
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	f000 f994 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007c72:	f000 fa53 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007c76:	2096      	movs	r0, #150	; 0x96
 8007c78:	f000 f9e8 	bl	800804c <BMI088_Delay_us>

    BMI088_GYRO_Write_Single_Reg(BMI088_GYRO_SELF_TEST, BMI088_GYRO_TRIG_BIST);
 8007c7c:	f000 fa42 	bl	8008104 <BMI088_GYRO_NS_L>
 8007c80:	2101      	movs	r1, #1
 8007c82:	203c      	movs	r0, #60	; 0x3c
 8007c84:	f000 f975 	bl	8007f72 <BMI088_Write_Single_Reg>
 8007c88:	f000 fa48 	bl	800811c <BMI088_GYRO_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007c8c:	2050      	movs	r0, #80	; 0x50
 8007c8e:	f000 f9cf 	bl	8008030 <BMI088_Delay_ms>

    do
    {

        BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_SELF_TEST, res);
 8007c92:	f000 fa37 	bl	8008104 <BMI088_GYRO_NS_L>
 8007c96:	1dbb      	adds	r3, r7, #6
 8007c98:	4619      	mov	r1, r3
 8007c9a:	203c      	movs	r0, #60	; 0x3c
 8007c9c:	f000 f97d 	bl	8007f9a <BMI088_Read_Single_Reg>
 8007ca0:	f000 fa3c 	bl	800811c <BMI088_GYRO_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007ca4:	2096      	movs	r0, #150	; 0x96
 8007ca6:	f000 f9d1 	bl	800804c <BMI088_Delay_us>
        retry++;
 8007caa:	79fb      	ldrb	r3, [r7, #7]
 8007cac:	3301      	adds	r3, #1
 8007cae:	71fb      	strb	r3, [r7, #7]
    }
    while (!(res & BMI088_GYRO_BIST_RDY) && retry < 10);
 8007cb0:	79bb      	ldrb	r3, [r7, #6]
 8007cb2:	f003 0302 	and.w	r3, r3, #2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d102      	bne.n	8007cc0 <bmi088_gyro_self_test+0xc8>
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	2b09      	cmp	r3, #9
 8007cbe:	d9e8      	bls.n	8007c92 <bmi088_gyro_self_test+0x9a>

    if (retry == 10)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	2b0a      	cmp	r3, #10
 8007cc4:	d101      	bne.n	8007cca <bmi088_gyro_self_test+0xd2>
    {
        return BMI088_SELF_TEST_GYRO_ERROR;
 8007cc6:	2340      	movs	r3, #64	; 0x40
 8007cc8:	e007      	b.n	8007cda <bmi088_gyro_self_test+0xe2>
    }

    if (res & BMI088_GYRO_BIST_FAIL)
 8007cca:	79bb      	ldrb	r3, [r7, #6]
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d001      	beq.n	8007cd8 <bmi088_gyro_self_test+0xe0>
    {
        return BMI088_SELF_TEST_GYRO_ERROR;
 8007cd4:	2340      	movs	r3, #64	; 0x40
 8007cd6:	e000      	b.n	8007cda <bmi088_gyro_self_test+0xe2>
    }

    return BMI088_NO_ERROR;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <BMI088_Read>:
}

int16_t gyro_x, gyro_y, gyro_z, accel_x, accel_y, accel_z;

void BMI088_Read(float gyro[3], float accel[3], float *temperature)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b088      	sub	sp, #32
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8007cf0:	4a79      	ldr	r2, [pc, #484]	; (8007ed8 <BMI088_Read+0x1f4>)
 8007cf2:	f107 0314 	add.w	r3, r7, #20
 8007cf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007cfa:	6018      	str	r0, [r3, #0]
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	8019      	strh	r1, [r3, #0]
 8007d00:	3302      	adds	r3, #2
 8007d02:	0c0a      	lsrs	r2, r1, #16
 8007d04:	701a      	strb	r2, [r3, #0]
 8007d06:	2300      	movs	r3, #0
 8007d08:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_ACCEL_Read_Muli_Reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8007d0a:	f000 f9e3 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007d0e:	2092      	movs	r0, #146	; 0x92
 8007d10:	f000 fa10 	bl	8008134 <BMI088_Read_Write_Byte>
 8007d14:	f107 0314 	add.w	r3, r7, #20
 8007d18:	2206      	movs	r2, #6
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	2012      	movs	r0, #18
 8007d1e:	f000 f954 	bl	8007fca <BMI088_Read_Muli_Reg>
 8007d22:	f000 f9e3 	bl	80080ec <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8007d26:	7d7b      	ldrb	r3, [r7, #21]
 8007d28:	021b      	lsls	r3, r3, #8
 8007d2a:	b21a      	sxth	r2, r3
 8007d2c:	7d3b      	ldrb	r3, [r7, #20]
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	4313      	orrs	r3, r2
 8007d32:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8007d34:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d40:	4b66      	ldr	r3, [pc, #408]	; (8007edc <BMI088_Read+0x1f8>)
 8007d42:	edd3 7a00 	vldr	s15, [r3]
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	edc3 7a00 	vstr	s15, [r3]
    accel_x = bmi088_raw_temp;
 8007d50:	4a63      	ldr	r2, [pc, #396]	; (8007ee0 <BMI088_Read+0x1fc>)
 8007d52:	8bfb      	ldrh	r3, [r7, #30]
 8007d54:	8013      	strh	r3, [r2, #0]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	b21a      	sxth	r2, r3
 8007d5c:	7dbb      	ldrb	r3, [r7, #22]
 8007d5e:	b21b      	sxth	r3, r3
 8007d60:	4313      	orrs	r3, r2
 8007d62:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8007d64:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007d68:	ee07 3a90 	vmov	s15, r3
 8007d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d70:	4b5a      	ldr	r3, [pc, #360]	; (8007edc <BMI088_Read+0x1f8>)
 8007d72:	edd3 7a00 	vldr	s15, [r3]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	3304      	adds	r3, #4
 8007d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7e:	edc3 7a00 	vstr	s15, [r3]
    accel_y = bmi088_raw_temp;
 8007d82:	4a58      	ldr	r2, [pc, #352]	; (8007ee4 <BMI088_Read+0x200>)
 8007d84:	8bfb      	ldrh	r3, [r7, #30]
 8007d86:	8013      	strh	r3, [r2, #0]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8007d88:	7e7b      	ldrb	r3, [r7, #25]
 8007d8a:	021b      	lsls	r3, r3, #8
 8007d8c:	b21a      	sxth	r2, r3
 8007d8e:	7e3b      	ldrb	r3, [r7, #24]
 8007d90:	b21b      	sxth	r3, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8007d96:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007d9a:	ee07 3a90 	vmov	s15, r3
 8007d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007da2:	4b4e      	ldr	r3, [pc, #312]	; (8007edc <BMI088_Read+0x1f8>)
 8007da4:	edd3 7a00 	vldr	s15, [r3]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	3308      	adds	r3, #8
 8007dac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db0:	edc3 7a00 	vstr	s15, [r3]
    accel_z = bmi088_raw_temp;
 8007db4:	4a4c      	ldr	r2, [pc, #304]	; (8007ee8 <BMI088_Read+0x204>)
 8007db6:	8bfb      	ldrh	r3, [r7, #30]
 8007db8:	8013      	strh	r3, [r2, #0]

    BMI088_GYRO_Read_Muli_Reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8007dba:	f000 f9a3 	bl	8008104 <BMI088_GYRO_NS_L>
 8007dbe:	f107 0314 	add.w	r3, r7, #20
 8007dc2:	2208      	movs	r2, #8
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	2000      	movs	r0, #0
 8007dc8:	f000 f8ff 	bl	8007fca <BMI088_Read_Muli_Reg>
 8007dcc:	f000 f9a6 	bl	800811c <BMI088_GYRO_NS_H>
    if (buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8007dd0:	7d3b      	ldrb	r3, [r7, #20]
 8007dd2:	2b0f      	cmp	r3, #15
 8007dd4:	d149      	bne.n	8007e6a <BMI088_Read+0x186>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8007dd6:	7dfb      	ldrb	r3, [r7, #23]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	b21a      	sxth	r2, r3
 8007ddc:	7dbb      	ldrb	r3, [r7, #22]
 8007dde:	b21b      	sxth	r3, r3
 8007de0:	4313      	orrs	r3, r2
 8007de2:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8007de4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007de8:	ee07 3a90 	vmov	s15, r3
 8007dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007df0:	4b3e      	ldr	r3, [pc, #248]	; (8007eec <BMI088_Read+0x208>)
 8007df2:	edd3 7a00 	vldr	s15, [r3]
 8007df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	edc3 7a00 	vstr	s15, [r3]
        gyro_x = bmi088_raw_temp;
 8007e00:	4a3b      	ldr	r2, [pc, #236]	; (8007ef0 <BMI088_Read+0x20c>)
 8007e02:	8bfb      	ldrh	r3, [r7, #30]
 8007e04:	8013      	strh	r3, [r2, #0]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8007e06:	7e7b      	ldrb	r3, [r7, #25]
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	b21a      	sxth	r2, r3
 8007e0c:	7e3b      	ldrb	r3, [r7, #24]
 8007e0e:	b21b      	sxth	r3, r3
 8007e10:	4313      	orrs	r3, r2
 8007e12:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8007e14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007e18:	ee07 3a90 	vmov	s15, r3
 8007e1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e20:	4b32      	ldr	r3, [pc, #200]	; (8007eec <BMI088_Read+0x208>)
 8007e22:	edd3 7a00 	vldr	s15, [r3]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e2e:	edc3 7a00 	vstr	s15, [r3]
        gyro_y = bmi088_raw_temp;
 8007e32:	4a30      	ldr	r2, [pc, #192]	; (8007ef4 <BMI088_Read+0x210>)
 8007e34:	8bfb      	ldrh	r3, [r7, #30]
 8007e36:	8013      	strh	r3, [r2, #0]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8007e38:	7efb      	ldrb	r3, [r7, #27]
 8007e3a:	021b      	lsls	r3, r3, #8
 8007e3c:	b21a      	sxth	r2, r3
 8007e3e:	7ebb      	ldrb	r3, [r7, #26]
 8007e40:	b21b      	sxth	r3, r3
 8007e42:	4313      	orrs	r3, r2
 8007e44:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8007e46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007e4a:	ee07 3a90 	vmov	s15, r3
 8007e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007e52:	4b26      	ldr	r3, [pc, #152]	; (8007eec <BMI088_Read+0x208>)
 8007e54:	edd3 7a00 	vldr	s15, [r3]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3308      	adds	r3, #8
 8007e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e60:	edc3 7a00 	vstr	s15, [r3]
        gyro_z = bmi088_raw_temp;
 8007e64:	4a24      	ldr	r2, [pc, #144]	; (8007ef8 <BMI088_Read+0x214>)
 8007e66:	8bfb      	ldrh	r3, [r7, #30]
 8007e68:	8013      	strh	r3, [r2, #0]
    }
    BMI088_ACCEL_Read_Muli_Reg(BMI088_TEMP_M, buf, 2);
 8007e6a:	f000 f933 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007e6e:	20a2      	movs	r0, #162	; 0xa2
 8007e70:	f000 f960 	bl	8008134 <BMI088_Read_Write_Byte>
 8007e74:	f107 0314 	add.w	r3, r7, #20
 8007e78:	2202      	movs	r2, #2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	2022      	movs	r0, #34	; 0x22
 8007e7e:	f000 f8a4 	bl	8007fca <BMI088_Read_Muli_Reg>
 8007e82:	f000 f933 	bl	80080ec <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8007e86:	7d3b      	ldrb	r3, [r7, #20]
 8007e88:	00db      	lsls	r3, r3, #3
 8007e8a:	b21a      	sxth	r2, r3
 8007e8c:	7d7b      	ldrb	r3, [r7, #21]
 8007e8e:	095b      	lsrs	r3, r3, #5
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	b21b      	sxth	r3, r3
 8007e94:	4313      	orrs	r3, r2
 8007e96:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8007e98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ea0:	db04      	blt.n	8007eac <BMI088_Read+0x1c8>
    {
        bmi088_raw_temp -= 2048;
 8007ea2:	8bfb      	ldrh	r3, [r7, #30]
 8007ea4:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	83fb      	strh	r3, [r7, #30]
    }

    *temperature = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8007eac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007eb0:	ee07 3a90 	vmov	s15, r3
 8007eb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eb8:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8007ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ec0:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8007ec4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	edc3 7a00 	vstr	s15, [r3]
}
 8007ece:	bf00      	nop
 8007ed0:	3720      	adds	r7, #32
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	08015400 	.word	0x08015400
 8007edc:	2000000c 	.word	0x2000000c
 8007ee0:	2000d850 	.word	0x2000d850
 8007ee4:	2000d854 	.word	0x2000d854
 8007ee8:	2000d858 	.word	0x2000d858
 8007eec:	20000010 	.word	0x20000010
 8007ef0:	2000d856 	.word	0x2000d856
 8007ef4:	2000d852 	.word	0x2000d852
 8007ef8:	2000d85a 	.word	0x2000d85a

08007efc <get_BMI088_temperature>:

    return SENSOR_time;
}

float get_BMI088_temperature(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
    uint8_t buf[2];
    float temperature;
    int16_t temperature_raw_temp;
    BMI088_ACCEL_Read_Muli_Reg(BMI088_TEMP_M, buf, 2);
 8007f02:	f000 f8e7 	bl	80080d4 <BMI088_ACCEL_NS_L>
 8007f06:	20a2      	movs	r0, #162	; 0xa2
 8007f08:	f000 f914 	bl	8008134 <BMI088_Read_Write_Byte>
 8007f0c:	1d3b      	adds	r3, r7, #4
 8007f0e:	2202      	movs	r2, #2
 8007f10:	4619      	mov	r1, r3
 8007f12:	2022      	movs	r0, #34	; 0x22
 8007f14:	f000 f859 	bl	8007fca <BMI088_Read_Muli_Reg>
 8007f18:	f000 f8e8 	bl	80080ec <BMI088_ACCEL_NS_H>
    temperature_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8007f1c:	793b      	ldrb	r3, [r7, #4]
 8007f1e:	00db      	lsls	r3, r3, #3
 8007f20:	b21a      	sxth	r2, r3
 8007f22:	797b      	ldrb	r3, [r7, #5]
 8007f24:	095b      	lsrs	r3, r3, #5
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	b21b      	sxth	r3, r3
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	81fb      	strh	r3, [r7, #14]
    if (temperature_raw_temp > 1023)
 8007f2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f36:	db04      	blt.n	8007f42 <get_BMI088_temperature+0x46>
    {
        temperature_raw_temp -= 2048;
 8007f38:	89fb      	ldrh	r3, [r7, #14]
 8007f3a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	81fb      	strh	r3, [r7, #14]
    }
    temperature = temperature_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8007f42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f4e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8007f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007f56:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8007f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f5e:	edc7 7a02 	vstr	s15, [r7, #8]
    return temperature;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	ee07 3a90 	vmov	s15, r3
}
 8007f68:	eeb0 0a67 	vmov.f32	s0, s15
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}

08007f72 <BMI088_Write_Single_Reg>:
    accel[2] = accel_raw_temp * BMI088_ACCEL_SEN;
}

#if defined(BMI088_USE_SPI)
static void BMI088_Write_Single_Reg(uint8_t reg, uint8_t data)
{
 8007f72:	b580      	push	{r7, lr}
 8007f74:	b082      	sub	sp, #8
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	4603      	mov	r3, r0
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	71fb      	strb	r3, [r7, #7]
 8007f7e:	4613      	mov	r3, r2
 8007f80:	71bb      	strb	r3, [r7, #6]
    BMI088_Read_Write_Byte(reg);
 8007f82:	79fb      	ldrb	r3, [r7, #7]
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 f8d5 	bl	8008134 <BMI088_Read_Write_Byte>
    BMI088_Read_Write_Byte(data);
 8007f8a:	79bb      	ldrb	r3, [r7, #6]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 f8d1 	bl	8008134 <BMI088_Read_Write_Byte>
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <BMI088_Read_Single_Reg>:

static void BMI088_Read_Single_Reg(uint8_t reg, uint8_t *return_data)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	6039      	str	r1, [r7, #0]
 8007fa4:	71fb      	strb	r3, [r7, #7]
    BMI088_Read_Write_Byte(reg | 0x80);
 8007fa6:	79fb      	ldrb	r3, [r7, #7]
 8007fa8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f8c0 	bl	8008134 <BMI088_Read_Write_Byte>
    *return_data = BMI088_Read_Write_Byte(0x55);
 8007fb4:	2055      	movs	r0, #85	; 0x55
 8007fb6:	f000 f8bd 	bl	8008134 <BMI088_Read_Write_Byte>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	701a      	strb	r2, [r3, #0]
}
 8007fc2:	bf00      	nop
 8007fc4:	3708      	adds	r7, #8
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <BMI088_Read_Muli_Reg>:

static void BMI088_Read_Muli_Reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b082      	sub	sp, #8
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	6039      	str	r1, [r7, #0]
 8007fd4:	71fb      	strb	r3, [r7, #7]
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	71bb      	strb	r3, [r7, #6]
    BMI088_Read_Write_Byte(reg | 0x80);
 8007fda:	79fb      	ldrb	r3, [r7, #7]
 8007fdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f8a6 	bl	8008134 <BMI088_Read_Write_Byte>

    while (len != 0)
 8007fe8:	e00c      	b.n	8008004 <BMI088_Read_Muli_Reg+0x3a>
    {
        *buf = BMI088_Read_Write_Byte(0x55);
 8007fea:	2055      	movs	r0, #85	; 0x55
 8007fec:	f000 f8a2 	bl	8008134 <BMI088_Read_Write_Byte>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	701a      	strb	r2, [r3, #0]
        buf++;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	603b      	str	r3, [r7, #0]
        len--;
 8007ffe:	79bb      	ldrb	r3, [r7, #6]
 8008000:	3b01      	subs	r3, #1
 8008002:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8008004:	79bb      	ldrb	r3, [r7, #6]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1ef      	bne.n	8007fea <BMI088_Read_Muli_Reg+0x20>
    }
}
 800800a:	bf00      	nop
 800800c:	bf00      	nop
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <BMI088_GPIO_Init>:
#include "cmsis_os.h"

extern SPI_HandleTypeDef hspi1;

void BMI088_GPIO_Init(void)
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0

}
 8008018:	bf00      	nop
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr

08008022 <BMI088_Com_Init>:

void BMI088_Com_Init(void)
{
 8008022:	b480      	push	{r7}
 8008024:	af00      	add	r7, sp, #0


}
 8008026:	bf00      	nop
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <BMI088_Delay_ms>:

void BMI088_Delay_ms(uint16_t ms)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	80fb      	strh	r3, [r7, #6]

    osDelay(ms);
 800803a:	88fb      	ldrh	r3, [r7, #6]
 800803c:	4618      	mov	r0, r3
 800803e:	f008 fac0 	bl	80105c2 <osDelay>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <BMI088_Delay_us>:

void BMI088_Delay_us(uint16_t us)
{
 800804c:	b480      	push	{r7}
 800804e:	b089      	sub	sp, #36	; 0x24
 8008050:	af00      	add	r7, sp, #0
 8008052:	4603      	mov	r3, r0
 8008054:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8008056:	2300      	movs	r3, #0
 8008058:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 800805e:	2300      	movs	r3, #0
 8008060:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800806a:	4b19      	ldr	r3, [pc, #100]	; (80080d0 <BMI088_Delay_us+0x84>)
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8008070:	88fb      	ldrh	r3, [r7, #6]
 8008072:	22a8      	movs	r2, #168	; 0xa8
 8008074:	fb02 f303 	mul.w	r3, r2, r3
 8008078:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 800807a:	4b15      	ldr	r3, [pc, #84]	; (80080d0 <BMI088_Delay_us+0x84>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8008080:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <BMI088_Delay_us+0x84>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	429a      	cmp	r2, r3
 800808c:	d0f8      	beq.n	8008080 <BMI088_Delay_us+0x34>
        {
            if (tnow < told)
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	429a      	cmp	r2, r3
 8008094:	d206      	bcs.n	80080a4 <BMI088_Delay_us+0x58>
            {
                tcnt += told - tnow;
 8008096:	69fa      	ldr	r2, [r7, #28]
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	4413      	add	r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	e007      	b.n	80080b4 <BMI088_Delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	1ad2      	subs	r2, r2, r3
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	4413      	add	r3, r2
 80080ae:	69ba      	ldr	r2, [r7, #24]
 80080b0:	4413      	add	r3, r2
 80080b2:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80080b8:	69ba      	ldr	r2, [r7, #24]
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d200      	bcs.n	80080c2 <BMI088_Delay_us+0x76>
        tnow = SysTick->VAL;
 80080c0:	e7de      	b.n	8008080 <BMI088_Delay_us+0x34>
            {
                break;
 80080c2:	bf00      	nop
            }
        }
    }


}
 80080c4:	bf00      	nop
 80080c6:	3724      	adds	r7, #36	; 0x24
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	e000e010 	.word	0xe000e010

080080d4 <BMI088_ACCEL_NS_L>:

void BMI088_ACCEL_NS_L(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 80080d8:	2200      	movs	r2, #0
 80080da:	2110      	movs	r1, #16
 80080dc:	4802      	ldr	r0, [pc, #8]	; (80080e8 <BMI088_ACCEL_NS_L+0x14>)
 80080de:	f004 faa1 	bl	800c624 <HAL_GPIO_WritePin>
}
 80080e2:	bf00      	nop
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40020000 	.word	0x40020000

080080ec <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 80080f0:	2201      	movs	r2, #1
 80080f2:	2110      	movs	r1, #16
 80080f4:	4802      	ldr	r0, [pc, #8]	; (8008100 <BMI088_ACCEL_NS_H+0x14>)
 80080f6:	f004 fa95 	bl	800c624 <HAL_GPIO_WritePin>
}
 80080fa:	bf00      	nop
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	40020000 	.word	0x40020000

08008104 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8008108:	2200      	movs	r2, #0
 800810a:	2101      	movs	r1, #1
 800810c:	4802      	ldr	r0, [pc, #8]	; (8008118 <BMI088_GYRO_NS_L+0x14>)
 800810e:	f004 fa89 	bl	800c624 <HAL_GPIO_WritePin>
}
 8008112:	bf00      	nop
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40020400 	.word	0x40020400

0800811c <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8008120:	2201      	movs	r2, #1
 8008122:	2101      	movs	r1, #1
 8008124:	4802      	ldr	r0, [pc, #8]	; (8008130 <BMI088_GYRO_NS_H+0x14>)
 8008126:	f004 fa7d 	bl	800c624 <HAL_GPIO_WritePin>
}
 800812a:	bf00      	nop
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40020400 	.word	0x40020400

08008134 <BMI088_Read_Write_Byte>:

uint8_t BMI088_Read_Write_Byte(uint8_t txdata)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af02      	add	r7, sp, #8
 800813a:	4603      	mov	r3, r0
 800813c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 800813e:	f107 020f 	add.w	r2, r7, #15
 8008142:	1df9      	adds	r1, r7, #7
 8008144:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	2301      	movs	r3, #1
 800814c:	4803      	ldr	r0, [pc, #12]	; (800815c <BMI088_Read_Write_Byte+0x28>)
 800814e:	f005 ff6e 	bl	800e02e <HAL_SPI_TransmitReceive>
    return rx_data;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	2000d9a0 	.word	0x2000d9a0

08008160 <bmi088_get_data>:
//float ins_angle[3];

static void bmi088_cali_slove(float gyro[3], float accel[3], bmi088_real_data_t *bmi088);

void bmi088_get_data(AhrsSensor_t *sensor)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	/* read bmi088 rawa data */
    BMI088_Read(bmi088_real_data.gyro, bmi088_real_data.accel, &imu.temp);
 8008168:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <bmi088_get_data+0x74>)
 800816a:	491b      	ldr	r1, [pc, #108]	; (80081d8 <bmi088_get_data+0x78>)
 800816c:	481b      	ldr	r0, [pc, #108]	; (80081dc <bmi088_get_data+0x7c>)
 800816e:	f7ff fdb9 	bl	8007ce4 <BMI088_Read>
    /* data fusion with the offset */
    bmi088_cali_slove(gyro, accel, &bmi088_real_data);
 8008172:	4a1b      	ldr	r2, [pc, #108]	; (80081e0 <bmi088_get_data+0x80>)
 8008174:	491b      	ldr	r1, [pc, #108]	; (80081e4 <bmi088_get_data+0x84>)
 8008176:	481c      	ldr	r0, [pc, #112]	; (80081e8 <bmi088_get_data+0x88>)
 8008178:	f000 f926 	bl	80083c8 <bmi088_cali_slove>

    /* Access the mag */
//    ist8310_read_mag(mag);

    sensor->ax = accel[0];
 800817c:	4b19      	ldr	r3, [pc, #100]	; (80081e4 <bmi088_get_data+0x84>)
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	601a      	str	r2, [r3, #0]
    sensor->ay = accel[1];
 8008184:	4b17      	ldr	r3, [pc, #92]	; (80081e4 <bmi088_get_data+0x84>)
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	605a      	str	r2, [r3, #4]
    sensor->az = accel[2];
 800818c:	4b15      	ldr	r3, [pc, #84]	; (80081e4 <bmi088_get_data+0x84>)
 800818e:	689a      	ldr	r2, [r3, #8]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	609a      	str	r2, [r3, #8]

    sensor->wx = gyro[0];
 8008194:	4b14      	ldr	r3, [pc, #80]	; (80081e8 <bmi088_get_data+0x88>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	60da      	str	r2, [r3, #12]
    sensor->wy = gyro[1];
 800819c:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <bmi088_get_data+0x88>)
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	611a      	str	r2, [r3, #16]
    sensor->wz = -gyro[2];
 80081a4:	4b10      	ldr	r3, [pc, #64]	; (80081e8 <bmi088_get_data+0x88>)
 80081a6:	edd3 7a02 	vldr	s15, [r3, #8]
 80081aa:	eef1 7a67 	vneg.f32	s15, s15
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	edc3 7a05 	vstr	s15, [r3, #20]

//    sensor->mx = mag[0];
//    sensor->my = mag[1];
//    sensor->mz = mag[2];

    sensor->mx = 0;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f04f 0200 	mov.w	r2, #0
 80081ba:	619a      	str	r2, [r3, #24]
    sensor->my = 0;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f04f 0200 	mov.w	r2, #0
 80081c2:	61da      	str	r2, [r3, #28]
    sensor->mz = 0;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f04f 0200 	mov.w	r2, #0
 80081ca:	621a      	str	r2, [r3, #32]
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	200045f4 	.word	0x200045f4
 80081d8:	2000d8a8 	.word	0x2000d8a8
 80081dc:	2000d8b8 	.word	0x2000d8b8
 80081e0:	2000d8a4 	.word	0x2000d8a4
 80081e4:	2000d868 	.word	0x2000d868
 80081e8:	2000d880 	.word	0x2000d880

080081ec <bmi088_device_init>:
  * @brief  bmi088 init
  * @param
  * @retval error code
  */
uint8_t bmi088_device_init(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
    BMI088_init();
 80081f0:	f7ff f9ae 	bl	8007550 <BMI088_init>
    BMI088_Read(bmi088_real_data.gyro, bmi088_real_data.accel, &temperature);
 80081f4:	4a06      	ldr	r2, [pc, #24]	; (8008210 <bmi088_device_init+0x24>)
 80081f6:	4907      	ldr	r1, [pc, #28]	; (8008214 <bmi088_device_init+0x28>)
 80081f8:	4807      	ldr	r0, [pc, #28]	; (8008218 <bmi088_device_init+0x2c>)
 80081fa:	f7ff fd73 	bl	8007ce4 <BMI088_Read>
    bmi088_cali_slove(gyro, accel, &bmi088_real_data);
 80081fe:	4a07      	ldr	r2, [pc, #28]	; (800821c <bmi088_device_init+0x30>)
 8008200:	4907      	ldr	r1, [pc, #28]	; (8008220 <bmi088_device_init+0x34>)
 8008202:	4808      	ldr	r0, [pc, #32]	; (8008224 <bmi088_device_init+0x38>)
 8008204:	f000 f8e0 	bl	80083c8 <bmi088_cali_slove>

//    AHRS_init(ins_quat, accel, mag);
//    get_angle(ins_quat, ins_angle, ins_angle + 1, ins_angle + 2);//for ist

    return 0;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	200004d0 	.word	0x200004d0
 8008214:	2000d8a8 	.word	0x2000d8a8
 8008218:	2000d8b8 	.word	0x2000d8b8
 800821c:	2000d8a4 	.word	0x2000d8a4
 8008220:	2000d868 	.word	0x2000d868
 8008224:	2000d880 	.word	0x2000d880

08008228 <bmi088_set_offset>:
  * @brief  bmi088 get gyrp offset
  * @param
  * @retval error code
  */
uint8_t bmi088_set_offset(void)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b088      	sub	sp, #32
 800822c:	af00      	add	r7, sp, #0

    float gyro[3], accel[3];
    int cali_times = 100;
 800822e:	2364      	movs	r3, #100	; 0x64
 8008230:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < cali_times; i++)
 8008232:	2300      	movs	r3, #0
 8008234:	61fb      	str	r3, [r7, #28]
 8008236:	e048      	b.n	80082ca <bmi088_set_offset+0xa2>
    {
        BMI088_Read(gyro, accel, &temperature);
 8008238:	4639      	mov	r1, r7
 800823a:	f107 030c 	add.w	r3, r7, #12
 800823e:	4a56      	ldr	r2, [pc, #344]	; (8008398 <bmi088_set_offset+0x170>)
 8008240:	4618      	mov	r0, r3
 8008242:	f7ff fd4f 	bl	8007ce4 <BMI088_Read>
        gyro_offset[0] += gyro[0];
 8008246:	4b55      	ldr	r3, [pc, #340]	; (800839c <bmi088_set_offset+0x174>)
 8008248:	ed93 7a00 	vldr	s14, [r3]
 800824c:	edd7 7a03 	vldr	s15, [r7, #12]
 8008250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008254:	4b51      	ldr	r3, [pc, #324]	; (800839c <bmi088_set_offset+0x174>)
 8008256:	edc3 7a00 	vstr	s15, [r3]
        gyro_offset[1] += gyro[1];
 800825a:	4b50      	ldr	r3, [pc, #320]	; (800839c <bmi088_set_offset+0x174>)
 800825c:	ed93 7a01 	vldr	s14, [r3, #4]
 8008260:	edd7 7a04 	vldr	s15, [r7, #16]
 8008264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008268:	4b4c      	ldr	r3, [pc, #304]	; (800839c <bmi088_set_offset+0x174>)
 800826a:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro_offset[2] += gyro[2];
 800826e:	4b4b      	ldr	r3, [pc, #300]	; (800839c <bmi088_set_offset+0x174>)
 8008270:	ed93 7a02 	vldr	s14, [r3, #8]
 8008274:	edd7 7a05 	vldr	s15, [r7, #20]
 8008278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800827c:	4b47      	ldr	r3, [pc, #284]	; (800839c <bmi088_set_offset+0x174>)
 800827e:	edc3 7a02 	vstr	s15, [r3, #8]

        accel_offset[0] += accel[0];
 8008282:	4b47      	ldr	r3, [pc, #284]	; (80083a0 <bmi088_set_offset+0x178>)
 8008284:	ed93 7a00 	vldr	s14, [r3]
 8008288:	edd7 7a00 	vldr	s15, [r7]
 800828c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008290:	4b43      	ldr	r3, [pc, #268]	; (80083a0 <bmi088_set_offset+0x178>)
 8008292:	edc3 7a00 	vstr	s15, [r3]
        accel_offset[1] += accel[1];
 8008296:	4b42      	ldr	r3, [pc, #264]	; (80083a0 <bmi088_set_offset+0x178>)
 8008298:	ed93 7a01 	vldr	s14, [r3, #4]
 800829c:	edd7 7a01 	vldr	s15, [r7, #4]
 80082a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082a4:	4b3e      	ldr	r3, [pc, #248]	; (80083a0 <bmi088_set_offset+0x178>)
 80082a6:	edc3 7a01 	vstr	s15, [r3, #4]
        accel_offset[2] += accel[2];
 80082aa:	4b3d      	ldr	r3, [pc, #244]	; (80083a0 <bmi088_set_offset+0x178>)
 80082ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80082b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80082b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80082b8:	4b39      	ldr	r3, [pc, #228]	; (80083a0 <bmi088_set_offset+0x178>)
 80082ba:	edc3 7a02 	vstr	s15, [r3, #8]

        /* delay a given period */
        osDelay(3);//3
 80082be:	2003      	movs	r0, #3
 80082c0:	f008 f97f 	bl	80105c2 <osDelay>
    for (int i = 0; i < cali_times; i++)
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	3301      	adds	r3, #1
 80082c8:	61fb      	str	r3, [r7, #28]
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	dbb2      	blt.n	8008238 <bmi088_set_offset+0x10>
    }

    gyro_offset[0] = gyro_offset[0] / cali_times;
 80082d2:	4b32      	ldr	r3, [pc, #200]	; (800839c <bmi088_set_offset+0x174>)
 80082d4:	edd3 6a00 	vldr	s13, [r3]
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082e6:	4b2d      	ldr	r3, [pc, #180]	; (800839c <bmi088_set_offset+0x174>)
 80082e8:	edc3 7a00 	vstr	s15, [r3]
    gyro_offset[1] = gyro_offset[1] / cali_times;
 80082ec:	4b2b      	ldr	r3, [pc, #172]	; (800839c <bmi088_set_offset+0x174>)
 80082ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	ee07 3a90 	vmov	s15, r3
 80082f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80082fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008300:	4b26      	ldr	r3, [pc, #152]	; (800839c <bmi088_set_offset+0x174>)
 8008302:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_offset[2] = gyro_offset[2] / cali_times;
 8008306:	4b25      	ldr	r3, [pc, #148]	; (800839c <bmi088_set_offset+0x174>)
 8008308:	edd3 6a02 	vldr	s13, [r3, #8]
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	ee07 3a90 	vmov	s15, r3
 8008312:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008316:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800831a:	4b20      	ldr	r3, [pc, #128]	; (800839c <bmi088_set_offset+0x174>)
 800831c:	edc3 7a02 	vstr	s15, [r3, #8]

//    accel_offset[0] = accel_offset[0] / 300;
//	accel_offset[1] = accel_offset[1] / 300;
//	accel_offset[2] = accel_offset[2] / 300;

    accel_offset[0] += accel_offset[0] / cali_times;
 8008320:	4b1f      	ldr	r3, [pc, #124]	; (80083a0 <bmi088_set_offset+0x178>)
 8008322:	ed93 7a00 	vldr	s14, [r3]
 8008326:	4b1e      	ldr	r3, [pc, #120]	; (80083a0 <bmi088_set_offset+0x178>)
 8008328:	ed93 6a00 	vldr	s12, [r3]
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8008336:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800833a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800833e:	4b18      	ldr	r3, [pc, #96]	; (80083a0 <bmi088_set_offset+0x178>)
 8008340:	edc3 7a00 	vstr	s15, [r3]
	accel_offset[1] += accel_offset[1] / cali_times;
 8008344:	4b16      	ldr	r3, [pc, #88]	; (80083a0 <bmi088_set_offset+0x178>)
 8008346:	ed93 7a01 	vldr	s14, [r3, #4]
 800834a:	4b15      	ldr	r3, [pc, #84]	; (80083a0 <bmi088_set_offset+0x178>)
 800834c:	ed93 6a01 	vldr	s12, [r3, #4]
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800835a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800835e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008362:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <bmi088_set_offset+0x178>)
 8008364:	edc3 7a01 	vstr	s15, [r3, #4]
	accel_offset[2] += accel_offset[2] / cali_times;
 8008368:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <bmi088_set_offset+0x178>)
 800836a:	ed93 7a02 	vldr	s14, [r3, #8]
 800836e:	4b0c      	ldr	r3, [pc, #48]	; (80083a0 <bmi088_set_offset+0x178>)
 8008370:	ed93 6a02 	vldr	s12, [r3, #8]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800837e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8008382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008386:	4b06      	ldr	r3, [pc, #24]	; (80083a0 <bmi088_set_offset+0x178>)
 8008388:	edc3 7a02 	vstr	s15, [r3, #8]

    return 0;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3720      	adds	r7, #32
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	200004d0 	.word	0x200004d0
 800839c:	2000d88c 	.word	0x2000d88c
 80083a0:	2000d85c 	.word	0x2000d85c

080083a4 <bmi088_get_offset>:

uint8_t bmi088_get_offset(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
    size_t read_len = 0;
 80083aa:	2300      	movs	r3, #0
 80083ac:	607b      	str	r3, [r7, #4]
    if (read_len == sizeof(gyro_offset))
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b0c      	cmp	r3, #12
 80083b2:	d101      	bne.n	80083b8 <bmi088_get_offset+0x14>
    {
        /* read ok */
        return 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	e002      	b.n	80083be <bmi088_get_offset+0x1a>
    }
    else
    {
        bmi088_set_offset();
 80083b8:	f7ff ff36 	bl	8008228 <bmi088_set_offset>
    }

    return 0;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
	...

080083c8 <bmi088_cali_slove>:

static void bmi088_cali_slove(float gyro[3], float accel[3], bmi088_real_data_t *bmi088)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < 3; i++)
 80083d4:	2300      	movs	r3, #0
 80083d6:	75fb      	strb	r3, [r7, #23]
 80083d8:	e07e      	b.n	80084d8 <bmi088_cali_slove+0x110>
    {
        gyro[i] = bmi088->gyro[0] * gyro_scale_factor[i][0] + bmi088->gyro[1] * gyro_scale_factor[i][1] + bmi088->gyro[2] * gyro_scale_factor[i][2] - gyro_offset[i];
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80083e0:	7dfa      	ldrb	r2, [r7, #23]
 80083e2:	4943      	ldr	r1, [pc, #268]	; (80084f0 <bmi088_cali_slove+0x128>)
 80083e4:	4613      	mov	r3, r2
 80083e6:	005b      	lsls	r3, r3, #1
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	edd3 7a00 	vldr	s15, [r3]
 80083f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80083fc:	7dfa      	ldrb	r2, [r7, #23]
 80083fe:	493c      	ldr	r1, [pc, #240]	; (80084f0 <bmi088_cali_slove+0x128>)
 8008400:	4613      	mov	r3, r2
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	4413      	add	r3, r2
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	440b      	add	r3, r1
 800840a:	3304      	adds	r3, #4
 800840c:	edd3 7a00 	vldr	s15, [r3]
 8008410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	edd3 6a07 	vldr	s13, [r3, #28]
 800841e:	7dfa      	ldrb	r2, [r7, #23]
 8008420:	4933      	ldr	r1, [pc, #204]	; (80084f0 <bmi088_cali_slove+0x128>)
 8008422:	4613      	mov	r3, r2
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	4413      	add	r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	3308      	adds	r3, #8
 800842e:	edd3 7a00 	vldr	s15, [r3]
 8008432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800843a:	7dfb      	ldrb	r3, [r7, #23]
 800843c:	4a2d      	ldr	r2, [pc, #180]	; (80084f4 <bmi088_cali_slove+0x12c>)
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	4413      	add	r3, r2
 8008442:	edd3 7a00 	vldr	s15, [r3]
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4413      	add	r3, r2
 800844e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008452:	edc3 7a00 	vstr	s15, [r3]
        accel[i] = bmi088->accel[0] * accel_scale_factor[i][0] + bmi088->accel[1] * accel_scale_factor[i][1] + bmi088->accel[2] * accel_scale_factor[i][2] - accel_offset[i];
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	ed93 7a01 	vldr	s14, [r3, #4]
 800845c:	7dfa      	ldrb	r2, [r7, #23]
 800845e:	4926      	ldr	r1, [pc, #152]	; (80084f8 <bmi088_cali_slove+0x130>)
 8008460:	4613      	mov	r3, r2
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	edd3 7a00 	vldr	s15, [r3]
 800846e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	edd3 6a02 	vldr	s13, [r3, #8]
 8008478:	7dfa      	ldrb	r2, [r7, #23]
 800847a:	491f      	ldr	r1, [pc, #124]	; (80084f8 <bmi088_cali_slove+0x130>)
 800847c:	4613      	mov	r3, r2
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	4413      	add	r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	440b      	add	r3, r1
 8008486:	3304      	adds	r3, #4
 8008488:	edd3 7a00 	vldr	s15, [r3]
 800848c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	edd3 6a03 	vldr	s13, [r3, #12]
 800849a:	7dfa      	ldrb	r2, [r7, #23]
 800849c:	4916      	ldr	r1, [pc, #88]	; (80084f8 <bmi088_cali_slove+0x130>)
 800849e:	4613      	mov	r3, r2
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	4413      	add	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	440b      	add	r3, r1
 80084a8:	3308      	adds	r3, #8
 80084aa:	edd3 7a00 	vldr	s15, [r3]
 80084ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	4a10      	ldr	r2, [pc, #64]	; (80084fc <bmi088_cali_slove+0x134>)
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	4413      	add	r3, r2
 80084be:	edd3 7a00 	vldr	s15, [r3]
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	4413      	add	r3, r2
 80084ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ce:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 3; i++)
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
 80084d4:	3301      	adds	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	2b02      	cmp	r3, #2
 80084dc:	f67f af7d 	bls.w	80083da <bmi088_cali_slove+0x12>
    }
}
 80084e0:	bf00      	nop
 80084e2:	bf00      	nop
 80084e4:	371c      	adds	r7, #28
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	2000003c 	.word	0x2000003c
 80084f4:	2000d88c 	.word	0x2000d88c
 80084f8:	20000060 	.word	0x20000060
 80084fc:	2000d85c 	.word	0x2000d85c

08008500 <ist8310_init>:
  * @param[in]      none
  * @retval         error value
  */

uint8_t ist8310_init(void)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 8008506:	2300      	movs	r3, #0
 8008508:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 800850a:	2300      	movs	r3, #0
 800850c:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 800850e:	f000 f86f 	bl	80085f0 <ist8310_GPIO_init>
    ist8310_com_init();
 8008512:	f000 f874 	bl	80085fe <ist8310_com_init>

    ist8310_RST_L();
 8008516:	f000 f911 	bl	800873c <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 800851a:	4b32      	ldr	r3, [pc, #200]	; (80085e4 <ist8310_init+0xe4>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	b29b      	uxth	r3, r3
 8008520:	4618      	mov	r0, r3
 8008522:	f000 f8ab 	bl	800867c <ist8310_delay_ms>
    ist8310_RST_H();
 8008526:	f000 f8fd 	bl	8008724 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 800852a:	4b2e      	ldr	r3, [pc, #184]	; (80085e4 <ist8310_init+0xe4>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	b29b      	uxth	r3, r3
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f8a3 	bl	800867c <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8008536:	2000      	movs	r0, #0
 8008538:	f000 f868 	bl	800860c <ist8310_IIC_read_single_reg>
 800853c:	4603      	mov	r3, r0
 800853e:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE)
 8008540:	79bb      	ldrb	r3, [r7, #6]
 8008542:	2b10      	cmp	r3, #16
 8008544:	d001      	beq.n	800854a <ist8310_init+0x4a>
    {
        return IST8310_NO_SENSOR;
 8008546:	2340      	movs	r3, #64	; 0x40
 8008548:	e047      	b.n	80085da <ist8310_init+0xda>
    }

    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++)
 800854a:	2300      	movs	r3, #0
 800854c:	71fb      	strb	r3, [r7, #7]
 800854e:	e040      	b.n	80085d2 <ist8310_init+0xd2>
    {
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 8008550:	79fa      	ldrb	r2, [r7, #7]
 8008552:	4925      	ldr	r1, [pc, #148]	; (80085e8 <ist8310_init+0xe8>)
 8008554:	4613      	mov	r3, r2
 8008556:	005b      	lsls	r3, r3, #1
 8008558:	4413      	add	r3, r2
 800855a:	440b      	add	r3, r1
 800855c:	7818      	ldrb	r0, [r3, #0]
 800855e:	79fa      	ldrb	r2, [r7, #7]
 8008560:	4921      	ldr	r1, [pc, #132]	; (80085e8 <ist8310_init+0xe8>)
 8008562:	4613      	mov	r3, r2
 8008564:	005b      	lsls	r3, r3, #1
 8008566:	4413      	add	r3, r2
 8008568:	440b      	add	r3, r1
 800856a:	3301      	adds	r3, #1
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	4619      	mov	r1, r3
 8008570:	f000 f868 	bl	8008644 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8008574:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <ist8310_init+0xec>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	b29b      	uxth	r3, r3
 800857a:	4618      	mov	r0, r3
 800857c:	f000 f88c 	bl	8008698 <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 8008580:	79fa      	ldrb	r2, [r7, #7]
 8008582:	4919      	ldr	r1, [pc, #100]	; (80085e8 <ist8310_init+0xe8>)
 8008584:	4613      	mov	r3, r2
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	4413      	add	r3, r2
 800858a:	440b      	add	r3, r1
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	4618      	mov	r0, r3
 8008590:	f000 f83c 	bl	800860c <ist8310_IIC_read_single_reg>
 8008594:	4603      	mov	r3, r0
 8008596:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8008598:	4b14      	ldr	r3, [pc, #80]	; (80085ec <ist8310_init+0xec>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	4618      	mov	r0, r3
 80085a0:	f000 f87a 	bl	8008698 <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1])
 80085a4:	79fa      	ldrb	r2, [r7, #7]
 80085a6:	4910      	ldr	r1, [pc, #64]	; (80085e8 <ist8310_init+0xe8>)
 80085a8:	4613      	mov	r3, r2
 80085aa:	005b      	lsls	r3, r3, #1
 80085ac:	4413      	add	r3, r2
 80085ae:	440b      	add	r3, r1
 80085b0:	3301      	adds	r3, #1
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	79ba      	ldrb	r2, [r7, #6]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d008      	beq.n	80085cc <ist8310_init+0xcc>
        {
            return ist8310_write_reg_data_error[writeNum][2];
 80085ba:	79fa      	ldrb	r2, [r7, #7]
 80085bc:	490a      	ldr	r1, [pc, #40]	; (80085e8 <ist8310_init+0xe8>)
 80085be:	4613      	mov	r3, r2
 80085c0:	005b      	lsls	r3, r3, #1
 80085c2:	4413      	add	r3, r2
 80085c4:	440b      	add	r3, r1
 80085c6:	3302      	adds	r3, #2
 80085c8:	781b      	ldrb	r3, [r3, #0]
 80085ca:	e006      	b.n	80085da <ist8310_init+0xda>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++)
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	3301      	adds	r3, #1
 80085d0:	71fb      	strb	r3, [r7, #7]
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	2b03      	cmp	r3, #3
 80085d6:	d9bb      	bls.n	8008550 <ist8310_init+0x50>
        }
    }
    return IST8310_NO_ERROR;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	080155b0 	.word	0x080155b0
 80085e8:	080155a4 	.word	0x080155a4
 80085ec:	080155b1 	.word	0x080155b1

080085f0 <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0

}
 80085f4:	bf00      	nop
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr

080085fe <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 80085fe:	b480      	push	{r7}
 8008600:	af00      	add	r7, sp, #0
}
 8008602:	bf00      	nop
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b088      	sub	sp, #32
 8008610:	af04      	add	r7, sp, #16
 8008612:	4603      	mov	r3, r0
 8008614:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	b29a      	uxth	r2, r3
 800861e:	230a      	movs	r3, #10
 8008620:	9302      	str	r3, [sp, #8]
 8008622:	2301      	movs	r3, #1
 8008624:	9301      	str	r3, [sp, #4]
 8008626:	f107 030f 	add.w	r3, r7, #15
 800862a:	9300      	str	r3, [sp, #0]
 800862c:	2301      	movs	r3, #1
 800862e:	211c      	movs	r1, #28
 8008630:	4803      	ldr	r0, [pc, #12]	; (8008640 <ist8310_IIC_read_single_reg+0x34>)
 8008632:	f004 fa67 	bl	800cb04 <HAL_I2C_Mem_Read>
    return res;
 8008636:	7bfb      	ldrb	r3, [r7, #15]
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	2000d92c 	.word	0x2000d92c

08008644 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af04      	add	r7, sp, #16
 800864a:	4603      	mov	r3, r0
 800864c:	460a      	mov	r2, r1
 800864e:	71fb      	strb	r3, [r7, #7]
 8008650:	4613      	mov	r3, r2
 8008652:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	b29a      	uxth	r2, r3
 8008658:	230a      	movs	r3, #10
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	2301      	movs	r3, #1
 800865e:	9301      	str	r3, [sp, #4]
 8008660:	1dbb      	adds	r3, r7, #6
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2301      	movs	r3, #1
 8008666:	211c      	movs	r1, #28
 8008668:	4803      	ldr	r0, [pc, #12]	; (8008678 <ist8310_IIC_write_single_reg+0x34>)
 800866a:	f004 f951 	bl	800c910 <HAL_I2C_Mem_Write>
}
 800866e:	bf00      	nop
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	2000d92c 	.word	0x2000d92c

0800867c <ist8310_delay_ms>:
  * @param[in]      ms: ms millisecond
  * @retval         none
  */

void ist8310_delay_ms(uint16_t ms)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	4603      	mov	r3, r0
 8008684:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	4618      	mov	r0, r3
 800868a:	f002 fa7d 	bl	800ab88 <HAL_Delay>
}
 800868e:	bf00      	nop
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <ist8310_delay_us>:
  * @param[in]      us: us microsecond
  * @retval         none
  */

void ist8310_delay_us(uint16_t us)
{
 8008698:	b480      	push	{r7}
 800869a:	b089      	sub	sp, #36	; 0x24
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 80086a6:	2300      	movs	r3, #0
 80086a8:	61fb      	str	r3, [r7, #28]
 80086aa:	2300      	movs	r3, #0
 80086ac:	613b      	str	r3, [r7, #16]
 80086ae:	2300      	movs	r3, #0
 80086b0:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 80086b6:	4b1a      	ldr	r3, [pc, #104]	; (8008720 <ist8310_delay_us+0x88>)
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 80086bc:	88fa      	ldrh	r2, [r7, #6]
 80086be:	4613      	mov	r3, r2
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	4413      	add	r3, r2
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 80086c8:	4b15      	ldr	r3, [pc, #84]	; (8008720 <ist8310_delay_us+0x88>)
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 80086ce:	4b14      	ldr	r3, [pc, #80]	; (8008720 <ist8310_delay_us+0x88>)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d0f8      	beq.n	80086ce <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d206      	bcs.n	80086f2 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 80086e4:	69fa      	ldr	r2, [r7, #28]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	4413      	add	r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]
 80086f0:	e007      	b.n	8008702 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4413      	add	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	429a      	cmp	r2, r3
 800870c:	d200      	bcs.n	8008710 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 800870e:	e7de      	b.n	80086ce <ist8310_delay_us+0x36>
            {
                break;
 8008710:	bf00      	nop
            }
        }
    }
}
 8008712:	bf00      	nop
 8008714:	3724      	adds	r7, #36	; 0x24
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	e000e010 	.word	0xe000e010

08008724 <ist8310_RST_H>:
  * @param[in]      none
  * @retval         none
  */

void ist8310_RST_H(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8008728:	2201      	movs	r2, #1
 800872a:	2140      	movs	r1, #64	; 0x40
 800872c:	4802      	ldr	r0, [pc, #8]	; (8008738 <ist8310_RST_H+0x14>)
 800872e:	f003 ff79 	bl	800c624 <HAL_GPIO_WritePin>
}
 8008732:	bf00      	nop
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	40021800 	.word	0x40021800

0800873c <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8008740:	2200      	movs	r2, #0
 8008742:	2140      	movs	r1, #64	; 0x40
 8008744:	4802      	ldr	r0, [pc, #8]	; (8008750 <ist8310_RST_L+0x14>)
 8008746:	f003 ff6d 	bl	800c624 <HAL_GPIO_WritePin>
}
 800874a:	bf00      	nop
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	40021800 	.word	0x40021800

08008754 <uc_auto_aim_pack_init>:


#include "auto_aim.h"


void uc_auto_aim_pack_init(UC_Auto_Aim_Pack_t *uc_rx_pack){
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
	uc_rx_pack->target_num      = 0;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	701a      	strb	r2, [r3, #0]
	uc_rx_pack->delta_yaw       = 0.0f;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	605a      	str	r2, [r3, #4]
	uc_rx_pack->delta_pitch     = 0.0f;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f04f 0200 	mov.w	r2, #0
 8008770:	609a      	str	r2, [r3, #8]
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <gimbal_angle_message_init>:
/* define vars here */
//Comm_t comm_pack;

/* declare all used message */
/* init comm for gimbal angle info */
void gimbal_angle_message_init(CommMessageUnion_t *cmu){
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<4;i++)
 8008786:	2300      	movs	r3, #0
 8008788:	73fb      	strb	r3, [r7, #15]
 800878a:	e009      	b.n	80087a0 <gimbal_angle_message_init+0x22>
		cmu->comm_ga.angle_data[i] = 0.0f;
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	f04f 0200 	mov.w	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0;i<4;i++)
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	3301      	adds	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d9f2      	bls.n	800878c <gimbal_angle_message_init+0xe>
	cmu->comm_ga.send_flag = 0;//reset flag
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	741a      	strb	r2, [r3, #16]
}
 80087ac:	bf00      	nop
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <rc_message_init>:
    .message_type = COMM_GIMBAL_ANGLE,
    .init = gimbal_angle_message_init
};

/* init comm for rc info */
void rc_message_init(CommMessageUnion_t *cmu){
 80087b8:	b480      	push	{r7}
 80087ba:	b085      	sub	sp, #20
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<2;i++)
 80087c0:	2300      	movs	r3, #0
 80087c2:	73fb      	strb	r3, [r7, #15]
 80087c4:	e007      	b.n	80087d6 <rc_message_init+0x1e>
		cmu->comm_rc.rc_data[i] = 0;
 80087c6:	7bfa      	ldrb	r2, [r7, #15]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2100      	movs	r1, #0
 80087cc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i=0;i<2;i++)
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
 80087d2:	3301      	adds	r3, #1
 80087d4:	73fb      	strb	r3, [r7, #15]
 80087d6:	7bfb      	ldrb	r3, [r7, #15]
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d9f4      	bls.n	80087c6 <rc_message_init+0xe>
	cmu->comm_rc.rc_data[2] = SW_MID;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2203      	movs	r2, #3
 80087e0:	809a      	strh	r2, [r3, #4]
	cmu->comm_rc.rc_data[3] = SW_MID;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2203      	movs	r2, #3
 80087e6:	80da      	strh	r2, [r3, #6]
	cmu->comm_rc.send_flag = 0;//reset flag
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	721a      	strb	r2, [r3, #8]
}
 80087ee:	bf00      	nop
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <pc_message_init>:
    .message_type = COMM_REMOTE_CONTROL,
    .init = rc_message_init
};

/* init comm for pc info */
void pc_message_init(CommMessageUnion_t *cmu){
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<2;i++)
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
 8008806:	e007      	b.n	8008818 <pc_message_init+0x1e>
		cmu->comm_pc.pc_data[i] = 0;
 8008808:	7bfa      	ldrb	r2, [r7, #15]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2100      	movs	r1, #0
 800880e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i=0;i<2;i++)
 8008812:	7bfb      	ldrb	r3, [r7, #15]
 8008814:	3301      	adds	r3, #1
 8008816:	73fb      	strb	r3, [r7, #15]
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d9f4      	bls.n	8008808 <pc_message_init+0xe>
	cmu->comm_pc.pc_data[2] = RELEASED;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	809a      	strh	r2, [r3, #4]
	cmu->comm_pc.pc_data[3] = RELEASED;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2200      	movs	r2, #0
 8008828:	80da      	strh	r2, [r3, #6]
	cmu->comm_pc.send_flag = 0;//reset flag
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	721a      	strb	r2, [r3, #8]
}
 8008830:	bf00      	nop
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <pc_ext_message_init>:
CommMessage_t pc_message = {
    .message_type = COMM_PC_CONTROL,
    .init = pc_message_init
};

void pc_ext_message_init(CommMessageUnion_t *cmu){
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0;i<4; i++)
 8008844:	2300      	movs	r3, #0
 8008846:	73fb      	strb	r3, [r7, #15]
 8008848:	e007      	b.n	800885a <pc_ext_message_init+0x1e>
		cmu->comm_ext_pc.pc_data[i] = RELEASED;
 800884a:	7bfa      	ldrb	r2, [r7, #15]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2100      	movs	r1, #0
 8008850:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0;i<4; i++)
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	3301      	adds	r3, #1
 8008858:	73fb      	strb	r3, [r7, #15]
 800885a:	7bfb      	ldrb	r3, [r7, #15]
 800885c:	2b03      	cmp	r3, #3
 800885e:	d9f4      	bls.n	800884a <pc_ext_message_init+0xe>
	cmu->comm_ext_pc.send_flag = 0;//reset flag
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	721a      	strb	r2, [r3, #8]
}
 8008866:	bf00      	nop
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <ref_message_init>:
    .init = pc_ext_message_init
};


/* init comm for referee info */
void ref_message_init(CommMessageUnion_t* cmu){
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
	/* not implement yet */
	return;
 800887a:	bf00      	nop
}
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <vision_message_init>:
    .message_type = COMM_REFEREE,
    .init = ref_message_init
};

/* init comm for computer vision massage info */
void vision_message_init(CommMessageUnion_t* cmu){
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
	/* not implement yet */
	return;
 800888e:	bf00      	nop
}
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <comm_subscribe>:
 * @brief 	  comm message subscribe function
 * @param[in] sub: comm message subscribe list
 * @param[in] msgType: comm message type
 * @retval    None
 */
void comm_subscribe(CommMessageSublist_t *sub, CommMessageType_t msgType, CommRole_t role) {
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	70fb      	strb	r3, [r7, #3]
 80088a8:	4613      	mov	r3, r2
 80088aa:	70bb      	strb	r3, [r7, #2]
    /* update subscription list */
    sub->sub_list |= msgType;//use mask to set bit
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	881a      	ldrh	r2, [r3, #0]
 80088b0:	78fb      	ldrb	r3, [r7, #3]
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	4313      	orrs	r3, r2
 80088b6:	b29a      	uxth	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	801a      	strh	r2, [r3, #0]
    sub->sub_list_num++;			//total num plus one
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	885b      	ldrh	r3, [r3, #2]
 80088c0:	3301      	adds	r3, #1
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	805a      	strh	r2, [r3, #2]

    /* call the appropriate init function */
    switch (msgType) {
 80088c8:	78fb      	ldrb	r3, [r7, #3]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	2b1f      	cmp	r3, #31
 80088ce:	d873      	bhi.n	80089b8 <comm_subscribe+0x11c>
 80088d0:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <comm_subscribe+0x3c>)
 80088d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d6:	bf00      	nop
 80088d8:	08008959 	.word	0x08008959
 80088dc:	08008969 	.word	0x08008969
 80088e0:	080089b9 	.word	0x080089b9
 80088e4:	08008979 	.word	0x08008979
 80088e8:	080089b9 	.word	0x080089b9
 80088ec:	080089b9 	.word	0x080089b9
 80088f0:	080089b9 	.word	0x080089b9
 80088f4:	08008999 	.word	0x08008999
 80088f8:	080089b9 	.word	0x080089b9
 80088fc:	080089b9 	.word	0x080089b9
 8008900:	080089b9 	.word	0x080089b9
 8008904:	080089b9 	.word	0x080089b9
 8008908:	080089b9 	.word	0x080089b9
 800890c:	080089b9 	.word	0x080089b9
 8008910:	080089b9 	.word	0x080089b9
 8008914:	080089a9 	.word	0x080089a9
 8008918:	080089b9 	.word	0x080089b9
 800891c:	080089b9 	.word	0x080089b9
 8008920:	080089b9 	.word	0x080089b9
 8008924:	080089b9 	.word	0x080089b9
 8008928:	080089b9 	.word	0x080089b9
 800892c:	080089b9 	.word	0x080089b9
 8008930:	080089b9 	.word	0x080089b9
 8008934:	080089b9 	.word	0x080089b9
 8008938:	080089b9 	.word	0x080089b9
 800893c:	080089b9 	.word	0x080089b9
 8008940:	080089b9 	.word	0x080089b9
 8008944:	080089b9 	.word	0x080089b9
 8008948:	080089b9 	.word	0x080089b9
 800894c:	080089b9 	.word	0x080089b9
 8008950:	080089b9 	.word	0x080089b9
 8008954:	08008989 	.word	0x08008989
        case COMM_GIMBAL_ANGLE:
        	gimbal_angle_message.role = role;
 8008958:	4a19      	ldr	r2, [pc, #100]	; (80089c0 <comm_subscribe+0x124>)
 800895a:	78bb      	ldrb	r3, [r7, #2]
 800895c:	7053      	strb	r3, [r2, #1]
            gimbal_angle_message.init(&(gimbal_angle_message.message));
 800895e:	4b18      	ldr	r3, [pc, #96]	; (80089c0 <comm_subscribe+0x124>)
 8008960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008962:	4818      	ldr	r0, [pc, #96]	; (80089c4 <comm_subscribe+0x128>)
 8008964:	4798      	blx	r3
            break;
 8008966:	e027      	b.n	80089b8 <comm_subscribe+0x11c>
        case COMM_REMOTE_CONTROL:
        	rc_message.role = role;
 8008968:	4a17      	ldr	r2, [pc, #92]	; (80089c8 <comm_subscribe+0x12c>)
 800896a:	78bb      	ldrb	r3, [r7, #2]
 800896c:	7053      	strb	r3, [r2, #1]
            rc_message.init(&(rc_message.message));
 800896e:	4b16      	ldr	r3, [pc, #88]	; (80089c8 <comm_subscribe+0x12c>)
 8008970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008972:	4816      	ldr	r0, [pc, #88]	; (80089cc <comm_subscribe+0x130>)
 8008974:	4798      	blx	r3
            break;
 8008976:	e01f      	b.n	80089b8 <comm_subscribe+0x11c>
        case COMM_PC_CONTROL:
			pc_message.role = role;
 8008978:	4a15      	ldr	r2, [pc, #84]	; (80089d0 <comm_subscribe+0x134>)
 800897a:	78bb      	ldrb	r3, [r7, #2]
 800897c:	7053      	strb	r3, [r2, #1]
			pc_message.init(&(pc_message.message));
 800897e:	4b14      	ldr	r3, [pc, #80]	; (80089d0 <comm_subscribe+0x134>)
 8008980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008982:	4814      	ldr	r0, [pc, #80]	; (80089d4 <comm_subscribe+0x138>)
 8008984:	4798      	blx	r3
			break;
 8008986:	e017      	b.n	80089b8 <comm_subscribe+0x11c>
        case COMM_EXT_PC_CONTROL:
        	pc_ext_message.role = role;
 8008988:	4a13      	ldr	r2, [pc, #76]	; (80089d8 <comm_subscribe+0x13c>)
 800898a:	78bb      	ldrb	r3, [r7, #2]
 800898c:	7053      	strb	r3, [r2, #1]
        	pc_ext_message.init(&(pc_ext_message.message));
 800898e:	4b12      	ldr	r3, [pc, #72]	; (80089d8 <comm_subscribe+0x13c>)
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	4812      	ldr	r0, [pc, #72]	; (80089dc <comm_subscribe+0x140>)
 8008994:	4798      	blx	r3
        	break;
 8008996:	e00f      	b.n	80089b8 <comm_subscribe+0x11c>
        case COMM_REFEREE:
        	ref_message.role = role;
 8008998:	4a11      	ldr	r2, [pc, #68]	; (80089e0 <comm_subscribe+0x144>)
 800899a:	78bb      	ldrb	r3, [r7, #2]
 800899c:	7053      	strb	r3, [r2, #1]
            ref_message.init(&(ref_message.message));
 800899e:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <comm_subscribe+0x144>)
 80089a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089a2:	4810      	ldr	r0, [pc, #64]	; (80089e4 <comm_subscribe+0x148>)
 80089a4:	4798      	blx	r3
            break;
 80089a6:	e007      	b.n	80089b8 <comm_subscribe+0x11c>
        case COMM_VISION:
        	vision_message.role = role;
 80089a8:	4a0f      	ldr	r2, [pc, #60]	; (80089e8 <comm_subscribe+0x14c>)
 80089aa:	78bb      	ldrb	r3, [r7, #2]
 80089ac:	7053      	strb	r3, [r2, #1]
            vision_message.init(&(vision_message.message));
 80089ae:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <comm_subscribe+0x14c>)
 80089b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089b2:	480e      	ldr	r0, [pc, #56]	; (80089ec <comm_subscribe+0x150>)
 80089b4:	4798      	blx	r3
            break;
 80089b6:	bf00      	nop
    }
}
 80089b8:	bf00      	nop
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	20000084 	.word	0x20000084
 80089c4:	20000088 	.word	0x20000088
 80089c8:	200000dc 	.word	0x200000dc
 80089cc:	200000e0 	.word	0x200000e0
 80089d0:	20000134 	.word	0x20000134
 80089d4:	20000138 	.word	0x20000138
 80089d8:	2000018c 	.word	0x2000018c
 80089dc:	20000190 	.word	0x20000190
 80089e0:	200001e4 	.word	0x200001e4
 80089e4:	200001e8 	.word	0x200001e8
 80089e8:	2000023c 	.word	0x2000023c
 80089ec:	20000240 	.word	0x20000240

080089f0 <isSubscribed>:

CommSubscribeStatus_t isSubscribed(CommMessageSublist_t *sub, CommMessageType_t msgType){
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
     if((sub->sub_list & msgType) != 0)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	461a      	mov	r2, r3
 8008a02:	78fb      	ldrb	r3, [r7, #3]
 8008a04:	4013      	ands	r3, r2
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d001      	beq.n	8008a0e <isSubscribed+0x1e>
    	 return SUB_SUCCESS;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	e000      	b.n	8008a10 <isSubscribed+0x20>
     else
    	 return SUB_FAIL;
 8008a0e:	2301      	movs	r3, #1
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <self_check_system>:
/**
  * @brief    self-check system mian func
  * @param[in] motor id to be checked
  * @retval    SelfCheckStatus_t
  */
SelfCheckStatus_t self_check_system(){
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
	// Checks motors in motor_ids are giving feedback.
	uint8_t num_of_motors;
	uint8_t motor_ids[8];

	// Set motor_ids of motors controlled by each board.
	if(board_status == CHASSIS_BOARD){
 8008a22:	4b20      	ldr	r3, [pc, #128]	; (8008aa4 <self_check_system+0x88>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d10a      	bne.n	8008a40 <self_check_system+0x24>
		num_of_motors = 4;
 8008a2a:	2304      	movs	r3, #4
 8008a2c:	73fb      	strb	r3, [r7, #15]
		motor_ids[0] = wheel_id1;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	703b      	strb	r3, [r7, #0]
		motor_ids[1] = wheel_id2;
 8008a32:	2301      	movs	r3, #1
 8008a34:	707b      	strb	r3, [r7, #1]
		motor_ids[2] = wheel_id3;
 8008a36:	2302      	movs	r3, #2
 8008a38:	70bb      	strb	r3, [r7, #2]
		motor_ids[3] = wheel_id4;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	70fb      	strb	r3, [r7, #3]
 8008a3e:	e00b      	b.n	8008a58 <self_check_system+0x3c>
	}
	else if(board_status == GIMBAL_BOARD){
 8008a40:	4b18      	ldr	r3, [pc, #96]	; (8008aa4 <self_check_system+0x88>)
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d107      	bne.n	8008a58 <self_check_system+0x3c>
		num_of_motors = 3;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	73fb      	strb	r3, [r7, #15]
		motor_ids[0] = yaw_id;
 8008a4c:	2304      	movs	r3, #4
 8008a4e:	703b      	strb	r3, [r7, #0]
		motor_ids[1] = pitch_id;
 8008a50:	2305      	movs	r3, #5
 8008a52:	707b      	strb	r3, [r7, #1]
		motor_ids[2] = mag_2006_id;
 8008a54:	2306      	movs	r3, #6
 8008a56:	70bb      	strb	r3, [r7, #2]
	}

	// Check motors in motor_ids.
	for (int i = 0; i < num_of_motors; i++) {
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60bb      	str	r3, [r7, #8]
 8008a5c:	e018      	b.n	8008a90 <self_check_system+0x74>
		if (self_check_motors(motor_ids[i]) == CHECK_FAIL) {
 8008a5e:	463a      	mov	r2, r7
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	4413      	add	r3, r2
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f820 	bl	8008aac <self_check_motors>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d10b      	bne.n	8008a8a <self_check_system+0x6e>
#ifndef SILENT_SELF_CHECK
			buzzer_alarm_times(i + 1, TWO_SECOND_CNT, &buzzer);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	3301      	adds	r3, #1
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	4a0b      	ldr	r2, [pc, #44]	; (8008aa8 <self_check_system+0x8c>)
 8008a7c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe f8f9 	bl	8006c78 <buzzer_alarm_times>
#endif
			return CHECK_FAIL;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e007      	b.n	8008a9a <self_check_system+0x7e>
	for (int i = 0; i < num_of_motors; i++) {
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	60bb      	str	r3, [r7, #8]
 8008a90:	7bfb      	ldrb	r3, [r7, #15]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	dbe2      	blt.n	8008a5e <self_check_system+0x42>
		}
	}
	return CHECK_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	2000469c 	.word	0x2000469c
 8008aa8:	2000d844 	.word	0x2000d844

08008aac <self_check_motors>:
/**
  * @brief     self check DJI CAN motor status based on feedback
  * @param[in] motor id to be checked
  * @retval    SelfCheckStatus_t
  */
SelfCheckStatus_t self_check_motors(uint8_t motor_id){
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	71fb      	strb	r3, [r7, #7]
	/* check motor online status */
	if(motor_data[motor_id].motor_feedback.rx_angle > 0){
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	4a09      	ldr	r2, [pc, #36]	; (8008ae0 <self_check_motors+0x34>)
 8008aba:	2194      	movs	r1, #148	; 0x94
 8008abc:	fb01 f303 	mul.w	r3, r1, r3
 8008ac0:	4413      	add	r3, r2
 8008ac2:	3388      	adds	r3, #136	; 0x88
 8008ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	dd01      	ble.n	8008ad0 <self_check_motors+0x24>
		/* this may have issue when the fb angle exactly equal to 0 (very rare)*/
		return 	CHECK_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e000      	b.n	8008ad2 <self_check_motors+0x26>
	}
	return CHECK_FAIL;
 8008ad0:	2301      	movs	r3, #1
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	370c      	adds	r7, #12
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	20005218 	.word	0x20005218

08008ae4 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8008ae8:	4b17      	ldr	r3, [pc, #92]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008aea:	4a18      	ldr	r2, [pc, #96]	; (8008b4c <MX_CAN1_Init+0x68>)
 8008aec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8008aee:	4b16      	ldr	r3, [pc, #88]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008af0:	2203      	movs	r2, #3
 8008af2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8008af4:	4b14      	ldr	r3, [pc, #80]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008afa:	4b13      	ldr	r3, [pc, #76]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8008b00:	4b11      	ldr	r3, [pc, #68]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b02:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8008b06:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8008b08:	4b0f      	ldr	r3, [pc, #60]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008b0e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8008b10:	4b0d      	ldr	r3, [pc, #52]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8008b16:	4b0c      	ldr	r3, [pc, #48]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b18:	2201      	movs	r2, #1
 8008b1a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8008b1c:	4b0a      	ldr	r3, [pc, #40]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b1e:	2201      	movs	r2, #1
 8008b20:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8008b22:	4b09      	ldr	r3, [pc, #36]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8008b28:	4b07      	ldr	r3, [pc, #28]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b30:	2201      	movs	r2, #1
 8008b32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8008b34:	4804      	ldr	r0, [pc, #16]	; (8008b48 <MX_CAN1_Init+0x64>)
 8008b36:	f002 f84b 	bl	800abd0 <HAL_CAN_Init>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d001      	beq.n	8008b44 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8008b40:	f000 fea0 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8008b44:	bf00      	nop
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	2000d8fc 	.word	0x2000d8fc
 8008b4c:	40006400 	.word	0x40006400

08008b50 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8008b54:	4b17      	ldr	r3, [pc, #92]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b56:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <MX_CAN2_Init+0x68>)
 8008b58:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8008b5a:	4b16      	ldr	r3, [pc, #88]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8008b60:	4b14      	ldr	r3, [pc, #80]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008b66:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b6e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8008b72:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8008b74:	4b0f      	ldr	r3, [pc, #60]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b76:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008b7a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8008b7c:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8008b82:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b84:	2201      	movs	r2, #1
 8008b86:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8008b8e:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b90:	2201      	movs	r2, #1
 8008b92:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8008b94:	4b07      	ldr	r3, [pc, #28]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8008b9a:	4b06      	ldr	r3, [pc, #24]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8008ba0:	4804      	ldr	r0, [pc, #16]	; (8008bb4 <MX_CAN2_Init+0x64>)
 8008ba2:	f002 f815 	bl	800abd0 <HAL_CAN_Init>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8008bac:	f000 fe6a 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8008bb0:	bf00      	nop
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	2000d8d4 	.word	0x2000d8d4
 8008bb8:	40006800 	.word	0x40006800

08008bbc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08c      	sub	sp, #48	; 0x30
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bc4:	f107 031c 	add.w	r3, r7, #28
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]
 8008bcc:	605a      	str	r2, [r3, #4]
 8008bce:	609a      	str	r2, [r3, #8]
 8008bd0:	60da      	str	r2, [r3, #12]
 8008bd2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a52      	ldr	r2, [pc, #328]	; (8008d24 <HAL_CAN_MspInit+0x168>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d145      	bne.n	8008c6a <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008bde:	4b52      	ldr	r3, [pc, #328]	; (8008d28 <HAL_CAN_MspInit+0x16c>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a50      	ldr	r2, [pc, #320]	; (8008d28 <HAL_CAN_MspInit+0x16c>)
 8008be6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008be8:	4b4f      	ldr	r3, [pc, #316]	; (8008d28 <HAL_CAN_MspInit+0x16c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10d      	bne.n	8008c0c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61bb      	str	r3, [r7, #24]
 8008bf4:	4b4d      	ldr	r3, [pc, #308]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	4a4c      	ldr	r2, [pc, #304]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008bfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8008c00:	4b4a      	ldr	r3, [pc, #296]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
 8008c10:	4b46      	ldr	r3, [pc, #280]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c14:	4a45      	ldr	r2, [pc, #276]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008c16:	f043 0308 	orr.w	r3, r3, #8
 8008c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8008c1c:	4b43      	ldr	r3, [pc, #268]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c20:	f003 0308 	and.w	r3, r3, #8
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c30:	2300      	movs	r3, #0
 8008c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c34:	2303      	movs	r3, #3
 8008c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8008c38:	2309      	movs	r3, #9
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008c3c:	f107 031c 	add.w	r3, r7, #28
 8008c40:	4619      	mov	r1, r3
 8008c42:	483b      	ldr	r0, [pc, #236]	; (8008d30 <HAL_CAN_MspInit+0x174>)
 8008c44:	f003 fb3a 	bl	800c2bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8008c48:	2200      	movs	r2, #0
 8008c4a:	2105      	movs	r1, #5
 8008c4c:	2013      	movs	r0, #19
 8008c4e:	f002 fefc 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8008c52:	2013      	movs	r0, #19
 8008c54:	f002 ff15 	bl	800ba82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2105      	movs	r1, #5
 8008c5c:	2014      	movs	r0, #20
 8008c5e:	f002 fef4 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8008c62:	2014      	movs	r0, #20
 8008c64:	f002 ff0d 	bl	800ba82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8008c68:	e057      	b.n	8008d1a <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a31      	ldr	r2, [pc, #196]	; (8008d34 <HAL_CAN_MspInit+0x178>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d152      	bne.n	8008d1a <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8008c74:	2300      	movs	r3, #0
 8008c76:	613b      	str	r3, [r7, #16]
 8008c78:	4b2c      	ldr	r3, [pc, #176]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7c:	4a2b      	ldr	r2, [pc, #172]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008c7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c82:	6413      	str	r3, [r2, #64]	; 0x40
 8008c84:	4b29      	ldr	r3, [pc, #164]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c8c:	613b      	str	r3, [r7, #16]
 8008c8e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008c90:	4b25      	ldr	r3, [pc, #148]	; (8008d28 <HAL_CAN_MspInit+0x16c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	3301      	adds	r3, #1
 8008c96:	4a24      	ldr	r2, [pc, #144]	; (8008d28 <HAL_CAN_MspInit+0x16c>)
 8008c98:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008c9a:	4b23      	ldr	r3, [pc, #140]	; (8008d28 <HAL_CAN_MspInit+0x16c>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d10d      	bne.n	8008cbe <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	4b21      	ldr	r3, [pc, #132]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	4a20      	ldr	r2, [pc, #128]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008cac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8008cb2:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60bb      	str	r3, [r7, #8]
 8008cc2:	4b1a      	ldr	r3, [pc, #104]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cc6:	4a19      	ldr	r2, [pc, #100]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008cc8:	f043 0302 	orr.w	r3, r3, #2
 8008ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8008cce:	4b17      	ldr	r3, [pc, #92]	; (8008d2c <HAL_CAN_MspInit+0x170>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	f003 0302 	and.w	r3, r3, #2
 8008cd6:	60bb      	str	r3, [r7, #8]
 8008cd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008cda:	2360      	movs	r3, #96	; 0x60
 8008cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8008cea:	2309      	movs	r3, #9
 8008cec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008cee:	f107 031c 	add.w	r3, r7, #28
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4810      	ldr	r0, [pc, #64]	; (8008d38 <HAL_CAN_MspInit+0x17c>)
 8008cf6:	f003 fae1 	bl	800c2bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	2105      	movs	r1, #5
 8008cfe:	203f      	movs	r0, #63	; 0x3f
 8008d00:	f002 fea3 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8008d04:	203f      	movs	r0, #63	; 0x3f
 8008d06:	f002 febc 	bl	800ba82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	2105      	movs	r1, #5
 8008d0e:	2040      	movs	r0, #64	; 0x40
 8008d10:	f002 fe9b 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8008d14:	2040      	movs	r0, #64	; 0x40
 8008d16:	f002 feb4 	bl	800ba82 <HAL_NVIC_EnableIRQ>
}
 8008d1a:	bf00      	nop
 8008d1c:	3730      	adds	r7, #48	; 0x30
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	40006400 	.word	0x40006400
 8008d28:	20000528 	.word	0x20000528
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	40020c00 	.word	0x40020c00
 8008d34:	40006800 	.word	0x40006800
 8008d38:	40020400 	.word	0x40020400

08008d3c <can_filter_enable>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_filter_enable(CAN_HandleTypeDef* hcan){
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08c      	sub	sp, #48	; 0x30
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8008d50:	2300      	movs	r3, #0
 8008d52:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8008d54:	2300      	movs	r3, #0
 8008d56:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8008d60:	2301      	movs	r3, #1
 8008d62:	62bb      	str	r3, [r7, #40]	; 0x28
	if(hcan == &hcan1){
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a0e      	ldr	r2, [pc, #56]	; (8008da0 <can_filter_enable+0x64>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d102      	bne.n	8008d72 <can_filter_enable+0x36>
//		CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
		CAN_FilterConfigStructure.FilterBank = 0;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	e007      	b.n	8008d82 <can_filter_enable+0x46>
	}
	else if(hcan == &hcan2){
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a0b      	ldr	r2, [pc, #44]	; (8008da4 <can_filter_enable+0x68>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d103      	bne.n	8008d82 <can_filter_enable+0x46>
		//FIXME: Test current back filter idx
		CAN_FilterConfigStructure.SlaveStartFilterBank = 14;
 8008d7a:	230e      	movs	r3, #14
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
		CAN_FilterConfigStructure.FilterBank = 14;
 8008d7e:	230e      	movs	r3, #14
 8008d80:	61fb      	str	r3, [r7, #28]
	}

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 8008d82:	f107 0308 	add.w	r3, r7, #8
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f002 f81d 	bl	800adc8 <HAL_CAN_ConfigFilter>
	// activate the canx msg callback interrupt
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8008d8e:	2102      	movs	r1, #2
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f002 fb2a 	bl	800b3ea <HAL_CAN_ActivateNotification>
}
 8008d96:	bf00      	nop
 8008d98:	3730      	adds	r7, #48	; 0x30
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	2000d8fc 	.word	0x2000d8fc
 8008da4:	2000d8d4 	.word	0x2000d8d4

08008da8 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* This function activates whenever the RxFifo receives a message
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later
*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b08a      	sub	sp, #40	; 0x28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008db8:	0d5b      	lsrs	r3, r3, #21
 8008dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dbe:	60bb      	str	r3, [r7, #8]
	if(hcan == &hcan1){
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a2d      	ldr	r2, [pc, #180]	; (8008e78 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d10f      	bne.n	8008de8 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 8008dd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008dd6:	00db      	lsls	r3, r3, #3
 8008dd8:	4a28      	ldr	r2, [pc, #160]	; (8008e7c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8008dda:	4413      	add	r3, r2
 8008ddc:	f107 0208 	add.w	r2, r7, #8
 8008de0:	2100      	movs	r1, #0
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f002 f9ef 	bl	800b1c6 <HAL_CAN_GetRxMessage>
	}
	if(hcan == &hcan2){
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a25      	ldr	r2, [pc, #148]	; (8008e80 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d13f      	bne.n	8008e70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		if(board_status==CHASSIS_BOARD){
 8008df0:	4b24      	ldr	r3, [pc, #144]	; (8008e84 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d11b      	bne.n	8008e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			uint8_t idx=rx_header.StdId-IDLE_COMM_ID;
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			can_comm_rx[idx].comm_id = rx_header.StdId;
 8008dfe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	4820      	ldr	r0, [pc, #128]	; (8008e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8008e06:	4613      	mov	r3, r2
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	4403      	add	r3, r0
 8008e10:	6019      	str	r1, [r3, #0]
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_comm_rx[idx].comm_rx_buffer);
 8008e12:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8008e16:	4613      	mov	r3, r2
 8008e18:	005b      	lsls	r3, r3, #1
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4a1a      	ldr	r2, [pc, #104]	; (8008e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8008e20:	4413      	add	r3, r2
 8008e22:	3304      	adds	r3, #4
 8008e24:	f107 0208 	add.w	r2, r7, #8
 8008e28:	2100      	movs	r1, #0
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f002 f9cb 	bl	800b1c6 <HAL_CAN_GetRxMessage>
		}
		if(board_status==GIMBAL_BOARD){
 8008e30:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d11b      	bne.n	8008e70 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
			uint8_t idx=rx_header.StdId-IDLE_COMM_ID;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			can_comm_rx[idx].comm_id = rx_header.StdId;
 8008e3e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	4810      	ldr	r0, [pc, #64]	; (8008e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8008e46:	4613      	mov	r3, r2
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	4413      	add	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4403      	add	r3, r0
 8008e50:	6019      	str	r1, [r3, #0]
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_comm_rx[idx].comm_rx_buffer);
 8008e52:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008e56:	4613      	mov	r3, r2
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	4413      	add	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	; (8008e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8008e60:	4413      	add	r3, r2
 8008e62:	3304      	adds	r3, #4
 8008e64:	f107 0208 	add.w	r2, r7, #8
 8008e68:	2100      	movs	r1, #0
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f002 f9ab 	bl	800b1c6 <HAL_CAN_GetRxMessage>
		}
	}
}
 8008e70:	bf00      	nop
 8008e72:	3728      	adds	r7, #40	; 0x28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	2000d8fc 	.word	0x2000d8fc
 8008e7c:	200046a0 	.word	0x200046a0
 8008e80:	2000d8d4 	.word	0x2000d8d4
 8008e84:	2000469c 	.word	0x2000469c
 8008e88:	200004d4 	.word	0x200004d4

08008e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008e92:	2300      	movs	r3, #0
 8008e94:	607b      	str	r3, [r7, #4]
 8008e96:	4b2b      	ldr	r3, [pc, #172]	; (8008f44 <MX_DMA_Init+0xb8>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	4a2a      	ldr	r2, [pc, #168]	; (8008f44 <MX_DMA_Init+0xb8>)
 8008e9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8008ea2:	4b28      	ldr	r3, [pc, #160]	; (8008f44 <MX_DMA_Init+0xb8>)
 8008ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eaa:	607b      	str	r3, [r7, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008eae:	2300      	movs	r3, #0
 8008eb0:	603b      	str	r3, [r7, #0]
 8008eb2:	4b24      	ldr	r3, [pc, #144]	; (8008f44 <MX_DMA_Init+0xb8>)
 8008eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb6:	4a23      	ldr	r2, [pc, #140]	; (8008f44 <MX_DMA_Init+0xb8>)
 8008eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8008ebe:	4b21      	ldr	r3, [pc, #132]	; (8008f44 <MX_DMA_Init+0xb8>)
 8008ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ec6:	603b      	str	r3, [r7, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2105      	movs	r1, #5
 8008ece:	200c      	movs	r0, #12
 8008ed0:	f002 fdbb 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008ed4:	200c      	movs	r0, #12
 8008ed6:	f002 fdd4 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8008eda:	2200      	movs	r2, #0
 8008edc:	2105      	movs	r1, #5
 8008ede:	2039      	movs	r0, #57	; 0x39
 8008ee0:	f002 fdb3 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8008ee4:	2039      	movs	r0, #57	; 0x39
 8008ee6:	f002 fdcc 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8008eea:	2200      	movs	r2, #0
 8008eec:	2105      	movs	r1, #5
 8008eee:	203a      	movs	r0, #58	; 0x3a
 8008ef0:	f002 fdab 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008ef4:	203a      	movs	r0, #58	; 0x3a
 8008ef6:	f002 fdc4 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8008efa:	2200      	movs	r2, #0
 8008efc:	2105      	movs	r1, #5
 8008efe:	203b      	movs	r0, #59	; 0x3b
 8008f00:	f002 fda3 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8008f04:	203b      	movs	r0, #59	; 0x3b
 8008f06:	f002 fdbc 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2105      	movs	r1, #5
 8008f0e:	2044      	movs	r0, #68	; 0x44
 8008f10:	f002 fd9b 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8008f14:	2044      	movs	r0, #68	; 0x44
 8008f16:	f002 fdb4 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2105      	movs	r1, #5
 8008f1e:	2045      	movs	r0, #69	; 0x45
 8008f20:	f002 fd93 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8008f24:	2045      	movs	r0, #69	; 0x45
 8008f26:	f002 fdac 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2105      	movs	r1, #5
 8008f2e:	2046      	movs	r0, #70	; 0x46
 8008f30:	f002 fd8b 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008f34:	2046      	movs	r0, #70	; 0x46
 8008f36:	f002 fda4 	bl	800ba82 <HAL_NVIC_EnableIRQ>

}
 8008f3a:	bf00      	nop
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	40023800 	.word	0x40023800

08008f48 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b085      	sub	sp, #20
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4a07      	ldr	r2, [pc, #28]	; (8008f74 <vApplicationGetIdleTaskMemory+0x2c>)
 8008f58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	4a06      	ldr	r2, [pc, #24]	; (8008f78 <vApplicationGetIdleTaskMemory+0x30>)
 8008f5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2280      	movs	r2, #128	; 0x80
 8008f64:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	2000052c 	.word	0x2000052c
 8008f78:	20000580 	.word	0x20000580

08008f7c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008f7c:	b5b0      	push	{r4, r5, r7, lr}
 8008f7e:	b0d0      	sub	sp, #320	; 0x140
 8008f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  UC_Pack_Queue = xQueueCreate(10, UC_PACK_SIZE);
 8008f82:	2200      	movs	r2, #0
 8008f84:	2140      	movs	r1, #64	; 0x40
 8008f86:	200a      	movs	r0, #10
 8008f88:	f007 fc4c 	bl	8010824 <xQueueGenericCreate>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	4a63      	ldr	r2, [pc, #396]	; (800911c <MX_FREERTOS_Init+0x1a0>)
 8008f90:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008f92:	4b63      	ldr	r3, [pc, #396]	; (8009120 <MX_FREERTOS_Init+0x1a4>)
 8008f94:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8008f98:	461d      	mov	r5, r3
 8008f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008fa6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008faa:	2100      	movs	r1, #0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f007 fabc 	bl	801052a <osThreadCreate>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4a5b      	ldr	r2, [pc, #364]	; (8009124 <MX_FREERTOS_Init+0x1a8>)
 8008fb6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(TimerTask, Timer_Task_Func, osPriorityHigh, 0, 256);
 8008fb8:	4b5b      	ldr	r3, [pc, #364]	; (8009128 <MX_FREERTOS_Init+0x1ac>)
 8008fba:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fc4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fc8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8008fcc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f007 faa9 	bl	801052a <osThreadCreate>
 8008fd8:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c

    osThreadDef(CommTask, Comm_Task_Func, osPriorityHigh, 0, 256);
 8008fdc:	4b53      	ldr	r3, [pc, #332]	; (800912c <MX_FREERTOS_Init+0x1b0>)
 8008fde:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8008fe2:	461d      	mov	r5, r3
 8008fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fe8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    CommTaskHandle = osThreadCreate(osThread(CommTask), NULL);
 8008ff0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f007 fa97 	bl	801052a <osThreadCreate>
 8008ffc:	f8c7 0138 	str.w	r0, [r7, #312]	; 0x138

    osThreadDef(WDGTask, WatchDog_Task_Function, osPriorityHigh, 0, 256);
 8009000:	4b4b      	ldr	r3, [pc, #300]	; (8009130 <MX_FREERTOS_Init+0x1b4>)
 8009002:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8009006:	461d      	mov	r5, r3
 8009008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800900a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800900c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    WDGTaskHandle = osThreadCreate(osThread(WDGTask), NULL);
 8009014:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009018:	2100      	movs	r1, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f007 fa85 	bl	801052a <osThreadCreate>
 8009020:	f8c7 0134 	str.w	r0, [r7, #308]	; 0x134


    if(board_status == CHASSIS_BOARD){
 8009024:	4b43      	ldr	r3, [pc, #268]	; (8009134 <MX_FREERTOS_Init+0x1b8>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d136      	bne.n	800909a <MX_FREERTOS_Init+0x11e>
    	  osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityRealtime, 0, 256);
 800902c:	4b42      	ldr	r3, [pc, #264]	; (8009138 <MX_FREERTOS_Init+0x1bc>)
 800902e:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8009032:	461d      	mov	r5, r3
 8009034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800903c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8009040:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f007 fa6f 	bl	801052a <osThreadCreate>
 800904c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124

    	  osThreadDef(RCTask, RC_Task_Func, osPriorityHigh, 0, 384);
 8009050:	4b3a      	ldr	r3, [pc, #232]	; (800913c <MX_FREERTOS_Init+0x1c0>)
 8009052:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8009056:	461d      	mov	r5, r3
 8009058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800905a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800905c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  RCTaskHandle = osThreadCreate(osThread(RCTask), NULL);
 8009064:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009068:	2100      	movs	r1, #0
 800906a:	4618      	mov	r0, r3
 800906c:	f007 fa5d 	bl	801052a <osThreadCreate>
 8009070:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    	  osThreadDef(RefTask, Referee_Task_Func, osPriorityHigh, 0, 384);
 8009074:	4b32      	ldr	r3, [pc, #200]	; (8009140 <MX_FREERTOS_Init+0x1c4>)
 8009076:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800907a:	461d      	mov	r5, r3
 800907c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800907e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  RefTaskHandle = osThreadCreate(osThread(RefTask), NULL);
 8009088:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800908c:	2100      	movs	r1, #0
 800908e:	4618      	mov	r0, r3
 8009090:	f007 fa4b 	bl	801052a <osThreadCreate>
 8009094:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
//    	  osThreadDef(PCUARTTask, PC_UART_Func, osPriorityHigh, 0, 256);
//    	  PCUARTTaskHandle = osThreadCreate(osThread(PCUARTTask), NULL);
      }
  /* USER CODE END RTOS_THREADS */

}
 8009098:	e03a      	b.n	8009110 <MX_FREERTOS_Init+0x194>
    else if(board_status == GIMBAL_BOARD){
 800909a:	4b26      	ldr	r3, [pc, #152]	; (8009134 <MX_FREERTOS_Init+0x1b8>)
 800909c:	781b      	ldrb	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d136      	bne.n	8009110 <MX_FREERTOS_Init+0x194>
    	  osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityRealtime, 0, 512);
 80090a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090a6:	4a27      	ldr	r2, [pc, #156]	; (8009144 <MX_FREERTOS_Init+0x1c8>)
 80090a8:	461c      	mov	r4, r3
 80090aa:	4615      	mov	r5, r2
 80090ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80090b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 80090b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80090bc:	2100      	movs	r1, #0
 80090be:	4618      	mov	r0, r3
 80090c0:	f007 fa33 	bl	801052a <osThreadCreate>
 80090c4:	f8c7 0130 	str.w	r0, [r7, #304]	; 0x130
    	  osThreadDef(ShootTask, Shoot_Task_Func, osPriorityHigh, 0, 256);
 80090c8:	f107 0320 	add.w	r3, r7, #32
 80090cc:	4a1e      	ldr	r2, [pc, #120]	; (8009148 <MX_FREERTOS_Init+0x1cc>)
 80090ce:	461c      	mov	r4, r3
 80090d0:	4615      	mov	r5, r2
 80090d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80090da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 80090de:	f107 0320 	add.w	r3, r7, #32
 80090e2:	2100      	movs	r1, #0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f007 fa20 	bl	801052a <osThreadCreate>
 80090ea:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
    	  osThreadDef(IMUTask, IMU_Task_Function, osPriorityHigh, 0, 256);
 80090ee:	1d3b      	adds	r3, r7, #4
 80090f0:	4a16      	ldr	r2, [pc, #88]	; (800914c <MX_FREERTOS_Init+0x1d0>)
 80090f2:	461c      	mov	r4, r3
 80090f4:	4615      	mov	r5, r2
 80090f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80090fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  IMUTaskHandle = osThreadCreate(osThread(IMUTask), NULL);
 8009102:	1d3b      	adds	r3, r7, #4
 8009104:	2100      	movs	r1, #0
 8009106:	4618      	mov	r0, r3
 8009108:	f007 fa0f 	bl	801052a <osThreadCreate>
 800910c:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
}
 8009110:	bf00      	nop
 8009112:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8009116:	46bd      	mov	sp, r7
 8009118:	bdb0      	pop	{r4, r5, r7, pc}
 800911a:	bf00      	nop
 800911c:	2000d928 	.word	0x2000d928
 8009120:	08015470 	.word	0x08015470
 8009124:	2000d924 	.word	0x2000d924
 8009128:	0801548c 	.word	0x0801548c
 800912c:	080154a8 	.word	0x080154a8
 8009130:	080154c4 	.word	0x080154c4
 8009134:	2000469c 	.word	0x2000469c
 8009138:	080154e0 	.word	0x080154e0
 800913c:	080154fc 	.word	0x080154fc
 8009140:	08015518 	.word	0x08015518
 8009144:	08015534 	.word	0x08015534
 8009148:	08015550 	.word	0x08015550
 800914c:	0801556c 	.word	0x0801556c

08009150 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009158:	2001      	movs	r0, #1
 800915a:	f007 fa32 	bl	80105c2 <osDelay>
 800915e:	e7fb      	b.n	8009158 <StartDefaultTask+0x8>

08009160 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b08e      	sub	sp, #56	; 0x38
 8009164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	605a      	str	r2, [r3, #4]
 8009170:	609a      	str	r2, [r3, #8]
 8009172:	60da      	str	r2, [r3, #12]
 8009174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009176:	2300      	movs	r3, #0
 8009178:	623b      	str	r3, [r7, #32]
 800917a:	4b9b      	ldr	r3, [pc, #620]	; (80093e8 <MX_GPIO_Init+0x288>)
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	4a9a      	ldr	r2, [pc, #616]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009180:	f043 0302 	orr.w	r3, r3, #2
 8009184:	6313      	str	r3, [r2, #48]	; 0x30
 8009186:	4b98      	ldr	r3, [pc, #608]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	623b      	str	r3, [r7, #32]
 8009190:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009192:	2300      	movs	r3, #0
 8009194:	61fb      	str	r3, [r7, #28]
 8009196:	4b94      	ldr	r3, [pc, #592]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	4a93      	ldr	r2, [pc, #588]	; (80093e8 <MX_GPIO_Init+0x288>)
 800919c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091a0:	6313      	str	r3, [r2, #48]	; 0x30
 80091a2:	4b91      	ldr	r3, [pc, #580]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091aa:	61fb      	str	r3, [r7, #28]
 80091ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80091ae:	2300      	movs	r3, #0
 80091b0:	61bb      	str	r3, [r7, #24]
 80091b2:	4b8d      	ldr	r3, [pc, #564]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	4a8c      	ldr	r2, [pc, #560]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091b8:	f043 0301 	orr.w	r3, r3, #1
 80091bc:	6313      	str	r3, [r2, #48]	; 0x30
 80091be:	4b8a      	ldr	r3, [pc, #552]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091c2:	f003 0301 	and.w	r3, r3, #1
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	4b86      	ldr	r3, [pc, #536]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d2:	4a85      	ldr	r2, [pc, #532]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091d4:	f043 0308 	orr.w	r3, r3, #8
 80091d8:	6313      	str	r3, [r2, #48]	; 0x30
 80091da:	4b83      	ldr	r3, [pc, #524]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	617b      	str	r3, [r7, #20]
 80091e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80091e6:	2300      	movs	r3, #0
 80091e8:	613b      	str	r3, [r7, #16]
 80091ea:	4b7f      	ldr	r3, [pc, #508]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	4a7e      	ldr	r2, [pc, #504]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091f0:	f043 0304 	orr.w	r3, r3, #4
 80091f4:	6313      	str	r3, [r2, #48]	; 0x30
 80091f6:	4b7c      	ldr	r3, [pc, #496]	; (80093e8 <MX_GPIO_Init+0x288>)
 80091f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fa:	f003 0304 	and.w	r3, r3, #4
 80091fe:	613b      	str	r3, [r7, #16]
 8009200:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8009202:	2300      	movs	r3, #0
 8009204:	60fb      	str	r3, [r7, #12]
 8009206:	4b78      	ldr	r3, [pc, #480]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800920a:	4a77      	ldr	r2, [pc, #476]	; (80093e8 <MX_GPIO_Init+0x288>)
 800920c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009210:	6313      	str	r3, [r2, #48]	; 0x30
 8009212:	4b75      	ldr	r3, [pc, #468]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800921a:	60fb      	str	r3, [r7, #12]
 800921c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800921e:	2300      	movs	r3, #0
 8009220:	60bb      	str	r3, [r7, #8]
 8009222:	4b71      	ldr	r3, [pc, #452]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009226:	4a70      	ldr	r2, [pc, #448]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800922c:	6313      	str	r3, [r2, #48]	; 0x30
 800922e:	4b6e      	ldr	r3, [pc, #440]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009236:	60bb      	str	r3, [r7, #8]
 8009238:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800923a:	2300      	movs	r3, #0
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	4b6a      	ldr	r3, [pc, #424]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009242:	4a69      	ldr	r2, [pc, #420]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009244:	f043 0320 	orr.w	r3, r3, #32
 8009248:	6313      	str	r3, [r2, #48]	; 0x30
 800924a:	4b67      	ldr	r3, [pc, #412]	; (80093e8 <MX_GPIO_Init+0x288>)
 800924c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924e:	f003 0320 	and.w	r3, r3, #32
 8009252:	607b      	str	r3, [r7, #4]
 8009254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009256:	2300      	movs	r3, #0
 8009258:	603b      	str	r3, [r7, #0]
 800925a:	4b63      	ldr	r3, [pc, #396]	; (80093e8 <MX_GPIO_Init+0x288>)
 800925c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925e:	4a62      	ldr	r2, [pc, #392]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009260:	f043 0310 	orr.w	r3, r3, #16
 8009264:	6313      	str	r3, [r2, #48]	; 0x30
 8009266:	4b60      	ldr	r3, [pc, #384]	; (80093e8 <MX_GPIO_Init+0x288>)
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	f003 0310 	and.w	r3, r3, #16
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8009272:	2201      	movs	r2, #1
 8009274:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009278:	485c      	ldr	r0, [pc, #368]	; (80093ec <MX_GPIO_Init+0x28c>)
 800927a:	f003 f9d3 	bl	800c624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RSTN_IST8310_GPIO_Port, RSTN_IST8310_Pin, GPIO_PIN_SET);
 800927e:	2201      	movs	r2, #1
 8009280:	2140      	movs	r1, #64	; 0x40
 8009282:	485b      	ldr	r0, [pc, #364]	; (80093f0 <MX_GPIO_Init+0x290>)
 8009284:	f003 f9ce 	bl	800c624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8009288:	2200      	movs	r2, #0
 800928a:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800928e:	4859      	ldr	r0, [pc, #356]	; (80093f4 <MX_GPIO_Init+0x294>)
 8009290:	f003 f9c8 	bl	800c624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8009294:	2201      	movs	r2, #1
 8009296:	2110      	movs	r1, #16
 8009298:	4857      	ldr	r0, [pc, #348]	; (80093f8 <MX_GPIO_Init+0x298>)
 800929a:	f003 f9c3 	bl	800c624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 800929e:	2201      	movs	r2, #1
 80092a0:	2101      	movs	r1, #1
 80092a2:	4856      	ldr	r0, [pc, #344]	; (80093fc <MX_GPIO_Init+0x29c>)
 80092a4:	f003 f9be 	bl	800c624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HIGH_VOLT_GPIO_Port, HIGH_VOLT_Pin, GPIO_PIN_RESET);
 80092a8:	2200      	movs	r2, #0
 80092aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092ae:	4853      	ldr	r0, [pc, #332]	; (80093fc <MX_GPIO_Init+0x29c>)
 80092b0:	f003 f9b8 	bl	800c624 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80092b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092ba:	2301      	movs	r3, #1
 80092bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80092c2:	2300      	movs	r3, #0
 80092c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80092c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ca:	4619      	mov	r1, r3
 80092cc:	4847      	ldr	r0, [pc, #284]	; (80093ec <MX_GPIO_Init+0x28c>)
 80092ce:	f002 fff5 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Board_Status_Pin;
 80092d2:	2302      	movs	r3, #2
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80092d6:	2300      	movs	r3, #0
 80092d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092da:	2301      	movs	r3, #1
 80092dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Board_Status_GPIO_Port, &GPIO_InitStruct);
 80092de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092e2:	4619      	mov	r1, r3
 80092e4:	4846      	ldr	r0, [pc, #280]	; (8009400 <MX_GPIO_Init+0x2a0>)
 80092e6:	f002 ffe9 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RSTN_IST8310_Pin;
 80092ea:	2340      	movs	r3, #64	; 0x40
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80092ee:	2301      	movs	r3, #1
 80092f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092f2:	2301      	movs	r3, #1
 80092f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80092f6:	2301      	movs	r3, #1
 80092f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RSTN_IST8310_GPIO_Port, &GPIO_InitStruct);
 80092fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092fe:	4619      	mov	r1, r3
 8009300:	483b      	ldr	r0, [pc, #236]	; (80093f0 <MX_GPIO_Init+0x290>)
 8009302:	f002 ffdb 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8009306:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800930a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800930c:	2301      	movs	r3, #1
 800930e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009310:	2300      	movs	r3, #0
 8009312:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009314:	2300      	movs	r3, #0
 8009316:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8009318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800931c:	4619      	mov	r1, r3
 800931e:	4835      	ldr	r0, [pc, #212]	; (80093f4 <MX_GPIO_Init+0x294>)
 8009320:	f002 ffcc 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DRDY_IST8310_Pin|SOFTWARE_EXTI_Pin;
 8009324:	2309      	movs	r3, #9
 8009326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009328:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800932c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800932e:	2301      	movs	r3, #1
 8009330:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009332:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009336:	4619      	mov	r1, r3
 8009338:	482d      	ldr	r0, [pc, #180]	; (80093f0 <MX_GPIO_Init+0x290>)
 800933a:	f002 ffbf 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_ACCEL_Pin;
 800933e:	2310      	movs	r3, #16
 8009340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009342:	2301      	movs	r3, #1
 8009344:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009346:	2301      	movs	r3, #1
 8009348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800934a:	2302      	movs	r3, #2
 800934c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS1_ACCEL_GPIO_Port, &GPIO_InitStruct);
 800934e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009352:	4619      	mov	r1, r3
 8009354:	4828      	ldr	r0, [pc, #160]	; (80093f8 <MX_GPIO_Init+0x298>)
 8009356:	f002 ffb1 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin|INT1_GYRO_Pin;
 800935a:	2330      	movs	r3, #48	; 0x30
 800935c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800935e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8009362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009364:	2301      	movs	r3, #1
 8009366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800936c:	4619      	mov	r1, r3
 800936e:	481f      	ldr	r0, [pc, #124]	; (80093ec <MX_GPIO_Init+0x28c>)
 8009370:	f002 ffa4 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_GYRO_Pin;
 8009374:	2301      	movs	r3, #1
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009378:	2301      	movs	r3, #1
 800937a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800937c:	2301      	movs	r3, #1
 800937e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009380:	2302      	movs	r3, #2
 8009382:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS1_GYRO_GPIO_Port, &GPIO_InitStruct);
 8009384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009388:	4619      	mov	r1, r3
 800938a:	481c      	ldr	r0, [pc, #112]	; (80093fc <MX_GPIO_Init+0x29c>)
 800938c:	f002 ff96 	bl	800c2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HIGH_VOLT_Pin;
 8009390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009396:	2301      	movs	r3, #1
 8009398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800939a:	2300      	movs	r3, #0
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800939e:	2300      	movs	r3, #0
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HIGH_VOLT_GPIO_Port, &GPIO_InitStruct);
 80093a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093a6:	4619      	mov	r1, r3
 80093a8:	4814      	ldr	r0, [pc, #80]	; (80093fc <MX_GPIO_Init+0x29c>)
 80093aa:	f002 ff87 	bl	800c2bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80093ae:	2200      	movs	r2, #0
 80093b0:	2105      	movs	r1, #5
 80093b2:	2006      	movs	r0, #6
 80093b4:	f002 fb49 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80093b8:	2006      	movs	r0, #6
 80093ba:	f002 fb62 	bl	800ba82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80093be:	2200      	movs	r2, #0
 80093c0:	2105      	movs	r1, #5
 80093c2:	200a      	movs	r0, #10
 80093c4:	f002 fb41 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80093c8:	200a      	movs	r0, #10
 80093ca:	f002 fb5a 	bl	800ba82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80093ce:	2200      	movs	r2, #0
 80093d0:	2105      	movs	r1, #5
 80093d2:	2017      	movs	r0, #23
 80093d4:	f002 fb39 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80093d8:	2017      	movs	r0, #23
 80093da:	f002 fb52 	bl	800ba82 <HAL_NVIC_EnableIRQ>

}
 80093de:	bf00      	nop
 80093e0:	3738      	adds	r7, #56	; 0x38
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	40023800 	.word	0x40023800
 80093ec:	40020800 	.word	0x40020800
 80093f0:	40021800 	.word	0x40021800
 80093f4:	40021c00 	.word	0x40021c00
 80093f8:	40020000 	.word	0x40020000
 80093fc:	40020400 	.word	0x40020400
 8009400:	40021400 	.word	0x40021400

08009404 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	80fb      	strh	r3, [r7, #6]
	/* Not Implement Button IT Yet,
	 * may be reserved for gyro calibration */
}
 800940e:	bf00      	nop
 8009410:	370c      	adds	r7, #12
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
	...

0800941c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8009420:	4b12      	ldr	r3, [pc, #72]	; (800946c <MX_I2C3_Init+0x50>)
 8009422:	4a13      	ldr	r2, [pc, #76]	; (8009470 <MX_I2C3_Init+0x54>)
 8009424:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8009426:	4b11      	ldr	r3, [pc, #68]	; (800946c <MX_I2C3_Init+0x50>)
 8009428:	4a12      	ldr	r2, [pc, #72]	; (8009474 <MX_I2C3_Init+0x58>)
 800942a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800942c:	4b0f      	ldr	r3, [pc, #60]	; (800946c <MX_I2C3_Init+0x50>)
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8009432:	4b0e      	ldr	r3, [pc, #56]	; (800946c <MX_I2C3_Init+0x50>)
 8009434:	2200      	movs	r2, #0
 8009436:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009438:	4b0c      	ldr	r3, [pc, #48]	; (800946c <MX_I2C3_Init+0x50>)
 800943a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800943e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009440:	4b0a      	ldr	r3, [pc, #40]	; (800946c <MX_I2C3_Init+0x50>)
 8009442:	2200      	movs	r2, #0
 8009444:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8009446:	4b09      	ldr	r3, [pc, #36]	; (800946c <MX_I2C3_Init+0x50>)
 8009448:	2200      	movs	r2, #0
 800944a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800944c:	4b07      	ldr	r3, [pc, #28]	; (800946c <MX_I2C3_Init+0x50>)
 800944e:	2200      	movs	r2, #0
 8009450:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009452:	4b06      	ldr	r3, [pc, #24]	; (800946c <MX_I2C3_Init+0x50>)
 8009454:	2200      	movs	r2, #0
 8009456:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8009458:	4804      	ldr	r0, [pc, #16]	; (800946c <MX_I2C3_Init+0x50>)
 800945a:	f003 f915 	bl	800c688 <HAL_I2C_Init>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d001      	beq.n	8009468 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8009464:	f000 fa0e 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8009468:	bf00      	nop
 800946a:	bd80      	pop	{r7, pc}
 800946c:	2000d92c 	.word	0x2000d92c
 8009470:	40005c00 	.word	0x40005c00
 8009474:	00061a80 	.word	0x00061a80

08009478 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a29      	ldr	r2, [pc, #164]	; (800953c <HAL_I2C_MspInit+0xc4>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d14b      	bne.n	8009532 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	4b28      	ldr	r3, [pc, #160]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a2:	4a27      	ldr	r2, [pc, #156]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 80094a4:	f043 0304 	orr.w	r3, r3, #4
 80094a8:	6313      	str	r3, [r2, #48]	; 0x30
 80094aa:	4b25      	ldr	r3, [pc, #148]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ae:	f003 0304 	and.w	r3, r3, #4
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	4b21      	ldr	r3, [pc, #132]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 80094bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094be:	4a20      	ldr	r2, [pc, #128]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 80094c0:	f043 0301 	orr.w	r3, r3, #1
 80094c4:	6313      	str	r3, [r2, #48]	; 0x30
 80094c6:	4b1e      	ldr	r3, [pc, #120]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 80094c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ca:	f003 0301 	and.w	r3, r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80094d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80094d8:	2312      	movs	r3, #18
 80094da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094dc:	2301      	movs	r3, #1
 80094de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e0:	2303      	movs	r3, #3
 80094e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80094e4:	2304      	movs	r3, #4
 80094e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4619      	mov	r1, r3
 80094ee:	4815      	ldr	r0, [pc, #84]	; (8009544 <HAL_I2C_MspInit+0xcc>)
 80094f0:	f002 fee4 	bl	800c2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80094f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80094fa:	2312      	movs	r3, #18
 80094fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80094fe:	2301      	movs	r3, #1
 8009500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009502:	2303      	movs	r3, #3
 8009504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009506:	2304      	movs	r3, #4
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800950a:	f107 0314 	add.w	r3, r7, #20
 800950e:	4619      	mov	r1, r3
 8009510:	480d      	ldr	r0, [pc, #52]	; (8009548 <HAL_I2C_MspInit+0xd0>)
 8009512:	f002 fed3 	bl	800c2bc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009516:	2300      	movs	r3, #0
 8009518:	60bb      	str	r3, [r7, #8]
 800951a:	4b09      	ldr	r3, [pc, #36]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 800951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951e:	4a08      	ldr	r2, [pc, #32]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 8009520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009524:	6413      	str	r3, [r2, #64]	; 0x40
 8009526:	4b06      	ldr	r3, [pc, #24]	; (8009540 <HAL_I2C_MspInit+0xc8>)
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800952e:	60bb      	str	r3, [r7, #8]
 8009530:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8009532:	bf00      	nop
 8009534:	3728      	adds	r7, #40	; 0x28
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	40005c00 	.word	0x40005c00
 8009540:	40023800 	.word	0x40023800
 8009544:	40020800 	.word	0x40020800
 8009548:	40020000 	.word	0x40020000

0800954c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <MX_IWDG_Init+0x2c>)
 8009552:	4a0a      	ldr	r2, [pc, #40]	; (800957c <MX_IWDG_Init+0x30>)
 8009554:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8009556:	4b08      	ldr	r3, [pc, #32]	; (8009578 <MX_IWDG_Init+0x2c>)
 8009558:	2202      	movs	r2, #2
 800955a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 3999;
 800955c:	4b06      	ldr	r3, [pc, #24]	; (8009578 <MX_IWDG_Init+0x2c>)
 800955e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8009562:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8009564:	4804      	ldr	r0, [pc, #16]	; (8009578 <MX_IWDG_Init+0x2c>)
 8009566:	f004 f84e 	bl	800d606 <HAL_IWDG_Init>
 800956a:	4603      	mov	r3, r0
 800956c:	2b00      	cmp	r3, #0
 800956e:	d001      	beq.n	8009574 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8009570:	f000 f988 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8009574:	bf00      	nop
 8009576:	bd80      	pop	{r7, pc}
 8009578:	2000d980 	.word	0x2000d980
 800957c:	40003000 	.word	0x40003000

08009580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009584:	f001 fa8e 	bl	800aaa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009588:	f000 f83c 	bl	8009604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800958c:	f7ff fde8 	bl	8009160 <MX_GPIO_Init>
  MX_DMA_Init();
 8009590:	f7ff fc7c 	bl	8008e8c <MX_DMA_Init>
  MX_CAN1_Init();
 8009594:	f7ff faa6 	bl	8008ae4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8009598:	f7ff fada 	bl	8008b50 <MX_CAN2_Init>
  MX_TIM4_Init();
 800959c:	f000 fcb0 	bl	8009f00 <MX_TIM4_Init>
  MX_TIM8_Init();
 80095a0:	f000 fd78 	bl	800a094 <MX_TIM8_Init>
  MX_TIM10_Init();
 80095a4:	f000 fdfa 	bl	800a19c <MX_TIM10_Init>
  MX_TIM13_Init();
 80095a8:	f000 fe46 	bl	800a238 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 80095ac:	f000 ffec 	bl	800a588 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80095b0:	f001 f814 	bl	800a5dc <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80095b4:	f000 f96c 	bl	8009890 <MX_SPI1_Init>
  MX_I2C3_Init();
 80095b8:	f7ff ff30 	bl	800941c <MX_I2C3_Init>
  MX_IWDG_Init();
 80095bc:	f7ff ffc6 	bl	800954c <MX_IWDG_Init>
  MX_TIM5_Init();
 80095c0:	f000 fcf8 	bl	8009fb4 <MX_TIM5_Init>
  MX_USART6_UART_Init();
 80095c4:	f001 f836 	bl	800a634 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80095c8:	f000 fc16 	bl	8009df8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
#ifdef USE_IWDG
/*To deactivate IWDG, go to main.h and comment #define USE_IWDG 1 */
  MX_IWDG_Init();//enable IWDG, period 2s
#endif
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);// turn off the green led
 80095cc:	2200      	movs	r2, #0
 80095ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80095d2:	480b      	ldr	r0, [pc, #44]	; (8009600 <main+0x80>)
 80095d4:	f003 f826 	bl	800c624 <HAL_GPIO_WritePin>
	if(firmware_and_system_init() != HAL_OK){
 80095d8:	f000 f880 	bl	80096dc <firmware_and_system_init>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <main+0x68>
	  Error_Handler();
 80095e2:	f000 f94f 	bl	8009884 <Error_Handler>
 80095e6:	e005      	b.n	80095f4 <main+0x74>
	}
	else
	  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);// turn on the green led
 80095e8:	2201      	movs	r2, #1
 80095ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80095ee:	4804      	ldr	r0, [pc, #16]	; (8009600 <main+0x80>)
 80095f0:	f003 f818 	bl	800c624 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80095f4:	f7ff fcc2 	bl	8008f7c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80095f8:	f006 ff90 	bl	801051c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80095fc:	e7fe      	b.n	80095fc <main+0x7c>
 80095fe:	bf00      	nop
 8009600:	40021c00 	.word	0x40021c00

08009604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b094      	sub	sp, #80	; 0x50
 8009608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800960a:	f107 0320 	add.w	r3, r7, #32
 800960e:	2230      	movs	r2, #48	; 0x30
 8009610:	2100      	movs	r1, #0
 8009612:	4618      	mov	r0, r3
 8009614:	f008 fc90 	bl	8011f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009618:	f107 030c 	add.w	r3, r7, #12
 800961c:	2200      	movs	r2, #0
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	605a      	str	r2, [r3, #4]
 8009622:	609a      	str	r2, [r3, #8]
 8009624:	60da      	str	r2, [r3, #12]
 8009626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009628:	2300      	movs	r3, #0
 800962a:	60bb      	str	r3, [r7, #8]
 800962c:	4b29      	ldr	r3, [pc, #164]	; (80096d4 <SystemClock_Config+0xd0>)
 800962e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009630:	4a28      	ldr	r2, [pc, #160]	; (80096d4 <SystemClock_Config+0xd0>)
 8009632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009636:	6413      	str	r3, [r2, #64]	; 0x40
 8009638:	4b26      	ldr	r3, [pc, #152]	; (80096d4 <SystemClock_Config+0xd0>)
 800963a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009640:	60bb      	str	r3, [r7, #8]
 8009642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009644:	2300      	movs	r3, #0
 8009646:	607b      	str	r3, [r7, #4]
 8009648:	4b23      	ldr	r3, [pc, #140]	; (80096d8 <SystemClock_Config+0xd4>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a22      	ldr	r2, [pc, #136]	; (80096d8 <SystemClock_Config+0xd4>)
 800964e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009652:	6013      	str	r3, [r2, #0]
 8009654:	4b20      	ldr	r3, [pc, #128]	; (80096d8 <SystemClock_Config+0xd4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800965c:	607b      	str	r3, [r7, #4]
 800965e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009660:	2309      	movs	r3, #9
 8009662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800966a:	2301      	movs	r3, #1
 800966c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800966e:	2302      	movs	r3, #2
 8009670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8009678:	2306      	movs	r3, #6
 800967a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800967c:	23a8      	movs	r3, #168	; 0xa8
 800967e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009680:	2302      	movs	r3, #2
 8009682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009684:	2304      	movs	r3, #4
 8009686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009688:	f107 0320 	add.w	r3, r7, #32
 800968c:	4618      	mov	r0, r3
 800968e:	f003 fffd 	bl	800d68c <HAL_RCC_OscConfig>
 8009692:	4603      	mov	r3, r0
 8009694:	2b00      	cmp	r3, #0
 8009696:	d001      	beq.n	800969c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8009698:	f000 f8f4 	bl	8009884 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800969c:	230f      	movs	r3, #15
 800969e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80096a0:	2302      	movs	r3, #2
 80096a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80096a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80096ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80096ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80096b4:	f107 030c 	add.w	r3, r7, #12
 80096b8:	2105      	movs	r1, #5
 80096ba:	4618      	mov	r0, r3
 80096bc:	f004 fa5e 	bl	800db7c <HAL_RCC_ClockConfig>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80096c6:	f000 f8dd 	bl	8009884 <Error_Handler>
  }
}
 80096ca:	bf00      	nop
 80096cc:	3750      	adds	r7, #80	; 0x50
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	40023800 	.word	0x40023800
 80096d8:	40007000 	.word	0x40007000

080096dc <firmware_and_system_init>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef firmware_and_system_init(void){
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 /* CAN1 & CAN2 Init */
 if( HAL_CAN_Start(&hcan1) != HAL_OK){
 80096e2:	482d      	ldr	r0, [pc, #180]	; (8009798 <firmware_and_system_init+0xbc>)
 80096e4:	f001 fc50 	bl	800af88 <HAL_CAN_Start>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d001      	beq.n	80096f2 <firmware_and_system_init+0x16>
	 return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e04d      	b.n	800978e <firmware_and_system_init+0xb2>
 }
 if( HAL_CAN_Start(&hcan2) != HAL_OK){
 80096f2:	482a      	ldr	r0, [pc, #168]	; (800979c <firmware_and_system_init+0xc0>)
 80096f4:	f001 fc48 	bl	800af88 <HAL_CAN_Start>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d001      	beq.n	8009702 <firmware_and_system_init+0x26>
 	 return HAL_ERROR;
 80096fe:	2301      	movs	r3, #1
 8009700:	e045      	b.n	800978e <firmware_and_system_init+0xb2>
 }
 /* CAN1 & CAN2 filter Init */
 can_filter_enable(&hcan1);
 8009702:	4825      	ldr	r0, [pc, #148]	; (8009798 <firmware_and_system_init+0xbc>)
 8009704:	f7ff fb1a 	bl	8008d3c <can_filter_enable>
 can_filter_enable(&hcan2);
 8009708:	4824      	ldr	r0, [pc, #144]	; (800979c <firmware_and_system_init+0xc0>)
 800970a:	f7ff fb17 	bl	8008d3c <can_filter_enable>

 /* Timer 13 IT Init */
 if( HAL_TIM_Base_Start_IT(&htim13) != HAL_OK){
 800970e:	4824      	ldr	r0, [pc, #144]	; (80097a0 <firmware_and_system_init+0xc4>)
 8009710:	f004 ff4a 	bl	800e5a8 <HAL_TIM_Base_Start_IT>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <firmware_and_system_init+0x42>
  	 return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e037      	b.n	800978e <firmware_and_system_init+0xb2>
 }
 /* Heat PWM signal Init */
 if( HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1) != HAL_OK){
 800971e:	2100      	movs	r1, #0
 8009720:	4820      	ldr	r0, [pc, #128]	; (80097a4 <firmware_and_system_init+0xc8>)
 8009722:	f005 f801 	bl	800e728 <HAL_TIM_PWM_Start>
 8009726:	4603      	mov	r3, r0
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <firmware_and_system_init+0x54>
   	 return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e02e      	b.n	800978e <firmware_and_system_init+0xb2>
 }
 /* Read Board Status */
 if(HAL_GPIO_ReadPin(Board_Status_GPIO_Port, Board_Status_Pin) == GPIO_PIN_RESET)
 8009730:	2102      	movs	r1, #2
 8009732:	481d      	ldr	r0, [pc, #116]	; (80097a8 <firmware_and_system_init+0xcc>)
 8009734:	f002 ff5e 	bl	800c5f4 <HAL_GPIO_ReadPin>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d103      	bne.n	8009746 <firmware_and_system_init+0x6a>
	  board_status = CHASSIS_BOARD;
 800973e:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <firmware_and_system_init+0xd0>)
 8009740:	2201      	movs	r2, #1
 8009742:	701a      	strb	r2, [r3, #0]
 8009744:	e002      	b.n	800974c <firmware_and_system_init+0x70>
 else
	  board_status = GIMBAL_BOARD;
 8009746:	4b19      	ldr	r3, [pc, #100]	; (80097ac <firmware_and_system_init+0xd0>)
 8009748:	2200      	movs	r2, #0
 800974a:	701a      	strb	r2, [r3, #0]

 /* init fb struct of motors */
 for(int i=0;i<MOTOR_COUNT;i++){
 800974c:	2300      	movs	r3, #0
 800974e:	607b      	str	r3, [r7, #4]
 8009750:	e00e      	b.n	8009770 <firmware_and_system_init+0x94>
	 memset(&(motor_data[i].motor_feedback), 0, sizeof(Motor_Feedback_Data_t));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2294      	movs	r2, #148	; 0x94
 8009756:	fb02 f303 	mul.w	r3, r2, r3
 800975a:	3388      	adds	r3, #136	; 0x88
 800975c:	4a14      	ldr	r2, [pc, #80]	; (80097b0 <firmware_and_system_init+0xd4>)
 800975e:	4413      	add	r3, r2
 8009760:	2208      	movs	r2, #8
 8009762:	2100      	movs	r1, #0
 8009764:	4618      	mov	r0, r3
 8009766:	f008 fbe7 	bl	8011f38 <memset>
 for(int i=0;i<MOTOR_COUNT;i++){
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	3301      	adds	r3, #1
 800976e:	607b      	str	r3, [r7, #4]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b07      	cmp	r3, #7
 8009774:	dded      	ble.n	8009752 <firmware_and_system_init+0x76>
 }
 /* referee system init*/
 referee_init(&referee);
 8009776:	480f      	ldr	r0, [pc, #60]	; (80097b4 <firmware_and_system_init+0xd8>)
 8009778:	f7fd f8f0 	bl	800695c <referee_init>

 /* init buzzer */
 buzzer_init(&buzzer);
 800977c:	480e      	ldr	r0, [pc, #56]	; (80097b8 <firmware_and_system_init+0xdc>)
 800977e:	f7fd fa47 	bl	8006c10 <buzzer_init>

 /* init vision pack */
 uc_auto_aim_pack_init(&uc_auto_aim_pack);
 8009782:	480e      	ldr	r0, [pc, #56]	; (80097bc <firmware_and_system_init+0xe0>)
 8009784:	f7fe ffe6 	bl	8008754 <uc_auto_aim_pack_init>

 /* DWT init */
 dwt_init();
 8009788:	f7fd fbc4 	bl	8006f14 <dwt_init>

 return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	2000d8fc 	.word	0x2000d8fc
 800979c:	2000d8d4 	.word	0x2000d8d4
 80097a0:	2000dbd8 	.word	0x2000dbd8
 80097a4:	2000db48 	.word	0x2000db48
 80097a8:	40021400 	.word	0x40021400
 80097ac:	2000469c 	.word	0x2000469c
 80097b0:	20005218 	.word	0x20005218
 80097b4:	2000d72c 	.word	0x2000d72c
 80097b8:	2000d844 	.word	0x2000d844
 80097bc:	2000d63c 	.word	0x2000d63c

080097c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM13)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a15      	ldr	r2, [pc, #84]	; (8009824 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d11c      	bne.n	800980c <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		if(debugger_signal_flag == 1)
 80097d2:	4b15      	ldr	r3, [pc, #84]	; (8009828 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d104      	bne.n	80097e4 <HAL_TIM_PeriodElapsedCallback+0x24>
			++debugger_signal_counter;
 80097da:	4b14      	ldr	r3, [pc, #80]	; (800982c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	3301      	adds	r3, #1
 80097e0:	4a12      	ldr	r2, [pc, #72]	; (800982c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80097e2:	6013      	str	r3, [r2, #0]
		if(shoot_reserve_flag == 1)
 80097e4:	4b12      	ldr	r3, [pc, #72]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	2b01      	cmp	r3, #1
 80097ea:	d105      	bne.n	80097f8 <HAL_TIM_PeriodElapsedCallback+0x38>
			++shoot_reserve_counter;
 80097ec:	4b11      	ldr	r3, [pc, #68]	; (8009834 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	b2da      	uxtb	r2, r3
 80097f4:	4b0f      	ldr	r3, [pc, #60]	; (8009834 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80097f6:	701a      	strb	r2, [r3, #0]
		if(chassis_gyro_flag ==1)
 80097f8:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d105      	bne.n	800980c <HAL_TIM_PeriodElapsedCallback+0x4c>
			++chassis_gyro_counter;
 8009800:	4b0e      	ldr	r3, [pc, #56]	; (800983c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	3301      	adds	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800980a:	801a      	strh	r2, [r3, #0]
	}
	  /* USER CODE END Callback 0 */
	  if (htim->Instance == TIM5) {
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0b      	ldr	r2, [pc, #44]	; (8009840 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d101      	bne.n	800981a <HAL_TIM_PeriodElapsedCallback+0x5a>
		  HAL_IncTick();
 8009816:	f001 f997 	bl	800ab48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	40001c00 	.word	0x40001c00
 8009828:	2000078c 	.word	0x2000078c
 800982c:	20000788 	.word	0x20000788
 8009830:	20000780 	.word	0x20000780
 8009834:	20000781 	.word	0x20000781
 8009838:	20000892 	.word	0x20000892
 800983c:	20000890 	.word	0x20000890
 8009840:	40000c00 	.word	0x40000c00

08009844 <HAL_UART_RxCpltCallback>:
 * @note   This function is called when：
 * 			 Referee system recv: UART3_DMA1_Stream1
 * 			 Mini PC recv: 		  UART6_DMA2_Stream1
 *
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  if(huart == &huart1 && board_status == CHASSIS_BOARD){
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a0a      	ldr	r2, [pc, #40]	; (8009878 <HAL_UART_RxCpltCallback+0x34>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d10d      	bne.n	8009870 <HAL_UART_RxCpltCallback+0x2c>
 8009854:	4b09      	ldr	r3, [pc, #36]	; (800987c <HAL_UART_RxCpltCallback+0x38>)
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d106      	bne.n	800986a <HAL_UART_RxCpltCallback+0x26>
	 /* re-activate DMA */
	 HAL_UART_Receive_DMA(&huart1, ref_rx_frame, sizeof(ref_rx_frame));
 800985c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009860:	4907      	ldr	r1, [pc, #28]	; (8009880 <HAL_UART_RxCpltCallback+0x3c>)
 8009862:	4805      	ldr	r0, [pc, #20]	; (8009878 <HAL_UART_RxCpltCallback+0x34>)
 8009864:	f005 fdbf 	bl	800f3e6 <HAL_UART_Receive_DMA>
  }
  else if (huart == &UC_HUART && board_status == GIMBAL_BOARD) {
//		uc_on_RxCplt();
  }
}
 8009868:	e002      	b.n	8009870 <HAL_UART_RxCpltCallback+0x2c>
  else if (huart == &UC_HUART && board_status == GIMBAL_BOARD) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a02      	ldr	r2, [pc, #8]	; (8009878 <HAL_UART_RxCpltCallback+0x34>)
 800986e:	4293      	cmp	r3, r2
}
 8009870:	bf00      	nop
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}
 8009878:	2000de8c 	.word	0x2000de8c
 800987c:	2000469c 	.word	0x2000469c
 8009880:	20000790 	.word	0x20000790

08009884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009888:	b672      	cpsid	i
}
 800988a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800988c:	e7fe      	b.n	800988c <Error_Handler+0x8>
	...

08009890 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009894:	4b17      	ldr	r3, [pc, #92]	; (80098f4 <MX_SPI1_Init+0x64>)
 8009896:	4a18      	ldr	r2, [pc, #96]	; (80098f8 <MX_SPI1_Init+0x68>)
 8009898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800989a:	4b16      	ldr	r3, [pc, #88]	; (80098f4 <MX_SPI1_Init+0x64>)
 800989c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80098a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80098a2:	4b14      	ldr	r3, [pc, #80]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098a4:	2200      	movs	r2, #0
 80098a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80098a8:	4b12      	ldr	r3, [pc, #72]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80098ae:	4b11      	ldr	r3, [pc, #68]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098b0:	2202      	movs	r2, #2
 80098b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098b6:	2201      	movs	r2, #1
 80098b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80098ba:	4b0e      	ldr	r3, [pc, #56]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80098c2:	4b0c      	ldr	r3, [pc, #48]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098c4:	2238      	movs	r2, #56	; 0x38
 80098c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80098c8:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098ca:	2200      	movs	r2, #0
 80098cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80098ce:	4b09      	ldr	r3, [pc, #36]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098d0:	2200      	movs	r2, #0
 80098d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80098d4:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098d6:	2200      	movs	r2, #0
 80098d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80098da:	4b06      	ldr	r3, [pc, #24]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098dc:	220a      	movs	r2, #10
 80098de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80098e0:	4804      	ldr	r0, [pc, #16]	; (80098f4 <MX_SPI1_Init+0x64>)
 80098e2:	f004 fb1b 	bl	800df1c <HAL_SPI_Init>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80098ec:	f7ff ffca 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80098f0:	bf00      	nop
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	2000d9a0 	.word	0x2000d9a0
 80098f8:	40013000 	.word	0x40013000

080098fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b08a      	sub	sp, #40	; 0x28
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009904:	f107 0314 	add.w	r3, r7, #20
 8009908:	2200      	movs	r2, #0
 800990a:	601a      	str	r2, [r3, #0]
 800990c:	605a      	str	r2, [r3, #4]
 800990e:	609a      	str	r2, [r3, #8]
 8009910:	60da      	str	r2, [r3, #12]
 8009912:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a57      	ldr	r2, [pc, #348]	; (8009a78 <HAL_SPI_MspInit+0x17c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	f040 80a8 	bne.w	8009a70 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009920:	2300      	movs	r3, #0
 8009922:	613b      	str	r3, [r7, #16]
 8009924:	4b55      	ldr	r3, [pc, #340]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 8009926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009928:	4a54      	ldr	r2, [pc, #336]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 800992a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800992e:	6453      	str	r3, [r2, #68]	; 0x44
 8009930:	4b52      	ldr	r3, [pc, #328]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 8009932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009934:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009938:	613b      	str	r3, [r7, #16]
 800993a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800993c:	2300      	movs	r3, #0
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	4b4e      	ldr	r3, [pc, #312]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 8009942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009944:	4a4d      	ldr	r2, [pc, #308]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 8009946:	f043 0302 	orr.w	r3, r3, #2
 800994a:	6313      	str	r3, [r2, #48]	; 0x30
 800994c:	4b4b      	ldr	r3, [pc, #300]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 800994e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009950:	f003 0302 	and.w	r3, r3, #2
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009958:	2300      	movs	r3, #0
 800995a:	60bb      	str	r3, [r7, #8]
 800995c:	4b47      	ldr	r3, [pc, #284]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 800995e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009960:	4a46      	ldr	r2, [pc, #280]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 8009962:	f043 0301 	orr.w	r3, r3, #1
 8009966:	6313      	str	r3, [r2, #48]	; 0x30
 8009968:	4b44      	ldr	r3, [pc, #272]	; (8009a7c <HAL_SPI_MspInit+0x180>)
 800996a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	60bb      	str	r3, [r7, #8]
 8009972:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8009974:	2318      	movs	r3, #24
 8009976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009978:	2302      	movs	r3, #2
 800997a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800997c:	2300      	movs	r3, #0
 800997e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009980:	2303      	movs	r3, #3
 8009982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009984:	2305      	movs	r3, #5
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009988:	f107 0314 	add.w	r3, r7, #20
 800998c:	4619      	mov	r1, r3
 800998e:	483c      	ldr	r0, [pc, #240]	; (8009a80 <HAL_SPI_MspInit+0x184>)
 8009990:	f002 fc94 	bl	800c2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009994:	2380      	movs	r3, #128	; 0x80
 8009996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009998:	2302      	movs	r3, #2
 800999a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800999c:	2300      	movs	r3, #0
 800999e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099a0:	2303      	movs	r3, #3
 80099a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80099a4:	2305      	movs	r3, #5
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099a8:	f107 0314 	add.w	r3, r7, #20
 80099ac:	4619      	mov	r1, r3
 80099ae:	4835      	ldr	r0, [pc, #212]	; (8009a84 <HAL_SPI_MspInit+0x188>)
 80099b0:	f002 fc84 	bl	800c2bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80099b4:	4b34      	ldr	r3, [pc, #208]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099b6:	4a35      	ldr	r2, [pc, #212]	; (8009a8c <HAL_SPI_MspInit+0x190>)
 80099b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80099ba:	4b33      	ldr	r3, [pc, #204]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80099c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099c2:	4b31      	ldr	r3, [pc, #196]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099c8:	4b2f      	ldr	r3, [pc, #188]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099ce:	4b2e      	ldr	r3, [pc, #184]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099d6:	4b2c      	ldr	r3, [pc, #176]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099d8:	2200      	movs	r2, #0
 80099da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099dc:	4b2a      	ldr	r3, [pc, #168]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099de:	2200      	movs	r2, #0
 80099e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80099e2:	4b29      	ldr	r3, [pc, #164]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099e4:	2200      	movs	r2, #0
 80099e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80099e8:	4b27      	ldr	r3, [pc, #156]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80099ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80099f0:	4b25      	ldr	r3, [pc, #148]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80099f6:	4824      	ldr	r0, [pc, #144]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 80099f8:	f002 f85e 	bl	800bab8 <HAL_DMA_Init>
 80099fc:	4603      	mov	r3, r0
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d001      	beq.n	8009a06 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8009a02:	f7ff ff3f 	bl	8009884 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 8009a0a:	64da      	str	r2, [r3, #76]	; 0x4c
 8009a0c:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <HAL_SPI_MspInit+0x18c>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8009a12:	4b1f      	ldr	r3, [pc, #124]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a14:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <HAL_SPI_MspInit+0x198>)
 8009a16:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8009a18:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a1a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009a1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a20:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a22:	2240      	movs	r2, #64	; 0x40
 8009a24:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a26:	4b1a      	ldr	r3, [pc, #104]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a2c:	4b18      	ldr	r3, [pc, #96]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009a32:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a34:	4b16      	ldr	r3, [pc, #88]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a3a:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8009a40:	4b13      	ldr	r3, [pc, #76]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009a46:	4b12      	ldr	r3, [pc, #72]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009a4c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009a4e:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8009a54:	480e      	ldr	r0, [pc, #56]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a56:	f002 f82f 	bl	800bab8 <HAL_DMA_Init>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d001      	beq.n	8009a64 <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 8009a60:	f7ff ff10 	bl	8009884 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a0a      	ldr	r2, [pc, #40]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a68:	649a      	str	r2, [r3, #72]	; 0x48
 8009a6a:	4a09      	ldr	r2, [pc, #36]	; (8009a90 <HAL_SPI_MspInit+0x194>)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6393      	str	r3, [r2, #56]	; 0x38
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009a70:	bf00      	nop
 8009a72:	3728      	adds	r7, #40	; 0x28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	40013000 	.word	0x40013000
 8009a7c:	40023800 	.word	0x40023800
 8009a80:	40020400 	.word	0x40020400
 8009a84:	40020000 	.word	0x40020000
 8009a88:	2000d9f8 	.word	0x2000d9f8
 8009a8c:	40026440 	.word	0x40026440
 8009a90:	2000da58 	.word	0x2000da58
 8009a94:	40026458 	.word	0x40026458

08009a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <HAL_MspInit+0x54>)
 8009aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009aa6:	4a11      	ldr	r2, [pc, #68]	; (8009aec <HAL_MspInit+0x54>)
 8009aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009aac:	6453      	str	r3, [r2, #68]	; 0x44
 8009aae:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <HAL_MspInit+0x54>)
 8009ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ab6:	607b      	str	r3, [r7, #4]
 8009ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009aba:	2300      	movs	r3, #0
 8009abc:	603b      	str	r3, [r7, #0]
 8009abe:	4b0b      	ldr	r3, [pc, #44]	; (8009aec <HAL_MspInit+0x54>)
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac2:	4a0a      	ldr	r2, [pc, #40]	; (8009aec <HAL_MspInit+0x54>)
 8009ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8009aca:	4b08      	ldr	r3, [pc, #32]	; (8009aec <HAL_MspInit+0x54>)
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ad2:	603b      	str	r3, [r7, #0]
 8009ad4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	210f      	movs	r1, #15
 8009ada:	f06f 0001 	mvn.w	r0, #1
 8009ade:	f001 ffb4 	bl	800ba4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}
 8009aea:	bf00      	nop
 8009aec:	40023800 	.word	0x40023800

08009af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009af4:	e7fe      	b.n	8009af4 <NMI_Handler+0x4>

08009af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009af6:	b480      	push	{r7}
 8009af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009afa:	e7fe      	b.n	8009afa <HardFault_Handler+0x4>

08009afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b00:	e7fe      	b.n	8009b00 <MemManage_Handler+0x4>

08009b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b02:	b480      	push	{r7}
 8009b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b06:	e7fe      	b.n	8009b06 <BusFault_Handler+0x4>

08009b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b0c:	e7fe      	b.n	8009b0c <UsageFault_Handler+0x4>

08009b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b12:	bf00      	nop
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b20:	f001 f812 	bl	800ab48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009b24:	f007 fc8e 	bl	8011444 <xTaskGetSchedulerState>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d001      	beq.n	8009b32 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8009b2e:	f007 fed3 	bl	80118d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b32:	bf00      	nop
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOFTWARE_EXTI_Pin);
 8009b3a:	2001      	movs	r0, #1
 8009b3c:	f002 fd8c 	bl	800c658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009b40:	bf00      	nop
 8009b42:	bd80      	pop	{r7, pc}

08009b44 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CS1_ACCEL_Pin);
 8009b48:	2010      	movs	r0, #16
 8009b4a:	f002 fd85 	bl	800c658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009b4e:	bf00      	nop
 8009b50:	bd80      	pop	{r7, pc}
	...

08009b54 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009b58:	4802      	ldr	r0, [pc, #8]	; (8009b64 <DMA1_Stream1_IRQHandler+0x10>)
 8009b5a:	f002 f945 	bl	800bde8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	2000dcc8 	.word	0x2000dcc8

08009b68 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009b6c:	4802      	ldr	r0, [pc, #8]	; (8009b78 <CAN1_TX_IRQHandler+0x10>)
 8009b6e:	f001 fc62 	bl	800b436 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8009b72:	bf00      	nop
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	2000d8fc 	.word	0x2000d8fc

08009b7c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8009b80:	4802      	ldr	r0, [pc, #8]	; (8009b8c <CAN1_RX0_IRQHandler+0x10>)
 8009b82:	f001 fc58 	bl	800b436 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8009b86:	bf00      	nop
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	2000d8fc 	.word	0x2000d8fc

08009b90 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_GYRO_Pin);
 8009b94:	2020      	movs	r0, #32
 8009b96:	f002 fd5f 	bl	800c658 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009b9a:	bf00      	nop
 8009b9c:	bd80      	pop	{r7, pc}
	...

08009ba0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009ba4:	4802      	ldr	r0, [pc, #8]	; (8009bb0 <USART1_IRQHandler+0x10>)
 8009ba6:	f005 fccd 	bl	800f544 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009baa:	bf00      	nop
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	2000de8c 	.word	0x2000de8c

08009bb4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009bb8:	4803      	ldr	r0, [pc, #12]	; (8009bc8 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8009bba:	f004 fe7d 	bl	800e8b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8009bbe:	4803      	ldr	r0, [pc, #12]	; (8009bcc <TIM8_UP_TIM13_IRQHandler+0x18>)
 8009bc0:	f004 fe7a 	bl	800e8b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8009bc4:	bf00      	nop
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	2000dab8 	.word	0x2000dab8
 8009bcc:	2000dbd8 	.word	0x2000dbd8

08009bd0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8009bd4:	4802      	ldr	r0, [pc, #8]	; (8009be0 <DMA2_Stream1_IRQHandler+0x10>)
 8009bd6:	f002 f907 	bl	800bde8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8009bda:	bf00      	nop
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	2000dc68 	.word	0x2000dc68

08009be4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009be8:	4802      	ldr	r0, [pc, #8]	; (8009bf4 <CAN2_TX_IRQHandler+0x10>)
 8009bea:	f001 fc24 	bl	800b436 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8009bee:	bf00      	nop
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	2000d8d4 	.word	0x2000d8d4

08009bf8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009bfc:	4802      	ldr	r0, [pc, #8]	; (8009c08 <CAN2_RX0_IRQHandler+0x10>)
 8009bfe:	f001 fc1a 	bl	800b436 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8009c02:	bf00      	nop
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	2000d8d4 	.word	0x2000d8d4

08009c0c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009c10:	4802      	ldr	r0, [pc, #8]	; (8009c1c <DMA2_Stream5_IRQHandler+0x10>)
 8009c12:	f002 f8e9 	bl	800bde8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8009c16:	bf00      	nop
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	2000de2c 	.word	0x2000de2c

08009c20 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8009c24:	4802      	ldr	r0, [pc, #8]	; (8009c30 <DMA2_Stream6_IRQHandler+0x10>)
 8009c26:	f002 f8df 	bl	800bde8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8009c2a:	bf00      	nop
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	2000ddcc 	.word	0x2000ddcc

08009c34 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009c38:	4802      	ldr	r0, [pc, #8]	; (8009c44 <DMA2_Stream7_IRQHandler+0x10>)
 8009c3a:	f002 f8d5 	bl	800bde8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009c3e:	bf00      	nop
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	2000dd6c 	.word	0x2000dd6c

08009c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	af00      	add	r7, sp, #0
	return 1;
 8009c4c:	2301      	movs	r3, #1
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <_kill>:

int _kill(int pid, int sig)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009c62:	f008 f91f 	bl	8011ea4 <__errno>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2216      	movs	r2, #22
 8009c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8009c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3708      	adds	r7, #8
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <_exit>:

void _exit (int status)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009c80:	f04f 31ff 	mov.w	r1, #4294967295
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7ff ffe7 	bl	8009c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009c8a:	e7fe      	b.n	8009c8a <_exit+0x12>

08009c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b086      	sub	sp, #24
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	e00a      	b.n	8009cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009c9e:	f3af 8000 	nop.w
 8009ca2:	4601      	mov	r1, r0
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	60ba      	str	r2, [r7, #8]
 8009caa:	b2ca      	uxtb	r2, r1
 8009cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	617b      	str	r3, [r7, #20]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	dbf0      	blt.n	8009c9e <_read+0x12>
	}

return len;
 8009cbc:	687b      	ldr	r3, [r7, #4]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3718      	adds	r7, #24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b086      	sub	sp, #24
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	60f8      	str	r0, [r7, #12]
 8009cce:	60b9      	str	r1, [r7, #8]
 8009cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	e009      	b.n	8009cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	1c5a      	adds	r2, r3, #1
 8009cdc:	60ba      	str	r2, [r7, #8]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	617b      	str	r3, [r7, #20]
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	dbf1      	blt.n	8009cd8 <_write+0x12>
	}
	return len;
 8009cf4:	687b      	ldr	r3, [r7, #4]
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <_close>:

int _close(int file)
{
 8009cfe:	b480      	push	{r7}
 8009d00:	b083      	sub	sp, #12
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
	return -1;
 8009d06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d14:	4770      	bx	lr

08009d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009d16:	b480      	push	{r7}
 8009d18:	b083      	sub	sp, #12
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009d26:	605a      	str	r2, [r3, #4]
	return 0;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <_isatty>:

int _isatty(int file)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8009d3e:	2301      	movs	r3, #1
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
	return 0;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
	...

08009d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009d70:	4a14      	ldr	r2, [pc, #80]	; (8009dc4 <_sbrk+0x5c>)
 8009d72:	4b15      	ldr	r3, [pc, #84]	; (8009dc8 <_sbrk+0x60>)
 8009d74:	1ad3      	subs	r3, r2, r3
 8009d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009d7c:	4b13      	ldr	r3, [pc, #76]	; (8009dcc <_sbrk+0x64>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d102      	bne.n	8009d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009d84:	4b11      	ldr	r3, [pc, #68]	; (8009dcc <_sbrk+0x64>)
 8009d86:	4a12      	ldr	r2, [pc, #72]	; (8009dd0 <_sbrk+0x68>)
 8009d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009d8a:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <_sbrk+0x64>)
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4413      	add	r3, r2
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d207      	bcs.n	8009da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009d98:	f008 f884 	bl	8011ea4 <__errno>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	220c      	movs	r2, #12
 8009da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009da2:	f04f 33ff 	mov.w	r3, #4294967295
 8009da6:	e009      	b.n	8009dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009da8:	4b08      	ldr	r3, [pc, #32]	; (8009dcc <_sbrk+0x64>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <_sbrk+0x64>)
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4413      	add	r3, r2
 8009db6:	4a05      	ldr	r2, [pc, #20]	; (8009dcc <_sbrk+0x64>)
 8009db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009dba:	68fb      	ldr	r3, [r7, #12]
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3718      	adds	r7, #24
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	20020000 	.word	0x20020000
 8009dc8:	00000400 	.word	0x00000400
 8009dcc:	20000894 	.word	0x20000894
 8009dd0:	2000df28 	.word	0x2000df28

08009dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009dd8:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <SystemInit+0x20>)
 8009dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dde:	4a05      	ldr	r2, [pc, #20]	; (8009df4 <SystemInit+0x20>)
 8009de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009de8:	bf00      	nop
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	e000ed00 	.word	0xe000ed00

08009df8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b092      	sub	sp, #72	; 0x48
 8009dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009dfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e02:	2200      	movs	r2, #0
 8009e04:	601a      	str	r2, [r3, #0]
 8009e06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	605a      	str	r2, [r3, #4]
 8009e12:	609a      	str	r2, [r3, #8]
 8009e14:	60da      	str	r2, [r3, #12]
 8009e16:	611a      	str	r2, [r3, #16]
 8009e18:	615a      	str	r2, [r3, #20]
 8009e1a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009e1c:	1d3b      	adds	r3, r7, #4
 8009e1e:	2220      	movs	r2, #32
 8009e20:	2100      	movs	r1, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	f008 f888 	bl	8011f38 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009e28:	4b33      	ldr	r3, [pc, #204]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e2a:	4a34      	ldr	r2, [pc, #208]	; (8009efc <MX_TIM1_Init+0x104>)
 8009e2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 839;
 8009e2e:	4b32      	ldr	r3, [pc, #200]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e30:	f240 3247 	movw	r2, #839	; 0x347
 8009e34:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e36:	4b30      	ldr	r3, [pc, #192]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009e3c:	4b2e      	ldr	r3, [pc, #184]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e3e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009e42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e44:	4b2c      	ldr	r3, [pc, #176]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e46:	2200      	movs	r2, #0
 8009e48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009e4a:	4b2b      	ldr	r3, [pc, #172]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e50:	4b29      	ldr	r3, [pc, #164]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e52:	2200      	movs	r2, #0
 8009e54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009e56:	4828      	ldr	r0, [pc, #160]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e58:	f004 fc16 	bl	800e688 <HAL_TIM_PWM_Init>
 8009e5c:	4603      	mov	r3, r0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8009e62:	f7ff fd0f 	bl	8009884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e66:	2300      	movs	r3, #0
 8009e68:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009e6e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009e72:	4619      	mov	r1, r3
 8009e74:	4820      	ldr	r0, [pc, #128]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009e76:	f005 f987 	bl	800f188 <HAL_TIMEx_MasterConfigSynchronization>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8009e80:	f7ff fd00 	bl	8009884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e84:	2360      	movs	r3, #96	; 0x60
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009e90:	2300      	movs	r3, #0
 8009e92:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4813      	ldr	r0, [pc, #76]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009eaa:	f004 fe0d 	bl	800eac8 <HAL_TIM_PWM_ConfigChannel>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8009eb4:	f7ff fce6 	bl	8009884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ed0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009ed6:	1d3b      	adds	r3, r7, #4
 8009ed8:	4619      	mov	r1, r3
 8009eda:	4807      	ldr	r0, [pc, #28]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009edc:	f005 f9d0 	bl	800f280 <HAL_TIMEx_ConfigBreakDeadTime>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d001      	beq.n	8009eea <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8009ee6:	f7ff fccd 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009eea:	4803      	ldr	r0, [pc, #12]	; (8009ef8 <MX_TIM1_Init+0x100>)
 8009eec:	f000 fa70 	bl	800a3d0 <HAL_TIM_MspPostInit>

}
 8009ef0:	bf00      	nop
 8009ef2:	3748      	adds	r7, #72	; 0x48
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	2000dc20 	.word	0x2000dc20
 8009efc:	40010000 	.word	0x40010000

08009f00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	; 0x28
 8009f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f06:	f107 0320 	add.w	r3, r7, #32
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	601a      	str	r2, [r3, #0]
 8009f0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009f10:	1d3b      	adds	r3, r7, #4
 8009f12:	2200      	movs	r2, #0
 8009f14:	601a      	str	r2, [r3, #0]
 8009f16:	605a      	str	r2, [r3, #4]
 8009f18:	609a      	str	r2, [r3, #8]
 8009f1a:	60da      	str	r2, [r3, #12]
 8009f1c:	611a      	str	r2, [r3, #16]
 8009f1e:	615a      	str	r2, [r3, #20]
 8009f20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009f22:	4b22      	ldr	r3, [pc, #136]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f24:	4a22      	ldr	r2, [pc, #136]	; (8009fb0 <MX_TIM4_Init+0xb0>)
 8009f26:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 8009f28:	4b20      	ldr	r3, [pc, #128]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f2a:	2223      	movs	r2, #35	; 0x23
 8009f2c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f2e:	4b1f      	ldr	r3, [pc, #124]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8009f34:	4b1d      	ldr	r3, [pc, #116]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f36:	f242 720f 	movw	r2, #9999	; 0x270f
 8009f3a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f3c:	4b1b      	ldr	r3, [pc, #108]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f42:	4b1a      	ldr	r3, [pc, #104]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009f48:	4818      	ldr	r0, [pc, #96]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f4a:	f004 fb9d 	bl	800e688 <HAL_TIM_PWM_Init>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d001      	beq.n	8009f58 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8009f54:	f7ff fc96 	bl	8009884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009f60:	f107 0320 	add.w	r3, r7, #32
 8009f64:	4619      	mov	r1, r3
 8009f66:	4811      	ldr	r0, [pc, #68]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f68:	f005 f90e 	bl	800f188 <HAL_TIMEx_MasterConfigSynchronization>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8009f72:	f7ff fc87 	bl	8009884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009f76:	2360      	movs	r3, #96	; 0x60
 8009f78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009f86:	1d3b      	adds	r3, r7, #4
 8009f88:	2208      	movs	r2, #8
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	4807      	ldr	r0, [pc, #28]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f8e:	f004 fd9b 	bl	800eac8 <HAL_TIM_PWM_ConfigChannel>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d001      	beq.n	8009f9c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8009f98:	f7ff fc74 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009f9c:	4803      	ldr	r0, [pc, #12]	; (8009fac <MX_TIM4_Init+0xac>)
 8009f9e:	f000 fa17 	bl	800a3d0 <HAL_TIM_MspPostInit>

}
 8009fa2:	bf00      	nop
 8009fa4:	3728      	adds	r7, #40	; 0x28
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	2000db00 	.word	0x2000db00
 8009fb0:	40000800 	.word	0x40000800

08009fb4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b08a      	sub	sp, #40	; 0x28
 8009fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fba:	f107 0320 	add.w	r3, r7, #32
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
 8009fc2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009fc4:	1d3b      	adds	r3, r7, #4
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	605a      	str	r2, [r3, #4]
 8009fcc:	609a      	str	r2, [r3, #8]
 8009fce:	60da      	str	r2, [r3, #12]
 8009fd0:	611a      	str	r2, [r3, #16]
 8009fd2:	615a      	str	r2, [r3, #20]
 8009fd4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009fd6:	4b2d      	ldr	r3, [pc, #180]	; (800a08c <MX_TIM5_Init+0xd8>)
 8009fd8:	4a2d      	ldr	r2, [pc, #180]	; (800a090 <MX_TIM5_Init+0xdc>)
 8009fda:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009fdc:	4b2b      	ldr	r3, [pc, #172]	; (800a08c <MX_TIM5_Init+0xd8>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fe2:	4b2a      	ldr	r3, [pc, #168]	; (800a08c <MX_TIM5_Init+0xd8>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009fe8:	4b28      	ldr	r3, [pc, #160]	; (800a08c <MX_TIM5_Init+0xd8>)
 8009fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009ff0:	4b26      	ldr	r3, [pc, #152]	; (800a08c <MX_TIM5_Init+0xd8>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ff6:	4b25      	ldr	r3, [pc, #148]	; (800a08c <MX_TIM5_Init+0xd8>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8009ffc:	4823      	ldr	r0, [pc, #140]	; (800a08c <MX_TIM5_Init+0xd8>)
 8009ffe:	f004 fb43 	bl	800e688 <HAL_TIM_PWM_Init>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800a008:	f7ff fc3c 	bl	8009884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a00c:	2300      	movs	r3, #0
 800a00e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a010:	2300      	movs	r3, #0
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a014:	f107 0320 	add.w	r3, r7, #32
 800a018:	4619      	mov	r1, r3
 800a01a:	481c      	ldr	r0, [pc, #112]	; (800a08c <MX_TIM5_Init+0xd8>)
 800a01c:	f005 f8b4 	bl	800f188 <HAL_TIMEx_MasterConfigSynchronization>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d001      	beq.n	800a02a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800a026:	f7ff fc2d 	bl	8009884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a02a:	2360      	movs	r3, #96	; 0x60
 800a02c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800a02e:	f242 7310 	movw	r3, #10000	; 0x2710
 800a032:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a034:	2300      	movs	r3, #0
 800a036:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a038:	2300      	movs	r3, #0
 800a03a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a03c:	1d3b      	adds	r3, r7, #4
 800a03e:	2200      	movs	r2, #0
 800a040:	4619      	mov	r1, r3
 800a042:	4812      	ldr	r0, [pc, #72]	; (800a08c <MX_TIM5_Init+0xd8>)
 800a044:	f004 fd40 	bl	800eac8 <HAL_TIM_PWM_ConfigChannel>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800a04e:	f7ff fc19 	bl	8009884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a052:	1d3b      	adds	r3, r7, #4
 800a054:	2204      	movs	r2, #4
 800a056:	4619      	mov	r1, r3
 800a058:	480c      	ldr	r0, [pc, #48]	; (800a08c <MX_TIM5_Init+0xd8>)
 800a05a:	f004 fd35 	bl	800eac8 <HAL_TIM_PWM_ConfigChannel>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 800a064:	f7ff fc0e 	bl	8009884 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a068:	1d3b      	adds	r3, r7, #4
 800a06a:	2208      	movs	r2, #8
 800a06c:	4619      	mov	r1, r3
 800a06e:	4807      	ldr	r0, [pc, #28]	; (800a08c <MX_TIM5_Init+0xd8>)
 800a070:	f004 fd2a 	bl	800eac8 <HAL_TIM_PWM_ConfigChannel>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 800a07a:	f7ff fc03 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800a07e:	4803      	ldr	r0, [pc, #12]	; (800a08c <MX_TIM5_Init+0xd8>)
 800a080:	f000 f9a6 	bl	800a3d0 <HAL_TIM_MspPostInit>

}
 800a084:	bf00      	nop
 800a086:	3728      	adds	r7, #40	; 0x28
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	2000db90 	.word	0x2000db90
 800a090:	40000c00 	.word	0x40000c00

0800a094 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b092      	sub	sp, #72	; 0x48
 800a098:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a09a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a0a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	605a      	str	r2, [r3, #4]
 800a0ae:	609a      	str	r2, [r3, #8]
 800a0b0:	60da      	str	r2, [r3, #12]
 800a0b2:	611a      	str	r2, [r3, #16]
 800a0b4:	615a      	str	r2, [r3, #20]
 800a0b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a0b8:	1d3b      	adds	r3, r7, #4
 800a0ba:	2220      	movs	r2, #32
 800a0bc:	2100      	movs	r1, #0
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f007 ff3a 	bl	8011f38 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a0c4:	4b33      	ldr	r3, [pc, #204]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0c6:	4a34      	ldr	r2, [pc, #208]	; (800a198 <MX_TIM8_Init+0x104>)
 800a0c8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 839;
 800a0ca:	4b32      	ldr	r3, [pc, #200]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0cc:	f240 3247 	movw	r2, #839	; 0x347
 800a0d0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0d2:	4b30      	ldr	r3, [pc, #192]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 800a0d8:	4b2e      	ldr	r3, [pc, #184]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0da:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800a0de:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0e0:	4b2c      	ldr	r3, [pc, #176]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a0e6:	4b2b      	ldr	r3, [pc, #172]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0ec:	4b29      	ldr	r3, [pc, #164]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a0f2:	4828      	ldr	r0, [pc, #160]	; (800a194 <MX_TIM8_Init+0x100>)
 800a0f4:	f004 fac8 	bl	800e688 <HAL_TIM_PWM_Init>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d001      	beq.n	800a102 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800a0fe:	f7ff fbc1 	bl	8009884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a102:	2300      	movs	r3, #0
 800a104:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a106:	2300      	movs	r3, #0
 800a108:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a10a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a10e:	4619      	mov	r1, r3
 800a110:	4820      	ldr	r0, [pc, #128]	; (800a194 <MX_TIM8_Init+0x100>)
 800a112:	f005 f839 	bl	800f188 <HAL_TIMEx_MasterConfigSynchronization>
 800a116:	4603      	mov	r3, r0
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d001      	beq.n	800a120 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 800a11c:	f7ff fbb2 	bl	8009884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a120:	2360      	movs	r3, #96	; 0x60
 800a122:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a128:	2300      	movs	r3, #0
 800a12a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a12c:	2300      	movs	r3, #0
 800a12e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a130:	2300      	movs	r3, #0
 800a132:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a134:	2300      	movs	r3, #0
 800a136:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a138:	2300      	movs	r3, #0
 800a13a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a13c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a140:	2204      	movs	r2, #4
 800a142:	4619      	mov	r1, r3
 800a144:	4813      	ldr	r0, [pc, #76]	; (800a194 <MX_TIM8_Init+0x100>)
 800a146:	f004 fcbf 	bl	800eac8 <HAL_TIM_PWM_ConfigChannel>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d001      	beq.n	800a154 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 800a150:	f7ff fb98 	bl	8009884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a154:	2300      	movs	r3, #0
 800a156:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a158:	2300      	movs	r3, #0
 800a15a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a164:	2300      	movs	r3, #0
 800a166:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a16c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a16e:	2300      	movs	r3, #0
 800a170:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a172:	1d3b      	adds	r3, r7, #4
 800a174:	4619      	mov	r1, r3
 800a176:	4807      	ldr	r0, [pc, #28]	; (800a194 <MX_TIM8_Init+0x100>)
 800a178:	f005 f882 	bl	800f280 <HAL_TIMEx_ConfigBreakDeadTime>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 800a182:	f7ff fb7f 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a186:	4803      	ldr	r0, [pc, #12]	; (800a194 <MX_TIM8_Init+0x100>)
 800a188:	f000 f922 	bl	800a3d0 <HAL_TIM_MspPostInit>

}
 800a18c:	bf00      	nop
 800a18e:	3748      	adds	r7, #72	; 0x48
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	2000dab8 	.word	0x2000dab8
 800a198:	40010400 	.word	0x40010400

0800a19c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b088      	sub	sp, #32
 800a1a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800a1a2:	1d3b      	adds	r3, r7, #4
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	601a      	str	r2, [r3, #0]
 800a1a8:	605a      	str	r2, [r3, #4]
 800a1aa:	609a      	str	r2, [r3, #8]
 800a1ac:	60da      	str	r2, [r3, #12]
 800a1ae:	611a      	str	r2, [r3, #16]
 800a1b0:	615a      	str	r2, [r3, #20]
 800a1b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800a1b4:	4b1e      	ldr	r3, [pc, #120]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1b6:	4a1f      	ldr	r2, [pc, #124]	; (800a234 <MX_TIM10_Init+0x98>)
 800a1b8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800a1ba:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1bc:	2200      	movs	r2, #0
 800a1be:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1c0:	4b1b      	ldr	r3, [pc, #108]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3999;
 800a1c6:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1c8:	f640 729f 	movw	r2, #3999	; 0xf9f
 800a1cc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1ce:	4b18      	ldr	r3, [pc, #96]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1d4:	4b16      	ldr	r3, [pc, #88]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800a1da:	4815      	ldr	r0, [pc, #84]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1dc:	f004 f994 	bl	800e508 <HAL_TIM_Base_Init>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d001      	beq.n	800a1ea <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800a1e6:	f7ff fb4d 	bl	8009884 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800a1ea:	4811      	ldr	r0, [pc, #68]	; (800a230 <MX_TIM10_Init+0x94>)
 800a1ec:	f004 fa4c 	bl	800e688 <HAL_TIM_PWM_Init>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800a1f6:	f7ff fb45 	bl	8009884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a1fa:	2360      	movs	r3, #96	; 0x60
 800a1fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a206:	2300      	movs	r3, #0
 800a208:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a20a:	1d3b      	adds	r3, r7, #4
 800a20c:	2200      	movs	r2, #0
 800a20e:	4619      	mov	r1, r3
 800a210:	4807      	ldr	r0, [pc, #28]	; (800a230 <MX_TIM10_Init+0x94>)
 800a212:	f004 fc59 	bl	800eac8 <HAL_TIM_PWM_ConfigChannel>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 800a21c:	f7ff fb32 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800a220:	4803      	ldr	r0, [pc, #12]	; (800a230 <MX_TIM10_Init+0x94>)
 800a222:	f000 f8d5 	bl	800a3d0 <HAL_TIM_MspPostInit>

}
 800a226:	bf00      	nop
 800a228:	3720      	adds	r7, #32
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	2000db48 	.word	0x2000db48
 800a234:	40014400 	.word	0x40014400

0800a238 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800a23c:	4b0e      	ldr	r3, [pc, #56]	; (800a278 <MX_TIM13_Init+0x40>)
 800a23e:	4a0f      	ldr	r2, [pc, #60]	; (800a27c <MX_TIM13_Init+0x44>)
 800a240:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 839;
 800a242:	4b0d      	ldr	r3, [pc, #52]	; (800a278 <MX_TIM13_Init+0x40>)
 800a244:	f240 3247 	movw	r2, #839	; 0x347
 800a248:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a24a:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <MX_TIM13_Init+0x40>)
 800a24c:	2200      	movs	r2, #0
 800a24e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800a250:	4b09      	ldr	r3, [pc, #36]	; (800a278 <MX_TIM13_Init+0x40>)
 800a252:	f242 720f 	movw	r2, #9999	; 0x270f
 800a256:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a258:	4b07      	ldr	r3, [pc, #28]	; (800a278 <MX_TIM13_Init+0x40>)
 800a25a:	2200      	movs	r2, #0
 800a25c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a25e:	4b06      	ldr	r3, [pc, #24]	; (800a278 <MX_TIM13_Init+0x40>)
 800a260:	2200      	movs	r2, #0
 800a262:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800a264:	4804      	ldr	r0, [pc, #16]	; (800a278 <MX_TIM13_Init+0x40>)
 800a266:	f004 f94f 	bl	800e508 <HAL_TIM_Base_Init>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 800a270:	f7ff fb08 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800a274:	bf00      	nop
 800a276:	bd80      	pop	{r7, pc}
 800a278:	2000dbd8 	.word	0x2000dbd8
 800a27c:	40001c00 	.word	0x40001c00

0800a280 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a2c      	ldr	r2, [pc, #176]	; (800a340 <HAL_TIM_PWM_MspInit+0xc0>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d10e      	bne.n	800a2b0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a292:	2300      	movs	r3, #0
 800a294:	617b      	str	r3, [r7, #20]
 800a296:	4b2b      	ldr	r3, [pc, #172]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a29a:	4a2a      	ldr	r2, [pc, #168]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a29c:	f043 0301 	orr.w	r3, r3, #1
 800a2a0:	6453      	str	r3, [r2, #68]	; 0x44
 800a2a2:	4b28      	ldr	r3, [pc, #160]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a2a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2a6:	f003 0301 	and.w	r3, r3, #1
 800a2aa:	617b      	str	r3, [r7, #20]
 800a2ac:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800a2ae:	e042      	b.n	800a336 <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM4)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a24      	ldr	r2, [pc, #144]	; (800a348 <HAL_TIM_PWM_MspInit+0xc8>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d10e      	bne.n	800a2d8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	613b      	str	r3, [r7, #16]
 800a2be:	4b21      	ldr	r3, [pc, #132]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c2:	4a20      	ldr	r2, [pc, #128]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a2c4:	f043 0304 	orr.w	r3, r3, #4
 800a2c8:	6413      	str	r3, [r2, #64]	; 0x40
 800a2ca:	4b1e      	ldr	r3, [pc, #120]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	f003 0304 	and.w	r3, r3, #4
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	693b      	ldr	r3, [r7, #16]
}
 800a2d6:	e02e      	b.n	800a336 <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM5)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	4a1b      	ldr	r2, [pc, #108]	; (800a34c <HAL_TIM_PWM_MspInit+0xcc>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d10e      	bne.n	800a300 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	4b17      	ldr	r3, [pc, #92]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ea:	4a16      	ldr	r2, [pc, #88]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a2ec:	f043 0308 	orr.w	r3, r3, #8
 800a2f0:	6413      	str	r3, [r2, #64]	; 0x40
 800a2f2:	4b14      	ldr	r3, [pc, #80]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	f003 0308 	and.w	r3, r3, #8
 800a2fa:	60fb      	str	r3, [r7, #12]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
}
 800a2fe:	e01a      	b.n	800a336 <HAL_TIM_PWM_MspInit+0xb6>
  else if(tim_pwmHandle->Instance==TIM8)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a12      	ldr	r2, [pc, #72]	; (800a350 <HAL_TIM_PWM_MspInit+0xd0>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d115      	bne.n	800a336 <HAL_TIM_PWM_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a30a:	2300      	movs	r3, #0
 800a30c:	60bb      	str	r3, [r7, #8]
 800a30e:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a312:	4a0c      	ldr	r2, [pc, #48]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a314:	f043 0302 	orr.w	r3, r3, #2
 800a318:	6453      	str	r3, [r2, #68]	; 0x44
 800a31a:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <HAL_TIM_PWM_MspInit+0xc4>)
 800a31c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	60bb      	str	r3, [r7, #8]
 800a324:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800a326:	2200      	movs	r2, #0
 800a328:	2105      	movs	r1, #5
 800a32a:	202c      	movs	r0, #44	; 0x2c
 800a32c:	f001 fb8d 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800a330:	202c      	movs	r0, #44	; 0x2c
 800a332:	f001 fba6 	bl	800ba82 <HAL_NVIC_EnableIRQ>
}
 800a336:	bf00      	nop
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	40010000 	.word	0x40010000
 800a344:	40023800 	.word	0x40023800
 800a348:	40000800 	.word	0x40000800
 800a34c:	40000c00 	.word	0x40000c00
 800a350:	40010400 	.word	0x40010400

0800a354 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a18      	ldr	r2, [pc, #96]	; (800a3c4 <HAL_TIM_Base_MspInit+0x70>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d10e      	bne.n	800a384 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800a366:	2300      	movs	r3, #0
 800a368:	60fb      	str	r3, [r7, #12]
 800a36a:	4b17      	ldr	r3, [pc, #92]	; (800a3c8 <HAL_TIM_Base_MspInit+0x74>)
 800a36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a36e:	4a16      	ldr	r2, [pc, #88]	; (800a3c8 <HAL_TIM_Base_MspInit+0x74>)
 800a370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a374:	6453      	str	r3, [r2, #68]	; 0x44
 800a376:	4b14      	ldr	r3, [pc, #80]	; (800a3c8 <HAL_TIM_Base_MspInit+0x74>)
 800a378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a37a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800a382:	e01a      	b.n	800a3ba <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a10      	ldr	r2, [pc, #64]	; (800a3cc <HAL_TIM_Base_MspInit+0x78>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d115      	bne.n	800a3ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800a38e:	2300      	movs	r3, #0
 800a390:	60bb      	str	r3, [r7, #8]
 800a392:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <HAL_TIM_Base_MspInit+0x74>)
 800a394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a396:	4a0c      	ldr	r2, [pc, #48]	; (800a3c8 <HAL_TIM_Base_MspInit+0x74>)
 800a398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a39c:	6413      	str	r3, [r2, #64]	; 0x40
 800a39e:	4b0a      	ldr	r3, [pc, #40]	; (800a3c8 <HAL_TIM_Base_MspInit+0x74>)
 800a3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3a6:	60bb      	str	r3, [r7, #8]
 800a3a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2105      	movs	r1, #5
 800a3ae:	202c      	movs	r0, #44	; 0x2c
 800a3b0:	f001 fb4b 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800a3b4:	202c      	movs	r0, #44	; 0x2c
 800a3b6:	f001 fb64 	bl	800ba82 <HAL_NVIC_EnableIRQ>
}
 800a3ba:	bf00      	nop
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
 800a3c2:	bf00      	nop
 800a3c4:	40014400 	.word	0x40014400
 800a3c8:	40023800 	.word	0x40023800
 800a3cc:	40001c00 	.word	0x40001c00

0800a3d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08c      	sub	sp, #48	; 0x30
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3d8:	f107 031c 	add.w	r3, r7, #28
 800a3dc:	2200      	movs	r2, #0
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	605a      	str	r2, [r3, #4]
 800a3e2:	609a      	str	r2, [r3, #8]
 800a3e4:	60da      	str	r2, [r3, #12]
 800a3e6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a5b      	ldr	r2, [pc, #364]	; (800a55c <HAL_TIM_MspPostInit+0x18c>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d11f      	bne.n	800a432 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	4b5a      	ldr	r3, [pc, #360]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a3f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3fa:	4a59      	ldr	r2, [pc, #356]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a3fc:	f043 0310 	orr.w	r3, r3, #16
 800a400:	6313      	str	r3, [r2, #48]	; 0x30
 800a402:	4b57      	ldr	r3, [pc, #348]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a406:	f003 0310 	and.w	r3, r3, #16
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a40e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a414:	2302      	movs	r3, #2
 800a416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a418:	2300      	movs	r3, #0
 800a41a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a41c:	2300      	movs	r3, #0
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800a420:	2301      	movs	r3, #1
 800a422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a424:	f107 031c 	add.w	r3, r7, #28
 800a428:	4619      	mov	r1, r3
 800a42a:	484e      	ldr	r0, [pc, #312]	; (800a564 <HAL_TIM_MspPostInit+0x194>)
 800a42c:	f001 ff46 	bl	800c2bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800a430:	e08f      	b.n	800a552 <HAL_TIM_MspPostInit+0x182>
  else if(timHandle->Instance==TIM4)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a4c      	ldr	r2, [pc, #304]	; (800a568 <HAL_TIM_MspPostInit+0x198>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d11f      	bne.n	800a47c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a43c:	2300      	movs	r3, #0
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	4b47      	ldr	r3, [pc, #284]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a444:	4a46      	ldr	r2, [pc, #280]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a446:	f043 0308 	orr.w	r3, r3, #8
 800a44a:	6313      	str	r3, [r2, #48]	; 0x30
 800a44c:	4b44      	ldr	r3, [pc, #272]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a450:	f003 0308 	and.w	r3, r3, #8
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Buzzer_Pin_Pin;
 800a458:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a45c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a45e:	2302      	movs	r3, #2
 800a460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a462:	2300      	movs	r3, #0
 800a464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a466:	2300      	movs	r3, #0
 800a468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800a46a:	2302      	movs	r3, #2
 800a46c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Buzzer_Pin_GPIO_Port, &GPIO_InitStruct);
 800a46e:	f107 031c 	add.w	r3, r7, #28
 800a472:	4619      	mov	r1, r3
 800a474:	483d      	ldr	r0, [pc, #244]	; (800a56c <HAL_TIM_MspPostInit+0x19c>)
 800a476:	f001 ff21 	bl	800c2bc <HAL_GPIO_Init>
}
 800a47a:	e06a      	b.n	800a552 <HAL_TIM_MspPostInit+0x182>
  else if(timHandle->Instance==TIM5)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a3b      	ldr	r2, [pc, #236]	; (800a570 <HAL_TIM_MspPostInit+0x1a0>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d11e      	bne.n	800a4c4 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a486:	2300      	movs	r3, #0
 800a488:	613b      	str	r3, [r7, #16]
 800a48a:	4b35      	ldr	r3, [pc, #212]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a48e:	4a34      	ldr	r2, [pc, #208]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a490:	f043 0301 	orr.w	r3, r3, #1
 800a494:	6313      	str	r3, [r2, #48]	; 0x30
 800a496:	4b32      	ldr	r3, [pc, #200]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a49a:	f003 0301 	and.w	r3, r3, #1
 800a49e:	613b      	str	r3, [r7, #16]
 800a4a0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2;
 800a4a2:	2307      	movs	r3, #7
 800a4a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4a6:	2302      	movs	r3, #2
 800a4a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4b6:	f107 031c 	add.w	r3, r7, #28
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	482d      	ldr	r0, [pc, #180]	; (800a574 <HAL_TIM_MspPostInit+0x1a4>)
 800a4be:	f001 fefd 	bl	800c2bc <HAL_GPIO_Init>
}
 800a4c2:	e046      	b.n	800a552 <HAL_TIM_MspPostInit+0x182>
  else if(timHandle->Instance==TIM8)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a2b      	ldr	r2, [pc, #172]	; (800a578 <HAL_TIM_MspPostInit+0x1a8>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d11e      	bne.n	800a50c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	4b23      	ldr	r3, [pc, #140]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d6:	4a22      	ldr	r2, [pc, #136]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a4d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a4de:	4b20      	ldr	r3, [pc, #128]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo_Motor_Pin_Pin;
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Motor_Pin_GPIO_Port, &GPIO_InitStruct);
 800a4fe:	f107 031c 	add.w	r3, r7, #28
 800a502:	4619      	mov	r1, r3
 800a504:	481d      	ldr	r0, [pc, #116]	; (800a57c <HAL_TIM_MspPostInit+0x1ac>)
 800a506:	f001 fed9 	bl	800c2bc <HAL_GPIO_Init>
}
 800a50a:	e022      	b.n	800a552 <HAL_TIM_MspPostInit+0x182>
  else if(timHandle->Instance==TIM10)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a1b      	ldr	r2, [pc, #108]	; (800a580 <HAL_TIM_MspPostInit+0x1b0>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d11d      	bne.n	800a552 <HAL_TIM_MspPostInit+0x182>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a516:	2300      	movs	r3, #0
 800a518:	60bb      	str	r3, [r7, #8]
 800a51a:	4b11      	ldr	r3, [pc, #68]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a51e:	4a10      	ldr	r2, [pc, #64]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a520:	f043 0320 	orr.w	r3, r3, #32
 800a524:	6313      	str	r3, [r2, #48]	; 0x30
 800a526:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <HAL_TIM_MspPostInit+0x190>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	f003 0320 	and.w	r3, r3, #32
 800a52e:	60bb      	str	r3, [r7, #8]
 800a530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMU_Heat_Pin_Pin;
 800a532:	2340      	movs	r3, #64	; 0x40
 800a534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a536:	2302      	movs	r3, #2
 800a538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a53a:	2300      	movs	r3, #0
 800a53c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a53e:	2300      	movs	r3, #0
 800a540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800a542:	2303      	movs	r3, #3
 800a544:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMU_Heat_Pin_GPIO_Port, &GPIO_InitStruct);
 800a546:	f107 031c 	add.w	r3, r7, #28
 800a54a:	4619      	mov	r1, r3
 800a54c:	480d      	ldr	r0, [pc, #52]	; (800a584 <HAL_TIM_MspPostInit+0x1b4>)
 800a54e:	f001 feb5 	bl	800c2bc <HAL_GPIO_Init>
}
 800a552:	bf00      	nop
 800a554:	3730      	adds	r7, #48	; 0x30
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	40010000 	.word	0x40010000
 800a560:	40023800 	.word	0x40023800
 800a564:	40021000 	.word	0x40021000
 800a568:	40000800 	.word	0x40000800
 800a56c:	40020c00 	.word	0x40020c00
 800a570:	40000c00 	.word	0x40000c00
 800a574:	40020000 	.word	0x40020000
 800a578:	40010400 	.word	0x40010400
 800a57c:	40022000 	.word	0x40022000
 800a580:	40014400 	.word	0x40014400
 800a584:	40021400 	.word	0x40021400

0800a588 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart6_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a58c:	4b11      	ldr	r3, [pc, #68]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a58e:	4a12      	ldr	r2, [pc, #72]	; (800a5d8 <MX_USART1_UART_Init+0x50>)
 800a590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a59a:	4b0e      	ldr	r3, [pc, #56]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a59c:	2200      	movs	r2, #0
 800a59e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a5a0:	4b0c      	ldr	r3, [pc, #48]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a5a6:	4b0b      	ldr	r3, [pc, #44]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a5ae:	220c      	movs	r2, #12
 800a5b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a5b2:	4b08      	ldr	r3, [pc, #32]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a5b8:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a5be:	4805      	ldr	r0, [pc, #20]	; (800a5d4 <MX_USART1_UART_Init+0x4c>)
 800a5c0:	f004 fec4 	bl	800f34c <HAL_UART_Init>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800a5ca:	f7ff f95b 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a5ce:	bf00      	nop
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	2000de8c 	.word	0x2000de8c
 800a5d8:	40011000 	.word	0x40011000

0800a5dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a5e0:	4b11      	ldr	r3, [pc, #68]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a5e2:	4a12      	ldr	r2, [pc, #72]	; (800a62c <MX_USART3_UART_Init+0x50>)
 800a5e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800a5e6:	4b10      	ldr	r3, [pc, #64]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a5e8:	4a11      	ldr	r2, [pc, #68]	; (800a630 <MX_USART3_UART_Init+0x54>)
 800a5ea:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a5ec:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a5f2:	4b0d      	ldr	r3, [pc, #52]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800a5f8:	4b0b      	ldr	r3, [pc, #44]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a5fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a600:	4b09      	ldr	r3, [pc, #36]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a602:	220c      	movs	r2, #12
 800a604:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a606:	4b08      	ldr	r3, [pc, #32]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a608:	2200      	movs	r2, #0
 800a60a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a60c:	4b06      	ldr	r3, [pc, #24]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a60e:	2200      	movs	r2, #0
 800a610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a612:	4805      	ldr	r0, [pc, #20]	; (800a628 <MX_USART3_UART_Init+0x4c>)
 800a614:	f004 fe9a 	bl	800f34c <HAL_UART_Init>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d001      	beq.n	800a622 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a61e:	f7ff f931 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
//  HAL_UART_Receive_IT(&huart3, rc_rx_buffer, DBUS_BUFFER_LEN);
  /* USER CODE END USART3_Init 2 */

}
 800a622:	bf00      	nop
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	2000dd28 	.word	0x2000dd28
 800a62c:	40004800 	.word	0x40004800
 800a630:	000186a0 	.word	0x000186a0

0800a634 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800a638:	4b11      	ldr	r3, [pc, #68]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a63a:	4a12      	ldr	r2, [pc, #72]	; (800a684 <MX_USART6_UART_Init+0x50>)
 800a63c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800a63e:	4b10      	ldr	r3, [pc, #64]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a644:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800a646:	4b0e      	ldr	r3, [pc, #56]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a648:	2200      	movs	r2, #0
 800a64a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800a64c:	4b0c      	ldr	r3, [pc, #48]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a64e:	2200      	movs	r2, #0
 800a650:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800a652:	4b0b      	ldr	r3, [pc, #44]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a654:	2200      	movs	r2, #0
 800a656:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800a658:	4b09      	ldr	r3, [pc, #36]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a65a:	220c      	movs	r2, #12
 800a65c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a65e:	4b08      	ldr	r3, [pc, #32]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a660:	2200      	movs	r2, #0
 800a662:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800a664:	4b06      	ldr	r3, [pc, #24]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a666:	2200      	movs	r2, #0
 800a668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800a66a:	4805      	ldr	r0, [pc, #20]	; (800a680 <MX_USART6_UART_Init+0x4c>)
 800a66c:	f004 fe6e 	bl	800f34c <HAL_UART_Init>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800a676:	f7ff f905 	bl	8009884 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800a67a:	bf00      	nop
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	2000ded0 	.word	0x2000ded0
 800a684:	40011400 	.word	0x40011400

0800a688 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08e      	sub	sp, #56	; 0x38
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a694:	2200      	movs	r2, #0
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	605a      	str	r2, [r3, #4]
 800a69a:	609a      	str	r2, [r3, #8]
 800a69c:	60da      	str	r2, [r3, #12]
 800a69e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a8c      	ldr	r2, [pc, #560]	; (800a8d8 <HAL_UART_MspInit+0x250>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	f040 80b2 	bne.w	800a810 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	623b      	str	r3, [r7, #32]
 800a6b0:	4b8a      	ldr	r3, [pc, #552]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6b4:	4a89      	ldr	r2, [pc, #548]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6b6:	f043 0310 	orr.w	r3, r3, #16
 800a6ba:	6453      	str	r3, [r2, #68]	; 0x44
 800a6bc:	4b87      	ldr	r3, [pc, #540]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6c0:	f003 0310 	and.w	r3, r3, #16
 800a6c4:	623b      	str	r3, [r7, #32]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]
 800a6cc:	4b83      	ldr	r3, [pc, #524]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d0:	4a82      	ldr	r2, [pc, #520]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6d2:	f043 0302 	orr.w	r3, r3, #2
 800a6d6:	6313      	str	r3, [r2, #48]	; 0x30
 800a6d8:	4b80      	ldr	r3, [pc, #512]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	61bb      	str	r3, [r7, #24]
 800a6e8:	4b7c      	ldr	r3, [pc, #496]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ec:	4a7b      	ldr	r2, [pc, #492]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6ee:	f043 0301 	orr.w	r3, r3, #1
 800a6f2:	6313      	str	r3, [r2, #48]	; 0x30
 800a6f4:	4b79      	ldr	r3, [pc, #484]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f8:	f003 0301 	and.w	r3, r3, #1
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a700:	2380      	movs	r3, #128	; 0x80
 800a702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a704:	2302      	movs	r3, #2
 800a706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a708:	2300      	movs	r3, #0
 800a70a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a70c:	2303      	movs	r3, #3
 800a70e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a710:	2307      	movs	r3, #7
 800a712:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a718:	4619      	mov	r1, r3
 800a71a:	4871      	ldr	r0, [pc, #452]	; (800a8e0 <HAL_UART_MspInit+0x258>)
 800a71c:	f001 fdce 	bl	800c2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a720:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a726:	2302      	movs	r3, #2
 800a728:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a72e:	2303      	movs	r3, #3
 800a730:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a732:	2307      	movs	r3, #7
 800a734:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a73a:	4619      	mov	r1, r3
 800a73c:	4869      	ldr	r0, [pc, #420]	; (800a8e4 <HAL_UART_MspInit+0x25c>)
 800a73e:	f001 fdbd 	bl	800c2bc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800a742:	4b69      	ldr	r3, [pc, #420]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a744:	4a69      	ldr	r2, [pc, #420]	; (800a8ec <HAL_UART_MspInit+0x264>)
 800a746:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a748:	4b67      	ldr	r3, [pc, #412]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a74a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a74e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a750:	4b65      	ldr	r3, [pc, #404]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a752:	2200      	movs	r2, #0
 800a754:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a756:	4b64      	ldr	r3, [pc, #400]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a758:	2200      	movs	r2, #0
 800a75a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a75c:	4b62      	ldr	r3, [pc, #392]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a75e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a762:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a764:	4b60      	ldr	r3, [pc, #384]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a766:	2200      	movs	r2, #0
 800a768:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a76a:	4b5f      	ldr	r3, [pc, #380]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800a770:	4b5d      	ldr	r3, [pc, #372]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a772:	2200      	movs	r2, #0
 800a774:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a776:	4b5c      	ldr	r3, [pc, #368]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a778:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a77c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a77e:	4b5a      	ldr	r3, [pc, #360]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a780:	2200      	movs	r2, #0
 800a782:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a784:	4858      	ldr	r0, [pc, #352]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a786:	f001 f997 	bl	800bab8 <HAL_DMA_Init>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d001      	beq.n	800a794 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800a790:	f7ff f878 	bl	8009884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a54      	ldr	r2, [pc, #336]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a798:	639a      	str	r2, [r3, #56]	; 0x38
 800a79a:	4a53      	ldr	r2, [pc, #332]	; (800a8e8 <HAL_UART_MspInit+0x260>)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a7a0:	4b53      	ldr	r3, [pc, #332]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7a2:	4a54      	ldr	r2, [pc, #336]	; (800a8f4 <HAL_UART_MspInit+0x26c>)
 800a7a4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a7a6:	4b52      	ldr	r3, [pc, #328]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a7ac:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a7ae:	4b50      	ldr	r3, [pc, #320]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7b0:	2240      	movs	r2, #64	; 0x40
 800a7b2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7b4:	4b4e      	ldr	r3, [pc, #312]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a7ba:	4b4d      	ldr	r3, [pc, #308]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a7c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7c2:	4b4b      	ldr	r3, [pc, #300]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7c8:	4b49      	ldr	r3, [pc, #292]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a7ce:	4b48      	ldr	r3, [pc, #288]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800a7d4:	4b46      	ldr	r3, [pc, #280]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a7da:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a7dc:	4b44      	ldr	r3, [pc, #272]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7de:	2200      	movs	r2, #0
 800a7e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a7e2:	4843      	ldr	r0, [pc, #268]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7e4:	f001 f968 	bl	800bab8 <HAL_DMA_Init>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800a7ee:	f7ff f849 	bl	8009884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a3e      	ldr	r2, [pc, #248]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7f6:	635a      	str	r2, [r3, #52]	; 0x34
 800a7f8:	4a3d      	ldr	r2, [pc, #244]	; (800a8f0 <HAL_UART_MspInit+0x268>)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a7fe:	2200      	movs	r2, #0
 800a800:	2105      	movs	r1, #5
 800a802:	2025      	movs	r0, #37	; 0x25
 800a804:	f001 f921 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a808:	2025      	movs	r0, #37	; 0x25
 800a80a:	f001 f93a 	bl	800ba82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800a80e:	e10c      	b.n	800aa2a <HAL_UART_MspInit+0x3a2>
  else if(uartHandle->Instance==USART3)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a38      	ldr	r2, [pc, #224]	; (800a8f8 <HAL_UART_MspInit+0x270>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d176      	bne.n	800a908 <HAL_UART_MspInit+0x280>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
 800a81e:	4b2f      	ldr	r3, [pc, #188]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	4a2e      	ldr	r2, [pc, #184]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a828:	6413      	str	r3, [r2, #64]	; 0x40
 800a82a:	4b2c      	ldr	r3, [pc, #176]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a82c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a836:	2300      	movs	r3, #0
 800a838:	613b      	str	r3, [r7, #16]
 800a83a:	4b28      	ldr	r3, [pc, #160]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a83c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83e:	4a27      	ldr	r2, [pc, #156]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a840:	f043 0304 	orr.w	r3, r3, #4
 800a844:	6313      	str	r3, [r2, #48]	; 0x30
 800a846:	4b25      	ldr	r3, [pc, #148]	; (800a8dc <HAL_UART_MspInit+0x254>)
 800a848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84a:	f003 0304 	and.w	r3, r3, #4
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800a852:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a858:	2302      	movs	r3, #2
 800a85a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a860:	2303      	movs	r3, #3
 800a862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a864:	2307      	movs	r3, #7
 800a866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a86c:	4619      	mov	r1, r3
 800a86e:	4823      	ldr	r0, [pc, #140]	; (800a8fc <HAL_UART_MspInit+0x274>)
 800a870:	f001 fd24 	bl	800c2bc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a874:	4b22      	ldr	r3, [pc, #136]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a876:	4a23      	ldr	r2, [pc, #140]	; (800a904 <HAL_UART_MspInit+0x27c>)
 800a878:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a87a:	4b21      	ldr	r3, [pc, #132]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a87c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a880:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a882:	4b1f      	ldr	r3, [pc, #124]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a884:	2200      	movs	r2, #0
 800a886:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a888:	4b1d      	ldr	r3, [pc, #116]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a88e:	4b1c      	ldr	r3, [pc, #112]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a890:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a894:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a896:	4b1a      	ldr	r3, [pc, #104]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a898:	2200      	movs	r2, #0
 800a89a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a89c:	4b18      	ldr	r3, [pc, #96]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800a8a2:	4b17      	ldr	r3, [pc, #92]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a8a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a8aa:	4b15      	ldr	r3, [pc, #84]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a8ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a8b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a8b2:	4b13      	ldr	r3, [pc, #76]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a8b8:	4811      	ldr	r0, [pc, #68]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a8ba:	f001 f8fd 	bl	800bab8 <HAL_DMA_Init>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800a8c4:	f7fe ffde 	bl	8009884 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a0d      	ldr	r2, [pc, #52]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a8cc:	639a      	str	r2, [r3, #56]	; 0x38
 800a8ce:	4a0c      	ldr	r2, [pc, #48]	; (800a900 <HAL_UART_MspInit+0x278>)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a8d4:	e0a9      	b.n	800aa2a <HAL_UART_MspInit+0x3a2>
 800a8d6:	bf00      	nop
 800a8d8:	40011000 	.word	0x40011000
 800a8dc:	40023800 	.word	0x40023800
 800a8e0:	40020400 	.word	0x40020400
 800a8e4:	40020000 	.word	0x40020000
 800a8e8:	2000de2c 	.word	0x2000de2c
 800a8ec:	40026488 	.word	0x40026488
 800a8f0:	2000dd6c 	.word	0x2000dd6c
 800a8f4:	400264b8 	.word	0x400264b8
 800a8f8:	40004800 	.word	0x40004800
 800a8fc:	40020800 	.word	0x40020800
 800a900:	2000dcc8 	.word	0x2000dcc8
 800a904:	40026028 	.word	0x40026028
  else if(uartHandle->Instance==USART6)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a49      	ldr	r2, [pc, #292]	; (800aa34 <HAL_UART_MspInit+0x3ac>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	f040 808b 	bne.w	800aa2a <HAL_UART_MspInit+0x3a2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800a914:	2300      	movs	r3, #0
 800a916:	60fb      	str	r3, [r7, #12]
 800a918:	4b47      	ldr	r3, [pc, #284]	; (800aa38 <HAL_UART_MspInit+0x3b0>)
 800a91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91c:	4a46      	ldr	r2, [pc, #280]	; (800aa38 <HAL_UART_MspInit+0x3b0>)
 800a91e:	f043 0320 	orr.w	r3, r3, #32
 800a922:	6453      	str	r3, [r2, #68]	; 0x44
 800a924:	4b44      	ldr	r3, [pc, #272]	; (800aa38 <HAL_UART_MspInit+0x3b0>)
 800a926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a928:	f003 0320 	and.w	r3, r3, #32
 800a92c:	60fb      	str	r3, [r7, #12]
 800a92e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a930:	2300      	movs	r3, #0
 800a932:	60bb      	str	r3, [r7, #8]
 800a934:	4b40      	ldr	r3, [pc, #256]	; (800aa38 <HAL_UART_MspInit+0x3b0>)
 800a936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a938:	4a3f      	ldr	r2, [pc, #252]	; (800aa38 <HAL_UART_MspInit+0x3b0>)
 800a93a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a93e:	6313      	str	r3, [r2, #48]	; 0x30
 800a940:	4b3d      	ldr	r3, [pc, #244]	; (800aa38 <HAL_UART_MspInit+0x3b0>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a948:	60bb      	str	r3, [r7, #8]
 800a94a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800a94c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800a950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a952:	2302      	movs	r3, #2
 800a954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a956:	2300      	movs	r3, #0
 800a958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a95a:	2303      	movs	r3, #3
 800a95c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800a95e:	2308      	movs	r3, #8
 800a960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a966:	4619      	mov	r1, r3
 800a968:	4834      	ldr	r0, [pc, #208]	; (800aa3c <HAL_UART_MspInit+0x3b4>)
 800a96a:	f001 fca7 	bl	800c2bc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800a96e:	4b34      	ldr	r3, [pc, #208]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a970:	4a34      	ldr	r2, [pc, #208]	; (800aa44 <HAL_UART_MspInit+0x3bc>)
 800a972:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800a974:	4b32      	ldr	r3, [pc, #200]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a976:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800a97a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a97c:	4b30      	ldr	r3, [pc, #192]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a97e:	2200      	movs	r2, #0
 800a980:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a982:	4b2f      	ldr	r3, [pc, #188]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a984:	2200      	movs	r2, #0
 800a986:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a988:	4b2d      	ldr	r3, [pc, #180]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a98a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a98e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a990:	4b2b      	ldr	r3, [pc, #172]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a992:	2200      	movs	r2, #0
 800a994:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a996:	4b2a      	ldr	r3, [pc, #168]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a998:	2200      	movs	r2, #0
 800a99a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 800a99c:	4b28      	ldr	r3, [pc, #160]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a99e:	2200      	movs	r2, #0
 800a9a0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a9a2:	4b27      	ldr	r3, [pc, #156]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a9a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a9a8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a9aa:	4b25      	ldr	r3, [pc, #148]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800a9b0:	4823      	ldr	r0, [pc, #140]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a9b2:	f001 f881 	bl	800bab8 <HAL_DMA_Init>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d001      	beq.n	800a9c0 <HAL_UART_MspInit+0x338>
      Error_Handler();
 800a9bc:	f7fe ff62 	bl	8009884 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a1f      	ldr	r2, [pc, #124]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a9c4:	639a      	str	r2, [r3, #56]	; 0x38
 800a9c6:	4a1e      	ldr	r2, [pc, #120]	; (800aa40 <HAL_UART_MspInit+0x3b8>)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800a9cc:	4b1e      	ldr	r3, [pc, #120]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9ce:	4a1f      	ldr	r2, [pc, #124]	; (800aa4c <HAL_UART_MspInit+0x3c4>)
 800a9d0:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800a9d2:	4b1d      	ldr	r3, [pc, #116]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9d4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800a9d8:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9da:	4b1b      	ldr	r3, [pc, #108]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9dc:	2240      	movs	r2, #64	; 0x40
 800a9de:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9e0:	4b19      	ldr	r3, [pc, #100]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a9e6:	4b18      	ldr	r3, [pc, #96]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9ec:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9ee:	4b16      	ldr	r3, [pc, #88]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9f4:	4b14      	ldr	r3, [pc, #80]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800a9fa:	4b13      	ldr	r3, [pc, #76]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800aa00:	4b11      	ldr	r3, [pc, #68]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800aa02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800aa06:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800aa08:	4b0f      	ldr	r3, [pc, #60]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800aa0e:	480e      	ldr	r0, [pc, #56]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800aa10:	f001 f852 	bl	800bab8 <HAL_DMA_Init>
 800aa14:	4603      	mov	r3, r0
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d001      	beq.n	800aa1e <HAL_UART_MspInit+0x396>
      Error_Handler();
 800aa1a:	f7fe ff33 	bl	8009884 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a09      	ldr	r2, [pc, #36]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800aa22:	635a      	str	r2, [r3, #52]	; 0x34
 800aa24:	4a08      	ldr	r2, [pc, #32]	; (800aa48 <HAL_UART_MspInit+0x3c0>)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6393      	str	r3, [r2, #56]	; 0x38
}
 800aa2a:	bf00      	nop
 800aa2c:	3738      	adds	r7, #56	; 0x38
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	40011400 	.word	0x40011400
 800aa38:	40023800 	.word	0x40023800
 800aa3c:	40021800 	.word	0x40021800
 800aa40:	2000dc68 	.word	0x2000dc68
 800aa44:	40026428 	.word	0x40026428
 800aa48:	2000ddcc 	.word	0x2000ddcc
 800aa4c:	400264a0 	.word	0x400264a0

0800aa50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800aa50:	f8df d034 	ldr.w	sp, [pc, #52]	; 800aa88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800aa54:	480d      	ldr	r0, [pc, #52]	; (800aa8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800aa56:	490e      	ldr	r1, [pc, #56]	; (800aa90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800aa58:	4a0e      	ldr	r2, [pc, #56]	; (800aa94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800aa5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aa5c:	e002      	b.n	800aa64 <LoopCopyDataInit>

0800aa5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aa5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aa60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aa62:	3304      	adds	r3, #4

0800aa64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aa64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aa66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aa68:	d3f9      	bcc.n	800aa5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aa6a:	4a0b      	ldr	r2, [pc, #44]	; (800aa98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800aa6c:	4c0b      	ldr	r4, [pc, #44]	; (800aa9c <LoopFillZerobss+0x26>)
  movs r3, #0
 800aa6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aa70:	e001      	b.n	800aa76 <LoopFillZerobss>

0800aa72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aa72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aa74:	3204      	adds	r2, #4

0800aa76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aa76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aa78:	d3fb      	bcc.n	800aa72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800aa7a:	f7ff f9ab 	bl	8009dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aa7e:	f007 fa29 	bl	8011ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800aa82:	f7fe fd7d 	bl	8009580 <main>
  bx  lr    
 800aa86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800aa88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800aa8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aa90:	20000478 	.word	0x20000478
  ldr r2, =_sidata
 800aa94:	08016240 	.word	0x08016240
  ldr r2, =_sbss
 800aa98:	20000478 	.word	0x20000478
  ldr r4, =_ebss
 800aa9c:	2000df28 	.word	0x2000df28

0800aaa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800aaa0:	e7fe      	b.n	800aaa0 <ADC_IRQHandler>
	...

0800aaa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800aaa8:	4b0e      	ldr	r3, [pc, #56]	; (800aae4 <HAL_Init+0x40>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a0d      	ldr	r2, [pc, #52]	; (800aae4 <HAL_Init+0x40>)
 800aaae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800aab4:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <HAL_Init+0x40>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a0a      	ldr	r2, [pc, #40]	; (800aae4 <HAL_Init+0x40>)
 800aaba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aabe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800aac0:	4b08      	ldr	r3, [pc, #32]	; (800aae4 <HAL_Init+0x40>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a07      	ldr	r2, [pc, #28]	; (800aae4 <HAL_Init+0x40>)
 800aac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aaca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aacc:	2003      	movs	r0, #3
 800aace:	f000 ffb1 	bl	800ba34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800aad2:	200f      	movs	r0, #15
 800aad4:	f000 f808 	bl	800aae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800aad8:	f7fe ffde 	bl	8009a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	40023c00 	.word	0x40023c00

0800aae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b082      	sub	sp, #8
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800aaf0:	4b12      	ldr	r3, [pc, #72]	; (800ab3c <HAL_InitTick+0x54>)
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	4b12      	ldr	r3, [pc, #72]	; (800ab40 <HAL_InitTick+0x58>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aafe:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab02:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab06:	4618      	mov	r0, r3
 800ab08:	f000 ffc9 	bl	800ba9e <HAL_SYSTICK_Config>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e00e      	b.n	800ab34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b0f      	cmp	r3, #15
 800ab1a:	d80a      	bhi.n	800ab32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	6879      	ldr	r1, [r7, #4]
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	f000 ff91 	bl	800ba4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ab28:	4a06      	ldr	r2, [pc, #24]	; (800ab44 <HAL_InitTick+0x5c>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e000      	b.n	800ab34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3708      	adds	r7, #8
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	20000294 	.word	0x20000294
 800ab40:	2000029c 	.word	0x2000029c
 800ab44:	20000298 	.word	0x20000298

0800ab48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ab4c:	4b06      	ldr	r3, [pc, #24]	; (800ab68 <HAL_IncTick+0x20>)
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	461a      	mov	r2, r3
 800ab52:	4b06      	ldr	r3, [pc, #24]	; (800ab6c <HAL_IncTick+0x24>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4413      	add	r3, r2
 800ab58:	4a04      	ldr	r2, [pc, #16]	; (800ab6c <HAL_IncTick+0x24>)
 800ab5a:	6013      	str	r3, [r2, #0]
}
 800ab5c:	bf00      	nop
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	2000029c 	.word	0x2000029c
 800ab6c:	2000df14 	.word	0x2000df14

0800ab70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
  return uwTick;
 800ab74:	4b03      	ldr	r3, [pc, #12]	; (800ab84 <HAL_GetTick+0x14>)
 800ab76:	681b      	ldr	r3, [r3, #0]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	2000df14 	.word	0x2000df14

0800ab88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ab90:	f7ff ffee 	bl	800ab70 <HAL_GetTick>
 800ab94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba0:	d005      	beq.n	800abae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800aba2:	4b0a      	ldr	r3, [pc, #40]	; (800abcc <HAL_Delay+0x44>)
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	4413      	add	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800abae:	bf00      	nop
 800abb0:	f7ff ffde 	bl	800ab70 <HAL_GetTick>
 800abb4:	4602      	mov	r2, r0
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d8f7      	bhi.n	800abb0 <HAL_Delay+0x28>
  {
  }
}
 800abc0:	bf00      	nop
 800abc2:	bf00      	nop
 800abc4:	3710      	adds	r7, #16
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	2000029c 	.word	0x2000029c

0800abd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e0ed      	b.n	800adbe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7fd ffe4 	bl	8008bbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681a      	ldr	r2, [r3, #0]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f042 0201 	orr.w	r2, r2, #1
 800ac02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac04:	f7ff ffb4 	bl	800ab70 <HAL_GetTick>
 800ac08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ac0a:	e012      	b.n	800ac32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ac0c:	f7ff ffb0 	bl	800ab70 <HAL_GetTick>
 800ac10:	4602      	mov	r2, r0
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	2b0a      	cmp	r3, #10
 800ac18:	d90b      	bls.n	800ac32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2205      	movs	r2, #5
 800ac2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	e0c5      	b.n	800adbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	f003 0301 	and.w	r3, r3, #1
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0e5      	beq.n	800ac0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f022 0202 	bic.w	r2, r2, #2
 800ac4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac50:	f7ff ff8e 	bl	800ab70 <HAL_GetTick>
 800ac54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ac56:	e012      	b.n	800ac7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ac58:	f7ff ff8a 	bl	800ab70 <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b0a      	cmp	r3, #10
 800ac64:	d90b      	bls.n	800ac7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2205      	movs	r2, #5
 800ac76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e09f      	b.n	800adbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d1e5      	bne.n	800ac58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	7e1b      	ldrb	r3, [r3, #24]
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d108      	bne.n	800aca6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aca2:	601a      	str	r2, [r3, #0]
 800aca4:	e007      	b.n	800acb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	7e5b      	ldrb	r3, [r3, #25]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d108      	bne.n	800acd0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800accc:	601a      	str	r2, [r3, #0]
 800acce:	e007      	b.n	800ace0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800acde:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	7e9b      	ldrb	r3, [r3, #26]
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d108      	bne.n	800acfa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0220 	orr.w	r2, r2, #32
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	e007      	b.n	800ad0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f022 0220 	bic.w	r2, r2, #32
 800ad08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	7edb      	ldrb	r3, [r3, #27]
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d108      	bne.n	800ad24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 0210 	bic.w	r2, r2, #16
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	e007      	b.n	800ad34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f042 0210 	orr.w	r2, r2, #16
 800ad32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	7f1b      	ldrb	r3, [r3, #28]
 800ad38:	2b01      	cmp	r3, #1
 800ad3a:	d108      	bne.n	800ad4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f042 0208 	orr.w	r2, r2, #8
 800ad4a:	601a      	str	r2, [r3, #0]
 800ad4c:	e007      	b.n	800ad5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f022 0208 	bic.w	r2, r2, #8
 800ad5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	7f5b      	ldrb	r3, [r3, #29]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d108      	bne.n	800ad78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f042 0204 	orr.w	r2, r2, #4
 800ad74:	601a      	str	r2, [r3, #0]
 800ad76:	e007      	b.n	800ad88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f022 0204 	bic.w	r2, r2, #4
 800ad86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689a      	ldr	r2, [r3, #8]
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	431a      	orrs	r2, r3
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	431a      	orrs	r2, r3
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	695b      	ldr	r3, [r3, #20]
 800ad9c:	ea42 0103 	orr.w	r1, r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	685b      	ldr	r3, [r3, #4]
 800ada4:	1e5a      	subs	r2, r3, #1
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	430a      	orrs	r2, r1
 800adac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2200      	movs	r2, #0
 800adb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2201      	movs	r2, #1
 800adb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800adbc:	2300      	movs	r3, #0
}
 800adbe:	4618      	mov	r0, r3
 800adc0:	3710      	adds	r7, #16
 800adc2:	46bd      	mov	sp, r7
 800adc4:	bd80      	pop	{r7, pc}
	...

0800adc8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800adc8:	b480      	push	{r7}
 800adca:	b087      	sub	sp, #28
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 3020 	ldrb.w	r3, [r3, #32]
 800adde:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800ade0:	7cfb      	ldrb	r3, [r7, #19]
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d003      	beq.n	800adee <HAL_CAN_ConfigFilter+0x26>
 800ade6:	7cfb      	ldrb	r3, [r7, #19]
 800ade8:	2b02      	cmp	r3, #2
 800adea:	f040 80be 	bne.w	800af6a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800adee:	4b65      	ldr	r3, [pc, #404]	; (800af84 <HAL_CAN_ConfigFilter+0x1bc>)
 800adf0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800adf8:	f043 0201 	orr.w	r2, r3, #1
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ae08:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	021b      	lsls	r3, r3, #8
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	695b      	ldr	r3, [r3, #20]
 800ae2a:	f003 031f 	and.w	r3, r3, #31
 800ae2e:	2201      	movs	r2, #1
 800ae30:	fa02 f303 	lsl.w	r3, r2, r3
 800ae34:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	43db      	mvns	r3, r3
 800ae40:	401a      	ands	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d123      	bne.n	800ae98 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	43db      	mvns	r3, r3
 800ae5a:	401a      	ands	r2, r3
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
 800ae66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ae72:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	3248      	adds	r2, #72	; 0x48
 800ae78:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ae8c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ae8e:	6979      	ldr	r1, [r7, #20]
 800ae90:	3348      	adds	r3, #72	; 0x48
 800ae92:	00db      	lsls	r3, r3, #3
 800ae94:	440b      	add	r3, r1
 800ae96:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	69db      	ldr	r3, [r3, #28]
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d122      	bne.n	800aee6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	431a      	orrs	r2, r3
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800aec0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	3248      	adds	r2, #72	; 0x48
 800aec6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800aeda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800aedc:	6979      	ldr	r1, [r7, #20]
 800aede:	3348      	adds	r3, #72	; 0x48
 800aee0:	00db      	lsls	r3, r3, #3
 800aee2:	440b      	add	r3, r1
 800aee4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d109      	bne.n	800af02 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	43db      	mvns	r3, r3
 800aef8:	401a      	ands	r2, r3
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800af00:	e007      	b.n	800af12 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	431a      	orrs	r2, r3
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d109      	bne.n	800af2e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	43db      	mvns	r3, r3
 800af24:	401a      	ands	r2, r3
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800af2c:	e007      	b.n	800af3e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	431a      	orrs	r2, r3
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d107      	bne.n	800af56 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800af46:	697b      	ldr	r3, [r7, #20]
 800af48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	431a      	orrs	r2, r3
 800af50:	697b      	ldr	r3, [r7, #20]
 800af52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800af5c:	f023 0201 	bic.w	r2, r3, #1
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	e006      	b.n	800af78 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
  }
}
 800af78:	4618      	mov	r0, r3
 800af7a:	371c      	adds	r7, #28
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	40006400 	.word	0x40006400

0800af88 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af96:	b2db      	uxtb	r3, r3
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d12e      	bne.n	800affa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2202      	movs	r2, #2
 800afa0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f022 0201 	bic.w	r2, r2, #1
 800afb2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800afb4:	f7ff fddc 	bl	800ab70 <HAL_GetTick>
 800afb8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800afba:	e012      	b.n	800afe2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800afbc:	f7ff fdd8 	bl	800ab70 <HAL_GetTick>
 800afc0:	4602      	mov	r2, r0
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	1ad3      	subs	r3, r2, r3
 800afc6:	2b0a      	cmp	r3, #10
 800afc8:	d90b      	bls.n	800afe2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2205      	movs	r2, #5
 800afda:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e012      	b.n	800b008 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b00      	cmp	r3, #0
 800afee:	d1e5      	bne.n	800afbc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2200      	movs	r2, #0
 800aff4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	e006      	b.n	800b008 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
  }
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800b010:	b480      	push	{r7}
 800b012:	b089      	sub	sp, #36	; 0x24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b024:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b02e:	7ffb      	ldrb	r3, [r7, #31]
 800b030:	2b01      	cmp	r3, #1
 800b032:	d003      	beq.n	800b03c <HAL_CAN_AddTxMessage+0x2c>
 800b034:	7ffb      	ldrb	r3, [r7, #31]
 800b036:	2b02      	cmp	r3, #2
 800b038:	f040 80b8 	bne.w	800b1ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b042:	2b00      	cmp	r3, #0
 800b044:	d10a      	bne.n	800b05c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d105      	bne.n	800b05c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80a0 	beq.w	800b19c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	0e1b      	lsrs	r3, r3, #24
 800b060:	f003 0303 	and.w	r3, r3, #3
 800b064:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d907      	bls.n	800b07c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e09e      	b.n	800b1ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b07c:	2201      	movs	r2, #1
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	409a      	lsls	r2, r3
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10d      	bne.n	800b0aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b098:	68f9      	ldr	r1, [r7, #12]
 800b09a:	6809      	ldr	r1, [r1, #0]
 800b09c:	431a      	orrs	r2, r3
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	3318      	adds	r3, #24
 800b0a2:	011b      	lsls	r3, r3, #4
 800b0a4:	440b      	add	r3, r1
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	e00f      	b.n	800b0ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b0b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b0ba:	68f9      	ldr	r1, [r7, #12]
 800b0bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b0be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	3318      	adds	r3, #24
 800b0c4:	011b      	lsls	r3, r3, #4
 800b0c6:	440b      	add	r3, r1
 800b0c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	6819      	ldr	r1, [r3, #0]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	691a      	ldr	r2, [r3, #16]
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	3318      	adds	r3, #24
 800b0d6:	011b      	lsls	r3, r3, #4
 800b0d8:	440b      	add	r3, r1
 800b0da:	3304      	adds	r3, #4
 800b0dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	7d1b      	ldrb	r3, [r3, #20]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d111      	bne.n	800b10a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	3318      	adds	r3, #24
 800b0ee:	011b      	lsls	r3, r3, #4
 800b0f0:	4413      	add	r3, r2
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	68fa      	ldr	r2, [r7, #12]
 800b0f8:	6811      	ldr	r1, [r2, #0]
 800b0fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	3318      	adds	r3, #24
 800b102:	011b      	lsls	r3, r3, #4
 800b104:	440b      	add	r3, r1
 800b106:	3304      	adds	r3, #4
 800b108:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3307      	adds	r3, #7
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	061a      	lsls	r2, r3, #24
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	3306      	adds	r3, #6
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	041b      	lsls	r3, r3, #16
 800b11a:	431a      	orrs	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	3305      	adds	r3, #5
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	4313      	orrs	r3, r2
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	3204      	adds	r2, #4
 800b12a:	7812      	ldrb	r2, [r2, #0]
 800b12c:	4610      	mov	r0, r2
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	6811      	ldr	r1, [r2, #0]
 800b132:	ea43 0200 	orr.w	r2, r3, r0
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	440b      	add	r3, r1
 800b13c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b140:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	3303      	adds	r3, #3
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	061a      	lsls	r2, r3, #24
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3302      	adds	r3, #2
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	041b      	lsls	r3, r3, #16
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3301      	adds	r3, #1
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	021b      	lsls	r3, r3, #8
 800b15c:	4313      	orrs	r3, r2
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	7812      	ldrb	r2, [r2, #0]
 800b162:	4610      	mov	r0, r2
 800b164:	68fa      	ldr	r2, [r7, #12]
 800b166:	6811      	ldr	r1, [r2, #0]
 800b168:	ea43 0200 	orr.w	r2, r3, r0
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	011b      	lsls	r3, r3, #4
 800b170:	440b      	add	r3, r1
 800b172:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b176:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	3318      	adds	r3, #24
 800b180:	011b      	lsls	r3, r3, #4
 800b182:	4413      	add	r3, r2
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68fa      	ldr	r2, [r7, #12]
 800b188:	6811      	ldr	r1, [r2, #0]
 800b18a:	f043 0201 	orr.w	r2, r3, #1
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	3318      	adds	r3, #24
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	440b      	add	r3, r1
 800b196:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	e00e      	b.n	800b1ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e006      	b.n	800b1ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
  }
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3724      	adds	r7, #36	; 0x24
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	b087      	sub	sp, #28
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	607a      	str	r2, [r7, #4]
 800b1d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b1da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b1dc:	7dfb      	ldrb	r3, [r7, #23]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d003      	beq.n	800b1ea <HAL_CAN_GetRxMessage+0x24>
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	f040 80f3 	bne.w	800b3d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10e      	bne.n	800b20e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	f003 0303 	and.w	r3, r3, #3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d116      	bne.n	800b22c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b202:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e0e7      	b.n	800b3de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	691b      	ldr	r3, [r3, #16]
 800b214:	f003 0303 	and.w	r3, r3, #3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d107      	bne.n	800b22c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	e0d8      	b.n	800b3de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681a      	ldr	r2, [r3, #0]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	331b      	adds	r3, #27
 800b234:	011b      	lsls	r3, r3, #4
 800b236:	4413      	add	r3, r2
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f003 0204 	and.w	r2, r3, #4
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d10c      	bne.n	800b264 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	331b      	adds	r3, #27
 800b252:	011b      	lsls	r3, r3, #4
 800b254:	4413      	add	r3, r2
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	0d5b      	lsrs	r3, r3, #21
 800b25a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	601a      	str	r2, [r3, #0]
 800b262:	e00b      	b.n	800b27c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	331b      	adds	r3, #27
 800b26c:	011b      	lsls	r3, r3, #4
 800b26e:	4413      	add	r3, r2
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	08db      	lsrs	r3, r3, #3
 800b274:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	331b      	adds	r3, #27
 800b284:	011b      	lsls	r3, r3, #4
 800b286:	4413      	add	r3, r2
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0202 	and.w	r2, r3, #2
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681a      	ldr	r2, [r3, #0]
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	331b      	adds	r3, #27
 800b29a:	011b      	lsls	r3, r3, #4
 800b29c:	4413      	add	r3, r2
 800b29e:	3304      	adds	r3, #4
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f003 020f 	and.w	r2, r3, #15
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	331b      	adds	r3, #27
 800b2b2:	011b      	lsls	r3, r3, #4
 800b2b4:	4413      	add	r3, r2
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	0a1b      	lsrs	r3, r3, #8
 800b2bc:	b2da      	uxtb	r2, r3
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681a      	ldr	r2, [r3, #0]
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	331b      	adds	r3, #27
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	0c1b      	lsrs	r3, r3, #16
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	4413      	add	r3, r2
 800b2e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	011b      	lsls	r3, r3, #4
 800b2f8:	4413      	add	r3, r2
 800b2fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	0a1a      	lsrs	r2, r3, #8
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	3301      	adds	r3, #1
 800b306:	b2d2      	uxtb	r2, r2
 800b308:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	011b      	lsls	r3, r3, #4
 800b312:	4413      	add	r3, r2
 800b314:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	0c1a      	lsrs	r2, r3, #16
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	3302      	adds	r3, #2
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	0e1a      	lsrs	r2, r3, #24
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	3303      	adds	r3, #3
 800b33a:	b2d2      	uxtb	r2, r2
 800b33c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	011b      	lsls	r3, r3, #4
 800b346:	4413      	add	r3, r2
 800b348:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	3304      	adds	r3, #4
 800b352:	b2d2      	uxtb	r2, r2
 800b354:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	011b      	lsls	r3, r3, #4
 800b35e:	4413      	add	r3, r2
 800b360:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	0a1a      	lsrs	r2, r3, #8
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	3305      	adds	r3, #5
 800b36c:	b2d2      	uxtb	r2, r2
 800b36e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	011b      	lsls	r3, r3, #4
 800b378:	4413      	add	r3, r2
 800b37a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	0c1a      	lsrs	r2, r3, #16
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	3306      	adds	r3, #6
 800b386:	b2d2      	uxtb	r2, r2
 800b388:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	011b      	lsls	r3, r3, #4
 800b392:	4413      	add	r3, r2
 800b394:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	0e1a      	lsrs	r2, r3, #24
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	3307      	adds	r3, #7
 800b3a0:	b2d2      	uxtb	r2, r2
 800b3a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d108      	bne.n	800b3bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	68da      	ldr	r2, [r3, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f042 0220 	orr.w	r2, r2, #32
 800b3b8:	60da      	str	r2, [r3, #12]
 800b3ba:	e007      	b.n	800b3cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0220 	orr.w	r2, r2, #32
 800b3ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	e006      	b.n	800b3de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
  }
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	371c      	adds	r7, #28
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800b3fc:	7bfb      	ldrb	r3, [r7, #15]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d002      	beq.n	800b408 <HAL_CAN_ActivateNotification+0x1e>
 800b402:	7bfb      	ldrb	r3, [r7, #15]
 800b404:	2b02      	cmp	r3, #2
 800b406:	d109      	bne.n	800b41c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6959      	ldr	r1, [r3, #20]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	430a      	orrs	r2, r1
 800b416:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	e006      	b.n	800b42a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
  }
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr

0800b436 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800b436:	b580      	push	{r7, lr}
 800b438:	b08a      	sub	sp, #40	; 0x28
 800b43a:	af00      	add	r7, sp, #0
 800b43c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800b43e:	2300      	movs	r3, #0
 800b440:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	691b      	ldr	r3, [r3, #16]
 800b468:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800b472:	6a3b      	ldr	r3, [r7, #32]
 800b474:	f003 0301 	and.w	r3, r3, #1
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d07c      	beq.n	800b576 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800b47c:	69bb      	ldr	r3, [r7, #24]
 800b47e:	f003 0301 	and.w	r3, r3, #1
 800b482:	2b00      	cmp	r3, #0
 800b484:	d023      	beq.n	800b4ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2201      	movs	r2, #1
 800b48c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	f003 0302 	and.w	r3, r3, #2
 800b494:	2b00      	cmp	r3, #0
 800b496:	d003      	beq.n	800b4a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f983 	bl	800b7a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800b49e:	e016      	b.n	800b4ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f003 0304 	and.w	r3, r3, #4
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d004      	beq.n	800b4b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4b2:	e00c      	b.n	800b4ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	f003 0308 	and.w	r3, r3, #8
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d004      	beq.n	800b4c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800b4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b4c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c6:	e002      	b.n	800b4ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f000 f989 	bl	800b7e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d024      	beq.n	800b522 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b4e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800b4e2:	69bb      	ldr	r3, [r7, #24]
 800b4e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d003      	beq.n	800b4f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f000 f963 	bl	800b7b8 <HAL_CAN_TxMailbox1CompleteCallback>
 800b4f2:	e016      	b.n	800b522 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b504:	627b      	str	r3, [r7, #36]	; 0x24
 800b506:	e00c      	b.n	800b522 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d004      	beq.n	800b51c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b518:	627b      	str	r3, [r7, #36]	; 0x24
 800b51a:	e002      	b.n	800b522 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f969 	bl	800b7f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b522:	69bb      	ldr	r3, [r7, #24]
 800b524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d024      	beq.n	800b576 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b534:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 f943 	bl	800b7cc <HAL_CAN_TxMailbox2CompleteCallback>
 800b546:	e016      	b.n	800b576 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d004      	beq.n	800b55c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b554:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b558:	627b      	str	r3, [r7, #36]	; 0x24
 800b55a:	e00c      	b.n	800b576 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b562:	2b00      	cmp	r3, #0
 800b564:	d004      	beq.n	800b570 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b568:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b56c:	627b      	str	r3, [r7, #36]	; 0x24
 800b56e:	e002      	b.n	800b576 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f949 	bl	800b808 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b576:	6a3b      	ldr	r3, [r7, #32]
 800b578:	f003 0308 	and.w	r3, r3, #8
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00c      	beq.n	800b59a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	2b00      	cmp	r3, #0
 800b588:	d007      	beq.n	800b59a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b590:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2210      	movs	r2, #16
 800b598:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	f003 0304 	and.w	r3, r3, #4
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d00b      	beq.n	800b5bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	f003 0308 	and.w	r3, r3, #8
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d006      	beq.n	800b5bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2208      	movs	r2, #8
 800b5b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f930 	bl	800b81c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b5bc:	6a3b      	ldr	r3, [r7, #32]
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d009      	beq.n	800b5da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	f003 0303 	and.w	r3, r3, #3
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d002      	beq.n	800b5da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7fd fbe7 	bl	8008da8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00c      	beq.n	800b5fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	f003 0310 	and.w	r3, r3, #16
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d007      	beq.n	800b5fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b5f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2210      	movs	r2, #16
 800b5fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	f003 0320 	and.w	r3, r3, #32
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00b      	beq.n	800b620 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	f003 0308 	and.w	r3, r3, #8
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d006      	beq.n	800b620 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2208      	movs	r2, #8
 800b618:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f912 	bl	800b844 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b620:	6a3b      	ldr	r3, [r7, #32]
 800b622:	f003 0310 	and.w	r3, r3, #16
 800b626:	2b00      	cmp	r3, #0
 800b628:	d009      	beq.n	800b63e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0303 	and.w	r3, r3, #3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 f8f9 	bl	800b830 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00b      	beq.n	800b660 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	f003 0310 	and.w	r3, r3, #16
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d006      	beq.n	800b660 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	2210      	movs	r2, #16
 800b658:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f8fc 	bl	800b858 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b666:	2b00      	cmp	r3, #0
 800b668:	d00b      	beq.n	800b682 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b00      	cmp	r3, #0
 800b672:	d006      	beq.n	800b682 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2208      	movs	r2, #8
 800b67a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f000 f8f5 	bl	800b86c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d07b      	beq.n	800b784 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	f003 0304 	and.w	r3, r3, #4
 800b692:	2b00      	cmp	r3, #0
 800b694:	d072      	beq.n	800b77c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d008      	beq.n	800b6b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d003      	beq.n	800b6b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ac:	f043 0301 	orr.w	r3, r3, #1
 800b6b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b6b2:	6a3b      	ldr	r3, [r7, #32]
 800b6b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d008      	beq.n	800b6ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	f043 0302 	orr.w	r3, r3, #2
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b6ce:	6a3b      	ldr	r3, [r7, #32]
 800b6d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d008      	beq.n	800b6ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d003      	beq.n	800b6ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e4:	f043 0304 	orr.w	r3, r3, #4
 800b6e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b6ea:	6a3b      	ldr	r3, [r7, #32]
 800b6ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d043      	beq.n	800b77c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d03e      	beq.n	800b77c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b704:	2b60      	cmp	r3, #96	; 0x60
 800b706:	d02b      	beq.n	800b760 <HAL_CAN_IRQHandler+0x32a>
 800b708:	2b60      	cmp	r3, #96	; 0x60
 800b70a:	d82e      	bhi.n	800b76a <HAL_CAN_IRQHandler+0x334>
 800b70c:	2b50      	cmp	r3, #80	; 0x50
 800b70e:	d022      	beq.n	800b756 <HAL_CAN_IRQHandler+0x320>
 800b710:	2b50      	cmp	r3, #80	; 0x50
 800b712:	d82a      	bhi.n	800b76a <HAL_CAN_IRQHandler+0x334>
 800b714:	2b40      	cmp	r3, #64	; 0x40
 800b716:	d019      	beq.n	800b74c <HAL_CAN_IRQHandler+0x316>
 800b718:	2b40      	cmp	r3, #64	; 0x40
 800b71a:	d826      	bhi.n	800b76a <HAL_CAN_IRQHandler+0x334>
 800b71c:	2b30      	cmp	r3, #48	; 0x30
 800b71e:	d010      	beq.n	800b742 <HAL_CAN_IRQHandler+0x30c>
 800b720:	2b30      	cmp	r3, #48	; 0x30
 800b722:	d822      	bhi.n	800b76a <HAL_CAN_IRQHandler+0x334>
 800b724:	2b10      	cmp	r3, #16
 800b726:	d002      	beq.n	800b72e <HAL_CAN_IRQHandler+0x2f8>
 800b728:	2b20      	cmp	r3, #32
 800b72a:	d005      	beq.n	800b738 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b72c:	e01d      	b.n	800b76a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	f043 0308 	orr.w	r3, r3, #8
 800b734:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b736:	e019      	b.n	800b76c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b73a:	f043 0310 	orr.w	r3, r3, #16
 800b73e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b740:	e014      	b.n	800b76c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b744:	f043 0320 	orr.w	r3, r3, #32
 800b748:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b74a:	e00f      	b.n	800b76c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b752:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b754:	e00a      	b.n	800b76c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b75c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b75e:	e005      	b.n	800b76c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b766:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b768:	e000      	b.n	800b76c <HAL_CAN_IRQHandler+0x336>
            break;
 800b76a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	699a      	ldr	r2, [r3, #24]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b77a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2204      	movs	r2, #4
 800b782:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b786:	2b00      	cmp	r3, #0
 800b788:	d008      	beq.n	800b79c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b790:	431a      	orrs	r2, r3
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f872 	bl	800b880 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b79c:	bf00      	nop
 800b79e:	3728      	adds	r7, #40	; 0x28
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800b7ac:	bf00      	nop
 800b7ae:	370c      	adds	r7, #12
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b083      	sub	sp, #12
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b7c0:	bf00      	nop
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr

0800b7cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b7d4:	bf00      	nop
 800b7d6:	370c      	adds	r7, #12
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b7e0:	b480      	push	{r7}
 800b7e2:	b083      	sub	sp, #12
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b7e8:	bf00      	nop
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b7fc:	bf00      	nop
 800b7fe:	370c      	adds	r7, #12
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b810:	bf00      	nop
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b830:	b480      	push	{r7}
 800b832:	b083      	sub	sp, #12
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800b838:	bf00      	nop
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b844:	b480      	push	{r7}
 800b846:	b083      	sub	sp, #12
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b84c:	bf00      	nop
 800b84e:	370c      	adds	r7, #12
 800b850:	46bd      	mov	sp, r7
 800b852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b856:	4770      	bx	lr

0800b858 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b858:	b480      	push	{r7}
 800b85a:	b083      	sub	sp, #12
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b860:	bf00      	nop
 800b862:	370c      	adds	r7, #12
 800b864:	46bd      	mov	sp, r7
 800b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86a:	4770      	bx	lr

0800b86c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b86c:	b480      	push	{r7}
 800b86e:	b083      	sub	sp, #12
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b874:	bf00      	nop
 800b876:	370c      	adds	r7, #12
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b888:	bf00      	nop
 800b88a:	370c      	adds	r7, #12
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <__NVIC_SetPriorityGrouping+0x44>)
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b8bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b8c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b8c6:	4a04      	ldr	r2, [pc, #16]	; (800b8d8 <__NVIC_SetPriorityGrouping+0x44>)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	60d3      	str	r3, [r2, #12]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	e000ed00 	.word	0xe000ed00

0800b8dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b8e0:	4b04      	ldr	r3, [pc, #16]	; (800b8f4 <__NVIC_GetPriorityGrouping+0x18>)
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	0a1b      	lsrs	r3, r3, #8
 800b8e6:	f003 0307 	and.w	r3, r3, #7
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	e000ed00 	.word	0xe000ed00

0800b8f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b906:	2b00      	cmp	r3, #0
 800b908:	db0b      	blt.n	800b922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	f003 021f 	and.w	r2, r3, #31
 800b910:	4907      	ldr	r1, [pc, #28]	; (800b930 <__NVIC_EnableIRQ+0x38>)
 800b912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b916:	095b      	lsrs	r3, r3, #5
 800b918:	2001      	movs	r0, #1
 800b91a:	fa00 f202 	lsl.w	r2, r0, r2
 800b91e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	e000e100 	.word	0xe000e100

0800b934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b944:	2b00      	cmp	r3, #0
 800b946:	db0a      	blt.n	800b95e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	490c      	ldr	r1, [pc, #48]	; (800b980 <__NVIC_SetPriority+0x4c>)
 800b94e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b952:	0112      	lsls	r2, r2, #4
 800b954:	b2d2      	uxtb	r2, r2
 800b956:	440b      	add	r3, r1
 800b958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b95c:	e00a      	b.n	800b974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	b2da      	uxtb	r2, r3
 800b962:	4908      	ldr	r1, [pc, #32]	; (800b984 <__NVIC_SetPriority+0x50>)
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	f003 030f 	and.w	r3, r3, #15
 800b96a:	3b04      	subs	r3, #4
 800b96c:	0112      	lsls	r2, r2, #4
 800b96e:	b2d2      	uxtb	r2, r2
 800b970:	440b      	add	r3, r1
 800b972:	761a      	strb	r2, [r3, #24]
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	e000e100 	.word	0xe000e100
 800b984:	e000ed00 	.word	0xe000ed00

0800b988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b988:	b480      	push	{r7}
 800b98a:	b089      	sub	sp, #36	; 0x24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f003 0307 	and.w	r3, r3, #7
 800b99a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	f1c3 0307 	rsb	r3, r3, #7
 800b9a2:	2b04      	cmp	r3, #4
 800b9a4:	bf28      	it	cs
 800b9a6:	2304      	movcs	r3, #4
 800b9a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	2b06      	cmp	r3, #6
 800b9b0:	d902      	bls.n	800b9b8 <NVIC_EncodePriority+0x30>
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	3b03      	subs	r3, #3
 800b9b6:	e000      	b.n	800b9ba <NVIC_EncodePriority+0x32>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	43da      	mvns	r2, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	401a      	ands	r2, r3
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b9d0:	f04f 31ff 	mov.w	r1, #4294967295
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9da:	43d9      	mvns	r1, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9e0:	4313      	orrs	r3, r2
         );
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3724      	adds	r7, #36	; 0x24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
	...

0800b9f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba00:	d301      	bcc.n	800ba06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ba02:	2301      	movs	r3, #1
 800ba04:	e00f      	b.n	800ba26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ba06:	4a0a      	ldr	r2, [pc, #40]	; (800ba30 <SysTick_Config+0x40>)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ba0e:	210f      	movs	r1, #15
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295
 800ba14:	f7ff ff8e 	bl	800b934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ba18:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <SysTick_Config+0x40>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ba1e:	4b04      	ldr	r3, [pc, #16]	; (800ba30 <SysTick_Config+0x40>)
 800ba20:	2207      	movs	r2, #7
 800ba22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	e000e010 	.word	0xe000e010

0800ba34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff ff29 	bl	800b894 <__NVIC_SetPriorityGrouping>
}
 800ba42:	bf00      	nop
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b086      	sub	sp, #24
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	4603      	mov	r3, r0
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ba5c:	f7ff ff3e 	bl	800b8dc <__NVIC_GetPriorityGrouping>
 800ba60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	68b9      	ldr	r1, [r7, #8]
 800ba66:	6978      	ldr	r0, [r7, #20]
 800ba68:	f7ff ff8e 	bl	800b988 <NVIC_EncodePriority>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff ff5d 	bl	800b934 <__NVIC_SetPriority>
}
 800ba7a:	bf00      	nop
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	4603      	mov	r3, r0
 800ba8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ba8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff ff31 	bl	800b8f8 <__NVIC_EnableIRQ>
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b082      	sub	sp, #8
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff ffa2 	bl	800b9f0 <SysTick_Config>
 800baac:	4603      	mov	r3, r0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800bac4:	f7ff f854 	bl	800ab70 <HAL_GetTick>
 800bac8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d101      	bne.n	800bad4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e099      	b.n	800bc08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2202      	movs	r2, #2
 800bad8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2200      	movs	r2, #0
 800bae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0201 	bic.w	r2, r2, #1
 800baf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800baf4:	e00f      	b.n	800bb16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800baf6:	f7ff f83b 	bl	800ab70 <HAL_GetTick>
 800bafa:	4602      	mov	r2, r0
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	2b05      	cmp	r3, #5
 800bb02:	d908      	bls.n	800bb16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2220      	movs	r2, #32
 800bb08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e078      	b.n	800bc08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0301 	and.w	r3, r3, #1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e8      	bne.n	800baf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4b38      	ldr	r3, [pc, #224]	; (800bc10 <HAL_DMA_Init+0x158>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bb42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	691b      	ldr	r3, [r3, #16]
 800bb48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6a1b      	ldr	r3, [r3, #32]
 800bb60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800bb62:	697a      	ldr	r2, [r7, #20]
 800bb64:	4313      	orrs	r3, r2
 800bb66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	2b04      	cmp	r3, #4
 800bb6e:	d107      	bne.n	800bb80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	697a      	ldr	r2, [r7, #20]
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	697a      	ldr	r2, [r7, #20]
 800bb86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	695b      	ldr	r3, [r3, #20]
 800bb8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f023 0307 	bic.w	r3, r3, #7
 800bb96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb9c:	697a      	ldr	r2, [r7, #20]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba6:	2b04      	cmp	r3, #4
 800bba8:	d117      	bne.n	800bbda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00e      	beq.n	800bbda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 fb01 	bl	800c1c4 <DMA_CheckFifoParam>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d008      	beq.n	800bbda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2240      	movs	r2, #64	; 0x40
 800bbcc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e016      	b.n	800bc08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fab8 	bl	800c158 <DMA_CalcBaseAndBitshift>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbf0:	223f      	movs	r2, #63	; 0x3f
 800bbf2:	409a      	lsls	r2, r3
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2201      	movs	r2, #1
 800bc02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	f010803f 	.word	0xf010803f

0800bc14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc22:	2300      	movs	r3, #0
 800bc24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc32:	2b01      	cmp	r3, #1
 800bc34:	d101      	bne.n	800bc3a <HAL_DMA_Start_IT+0x26>
 800bc36:	2302      	movs	r3, #2
 800bc38:	e040      	b.n	800bcbc <HAL_DMA_Start_IT+0xa8>
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2201      	movs	r2, #1
 800bc3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	2b01      	cmp	r3, #1
 800bc4c:	d12f      	bne.n	800bcae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2202      	movs	r2, #2
 800bc52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	68b9      	ldr	r1, [r7, #8]
 800bc62:	68f8      	ldr	r0, [r7, #12]
 800bc64:	f000 fa4a 	bl	800c0fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6c:	223f      	movs	r2, #63	; 0x3f
 800bc6e:	409a      	lsls	r2, r3
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f042 0216 	orr.w	r2, r2, #22
 800bc82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d007      	beq.n	800bc9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f042 0208 	orr.w	r2, r2, #8
 800bc9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f042 0201 	orr.w	r2, r2, #1
 800bcaa:	601a      	str	r2, [r3, #0]
 800bcac:	e005      	b.n	800bcba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800bcba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3718      	adds	r7, #24
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcd0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800bcd2:	f7fe ff4d 	bl	800ab70 <HAL_GetTick>
 800bcd6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d008      	beq.n	800bcf6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2280      	movs	r2, #128	; 0x80
 800bce8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e052      	b.n	800bd9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f022 0216 	bic.w	r2, r2, #22
 800bd04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	695a      	ldr	r2, [r3, #20]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d103      	bne.n	800bd26 <HAL_DMA_Abort+0x62>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d007      	beq.n	800bd36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f022 0208 	bic.w	r2, r2, #8
 800bd34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f022 0201 	bic.w	r2, r2, #1
 800bd44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bd46:	e013      	b.n	800bd70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800bd48:	f7fe ff12 	bl	800ab70 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	2b05      	cmp	r3, #5
 800bd54:	d90c      	bls.n	800bd70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2220      	movs	r2, #32
 800bd5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2203      	movs	r2, #3
 800bd60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	e015      	b.n	800bd9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d1e4      	bne.n	800bd48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd82:	223f      	movs	r2, #63	; 0x3f
 800bd84:	409a      	lsls	r2, r3
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b02      	cmp	r3, #2
 800bdb6:	d004      	beq.n	800bdc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2280      	movs	r2, #128	; 0x80
 800bdbc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e00c      	b.n	800bddc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2205      	movs	r2, #5
 800bdc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f022 0201 	bic.w	r2, r2, #1
 800bdd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800bdda:	2300      	movs	r3, #0
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	370c      	adds	r7, #12
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800bdf4:	4b92      	ldr	r3, [pc, #584]	; (800c040 <HAL_DMA_IRQHandler+0x258>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a92      	ldr	r2, [pc, #584]	; (800c044 <HAL_DMA_IRQHandler+0x25c>)
 800bdfa:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfe:	0a9b      	lsrs	r3, r3, #10
 800be00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be12:	2208      	movs	r2, #8
 800be14:	409a      	lsls	r2, r3
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	4013      	ands	r3, r2
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d01a      	beq.n	800be54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 0304 	and.w	r3, r3, #4
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d013      	beq.n	800be54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 0204 	bic.w	r2, r2, #4
 800be3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be40:	2208      	movs	r2, #8
 800be42:	409a      	lsls	r2, r3
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be4c:	f043 0201 	orr.w	r2, r3, #1
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be58:	2201      	movs	r2, #1
 800be5a:	409a      	lsls	r2, r3
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	4013      	ands	r3, r2
 800be60:	2b00      	cmp	r3, #0
 800be62:	d012      	beq.n	800be8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d00b      	beq.n	800be8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be76:	2201      	movs	r2, #1
 800be78:	409a      	lsls	r2, r3
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be82:	f043 0202 	orr.w	r2, r3, #2
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be8e:	2204      	movs	r2, #4
 800be90:	409a      	lsls	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	4013      	ands	r3, r2
 800be96:	2b00      	cmp	r3, #0
 800be98:	d012      	beq.n	800bec0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d00b      	beq.n	800bec0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800beac:	2204      	movs	r2, #4
 800beae:	409a      	lsls	r2, r3
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beb8:	f043 0204 	orr.w	r2, r3, #4
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bec4:	2210      	movs	r2, #16
 800bec6:	409a      	lsls	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	4013      	ands	r3, r2
 800becc:	2b00      	cmp	r3, #0
 800bece:	d043      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 0308 	and.w	r3, r3, #8
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d03c      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bee2:	2210      	movs	r2, #16
 800bee4:	409a      	lsls	r2, r3
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d018      	beq.n	800bf2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d108      	bne.n	800bf18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d024      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	4798      	blx	r3
 800bf16:	e01f      	b.n	800bf58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d01b      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	4798      	blx	r3
 800bf28:	e016      	b.n	800bf58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d107      	bne.n	800bf48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681a      	ldr	r2, [r3, #0]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f022 0208 	bic.w	r2, r2, #8
 800bf46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf5c:	2220      	movs	r2, #32
 800bf5e:	409a      	lsls	r2, r3
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4013      	ands	r3, r2
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 808e 	beq.w	800c086 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f003 0310 	and.w	r3, r3, #16
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	f000 8086 	beq.w	800c086 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf7e:	2220      	movs	r2, #32
 800bf80:	409a      	lsls	r2, r3
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	2b05      	cmp	r3, #5
 800bf90:	d136      	bne.n	800c000 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f022 0216 	bic.w	r2, r2, #22
 800bfa0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	695a      	ldr	r2, [r3, #20]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d103      	bne.n	800bfc2 <HAL_DMA_IRQHandler+0x1da>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d007      	beq.n	800bfd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f022 0208 	bic.w	r2, r2, #8
 800bfd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfd6:	223f      	movs	r2, #63	; 0x3f
 800bfd8:	409a      	lsls	r2, r3
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2201      	movs	r2, #1
 800bfe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d07d      	beq.n	800c0f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	4798      	blx	r3
        }
        return;
 800bffe:	e078      	b.n	800c0f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d01c      	beq.n	800c048 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d108      	bne.n	800c02e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c020:	2b00      	cmp	r3, #0
 800c022:	d030      	beq.n	800c086 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	4798      	blx	r3
 800c02c:	e02b      	b.n	800c086 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c032:	2b00      	cmp	r3, #0
 800c034:	d027      	beq.n	800c086 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03a:	6878      	ldr	r0, [r7, #4]
 800c03c:	4798      	blx	r3
 800c03e:	e022      	b.n	800c086 <HAL_DMA_IRQHandler+0x29e>
 800c040:	20000294 	.word	0x20000294
 800c044:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10f      	bne.n	800c076 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f022 0210 	bic.w	r2, r2, #16
 800c064:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d003      	beq.n	800c086 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d032      	beq.n	800c0f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d022      	beq.n	800c0e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2205      	movs	r2, #5
 800c09e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f022 0201 	bic.w	r2, r2, #1
 800c0b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	60bb      	str	r3, [r7, #8]
 800c0b8:	697a      	ldr	r2, [r7, #20]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d307      	bcc.n	800c0ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f003 0301 	and.w	r3, r3, #1
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1f2      	bne.n	800c0b2 <HAL_DMA_IRQHandler+0x2ca>
 800c0cc:	e000      	b.n	800c0d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800c0ce:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2201      	movs	r2, #1
 800c0d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d005      	beq.n	800c0f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	4798      	blx	r3
 800c0f0:	e000      	b.n	800c0f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800c0f2:	bf00      	nop
    }
  }
}
 800c0f4:	3718      	adds	r7, #24
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop

0800c0fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b085      	sub	sp, #20
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
 800c108:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c118:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	2b40      	cmp	r3, #64	; 0x40
 800c128:	d108      	bne.n	800c13c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800c13a:	e007      	b.n	800c14c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	68ba      	ldr	r2, [r7, #8]
 800c142:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	687a      	ldr	r2, [r7, #4]
 800c14a:	60da      	str	r2, [r3, #12]
}
 800c14c:	bf00      	nop
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	b2db      	uxtb	r3, r3
 800c166:	3b10      	subs	r3, #16
 800c168:	4a14      	ldr	r2, [pc, #80]	; (800c1bc <DMA_CalcBaseAndBitshift+0x64>)
 800c16a:	fba2 2303 	umull	r2, r3, r2, r3
 800c16e:	091b      	lsrs	r3, r3, #4
 800c170:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800c172:	4a13      	ldr	r2, [pc, #76]	; (800c1c0 <DMA_CalcBaseAndBitshift+0x68>)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4413      	add	r3, r2
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	461a      	mov	r2, r3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2b03      	cmp	r3, #3
 800c184:	d909      	bls.n	800c19a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c18e:	f023 0303 	bic.w	r3, r3, #3
 800c192:	1d1a      	adds	r2, r3, #4
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	659a      	str	r2, [r3, #88]	; 0x58
 800c198:	e007      	b.n	800c1aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c1a2:	f023 0303 	bic.w	r3, r3, #3
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	3714      	adds	r7, #20
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	aaaaaaab 	.word	0xaaaaaaab
 800c1c0:	080155cc 	.word	0x080155cc

0800c1c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d11f      	bne.n	800c21e <DMA_CheckFifoParam+0x5a>
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	2b03      	cmp	r3, #3
 800c1e2:	d856      	bhi.n	800c292 <DMA_CheckFifoParam+0xce>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <DMA_CheckFifoParam+0x28>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c1fd 	.word	0x0800c1fd
 800c1f0:	0800c20f 	.word	0x0800c20f
 800c1f4:	0800c1fd 	.word	0x0800c1fd
 800c1f8:	0800c293 	.word	0x0800c293
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d046      	beq.n	800c296 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c20c:	e043      	b.n	800c296 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c212:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c216:	d140      	bne.n	800c29a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c21c:	e03d      	b.n	800c29a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	699b      	ldr	r3, [r3, #24]
 800c222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c226:	d121      	bne.n	800c26c <DMA_CheckFifoParam+0xa8>
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	d837      	bhi.n	800c29e <DMA_CheckFifoParam+0xda>
 800c22e:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <DMA_CheckFifoParam+0x70>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c245 	.word	0x0800c245
 800c238:	0800c24b 	.word	0x0800c24b
 800c23c:	0800c245 	.word	0x0800c245
 800c240:	0800c25d 	.word	0x0800c25d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	73fb      	strb	r3, [r7, #15]
      break;
 800c248:	e030      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c252:	2b00      	cmp	r3, #0
 800c254:	d025      	beq.n	800c2a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c25a:	e022      	b.n	800c2a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c264:	d11f      	bne.n	800c2a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800c26a:	e01c      	b.n	800c2a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b02      	cmp	r3, #2
 800c270:	d903      	bls.n	800c27a <DMA_CheckFifoParam+0xb6>
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2b03      	cmp	r3, #3
 800c276:	d003      	beq.n	800c280 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800c278:	e018      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	73fb      	strb	r3, [r7, #15]
      break;
 800c27e:	e015      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00e      	beq.n	800c2aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
      break;
 800c290:	e00b      	b.n	800c2aa <DMA_CheckFifoParam+0xe6>
      break;
 800c292:	bf00      	nop
 800c294:	e00a      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      break;
 800c296:	bf00      	nop
 800c298:	e008      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      break;
 800c29a:	bf00      	nop
 800c29c:	e006      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      break;
 800c29e:	bf00      	nop
 800c2a0:	e004      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      break;
 800c2a2:	bf00      	nop
 800c2a4:	e002      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      break;   
 800c2a6:	bf00      	nop
 800c2a8:	e000      	b.n	800c2ac <DMA_CheckFifoParam+0xe8>
      break;
 800c2aa:	bf00      	nop
    }
  } 
  
  return status; 
 800c2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop

0800c2bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b089      	sub	sp, #36	; 0x24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	e16b      	b.n	800c5b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800c2d8:	2201      	movs	r2, #1
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800c2ec:	693a      	ldr	r2, [r7, #16]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	f040 815a 	bne.w	800c5aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	f003 0303 	and.w	r3, r3, #3
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d005      	beq.n	800c30e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	685b      	ldr	r3, [r3, #4]
 800c306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d130      	bne.n	800c370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	005b      	lsls	r3, r3, #1
 800c318:	2203      	movs	r2, #3
 800c31a:	fa02 f303 	lsl.w	r3, r2, r3
 800c31e:	43db      	mvns	r3, r3
 800c320:	69ba      	ldr	r2, [r7, #24]
 800c322:	4013      	ands	r3, r2
 800c324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	68da      	ldr	r2, [r3, #12]
 800c32a:	69fb      	ldr	r3, [r7, #28]
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	fa02 f303 	lsl.w	r3, r2, r3
 800c332:	69ba      	ldr	r2, [r7, #24]
 800c334:	4313      	orrs	r3, r2
 800c336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	69ba      	ldr	r2, [r7, #24]
 800c33c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	685b      	ldr	r3, [r3, #4]
 800c342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800c344:	2201      	movs	r2, #1
 800c346:	69fb      	ldr	r3, [r7, #28]
 800c348:	fa02 f303 	lsl.w	r3, r2, r3
 800c34c:	43db      	mvns	r3, r3
 800c34e:	69ba      	ldr	r2, [r7, #24]
 800c350:	4013      	ands	r3, r2
 800c352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	091b      	lsrs	r3, r3, #4
 800c35a:	f003 0201 	and.w	r2, r3, #1
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	fa02 f303 	lsl.w	r3, r2, r3
 800c364:	69ba      	ldr	r2, [r7, #24]
 800c366:	4313      	orrs	r3, r2
 800c368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	69ba      	ldr	r2, [r7, #24]
 800c36e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	f003 0303 	and.w	r3, r3, #3
 800c378:	2b03      	cmp	r3, #3
 800c37a:	d017      	beq.n	800c3ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	005b      	lsls	r3, r3, #1
 800c386:	2203      	movs	r2, #3
 800c388:	fa02 f303 	lsl.w	r3, r2, r3
 800c38c:	43db      	mvns	r3, r3
 800c38e:	69ba      	ldr	r2, [r7, #24]
 800c390:	4013      	ands	r3, r2
 800c392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	005b      	lsls	r3, r3, #1
 800c39c:	fa02 f303 	lsl.w	r3, r2, r3
 800c3a0:	69ba      	ldr	r2, [r7, #24]
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	69ba      	ldr	r2, [r7, #24]
 800c3aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	f003 0303 	and.w	r3, r3, #3
 800c3b4:	2b02      	cmp	r3, #2
 800c3b6:	d123      	bne.n	800c400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	08da      	lsrs	r2, r3, #3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	3208      	adds	r2, #8
 800c3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800c3c6:	69fb      	ldr	r3, [r7, #28]
 800c3c8:	f003 0307 	and.w	r3, r3, #7
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	220f      	movs	r2, #15
 800c3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800c3d4:	43db      	mvns	r3, r3
 800c3d6:	69ba      	ldr	r2, [r7, #24]
 800c3d8:	4013      	ands	r3, r2
 800c3da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	691a      	ldr	r2, [r3, #16]
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c3f2:	69fb      	ldr	r3, [r7, #28]
 800c3f4:	08da      	lsrs	r2, r3, #3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3208      	adds	r2, #8
 800c3fa:	69b9      	ldr	r1, [r7, #24]
 800c3fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800c406:	69fb      	ldr	r3, [r7, #28]
 800c408:	005b      	lsls	r3, r3, #1
 800c40a:	2203      	movs	r2, #3
 800c40c:	fa02 f303 	lsl.w	r3, r2, r3
 800c410:	43db      	mvns	r3, r3
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	4013      	ands	r3, r2
 800c416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	f003 0203 	and.w	r2, r3, #3
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	005b      	lsls	r3, r3, #1
 800c424:	fa02 f303 	lsl.w	r3, r2, r3
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	69ba      	ldr	r2, [r7, #24]
 800c432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 80b4 	beq.w	800c5aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]
 800c446:	4b60      	ldr	r3, [pc, #384]	; (800c5c8 <HAL_GPIO_Init+0x30c>)
 800c448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44a:	4a5f      	ldr	r2, [pc, #380]	; (800c5c8 <HAL_GPIO_Init+0x30c>)
 800c44c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c450:	6453      	str	r3, [r2, #68]	; 0x44
 800c452:	4b5d      	ldr	r3, [pc, #372]	; (800c5c8 <HAL_GPIO_Init+0x30c>)
 800c454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c45e:	4a5b      	ldr	r2, [pc, #364]	; (800c5cc <HAL_GPIO_Init+0x310>)
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	089b      	lsrs	r3, r3, #2
 800c464:	3302      	adds	r3, #2
 800c466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c46a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	f003 0303 	and.w	r3, r3, #3
 800c472:	009b      	lsls	r3, r3, #2
 800c474:	220f      	movs	r2, #15
 800c476:	fa02 f303 	lsl.w	r3, r2, r3
 800c47a:	43db      	mvns	r3, r3
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	4013      	ands	r3, r2
 800c480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	4a52      	ldr	r2, [pc, #328]	; (800c5d0 <HAL_GPIO_Init+0x314>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d02b      	beq.n	800c4e2 <HAL_GPIO_Init+0x226>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a51      	ldr	r2, [pc, #324]	; (800c5d4 <HAL_GPIO_Init+0x318>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d025      	beq.n	800c4de <HAL_GPIO_Init+0x222>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a50      	ldr	r2, [pc, #320]	; (800c5d8 <HAL_GPIO_Init+0x31c>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d01f      	beq.n	800c4da <HAL_GPIO_Init+0x21e>
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a4f      	ldr	r2, [pc, #316]	; (800c5dc <HAL_GPIO_Init+0x320>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d019      	beq.n	800c4d6 <HAL_GPIO_Init+0x21a>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a4e      	ldr	r2, [pc, #312]	; (800c5e0 <HAL_GPIO_Init+0x324>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d013      	beq.n	800c4d2 <HAL_GPIO_Init+0x216>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a4d      	ldr	r2, [pc, #308]	; (800c5e4 <HAL_GPIO_Init+0x328>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d00d      	beq.n	800c4ce <HAL_GPIO_Init+0x212>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a4c      	ldr	r2, [pc, #304]	; (800c5e8 <HAL_GPIO_Init+0x32c>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d007      	beq.n	800c4ca <HAL_GPIO_Init+0x20e>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a4b      	ldr	r2, [pc, #300]	; (800c5ec <HAL_GPIO_Init+0x330>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d101      	bne.n	800c4c6 <HAL_GPIO_Init+0x20a>
 800c4c2:	2307      	movs	r3, #7
 800c4c4:	e00e      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4c6:	2308      	movs	r3, #8
 800c4c8:	e00c      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4ca:	2306      	movs	r3, #6
 800c4cc:	e00a      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4ce:	2305      	movs	r3, #5
 800c4d0:	e008      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4d2:	2304      	movs	r3, #4
 800c4d4:	e006      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e004      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4da:	2302      	movs	r3, #2
 800c4dc:	e002      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <HAL_GPIO_Init+0x228>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	69fa      	ldr	r2, [r7, #28]
 800c4e6:	f002 0203 	and.w	r2, r2, #3
 800c4ea:	0092      	lsls	r2, r2, #2
 800c4ec:	4093      	lsls	r3, r2
 800c4ee:	69ba      	ldr	r2, [r7, #24]
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c4f4:	4935      	ldr	r1, [pc, #212]	; (800c5cc <HAL_GPIO_Init+0x310>)
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	089b      	lsrs	r3, r3, #2
 800c4fa:	3302      	adds	r3, #2
 800c4fc:	69ba      	ldr	r2, [r7, #24]
 800c4fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c502:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c508:	693b      	ldr	r3, [r7, #16]
 800c50a:	43db      	mvns	r3, r3
 800c50c:	69ba      	ldr	r2, [r7, #24]
 800c50e:	4013      	ands	r3, r2
 800c510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d003      	beq.n	800c526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800c51e:	69ba      	ldr	r2, [r7, #24]
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	4313      	orrs	r3, r2
 800c524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c526:	4a32      	ldr	r2, [pc, #200]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c52c:	4b30      	ldr	r3, [pc, #192]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	43db      	mvns	r3, r3
 800c536:	69ba      	ldr	r2, [r7, #24]
 800c538:	4013      	ands	r3, r2
 800c53a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	4313      	orrs	r3, r2
 800c54e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c550:	4a27      	ldr	r2, [pc, #156]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c556:	4b26      	ldr	r3, [pc, #152]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	43db      	mvns	r3, r3
 800c560:	69ba      	ldr	r2, [r7, #24]
 800c562:	4013      	ands	r3, r2
 800c564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d003      	beq.n	800c57a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800c572:	69ba      	ldr	r2, [r7, #24]
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	4313      	orrs	r3, r2
 800c578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c57a:	4a1d      	ldr	r2, [pc, #116]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c57c:	69bb      	ldr	r3, [r7, #24]
 800c57e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c580:	4b1b      	ldr	r3, [pc, #108]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	43db      	mvns	r3, r3
 800c58a:	69ba      	ldr	r2, [r7, #24]
 800c58c:	4013      	ands	r3, r2
 800c58e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800c59c:	69ba      	ldr	r2, [r7, #24]
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	4313      	orrs	r3, r2
 800c5a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c5a4:	4a12      	ldr	r2, [pc, #72]	; (800c5f0 <HAL_GPIO_Init+0x334>)
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c5aa:	69fb      	ldr	r3, [r7, #28]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	61fb      	str	r3, [r7, #28]
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	2b0f      	cmp	r3, #15
 800c5b4:	f67f ae90 	bls.w	800c2d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800c5b8:	bf00      	nop
 800c5ba:	bf00      	nop
 800c5bc:	3724      	adds	r7, #36	; 0x24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr
 800c5c6:	bf00      	nop
 800c5c8:	40023800 	.word	0x40023800
 800c5cc:	40013800 	.word	0x40013800
 800c5d0:	40020000 	.word	0x40020000
 800c5d4:	40020400 	.word	0x40020400
 800c5d8:	40020800 	.word	0x40020800
 800c5dc:	40020c00 	.word	0x40020c00
 800c5e0:	40021000 	.word	0x40021000
 800c5e4:	40021400 	.word	0x40021400
 800c5e8:	40021800 	.word	0x40021800
 800c5ec:	40021c00 	.word	0x40021c00
 800c5f0:	40013c00 	.word	0x40013c00

0800c5f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b085      	sub	sp, #20
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	691a      	ldr	r2, [r3, #16]
 800c604:	887b      	ldrh	r3, [r7, #2]
 800c606:	4013      	ands	r3, r2
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c60c:	2301      	movs	r3, #1
 800c60e:	73fb      	strb	r3, [r7, #15]
 800c610:	e001      	b.n	800c616 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c612:	2300      	movs	r3, #0
 800c614:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c616:	7bfb      	ldrb	r3, [r7, #15]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3714      	adds	r7, #20
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
 800c62c:	460b      	mov	r3, r1
 800c62e:	807b      	strh	r3, [r7, #2]
 800c630:	4613      	mov	r3, r2
 800c632:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c634:	787b      	ldrb	r3, [r7, #1]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c63a:	887a      	ldrh	r2, [r7, #2]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c640:	e003      	b.n	800c64a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c642:	887b      	ldrh	r3, [r7, #2]
 800c644:	041a      	lsls	r2, r3, #16
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	619a      	str	r2, [r3, #24]
}
 800c64a:	bf00      	nop
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
	...

0800c658 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	4603      	mov	r3, r0
 800c660:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c662:	4b08      	ldr	r3, [pc, #32]	; (800c684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c664:	695a      	ldr	r2, [r3, #20]
 800c666:	88fb      	ldrh	r3, [r7, #6]
 800c668:	4013      	ands	r3, r2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d006      	beq.n	800c67c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c66e:	4a05      	ldr	r2, [pc, #20]	; (800c684 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c670:	88fb      	ldrh	r3, [r7, #6]
 800c672:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c674:	88fb      	ldrh	r3, [r7, #6]
 800c676:	4618      	mov	r0, r3
 800c678:	f7fc fec4 	bl	8009404 <HAL_GPIO_EXTI_Callback>
  }
}
 800c67c:	bf00      	nop
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}
 800c684:	40013c00 	.word	0x40013c00

0800c688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d101      	bne.n	800c69a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c696:	2301      	movs	r3, #1
 800c698:	e12b      	b.n	800c8f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f7fc fee2 	bl	8009478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2224      	movs	r2, #36	; 0x24
 800c6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f022 0201 	bic.w	r2, r2, #1
 800c6ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800c6ec:	f001 fbee 	bl	800decc <HAL_RCC_GetPCLK1Freq>
 800c6f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	4a81      	ldr	r2, [pc, #516]	; (800c8fc <HAL_I2C_Init+0x274>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d807      	bhi.n	800c70c <HAL_I2C_Init+0x84>
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	4a80      	ldr	r2, [pc, #512]	; (800c900 <HAL_I2C_Init+0x278>)
 800c700:	4293      	cmp	r3, r2
 800c702:	bf94      	ite	ls
 800c704:	2301      	movls	r3, #1
 800c706:	2300      	movhi	r3, #0
 800c708:	b2db      	uxtb	r3, r3
 800c70a:	e006      	b.n	800c71a <HAL_I2C_Init+0x92>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	4a7d      	ldr	r2, [pc, #500]	; (800c904 <HAL_I2C_Init+0x27c>)
 800c710:	4293      	cmp	r3, r2
 800c712:	bf94      	ite	ls
 800c714:	2301      	movls	r3, #1
 800c716:	2300      	movhi	r3, #0
 800c718:	b2db      	uxtb	r3, r3
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e0e7      	b.n	800c8f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	4a78      	ldr	r2, [pc, #480]	; (800c908 <HAL_I2C_Init+0x280>)
 800c726:	fba2 2303 	umull	r2, r3, r2, r3
 800c72a:	0c9b      	lsrs	r3, r3, #18
 800c72c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	685b      	ldr	r3, [r3, #4]
 800c734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68ba      	ldr	r2, [r7, #8]
 800c73e:	430a      	orrs	r2, r1
 800c740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	6a1b      	ldr	r3, [r3, #32]
 800c748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4a6a      	ldr	r2, [pc, #424]	; (800c8fc <HAL_I2C_Init+0x274>)
 800c752:	4293      	cmp	r3, r2
 800c754:	d802      	bhi.n	800c75c <HAL_I2C_Init+0xd4>
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	3301      	adds	r3, #1
 800c75a:	e009      	b.n	800c770 <HAL_I2C_Init+0xe8>
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c762:	fb02 f303 	mul.w	r3, r2, r3
 800c766:	4a69      	ldr	r2, [pc, #420]	; (800c90c <HAL_I2C_Init+0x284>)
 800c768:	fba2 2303 	umull	r2, r3, r2, r3
 800c76c:	099b      	lsrs	r3, r3, #6
 800c76e:	3301      	adds	r3, #1
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	6812      	ldr	r2, [r2, #0]
 800c774:	430b      	orrs	r3, r1
 800c776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	685b      	ldr	r3, [r3, #4]
 800c78a:	495c      	ldr	r1, [pc, #368]	; (800c8fc <HAL_I2C_Init+0x274>)
 800c78c:	428b      	cmp	r3, r1
 800c78e:	d819      	bhi.n	800c7c4 <HAL_I2C_Init+0x13c>
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	1e59      	subs	r1, r3, #1
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	005b      	lsls	r3, r3, #1
 800c79a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c79e:	1c59      	adds	r1, r3, #1
 800c7a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c7a4:	400b      	ands	r3, r1
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00a      	beq.n	800c7c0 <HAL_I2C_Init+0x138>
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	1e59      	subs	r1, r3, #1
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	685b      	ldr	r3, [r3, #4]
 800c7b2:	005b      	lsls	r3, r3, #1
 800c7b4:	fbb1 f3f3 	udiv	r3, r1, r3
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7be:	e051      	b.n	800c864 <HAL_I2C_Init+0x1dc>
 800c7c0:	2304      	movs	r3, #4
 800c7c2:	e04f      	b.n	800c864 <HAL_I2C_Init+0x1dc>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	689b      	ldr	r3, [r3, #8]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d111      	bne.n	800c7f0 <HAL_I2C_Init+0x168>
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	1e58      	subs	r0, r3, #1
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6859      	ldr	r1, [r3, #4]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	005b      	lsls	r3, r3, #1
 800c7d8:	440b      	add	r3, r1
 800c7da:	fbb0 f3f3 	udiv	r3, r0, r3
 800c7de:	3301      	adds	r3, #1
 800c7e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	bf0c      	ite	eq
 800c7e8:	2301      	moveq	r3, #1
 800c7ea:	2300      	movne	r3, #0
 800c7ec:	b2db      	uxtb	r3, r3
 800c7ee:	e012      	b.n	800c816 <HAL_I2C_Init+0x18e>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	1e58      	subs	r0, r3, #1
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6859      	ldr	r1, [r3, #4]
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	009b      	lsls	r3, r3, #2
 800c7fc:	440b      	add	r3, r1
 800c7fe:	0099      	lsls	r1, r3, #2
 800c800:	440b      	add	r3, r1
 800c802:	fbb0 f3f3 	udiv	r3, r0, r3
 800c806:	3301      	adds	r3, #1
 800c808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	bf0c      	ite	eq
 800c810:	2301      	moveq	r3, #1
 800c812:	2300      	movne	r3, #0
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b00      	cmp	r3, #0
 800c818:	d001      	beq.n	800c81e <HAL_I2C_Init+0x196>
 800c81a:	2301      	movs	r3, #1
 800c81c:	e022      	b.n	800c864 <HAL_I2C_Init+0x1dc>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10e      	bne.n	800c844 <HAL_I2C_Init+0x1bc>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	1e58      	subs	r0, r3, #1
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6859      	ldr	r1, [r3, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	005b      	lsls	r3, r3, #1
 800c832:	440b      	add	r3, r1
 800c834:	fbb0 f3f3 	udiv	r3, r0, r3
 800c838:	3301      	adds	r3, #1
 800c83a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c83e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c842:	e00f      	b.n	800c864 <HAL_I2C_Init+0x1dc>
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	1e58      	subs	r0, r3, #1
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6859      	ldr	r1, [r3, #4]
 800c84c:	460b      	mov	r3, r1
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	440b      	add	r3, r1
 800c852:	0099      	lsls	r1, r3, #2
 800c854:	440b      	add	r3, r1
 800c856:	fbb0 f3f3 	udiv	r3, r0, r3
 800c85a:	3301      	adds	r3, #1
 800c85c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c864:	6879      	ldr	r1, [r7, #4]
 800c866:	6809      	ldr	r1, [r1, #0]
 800c868:	4313      	orrs	r3, r2
 800c86a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	69da      	ldr	r2, [r3, #28]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6a1b      	ldr	r3, [r3, #32]
 800c87e:	431a      	orrs	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	430a      	orrs	r2, r1
 800c886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	6911      	ldr	r1, [r2, #16]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	68d2      	ldr	r2, [r2, #12]
 800c89e:	4311      	orrs	r1, r2
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	6812      	ldr	r2, [r2, #0]
 800c8a4:	430b      	orrs	r3, r1
 800c8a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	68db      	ldr	r3, [r3, #12]
 800c8ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	695a      	ldr	r2, [r3, #20]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	430a      	orrs	r2, r1
 800c8c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f042 0201 	orr.w	r2, r2, #1
 800c8d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	000186a0 	.word	0x000186a0
 800c900:	001e847f 	.word	0x001e847f
 800c904:	003d08ff 	.word	0x003d08ff
 800c908:	431bde83 	.word	0x431bde83
 800c90c:	10624dd3 	.word	0x10624dd3

0800c910 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af02      	add	r7, sp, #8
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	4608      	mov	r0, r1
 800c91a:	4611      	mov	r1, r2
 800c91c:	461a      	mov	r2, r3
 800c91e:	4603      	mov	r3, r0
 800c920:	817b      	strh	r3, [r7, #10]
 800c922:	460b      	mov	r3, r1
 800c924:	813b      	strh	r3, [r7, #8]
 800c926:	4613      	mov	r3, r2
 800c928:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800c92a:	f7fe f921 	bl	800ab70 <HAL_GetTick>
 800c92e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b20      	cmp	r3, #32
 800c93a:	f040 80d9 	bne.w	800caf0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	2319      	movs	r3, #25
 800c944:	2201      	movs	r2, #1
 800c946:	496d      	ldr	r1, [pc, #436]	; (800cafc <HAL_I2C_Mem_Write+0x1ec>)
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f000 fc7f 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800c94e:	4603      	mov	r3, r0
 800c950:	2b00      	cmp	r3, #0
 800c952:	d001      	beq.n	800c958 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800c954:	2302      	movs	r3, #2
 800c956:	e0cc      	b.n	800caf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d101      	bne.n	800c966 <HAL_I2C_Mem_Write+0x56>
 800c962:	2302      	movs	r3, #2
 800c964:	e0c5      	b.n	800caf2 <HAL_I2C_Mem_Write+0x1e2>
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2201      	movs	r2, #1
 800c96a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f003 0301 	and.w	r3, r3, #1
 800c978:	2b01      	cmp	r3, #1
 800c97a:	d007      	beq.n	800c98c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	f042 0201 	orr.w	r2, r2, #1
 800c98a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c99a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2221      	movs	r2, #33	; 0x21
 800c9a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2240      	movs	r2, #64	; 0x40
 800c9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6a3a      	ldr	r2, [r7, #32]
 800c9b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	4a4d      	ldr	r2, [pc, #308]	; (800cb00 <HAL_I2C_Mem_Write+0x1f0>)
 800c9cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c9ce:	88f8      	ldrh	r0, [r7, #6]
 800c9d0:	893a      	ldrh	r2, [r7, #8]
 800c9d2:	8979      	ldrh	r1, [r7, #10]
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	9301      	str	r3, [sp, #4]
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	9300      	str	r3, [sp, #0]
 800c9dc:	4603      	mov	r3, r0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f000 fab6 	bl	800cf50 <I2C_RequestMemoryWrite>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d052      	beq.n	800ca90 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e081      	b.n	800caf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 fd00 	bl	800d3f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d00d      	beq.n	800ca1a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca02:	2b04      	cmp	r3, #4
 800ca04:	d107      	bne.n	800ca16 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	681a      	ldr	r2, [r3, #0]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ca14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e06b      	b.n	800caf2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca1e:	781a      	ldrb	r2, [r3, #0]
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca34:	3b01      	subs	r3, #1
 800ca36:	b29a      	uxth	r2, r3
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	3b01      	subs	r3, #1
 800ca44:	b29a      	uxth	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	695b      	ldr	r3, [r3, #20]
 800ca50:	f003 0304 	and.w	r3, r3, #4
 800ca54:	2b04      	cmp	r3, #4
 800ca56:	d11b      	bne.n	800ca90 <HAL_I2C_Mem_Write+0x180>
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d017      	beq.n	800ca90 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca64:	781a      	ldrb	r2, [r3, #0]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	1c5a      	adds	r2, r3, #1
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca86:	b29b      	uxth	r3, r3
 800ca88:	3b01      	subs	r3, #1
 800ca8a:	b29a      	uxth	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d1aa      	bne.n	800c9ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ca98:	697a      	ldr	r2, [r7, #20]
 800ca9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca9c:	68f8      	ldr	r0, [r7, #12]
 800ca9e:	f000 fcec 	bl	800d47a <I2C_WaitOnBTFFlagUntilTimeout>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00d      	beq.n	800cac4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caac:	2b04      	cmp	r3, #4
 800caae:	d107      	bne.n	800cac0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cabe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800cac0:	2301      	movs	r3, #1
 800cac2:	e016      	b.n	800caf2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	2220      	movs	r2, #32
 800cad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2200      	movs	r2, #0
 800cae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800caec:	2300      	movs	r3, #0
 800caee:	e000      	b.n	800caf2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800caf0:	2302      	movs	r3, #2
  }
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	00100002 	.word	0x00100002
 800cb00:	ffff0000 	.word	0xffff0000

0800cb04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08c      	sub	sp, #48	; 0x30
 800cb08:	af02      	add	r7, sp, #8
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	4608      	mov	r0, r1
 800cb0e:	4611      	mov	r1, r2
 800cb10:	461a      	mov	r2, r3
 800cb12:	4603      	mov	r3, r0
 800cb14:	817b      	strh	r3, [r7, #10]
 800cb16:	460b      	mov	r3, r1
 800cb18:	813b      	strh	r3, [r7, #8]
 800cb1a:	4613      	mov	r3, r2
 800cb1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800cb1e:	f7fe f827 	bl	800ab70 <HAL_GetTick>
 800cb22:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b20      	cmp	r3, #32
 800cb2e:	f040 8208 	bne.w	800cf42 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	9300      	str	r3, [sp, #0]
 800cb36:	2319      	movs	r3, #25
 800cb38:	2201      	movs	r2, #1
 800cb3a:	497b      	ldr	r1, [pc, #492]	; (800cd28 <HAL_I2C_Mem_Read+0x224>)
 800cb3c:	68f8      	ldr	r0, [r7, #12]
 800cb3e:	f000 fb85 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d001      	beq.n	800cb4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800cb48:	2302      	movs	r3, #2
 800cb4a:	e1fb      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb52:	2b01      	cmp	r3, #1
 800cb54:	d101      	bne.n	800cb5a <HAL_I2C_Mem_Read+0x56>
 800cb56:	2302      	movs	r3, #2
 800cb58:	e1f4      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2201      	movs	r2, #1
 800cb5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0301 	and.w	r3, r3, #1
 800cb6c:	2b01      	cmp	r3, #1
 800cb6e:	d007      	beq.n	800cb80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	681a      	ldr	r2, [r3, #0]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f042 0201 	orr.w	r2, r2, #1
 800cb7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2222      	movs	r2, #34	; 0x22
 800cb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	2240      	movs	r2, #64	; 0x40
 800cb9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cbb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	4a5b      	ldr	r2, [pc, #364]	; (800cd2c <HAL_I2C_Mem_Read+0x228>)
 800cbc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cbc2:	88f8      	ldrh	r0, [r7, #6]
 800cbc4:	893a      	ldrh	r2, [r7, #8]
 800cbc6:	8979      	ldrh	r1, [r7, #10]
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	9301      	str	r3, [sp, #4]
 800cbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f000 fa52 	bl	800d07c <I2C_RequestMemoryRead>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e1b0      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d113      	bne.n	800cc12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cbea:	2300      	movs	r3, #0
 800cbec:	623b      	str	r3, [r7, #32]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	695b      	ldr	r3, [r3, #20]
 800cbf4:	623b      	str	r3, [r7, #32]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	699b      	ldr	r3, [r3, #24]
 800cbfc:	623b      	str	r3, [r7, #32]
 800cbfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc0e:	601a      	str	r2, [r3, #0]
 800cc10:	e184      	b.n	800cf1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d11b      	bne.n	800cc52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	61fb      	str	r3, [r7, #28]
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	695b      	ldr	r3, [r3, #20]
 800cc34:	61fb      	str	r3, [r7, #28]
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	61fb      	str	r3, [r7, #28]
 800cc3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cc4e:	601a      	str	r2, [r3, #0]
 800cc50:	e164      	b.n	800cf1c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc56:	2b02      	cmp	r3, #2
 800cc58:	d11b      	bne.n	800cc92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	61bb      	str	r3, [r7, #24]
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	695b      	ldr	r3, [r3, #20]
 800cc84:	61bb      	str	r3, [r7, #24]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	61bb      	str	r3, [r7, #24]
 800cc8e:	69bb      	ldr	r3, [r7, #24]
 800cc90:	e144      	b.n	800cf1c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cc92:	2300      	movs	r3, #0
 800cc94:	617b      	str	r3, [r7, #20]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	695b      	ldr	r3, [r3, #20]
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	699b      	ldr	r3, [r3, #24]
 800cca4:	617b      	str	r3, [r7, #20]
 800cca6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800cca8:	e138      	b.n	800cf1c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccae:	2b03      	cmp	r3, #3
 800ccb0:	f200 80f1 	bhi.w	800ce96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	d123      	bne.n	800cd04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ccbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ccbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ccc0:	68f8      	ldr	r0, [r7, #12]
 800ccc2:	f000 fc1b 	bl	800d4fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800ccc6:	4603      	mov	r3, r0
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d001      	beq.n	800ccd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e139      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	691a      	ldr	r2, [r3, #16]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccda:	b2d2      	uxtb	r2, r2
 800ccdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce2:	1c5a      	adds	r2, r3, #1
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccec:	3b01      	subs	r3, #1
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	b29a      	uxth	r2, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cd02:	e10b      	b.n	800cf1c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d14e      	bne.n	800cdaa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0e:	9300      	str	r3, [sp, #0]
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	2200      	movs	r2, #0
 800cd14:	4906      	ldr	r1, [pc, #24]	; (800cd30 <HAL_I2C_Mem_Read+0x22c>)
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 fa98 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d008      	beq.n	800cd34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800cd22:	2301      	movs	r3, #1
 800cd24:	e10e      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
 800cd26:	bf00      	nop
 800cd28:	00100002 	.word	0x00100002
 800cd2c:	ffff0000 	.word	0xffff0000
 800cd30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800cd42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	691a      	ldr	r2, [r3, #16]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd4e:	b2d2      	uxtb	r2, r2
 800cd50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd60:	3b01      	subs	r3, #1
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	3b01      	subs	r3, #1
 800cd70:	b29a      	uxth	r2, r3
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	691a      	ldr	r2, [r3, #16]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd80:	b2d2      	uxtb	r2, r2
 800cd82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd92:	3b01      	subs	r3, #1
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	3b01      	subs	r3, #1
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cda8:	e0b8      	b.n	800cf1c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	4966      	ldr	r1, [pc, #408]	; (800cf4c <HAL_I2C_Mem_Read+0x448>)
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 fa49 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	e0bf      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cdd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	691a      	ldr	r2, [r3, #16]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdde:	b2d2      	uxtb	r2, r2
 800cde0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde6:	1c5a      	adds	r2, r3, #1
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdf0:	3b01      	subs	r3, #1
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	b29a      	uxth	r2, r3
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ce06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	494f      	ldr	r1, [pc, #316]	; (800cf4c <HAL_I2C_Mem_Read+0x448>)
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f000 fa1b 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d001      	beq.n	800ce20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e091      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	691a      	ldr	r2, [r3, #16]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3a:	b2d2      	uxtb	r2, r2
 800ce3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce42:	1c5a      	adds	r2, r3, #1
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce58:	b29b      	uxth	r3, r3
 800ce5a:	3b01      	subs	r3, #1
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	691a      	ldr	r2, [r3, #16]
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6c:	b2d2      	uxtb	r2, r2
 800ce6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce74:	1c5a      	adds	r2, r3, #1
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce7e:	3b01      	subs	r3, #1
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce94:	e042      	b.n	800cf1c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce9a:	68f8      	ldr	r0, [r7, #12]
 800ce9c:	f000 fb2e 	bl	800d4fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800cea0:	4603      	mov	r3, r0
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d001      	beq.n	800ceaa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e04c      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	691a      	ldr	r2, [r3, #16]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceb4:	b2d2      	uxtb	r2, r2
 800ceb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cebc:	1c5a      	adds	r2, r3, #1
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cec6:	3b01      	subs	r3, #1
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	3b01      	subs	r3, #1
 800ced6:	b29a      	uxth	r2, r3
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	695b      	ldr	r3, [r3, #20]
 800cee2:	f003 0304 	and.w	r3, r3, #4
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	d118      	bne.n	800cf1c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	691a      	ldr	r2, [r3, #16]
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef4:	b2d2      	uxtb	r2, r2
 800cef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefc:	1c5a      	adds	r2, r3, #1
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf06:	3b01      	subs	r3, #1
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	3b01      	subs	r3, #1
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f47f aec2 	bne.w	800ccaa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2220      	movs	r2, #32
 800cf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e000      	b.n	800cf44 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800cf42:	2302      	movs	r3, #2
  }
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3728      	adds	r7, #40	; 0x28
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}
 800cf4c:	00010004 	.word	0x00010004

0800cf50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b088      	sub	sp, #32
 800cf54:	af02      	add	r7, sp, #8
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	4608      	mov	r0, r1
 800cf5a:	4611      	mov	r1, r2
 800cf5c:	461a      	mov	r2, r3
 800cf5e:	4603      	mov	r3, r0
 800cf60:	817b      	strh	r3, [r7, #10]
 800cf62:	460b      	mov	r3, r1
 800cf64:	813b      	strh	r3, [r7, #8]
 800cf66:	4613      	mov	r3, r2
 800cf68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cf78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7c:	9300      	str	r3, [sp, #0]
 800cf7e:	6a3b      	ldr	r3, [r7, #32]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f000 f960 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00d      	beq.n	800cfae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfa0:	d103      	bne.n	800cfaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800cfaa:	2303      	movs	r3, #3
 800cfac:	e05f      	b.n	800d06e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800cfae:	897b      	ldrh	r3, [r7, #10]
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800cfbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800cfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc0:	6a3a      	ldr	r2, [r7, #32]
 800cfc2:	492d      	ldr	r1, [pc, #180]	; (800d078 <I2C_RequestMemoryWrite+0x128>)
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f000 f998 	bl	800d2fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d001      	beq.n	800cfd4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	e04c      	b.n	800d06e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	617b      	str	r3, [r7, #20]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	695b      	ldr	r3, [r3, #20]
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	699b      	ldr	r3, [r3, #24]
 800cfe6:	617b      	str	r3, [r7, #20]
 800cfe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cfea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfec:	6a39      	ldr	r1, [r7, #32]
 800cfee:	68f8      	ldr	r0, [r7, #12]
 800cff0:	f000 fa02 	bl	800d3f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00d      	beq.n	800d016 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffe:	2b04      	cmp	r3, #4
 800d000:	d107      	bne.n	800d012 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681a      	ldr	r2, [r3, #0]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	e02b      	b.n	800d06e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d016:	88fb      	ldrh	r3, [r7, #6]
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d105      	bne.n	800d028 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d01c:	893b      	ldrh	r3, [r7, #8]
 800d01e:	b2da      	uxtb	r2, r3
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	611a      	str	r2, [r3, #16]
 800d026:	e021      	b.n	800d06c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d028:	893b      	ldrh	r3, [r7, #8]
 800d02a:	0a1b      	lsrs	r3, r3, #8
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	b2da      	uxtb	r2, r3
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d038:	6a39      	ldr	r1, [r7, #32]
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f000 f9dc 	bl	800d3f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00d      	beq.n	800d062 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04a:	2b04      	cmp	r3, #4
 800d04c:	d107      	bne.n	800d05e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d05c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d05e:	2301      	movs	r3, #1
 800d060:	e005      	b.n	800d06e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d062:	893b      	ldrh	r3, [r7, #8]
 800d064:	b2da      	uxtb	r2, r3
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3718      	adds	r7, #24
 800d072:	46bd      	mov	sp, r7
 800d074:	bd80      	pop	{r7, pc}
 800d076:	bf00      	nop
 800d078:	00010002 	.word	0x00010002

0800d07c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b088      	sub	sp, #32
 800d080:	af02      	add	r7, sp, #8
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	4608      	mov	r0, r1
 800d086:	4611      	mov	r1, r2
 800d088:	461a      	mov	r2, r3
 800d08a:	4603      	mov	r3, r0
 800d08c:	817b      	strh	r3, [r7, #10]
 800d08e:	460b      	mov	r3, r1
 800d090:	813b      	strh	r3, [r7, #8]
 800d092:	4613      	mov	r3, r2
 800d094:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d0a4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	681a      	ldr	r2, [r3, #0]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d0b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b8:	9300      	str	r3, [sp, #0]
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d0c2:	68f8      	ldr	r0, [r7, #12]
 800d0c4:	f000 f8c2 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00d      	beq.n	800d0ea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0dc:	d103      	bne.n	800d0e6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d0e6:	2303      	movs	r3, #3
 800d0e8:	e0aa      	b.n	800d240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800d0ea:	897b      	ldrh	r3, [r7, #10]
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800d0f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	6a3a      	ldr	r2, [r7, #32]
 800d0fe:	4952      	ldr	r1, [pc, #328]	; (800d248 <I2C_RequestMemoryRead+0x1cc>)
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f000 f8fa 	bl	800d2fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d001      	beq.n	800d110 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800d10c:	2301      	movs	r3, #1
 800d10e:	e097      	b.n	800d240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800d110:	2300      	movs	r3, #0
 800d112:	617b      	str	r3, [r7, #20]
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	695b      	ldr	r3, [r3, #20]
 800d11a:	617b      	str	r3, [r7, #20]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	699b      	ldr	r3, [r3, #24]
 800d122:	617b      	str	r3, [r7, #20]
 800d124:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d128:	6a39      	ldr	r1, [r7, #32]
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f000 f964 	bl	800d3f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d130:	4603      	mov	r3, r0
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00d      	beq.n	800d152 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d13a:	2b04      	cmp	r3, #4
 800d13c:	d107      	bne.n	800d14e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d14c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e076      	b.n	800d240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d152:	88fb      	ldrh	r3, [r7, #6]
 800d154:	2b01      	cmp	r3, #1
 800d156:	d105      	bne.n	800d164 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d158:	893b      	ldrh	r3, [r7, #8]
 800d15a:	b2da      	uxtb	r2, r3
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	611a      	str	r2, [r3, #16]
 800d162:	e021      	b.n	800d1a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800d164:	893b      	ldrh	r3, [r7, #8]
 800d166:	0a1b      	lsrs	r3, r3, #8
 800d168:	b29b      	uxth	r3, r3
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d174:	6a39      	ldr	r1, [r7, #32]
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	f000 f93e 	bl	800d3f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d17c:	4603      	mov	r3, r0
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d00d      	beq.n	800d19e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d186:	2b04      	cmp	r3, #4
 800d188:	d107      	bne.n	800d19a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d198:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800d19a:	2301      	movs	r3, #1
 800d19c:	e050      	b.n	800d240 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800d19e:	893b      	ldrh	r3, [r7, #8]
 800d1a0:	b2da      	uxtb	r2, r3
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1aa:	6a39      	ldr	r1, [r7, #32]
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f000 f923 	bl	800d3f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00d      	beq.n	800d1d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d107      	bne.n	800d1d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	681a      	ldr	r2, [r3, #0]
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d1ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e035      	b.n	800d240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d1e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1e6:	9300      	str	r3, [sp, #0]
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800d1f0:	68f8      	ldr	r0, [r7, #12]
 800d1f2:	f000 f82b 	bl	800d24c <I2C_WaitOnFlagUntilTimeout>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00d      	beq.n	800d218 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d20a:	d103      	bne.n	800d214 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	e013      	b.n	800d240 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800d218:	897b      	ldrh	r3, [r7, #10]
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	f043 0301 	orr.w	r3, r3, #1
 800d220:	b2da      	uxtb	r2, r3
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800d228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22a:	6a3a      	ldr	r2, [r7, #32]
 800d22c:	4906      	ldr	r1, [pc, #24]	; (800d248 <I2C_RequestMemoryRead+0x1cc>)
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f000 f863 	bl	800d2fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d001      	beq.n	800d23e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e000      	b.n	800d240 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800d23e:	2300      	movs	r3, #0
}
 800d240:	4618      	mov	r0, r3
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	00010002 	.word	0x00010002

0800d24c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	60f8      	str	r0, [r7, #12]
 800d254:	60b9      	str	r1, [r7, #8]
 800d256:	603b      	str	r3, [r7, #0]
 800d258:	4613      	mov	r3, r2
 800d25a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d25c:	e025      	b.n	800d2aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d264:	d021      	beq.n	800d2aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d266:	f7fd fc83 	bl	800ab70 <HAL_GetTick>
 800d26a:	4602      	mov	r2, r0
 800d26c:	69bb      	ldr	r3, [r7, #24]
 800d26e:	1ad3      	subs	r3, r2, r3
 800d270:	683a      	ldr	r2, [r7, #0]
 800d272:	429a      	cmp	r2, r3
 800d274:	d302      	bcc.n	800d27c <I2C_WaitOnFlagUntilTimeout+0x30>
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d116      	bne.n	800d2aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2200      	movs	r2, #0
 800d280:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2220      	movs	r2, #32
 800d286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d296:	f043 0220 	orr.w	r2, r3, #32
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e023      	b.n	800d2f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	0c1b      	lsrs	r3, r3, #16
 800d2ae:	b2db      	uxtb	r3, r3
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d10d      	bne.n	800d2d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	695b      	ldr	r3, [r3, #20]
 800d2ba:	43da      	mvns	r2, r3
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	4013      	ands	r3, r2
 800d2c0:	b29b      	uxth	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	bf0c      	ite	eq
 800d2c6:	2301      	moveq	r3, #1
 800d2c8:	2300      	movne	r3, #0
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	e00c      	b.n	800d2ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	699b      	ldr	r3, [r3, #24]
 800d2d6:	43da      	mvns	r2, r3
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	4013      	ands	r3, r2
 800d2dc:	b29b      	uxth	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	bf0c      	ite	eq
 800d2e2:	2301      	moveq	r3, #1
 800d2e4:	2300      	movne	r3, #0
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	79fb      	ldrb	r3, [r7, #7]
 800d2ec:	429a      	cmp	r2, r3
 800d2ee:	d0b6      	beq.n	800d25e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d2f0:	2300      	movs	r3, #0
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}

0800d2fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800d2fa:	b580      	push	{r7, lr}
 800d2fc:	b084      	sub	sp, #16
 800d2fe:	af00      	add	r7, sp, #0
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	60b9      	str	r1, [r7, #8]
 800d304:	607a      	str	r2, [r7, #4]
 800d306:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d308:	e051      	b.n	800d3ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	695b      	ldr	r3, [r3, #20]
 800d310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d318:	d123      	bne.n	800d362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	681a      	ldr	r2, [r3, #0]
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d328:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d332:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	2200      	movs	r2, #0
 800d338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2220      	movs	r2, #32
 800d33e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2200      	movs	r2, #0
 800d346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34e:	f043 0204 	orr.w	r2, r3, #4
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2200      	movs	r2, #0
 800d35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	e046      	b.n	800d3f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d368:	d021      	beq.n	800d3ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d36a:	f7fd fc01 	bl	800ab70 <HAL_GetTick>
 800d36e:	4602      	mov	r2, r0
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	429a      	cmp	r2, r3
 800d378:	d302      	bcc.n	800d380 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d116      	bne.n	800d3ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	2200      	movs	r2, #0
 800d384:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2220      	movs	r2, #32
 800d38a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2200      	movs	r2, #0
 800d392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39a:	f043 0220 	orr.w	r2, r3, #32
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d3aa:	2301      	movs	r3, #1
 800d3ac:	e020      	b.n	800d3f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	0c1b      	lsrs	r3, r3, #16
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d10c      	bne.n	800d3d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	695b      	ldr	r3, [r3, #20]
 800d3be:	43da      	mvns	r2, r3
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	4013      	ands	r3, r2
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	bf14      	ite	ne
 800d3ca:	2301      	movne	r3, #1
 800d3cc:	2300      	moveq	r3, #0
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	e00b      	b.n	800d3ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	699b      	ldr	r3, [r3, #24]
 800d3d8:	43da      	mvns	r2, r3
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	4013      	ands	r3, r2
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bf14      	ite	ne
 800d3e4:	2301      	movne	r3, #1
 800d3e6:	2300      	moveq	r3, #0
 800d3e8:	b2db      	uxtb	r3, r3
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d18d      	bne.n	800d30a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3710      	adds	r7, #16
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b084      	sub	sp, #16
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	60f8      	str	r0, [r7, #12]
 800d400:	60b9      	str	r1, [r7, #8]
 800d402:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d404:	e02d      	b.n	800d462 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d406:	68f8      	ldr	r0, [r7, #12]
 800d408:	f000 f8ce 	bl	800d5a8 <I2C_IsAcknowledgeFailed>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d412:	2301      	movs	r3, #1
 800d414:	e02d      	b.n	800d472 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41c:	d021      	beq.n	800d462 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d41e:	f7fd fba7 	bl	800ab70 <HAL_GetTick>
 800d422:	4602      	mov	r2, r0
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	1ad3      	subs	r3, r2, r3
 800d428:	68ba      	ldr	r2, [r7, #8]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d302      	bcc.n	800d434 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d116      	bne.n	800d462 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2200      	movs	r2, #0
 800d438:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	2220      	movs	r2, #32
 800d43e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	2200      	movs	r2, #0
 800d446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44e:	f043 0220 	orr.w	r2, r3, #32
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2200      	movs	r2, #0
 800d45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d45e:	2301      	movs	r3, #1
 800d460:	e007      	b.n	800d472 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	695b      	ldr	r3, [r3, #20]
 800d468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d46c:	2b80      	cmp	r3, #128	; 0x80
 800d46e:	d1ca      	bne.n	800d406 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d470:	2300      	movs	r3, #0
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b084      	sub	sp, #16
 800d47e:	af00      	add	r7, sp, #0
 800d480:	60f8      	str	r0, [r7, #12]
 800d482:	60b9      	str	r1, [r7, #8]
 800d484:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d486:	e02d      	b.n	800d4e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 f88d 	bl	800d5a8 <I2C_IsAcknowledgeFailed>
 800d48e:	4603      	mov	r3, r0
 800d490:	2b00      	cmp	r3, #0
 800d492:	d001      	beq.n	800d498 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800d494:	2301      	movs	r3, #1
 800d496:	e02d      	b.n	800d4f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d49e:	d021      	beq.n	800d4e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4a0:	f7fd fb66 	bl	800ab70 <HAL_GetTick>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	68ba      	ldr	r2, [r7, #8]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d302      	bcc.n	800d4b6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d116      	bne.n	800d4e4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2220      	movs	r2, #32
 800d4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d0:	f043 0220 	orr.w	r2, r3, #32
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800d4e0:	2301      	movs	r3, #1
 800d4e2:	e007      	b.n	800d4f4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	695b      	ldr	r3, [r3, #20]
 800d4ea:	f003 0304 	and.w	r3, r3, #4
 800d4ee:	2b04      	cmp	r3, #4
 800d4f0:	d1ca      	bne.n	800d488 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d4f2:	2300      	movs	r3, #0
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3710      	adds	r7, #16
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d508:	e042      	b.n	800d590 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	f003 0310 	and.w	r3, r3, #16
 800d514:	2b10      	cmp	r3, #16
 800d516:	d119      	bne.n	800d54c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	f06f 0210 	mvn.w	r2, #16
 800d520:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2200      	movs	r2, #0
 800d526:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2220      	movs	r2, #32
 800d52c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2200      	movs	r2, #0
 800d534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	2200      	movs	r2, #0
 800d544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d548:	2301      	movs	r3, #1
 800d54a:	e029      	b.n	800d5a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d54c:	f7fd fb10 	bl	800ab70 <HAL_GetTick>
 800d550:	4602      	mov	r2, r0
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	1ad3      	subs	r3, r2, r3
 800d556:	68ba      	ldr	r2, [r7, #8]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d302      	bcc.n	800d562 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d116      	bne.n	800d590 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2200      	movs	r2, #0
 800d566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2220      	movs	r2, #32
 800d56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57c:	f043 0220 	orr.w	r2, r3, #32
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800d58c:	2301      	movs	r3, #1
 800d58e:	e007      	b.n	800d5a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	695b      	ldr	r3, [r3, #20]
 800d596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59a:	2b40      	cmp	r3, #64	; 0x40
 800d59c:	d1b5      	bne.n	800d50a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	695b      	ldr	r3, [r3, #20]
 800d5b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5be:	d11b      	bne.n	800d5f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800d5c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2220      	movs	r2, #32
 800d5d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5e4:	f043 0204 	orr.w	r2, r3, #4
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	e000      	b.n	800d5fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d101      	bne.n	800d618 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	e034      	b.n	800d682 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800d620:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f245 5255 	movw	r2, #21845	; 0x5555
 800d62a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	6852      	ldr	r2, [r2, #4]
 800d634:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	6892      	ldr	r2, [r2, #8]
 800d63e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800d640:	f7fd fa96 	bl	800ab70 <HAL_GetTick>
 800d644:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d646:	e00f      	b.n	800d668 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d648:	f7fd fa92 	bl	800ab70 <HAL_GetTick>
 800d64c:	4602      	mov	r2, r0
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	1ad3      	subs	r3, r2, r3
 800d652:	2b31      	cmp	r3, #49	; 0x31
 800d654:	d908      	bls.n	800d668 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68db      	ldr	r3, [r3, #12]
 800d65c:	f003 0303 	and.w	r3, r3, #3
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800d664:	2303      	movs	r3, #3
 800d666:	e00c      	b.n	800d682 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	68db      	ldr	r3, [r3, #12]
 800d66e:	f003 0303 	and.w	r3, r3, #3
 800d672:	2b00      	cmp	r3, #0
 800d674:	d1e8      	bne.n	800d648 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d67e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3710      	adds	r7, #16
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
	...

0800d68c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d101      	bne.n	800d69e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e264      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d075      	beq.n	800d796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d6aa:	4ba3      	ldr	r3, [pc, #652]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	f003 030c 	and.w	r3, r3, #12
 800d6b2:	2b04      	cmp	r3, #4
 800d6b4:	d00c      	beq.n	800d6d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d6b6:	4ba0      	ldr	r3, [pc, #640]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800d6be:	2b08      	cmp	r3, #8
 800d6c0:	d112      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d6c2:	4b9d      	ldr	r3, [pc, #628]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6ce:	d10b      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6d0:	4b99      	ldr	r3, [pc, #612]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d05b      	beq.n	800d794 <HAL_RCC_OscConfig+0x108>
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d157      	bne.n	800d794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e23f      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6f0:	d106      	bne.n	800d700 <HAL_RCC_OscConfig+0x74>
 800d6f2:	4b91      	ldr	r3, [pc, #580]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a90      	ldr	r2, [pc, #576]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d6f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6fc:	6013      	str	r3, [r2, #0]
 800d6fe:	e01d      	b.n	800d73c <HAL_RCC_OscConfig+0xb0>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d708:	d10c      	bne.n	800d724 <HAL_RCC_OscConfig+0x98>
 800d70a:	4b8b      	ldr	r3, [pc, #556]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a8a      	ldr	r2, [pc, #552]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d714:	6013      	str	r3, [r2, #0]
 800d716:	4b88      	ldr	r3, [pc, #544]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a87      	ldr	r2, [pc, #540]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d71c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d720:	6013      	str	r3, [r2, #0]
 800d722:	e00b      	b.n	800d73c <HAL_RCC_OscConfig+0xb0>
 800d724:	4b84      	ldr	r3, [pc, #528]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	4a83      	ldr	r2, [pc, #524]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d72a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d72e:	6013      	str	r3, [r2, #0]
 800d730:	4b81      	ldr	r3, [pc, #516]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	4a80      	ldr	r2, [pc, #512]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d73a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d013      	beq.n	800d76c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d744:	f7fd fa14 	bl	800ab70 <HAL_GetTick>
 800d748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d74a:	e008      	b.n	800d75e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d74c:	f7fd fa10 	bl	800ab70 <HAL_GetTick>
 800d750:	4602      	mov	r2, r0
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	1ad3      	subs	r3, r2, r3
 800d756:	2b64      	cmp	r3, #100	; 0x64
 800d758:	d901      	bls.n	800d75e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d75a:	2303      	movs	r3, #3
 800d75c:	e204      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d75e:	4b76      	ldr	r3, [pc, #472]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d766:	2b00      	cmp	r3, #0
 800d768:	d0f0      	beq.n	800d74c <HAL_RCC_OscConfig+0xc0>
 800d76a:	e014      	b.n	800d796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d76c:	f7fd fa00 	bl	800ab70 <HAL_GetTick>
 800d770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d772:	e008      	b.n	800d786 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d774:	f7fd f9fc 	bl	800ab70 <HAL_GetTick>
 800d778:	4602      	mov	r2, r0
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	2b64      	cmp	r3, #100	; 0x64
 800d780:	d901      	bls.n	800d786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d782:	2303      	movs	r3, #3
 800d784:	e1f0      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d786:	4b6c      	ldr	r3, [pc, #432]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1f0      	bne.n	800d774 <HAL_RCC_OscConfig+0xe8>
 800d792:	e000      	b.n	800d796 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d063      	beq.n	800d86a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d7a2:	4b65      	ldr	r3, [pc, #404]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d7a4:	689b      	ldr	r3, [r3, #8]
 800d7a6:	f003 030c 	and.w	r3, r3, #12
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d00b      	beq.n	800d7c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7ae:	4b62      	ldr	r3, [pc, #392]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800d7b6:	2b08      	cmp	r3, #8
 800d7b8:	d11c      	bne.n	800d7f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7ba:	4b5f      	ldr	r3, [pc, #380]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d116      	bne.n	800d7f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7c6:	4b5c      	ldr	r3, [pc, #368]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f003 0302 	and.w	r3, r3, #2
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d005      	beq.n	800d7de <HAL_RCC_OscConfig+0x152>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d001      	beq.n	800d7de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e1c4      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7de:	4b56      	ldr	r3, [pc, #344]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	00db      	lsls	r3, r3, #3
 800d7ec:	4952      	ldr	r1, [pc, #328]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7f2:	e03a      	b.n	800d86a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d020      	beq.n	800d83e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d7fc:	4b4f      	ldr	r3, [pc, #316]	; (800d93c <HAL_RCC_OscConfig+0x2b0>)
 800d7fe:	2201      	movs	r2, #1
 800d800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d802:	f7fd f9b5 	bl	800ab70 <HAL_GetTick>
 800d806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d808:	e008      	b.n	800d81c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d80a:	f7fd f9b1 	bl	800ab70 <HAL_GetTick>
 800d80e:	4602      	mov	r2, r0
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	1ad3      	subs	r3, r2, r3
 800d814:	2b02      	cmp	r3, #2
 800d816:	d901      	bls.n	800d81c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d818:	2303      	movs	r3, #3
 800d81a:	e1a5      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d81c:	4b46      	ldr	r3, [pc, #280]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f003 0302 	and.w	r3, r3, #2
 800d824:	2b00      	cmp	r3, #0
 800d826:	d0f0      	beq.n	800d80a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d828:	4b43      	ldr	r3, [pc, #268]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	00db      	lsls	r3, r3, #3
 800d836:	4940      	ldr	r1, [pc, #256]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d838:	4313      	orrs	r3, r2
 800d83a:	600b      	str	r3, [r1, #0]
 800d83c:	e015      	b.n	800d86a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d83e:	4b3f      	ldr	r3, [pc, #252]	; (800d93c <HAL_RCC_OscConfig+0x2b0>)
 800d840:	2200      	movs	r2, #0
 800d842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d844:	f7fd f994 	bl	800ab70 <HAL_GetTick>
 800d848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d84a:	e008      	b.n	800d85e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d84c:	f7fd f990 	bl	800ab70 <HAL_GetTick>
 800d850:	4602      	mov	r2, r0
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	2b02      	cmp	r3, #2
 800d858:	d901      	bls.n	800d85e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d85a:	2303      	movs	r3, #3
 800d85c:	e184      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d85e:	4b36      	ldr	r3, [pc, #216]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f003 0302 	and.w	r3, r3, #2
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1f0      	bne.n	800d84c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f003 0308 	and.w	r3, r3, #8
 800d872:	2b00      	cmp	r3, #0
 800d874:	d030      	beq.n	800d8d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	695b      	ldr	r3, [r3, #20]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d016      	beq.n	800d8ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d87e:	4b30      	ldr	r3, [pc, #192]	; (800d940 <HAL_RCC_OscConfig+0x2b4>)
 800d880:	2201      	movs	r2, #1
 800d882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d884:	f7fd f974 	bl	800ab70 <HAL_GetTick>
 800d888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d88a:	e008      	b.n	800d89e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d88c:	f7fd f970 	bl	800ab70 <HAL_GetTick>
 800d890:	4602      	mov	r2, r0
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	1ad3      	subs	r3, r2, r3
 800d896:	2b02      	cmp	r3, #2
 800d898:	d901      	bls.n	800d89e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e164      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d89e:	4b26      	ldr	r3, [pc, #152]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d8a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d0f0      	beq.n	800d88c <HAL_RCC_OscConfig+0x200>
 800d8aa:	e015      	b.n	800d8d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8ac:	4b24      	ldr	r3, [pc, #144]	; (800d940 <HAL_RCC_OscConfig+0x2b4>)
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d8b2:	f7fd f95d 	bl	800ab70 <HAL_GetTick>
 800d8b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8b8:	e008      	b.n	800d8cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d8ba:	f7fd f959 	bl	800ab70 <HAL_GetTick>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	1ad3      	subs	r3, r2, r3
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d901      	bls.n	800d8cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d8c8:	2303      	movs	r3, #3
 800d8ca:	e14d      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8cc:	4b1a      	ldr	r3, [pc, #104]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8d0:	f003 0302 	and.w	r3, r3, #2
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1f0      	bne.n	800d8ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f003 0304 	and.w	r3, r3, #4
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 80a0 	beq.w	800da26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d8ea:	4b13      	ldr	r3, [pc, #76]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d8ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10f      	bne.n	800d916 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	60bb      	str	r3, [r7, #8]
 800d8fa:	4b0f      	ldr	r3, [pc, #60]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	4a0e      	ldr	r2, [pc, #56]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d904:	6413      	str	r3, [r2, #64]	; 0x40
 800d906:	4b0c      	ldr	r3, [pc, #48]	; (800d938 <HAL_RCC_OscConfig+0x2ac>)
 800d908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d90e:	60bb      	str	r3, [r7, #8]
 800d910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d912:	2301      	movs	r3, #1
 800d914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d916:	4b0b      	ldr	r3, [pc, #44]	; (800d944 <HAL_RCC_OscConfig+0x2b8>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d121      	bne.n	800d966 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d922:	4b08      	ldr	r3, [pc, #32]	; (800d944 <HAL_RCC_OscConfig+0x2b8>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a07      	ldr	r2, [pc, #28]	; (800d944 <HAL_RCC_OscConfig+0x2b8>)
 800d928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d92c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d92e:	f7fd f91f 	bl	800ab70 <HAL_GetTick>
 800d932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d934:	e011      	b.n	800d95a <HAL_RCC_OscConfig+0x2ce>
 800d936:	bf00      	nop
 800d938:	40023800 	.word	0x40023800
 800d93c:	42470000 	.word	0x42470000
 800d940:	42470e80 	.word	0x42470e80
 800d944:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d948:	f7fd f912 	bl	800ab70 <HAL_GetTick>
 800d94c:	4602      	mov	r2, r0
 800d94e:	693b      	ldr	r3, [r7, #16]
 800d950:	1ad3      	subs	r3, r2, r3
 800d952:	2b02      	cmp	r3, #2
 800d954:	d901      	bls.n	800d95a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800d956:	2303      	movs	r3, #3
 800d958:	e106      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d95a:	4b85      	ldr	r3, [pc, #532]	; (800db70 <HAL_RCC_OscConfig+0x4e4>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d962:	2b00      	cmp	r3, #0
 800d964:	d0f0      	beq.n	800d948 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	2b01      	cmp	r3, #1
 800d96c:	d106      	bne.n	800d97c <HAL_RCC_OscConfig+0x2f0>
 800d96e:	4b81      	ldr	r3, [pc, #516]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d972:	4a80      	ldr	r2, [pc, #512]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d974:	f043 0301 	orr.w	r3, r3, #1
 800d978:	6713      	str	r3, [r2, #112]	; 0x70
 800d97a:	e01c      	b.n	800d9b6 <HAL_RCC_OscConfig+0x32a>
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	689b      	ldr	r3, [r3, #8]
 800d980:	2b05      	cmp	r3, #5
 800d982:	d10c      	bne.n	800d99e <HAL_RCC_OscConfig+0x312>
 800d984:	4b7b      	ldr	r3, [pc, #492]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d988:	4a7a      	ldr	r2, [pc, #488]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d98a:	f043 0304 	orr.w	r3, r3, #4
 800d98e:	6713      	str	r3, [r2, #112]	; 0x70
 800d990:	4b78      	ldr	r3, [pc, #480]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d994:	4a77      	ldr	r2, [pc, #476]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d996:	f043 0301 	orr.w	r3, r3, #1
 800d99a:	6713      	str	r3, [r2, #112]	; 0x70
 800d99c:	e00b      	b.n	800d9b6 <HAL_RCC_OscConfig+0x32a>
 800d99e:	4b75      	ldr	r3, [pc, #468]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d9a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a2:	4a74      	ldr	r2, [pc, #464]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d9a4:	f023 0301 	bic.w	r3, r3, #1
 800d9a8:	6713      	str	r3, [r2, #112]	; 0x70
 800d9aa:	4b72      	ldr	r3, [pc, #456]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d9ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ae:	4a71      	ldr	r2, [pc, #452]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d9b0:	f023 0304 	bic.w	r3, r3, #4
 800d9b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d015      	beq.n	800d9ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9be:	f7fd f8d7 	bl	800ab70 <HAL_GetTick>
 800d9c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9c4:	e00a      	b.n	800d9dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d9c6:	f7fd f8d3 	bl	800ab70 <HAL_GetTick>
 800d9ca:	4602      	mov	r2, r0
 800d9cc:	693b      	ldr	r3, [r7, #16]
 800d9ce:	1ad3      	subs	r3, r2, r3
 800d9d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d901      	bls.n	800d9dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800d9d8:	2303      	movs	r3, #3
 800d9da:	e0c5      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9dc:	4b65      	ldr	r3, [pc, #404]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800d9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9e0:	f003 0302 	and.w	r3, r3, #2
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d0ee      	beq.n	800d9c6 <HAL_RCC_OscConfig+0x33a>
 800d9e8:	e014      	b.n	800da14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d9ea:	f7fd f8c1 	bl	800ab70 <HAL_GetTick>
 800d9ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d9f0:	e00a      	b.n	800da08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d9f2:	f7fd f8bd 	bl	800ab70 <HAL_GetTick>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	1ad3      	subs	r3, r2, r3
 800d9fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800da00:	4293      	cmp	r3, r2
 800da02:	d901      	bls.n	800da08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800da04:	2303      	movs	r3, #3
 800da06:	e0af      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da08:	4b5a      	ldr	r3, [pc, #360]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800da0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da0c:	f003 0302 	and.w	r3, r3, #2
 800da10:	2b00      	cmp	r3, #0
 800da12:	d1ee      	bne.n	800d9f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800da14:	7dfb      	ldrb	r3, [r7, #23]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d105      	bne.n	800da26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da1a:	4b56      	ldr	r3, [pc, #344]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800da1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da1e:	4a55      	ldr	r2, [pc, #340]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800da20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	699b      	ldr	r3, [r3, #24]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	f000 809b 	beq.w	800db66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800da30:	4b50      	ldr	r3, [pc, #320]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	f003 030c 	and.w	r3, r3, #12
 800da38:	2b08      	cmp	r3, #8
 800da3a:	d05c      	beq.n	800daf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	699b      	ldr	r3, [r3, #24]
 800da40:	2b02      	cmp	r3, #2
 800da42:	d141      	bne.n	800dac8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da44:	4b4c      	ldr	r3, [pc, #304]	; (800db78 <HAL_RCC_OscConfig+0x4ec>)
 800da46:	2200      	movs	r2, #0
 800da48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800da4a:	f7fd f891 	bl	800ab70 <HAL_GetTick>
 800da4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da50:	e008      	b.n	800da64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800da52:	f7fd f88d 	bl	800ab70 <HAL_GetTick>
 800da56:	4602      	mov	r2, r0
 800da58:	693b      	ldr	r3, [r7, #16]
 800da5a:	1ad3      	subs	r3, r2, r3
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d901      	bls.n	800da64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800da60:	2303      	movs	r3, #3
 800da62:	e081      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da64:	4b43      	ldr	r3, [pc, #268]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1f0      	bne.n	800da52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	69da      	ldr	r2, [r3, #28]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6a1b      	ldr	r3, [r3, #32]
 800da78:	431a      	orrs	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7e:	019b      	lsls	r3, r3, #6
 800da80:	431a      	orrs	r2, r3
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da86:	085b      	lsrs	r3, r3, #1
 800da88:	3b01      	subs	r3, #1
 800da8a:	041b      	lsls	r3, r3, #16
 800da8c:	431a      	orrs	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da92:	061b      	lsls	r3, r3, #24
 800da94:	4937      	ldr	r1, [pc, #220]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800da96:	4313      	orrs	r3, r2
 800da98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800da9a:	4b37      	ldr	r3, [pc, #220]	; (800db78 <HAL_RCC_OscConfig+0x4ec>)
 800da9c:	2201      	movs	r2, #1
 800da9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800daa0:	f7fd f866 	bl	800ab70 <HAL_GetTick>
 800daa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800daa6:	e008      	b.n	800daba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800daa8:	f7fd f862 	bl	800ab70 <HAL_GetTick>
 800daac:	4602      	mov	r2, r0
 800daae:	693b      	ldr	r3, [r7, #16]
 800dab0:	1ad3      	subs	r3, r2, r3
 800dab2:	2b02      	cmp	r3, #2
 800dab4:	d901      	bls.n	800daba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800dab6:	2303      	movs	r3, #3
 800dab8:	e056      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800daba:	4b2e      	ldr	r3, [pc, #184]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d0f0      	beq.n	800daa8 <HAL_RCC_OscConfig+0x41c>
 800dac6:	e04e      	b.n	800db66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dac8:	4b2b      	ldr	r3, [pc, #172]	; (800db78 <HAL_RCC_OscConfig+0x4ec>)
 800daca:	2200      	movs	r2, #0
 800dacc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800dace:	f7fd f84f 	bl	800ab70 <HAL_GetTick>
 800dad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dad4:	e008      	b.n	800dae8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800dad6:	f7fd f84b 	bl	800ab70 <HAL_GetTick>
 800dada:	4602      	mov	r2, r0
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d901      	bls.n	800dae8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800dae4:	2303      	movs	r3, #3
 800dae6:	e03f      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800dae8:	4b22      	ldr	r3, [pc, #136]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d1f0      	bne.n	800dad6 <HAL_RCC_OscConfig+0x44a>
 800daf4:	e037      	b.n	800db66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	699b      	ldr	r3, [r3, #24]
 800dafa:	2b01      	cmp	r3, #1
 800dafc:	d101      	bne.n	800db02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e032      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800db02:	4b1c      	ldr	r3, [pc, #112]	; (800db74 <HAL_RCC_OscConfig+0x4e8>)
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	699b      	ldr	r3, [r3, #24]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d028      	beq.n	800db62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d121      	bne.n	800db62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db28:	429a      	cmp	r2, r3
 800db2a:	d11a      	bne.n	800db62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800db32:	4013      	ands	r3, r2
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d111      	bne.n	800db62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db48:	085b      	lsrs	r3, r3, #1
 800db4a:	3b01      	subs	r3, #1
 800db4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800db4e:	429a      	cmp	r2, r3
 800db50:	d107      	bne.n	800db62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db5e:	429a      	cmp	r2, r3
 800db60:	d001      	beq.n	800db66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	e000      	b.n	800db68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800db66:	2300      	movs	r3, #0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3718      	adds	r7, #24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	40007000 	.word	0x40007000
 800db74:	40023800 	.word	0x40023800
 800db78:	42470060 	.word	0x42470060

0800db7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800db8c:	2301      	movs	r3, #1
 800db8e:	e0cc      	b.n	800dd2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800db90:	4b68      	ldr	r3, [pc, #416]	; (800dd34 <HAL_RCC_ClockConfig+0x1b8>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f003 0307 	and.w	r3, r3, #7
 800db98:	683a      	ldr	r2, [r7, #0]
 800db9a:	429a      	cmp	r2, r3
 800db9c:	d90c      	bls.n	800dbb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db9e:	4b65      	ldr	r3, [pc, #404]	; (800dd34 <HAL_RCC_ClockConfig+0x1b8>)
 800dba0:	683a      	ldr	r2, [r7, #0]
 800dba2:	b2d2      	uxtb	r2, r2
 800dba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dba6:	4b63      	ldr	r3, [pc, #396]	; (800dd34 <HAL_RCC_ClockConfig+0x1b8>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f003 0307 	and.w	r3, r3, #7
 800dbae:	683a      	ldr	r2, [r7, #0]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d001      	beq.n	800dbb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e0b8      	b.n	800dd2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f003 0302 	and.w	r3, r3, #2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d020      	beq.n	800dc06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f003 0304 	and.w	r3, r3, #4
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d005      	beq.n	800dbdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dbd0:	4b59      	ldr	r3, [pc, #356]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	4a58      	ldr	r2, [pc, #352]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dbda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f003 0308 	and.w	r3, r3, #8
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d005      	beq.n	800dbf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dbe8:	4b53      	ldr	r3, [pc, #332]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbea:	689b      	ldr	r3, [r3, #8]
 800dbec:	4a52      	ldr	r2, [pc, #328]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dbf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dbf4:	4b50      	ldr	r3, [pc, #320]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	494d      	ldr	r1, [pc, #308]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc02:	4313      	orrs	r3, r2
 800dc04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f003 0301 	and.w	r3, r3, #1
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d044      	beq.n	800dc9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	685b      	ldr	r3, [r3, #4]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d107      	bne.n	800dc2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc1a:	4b47      	ldr	r3, [pc, #284]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d119      	bne.n	800dc5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc26:	2301      	movs	r3, #1
 800dc28:	e07f      	b.n	800dd2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	685b      	ldr	r3, [r3, #4]
 800dc2e:	2b02      	cmp	r3, #2
 800dc30:	d003      	beq.n	800dc3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dc36:	2b03      	cmp	r3, #3
 800dc38:	d107      	bne.n	800dc4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc3a:	4b3f      	ldr	r3, [pc, #252]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d109      	bne.n	800dc5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e06f      	b.n	800dd2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc4a:	4b3b      	ldr	r3, [pc, #236]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f003 0302 	and.w	r3, r3, #2
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dc56:	2301      	movs	r3, #1
 800dc58:	e067      	b.n	800dd2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dc5a:	4b37      	ldr	r3, [pc, #220]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc5c:	689b      	ldr	r3, [r3, #8]
 800dc5e:	f023 0203 	bic.w	r2, r3, #3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	4934      	ldr	r1, [pc, #208]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc68:	4313      	orrs	r3, r2
 800dc6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800dc6c:	f7fc ff80 	bl	800ab70 <HAL_GetTick>
 800dc70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc72:	e00a      	b.n	800dc8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dc74:	f7fc ff7c 	bl	800ab70 <HAL_GetTick>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	1ad3      	subs	r3, r2, r3
 800dc7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800dc82:	4293      	cmp	r3, r2
 800dc84:	d901      	bls.n	800dc8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e04f      	b.n	800dd2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dc8a:	4b2b      	ldr	r3, [pc, #172]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	f003 020c 	and.w	r2, r3, #12
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	685b      	ldr	r3, [r3, #4]
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d1eb      	bne.n	800dc74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dc9c:	4b25      	ldr	r3, [pc, #148]	; (800dd34 <HAL_RCC_ClockConfig+0x1b8>)
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f003 0307 	and.w	r3, r3, #7
 800dca4:	683a      	ldr	r2, [r7, #0]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	d20c      	bcs.n	800dcc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcaa:	4b22      	ldr	r3, [pc, #136]	; (800dd34 <HAL_RCC_ClockConfig+0x1b8>)
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	b2d2      	uxtb	r2, r2
 800dcb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcb2:	4b20      	ldr	r3, [pc, #128]	; (800dd34 <HAL_RCC_ClockConfig+0x1b8>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 0307 	and.w	r3, r3, #7
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d001      	beq.n	800dcc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	e032      	b.n	800dd2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 0304 	and.w	r3, r3, #4
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d008      	beq.n	800dce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dcd0:	4b19      	ldr	r3, [pc, #100]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	4916      	ldr	r1, [pc, #88]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dcde:	4313      	orrs	r3, r2
 800dce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f003 0308 	and.w	r3, r3, #8
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d009      	beq.n	800dd02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800dcee:	4b12      	ldr	r3, [pc, #72]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	691b      	ldr	r3, [r3, #16]
 800dcfa:	00db      	lsls	r3, r3, #3
 800dcfc:	490e      	ldr	r1, [pc, #56]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800dd02:	f000 f821 	bl	800dd48 <HAL_RCC_GetSysClockFreq>
 800dd06:	4602      	mov	r2, r0
 800dd08:	4b0b      	ldr	r3, [pc, #44]	; (800dd38 <HAL_RCC_ClockConfig+0x1bc>)
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	091b      	lsrs	r3, r3, #4
 800dd0e:	f003 030f 	and.w	r3, r3, #15
 800dd12:	490a      	ldr	r1, [pc, #40]	; (800dd3c <HAL_RCC_ClockConfig+0x1c0>)
 800dd14:	5ccb      	ldrb	r3, [r1, r3]
 800dd16:	fa22 f303 	lsr.w	r3, r2, r3
 800dd1a:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <HAL_RCC_ClockConfig+0x1c4>)
 800dd1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800dd1e:	4b09      	ldr	r3, [pc, #36]	; (800dd44 <HAL_RCC_ClockConfig+0x1c8>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7fc fee0 	bl	800aae8 <HAL_InitTick>

  return HAL_OK;
 800dd28:	2300      	movs	r3, #0
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3710      	adds	r7, #16
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	40023c00 	.word	0x40023c00
 800dd38:	40023800 	.word	0x40023800
 800dd3c:	080155b4 	.word	0x080155b4
 800dd40:	20000294 	.word	0x20000294
 800dd44:	20000298 	.word	0x20000298

0800dd48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd48:	b5b0      	push	{r4, r5, r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800dd4e:	2100      	movs	r1, #0
 800dd50:	6079      	str	r1, [r7, #4]
 800dd52:	2100      	movs	r1, #0
 800dd54:	60f9      	str	r1, [r7, #12]
 800dd56:	2100      	movs	r1, #0
 800dd58:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd5e:	4952      	ldr	r1, [pc, #328]	; (800dea8 <HAL_RCC_GetSysClockFreq+0x160>)
 800dd60:	6889      	ldr	r1, [r1, #8]
 800dd62:	f001 010c 	and.w	r1, r1, #12
 800dd66:	2908      	cmp	r1, #8
 800dd68:	d00d      	beq.n	800dd86 <HAL_RCC_GetSysClockFreq+0x3e>
 800dd6a:	2908      	cmp	r1, #8
 800dd6c:	f200 8094 	bhi.w	800de98 <HAL_RCC_GetSysClockFreq+0x150>
 800dd70:	2900      	cmp	r1, #0
 800dd72:	d002      	beq.n	800dd7a <HAL_RCC_GetSysClockFreq+0x32>
 800dd74:	2904      	cmp	r1, #4
 800dd76:	d003      	beq.n	800dd80 <HAL_RCC_GetSysClockFreq+0x38>
 800dd78:	e08e      	b.n	800de98 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dd7a:	4b4c      	ldr	r3, [pc, #304]	; (800deac <HAL_RCC_GetSysClockFreq+0x164>)
 800dd7c:	60bb      	str	r3, [r7, #8]
       break;
 800dd7e:	e08e      	b.n	800de9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dd80:	4b4b      	ldr	r3, [pc, #300]	; (800deb0 <HAL_RCC_GetSysClockFreq+0x168>)
 800dd82:	60bb      	str	r3, [r7, #8]
      break;
 800dd84:	e08b      	b.n	800de9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dd86:	4948      	ldr	r1, [pc, #288]	; (800dea8 <HAL_RCC_GetSysClockFreq+0x160>)
 800dd88:	6849      	ldr	r1, [r1, #4]
 800dd8a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800dd8e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dd90:	4945      	ldr	r1, [pc, #276]	; (800dea8 <HAL_RCC_GetSysClockFreq+0x160>)
 800dd92:	6849      	ldr	r1, [r1, #4]
 800dd94:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800dd98:	2900      	cmp	r1, #0
 800dd9a:	d024      	beq.n	800dde6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dd9c:	4942      	ldr	r1, [pc, #264]	; (800dea8 <HAL_RCC_GetSysClockFreq+0x160>)
 800dd9e:	6849      	ldr	r1, [r1, #4]
 800dda0:	0989      	lsrs	r1, r1, #6
 800dda2:	4608      	mov	r0, r1
 800dda4:	f04f 0100 	mov.w	r1, #0
 800dda8:	f240 14ff 	movw	r4, #511	; 0x1ff
 800ddac:	f04f 0500 	mov.w	r5, #0
 800ddb0:	ea00 0204 	and.w	r2, r0, r4
 800ddb4:	ea01 0305 	and.w	r3, r1, r5
 800ddb8:	493d      	ldr	r1, [pc, #244]	; (800deb0 <HAL_RCC_GetSysClockFreq+0x168>)
 800ddba:	fb01 f003 	mul.w	r0, r1, r3
 800ddbe:	2100      	movs	r1, #0
 800ddc0:	fb01 f102 	mul.w	r1, r1, r2
 800ddc4:	1844      	adds	r4, r0, r1
 800ddc6:	493a      	ldr	r1, [pc, #232]	; (800deb0 <HAL_RCC_GetSysClockFreq+0x168>)
 800ddc8:	fba2 0101 	umull	r0, r1, r2, r1
 800ddcc:	1863      	adds	r3, r4, r1
 800ddce:	4619      	mov	r1, r3
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f04f 0300 	mov.w	r3, #0
 800ddd8:	f7f2 ff36 	bl	8000c48 <__aeabi_uldivmod>
 800dddc:	4602      	mov	r2, r0
 800ddde:	460b      	mov	r3, r1
 800dde0:	4613      	mov	r3, r2
 800dde2:	60fb      	str	r3, [r7, #12]
 800dde4:	e04a      	b.n	800de7c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dde6:	4b30      	ldr	r3, [pc, #192]	; (800dea8 <HAL_RCC_GetSysClockFreq+0x160>)
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	099b      	lsrs	r3, r3, #6
 800ddec:	461a      	mov	r2, r3
 800ddee:	f04f 0300 	mov.w	r3, #0
 800ddf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ddf6:	f04f 0100 	mov.w	r1, #0
 800ddfa:	ea02 0400 	and.w	r4, r2, r0
 800ddfe:	ea03 0501 	and.w	r5, r3, r1
 800de02:	4620      	mov	r0, r4
 800de04:	4629      	mov	r1, r5
 800de06:	f04f 0200 	mov.w	r2, #0
 800de0a:	f04f 0300 	mov.w	r3, #0
 800de0e:	014b      	lsls	r3, r1, #5
 800de10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800de14:	0142      	lsls	r2, r0, #5
 800de16:	4610      	mov	r0, r2
 800de18:	4619      	mov	r1, r3
 800de1a:	1b00      	subs	r0, r0, r4
 800de1c:	eb61 0105 	sbc.w	r1, r1, r5
 800de20:	f04f 0200 	mov.w	r2, #0
 800de24:	f04f 0300 	mov.w	r3, #0
 800de28:	018b      	lsls	r3, r1, #6
 800de2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800de2e:	0182      	lsls	r2, r0, #6
 800de30:	1a12      	subs	r2, r2, r0
 800de32:	eb63 0301 	sbc.w	r3, r3, r1
 800de36:	f04f 0000 	mov.w	r0, #0
 800de3a:	f04f 0100 	mov.w	r1, #0
 800de3e:	00d9      	lsls	r1, r3, #3
 800de40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800de44:	00d0      	lsls	r0, r2, #3
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	1912      	adds	r2, r2, r4
 800de4c:	eb45 0303 	adc.w	r3, r5, r3
 800de50:	f04f 0000 	mov.w	r0, #0
 800de54:	f04f 0100 	mov.w	r1, #0
 800de58:	0299      	lsls	r1, r3, #10
 800de5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800de5e:	0290      	lsls	r0, r2, #10
 800de60:	4602      	mov	r2, r0
 800de62:	460b      	mov	r3, r1
 800de64:	4610      	mov	r0, r2
 800de66:	4619      	mov	r1, r3
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	461a      	mov	r2, r3
 800de6c:	f04f 0300 	mov.w	r3, #0
 800de70:	f7f2 feea 	bl	8000c48 <__aeabi_uldivmod>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	4613      	mov	r3, r2
 800de7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800de7c:	4b0a      	ldr	r3, [pc, #40]	; (800dea8 <HAL_RCC_GetSysClockFreq+0x160>)
 800de7e:	685b      	ldr	r3, [r3, #4]
 800de80:	0c1b      	lsrs	r3, r3, #16
 800de82:	f003 0303 	and.w	r3, r3, #3
 800de86:	3301      	adds	r3, #1
 800de88:	005b      	lsls	r3, r3, #1
 800de8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800de8c:	68fa      	ldr	r2, [r7, #12]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	fbb2 f3f3 	udiv	r3, r2, r3
 800de94:	60bb      	str	r3, [r7, #8]
      break;
 800de96:	e002      	b.n	800de9e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800de98:	4b04      	ldr	r3, [pc, #16]	; (800deac <HAL_RCC_GetSysClockFreq+0x164>)
 800de9a:	60bb      	str	r3, [r7, #8]
      break;
 800de9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800de9e:	68bb      	ldr	r3, [r7, #8]
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3710      	adds	r7, #16
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bdb0      	pop	{r4, r5, r7, pc}
 800dea8:	40023800 	.word	0x40023800
 800deac:	00f42400 	.word	0x00f42400
 800deb0:	00b71b00 	.word	0x00b71b00

0800deb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800deb4:	b480      	push	{r7}
 800deb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800deb8:	4b03      	ldr	r3, [pc, #12]	; (800dec8 <HAL_RCC_GetHCLKFreq+0x14>)
 800deba:	681b      	ldr	r3, [r3, #0]
}
 800debc:	4618      	mov	r0, r3
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr
 800dec6:	bf00      	nop
 800dec8:	20000294 	.word	0x20000294

0800decc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ded0:	f7ff fff0 	bl	800deb4 <HAL_RCC_GetHCLKFreq>
 800ded4:	4602      	mov	r2, r0
 800ded6:	4b05      	ldr	r3, [pc, #20]	; (800deec <HAL_RCC_GetPCLK1Freq+0x20>)
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	0a9b      	lsrs	r3, r3, #10
 800dedc:	f003 0307 	and.w	r3, r3, #7
 800dee0:	4903      	ldr	r1, [pc, #12]	; (800def0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dee2:	5ccb      	ldrb	r3, [r1, r3]
 800dee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dee8:	4618      	mov	r0, r3
 800deea:	bd80      	pop	{r7, pc}
 800deec:	40023800 	.word	0x40023800
 800def0:	080155c4 	.word	0x080155c4

0800def4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800def8:	f7ff ffdc 	bl	800deb4 <HAL_RCC_GetHCLKFreq>
 800defc:	4602      	mov	r2, r0
 800defe:	4b05      	ldr	r3, [pc, #20]	; (800df14 <HAL_RCC_GetPCLK2Freq+0x20>)
 800df00:	689b      	ldr	r3, [r3, #8]
 800df02:	0b5b      	lsrs	r3, r3, #13
 800df04:	f003 0307 	and.w	r3, r3, #7
 800df08:	4903      	ldr	r1, [pc, #12]	; (800df18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800df0a:	5ccb      	ldrb	r3, [r1, r3]
 800df0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800df10:	4618      	mov	r0, r3
 800df12:	bd80      	pop	{r7, pc}
 800df14:	40023800 	.word	0x40023800
 800df18:	080155c4 	.word	0x080155c4

0800df1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d101      	bne.n	800df2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	e07b      	b.n	800e026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df32:	2b00      	cmp	r3, #0
 800df34:	d108      	bne.n	800df48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800df3e:	d009      	beq.n	800df54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2200      	movs	r2, #0
 800df44:	61da      	str	r2, [r3, #28]
 800df46:	e005      	b.n	800df54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d106      	bne.n	800df74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2200      	movs	r2, #0
 800df6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f7fb fcc4 	bl	80098fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2202      	movs	r2, #2
 800df78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfa6:	431a      	orrs	r2, r3
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	f003 0302 	and.w	r3, r3, #2
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	f003 0301 	and.w	r3, r3, #1
 800dfba:	431a      	orrs	r2, r3
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	699b      	ldr	r3, [r3, #24]
 800dfc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dfc4:	431a      	orrs	r2, r3
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	69db      	ldr	r3, [r3, #28]
 800dfca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dfce:	431a      	orrs	r2, r3
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a1b      	ldr	r3, [r3, #32]
 800dfd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfd8:	ea42 0103 	orr.w	r1, r2, r3
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	430a      	orrs	r2, r1
 800dfea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	0c1b      	lsrs	r3, r3, #16
 800dff2:	f003 0104 	and.w	r1, r3, #4
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dffa:	f003 0210 	and.w	r2, r3, #16
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	430a      	orrs	r2, r1
 800e004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	69da      	ldr	r2, [r3, #28]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2201      	movs	r2, #1
 800e020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e024:	2300      	movs	r3, #0
}
 800e026:	4618      	mov	r0, r3
 800e028:	3708      	adds	r7, #8
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b08c      	sub	sp, #48	; 0x30
 800e032:	af00      	add	r7, sp, #0
 800e034:	60f8      	str	r0, [r7, #12]
 800e036:	60b9      	str	r1, [r7, #8]
 800e038:	607a      	str	r2, [r7, #4]
 800e03a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e03c:	2301      	movs	r3, #1
 800e03e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e040:	2300      	movs	r3, #0
 800e042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e04c:	2b01      	cmp	r3, #1
 800e04e:	d101      	bne.n	800e054 <HAL_SPI_TransmitReceive+0x26>
 800e050:	2302      	movs	r3, #2
 800e052:	e18a      	b.n	800e36a <HAL_SPI_TransmitReceive+0x33c>
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	2201      	movs	r2, #1
 800e058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e05c:	f7fc fd88 	bl	800ab70 <HAL_GetTick>
 800e060:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e072:	887b      	ldrh	r3, [r7, #2]
 800e074:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e076:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e07a:	2b01      	cmp	r3, #1
 800e07c:	d00f      	beq.n	800e09e <HAL_SPI_TransmitReceive+0x70>
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e084:	d107      	bne.n	800e096 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d103      	bne.n	800e096 <HAL_SPI_TransmitReceive+0x68>
 800e08e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e092:	2b04      	cmp	r3, #4
 800e094:	d003      	beq.n	800e09e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e096:	2302      	movs	r3, #2
 800e098:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e09c:	e15b      	b.n	800e356 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d005      	beq.n	800e0b0 <HAL_SPI_TransmitReceive+0x82>
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d002      	beq.n	800e0b0 <HAL_SPI_TransmitReceive+0x82>
 800e0aa:	887b      	ldrh	r3, [r7, #2]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d103      	bne.n	800e0b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e0b0:	2301      	movs	r3, #1
 800e0b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e0b6:	e14e      	b.n	800e356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b04      	cmp	r3, #4
 800e0c2:	d003      	beq.n	800e0cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2205      	movs	r2, #5
 800e0c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	887a      	ldrh	r2, [r7, #2]
 800e0dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	887a      	ldrh	r2, [r7, #2]
 800e0e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	68ba      	ldr	r2, [r7, #8]
 800e0e8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	887a      	ldrh	r2, [r7, #2]
 800e0ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	887a      	ldrh	r2, [r7, #2]
 800e0f4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e10c:	2b40      	cmp	r3, #64	; 0x40
 800e10e:	d007      	beq.n	800e120 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e11e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e128:	d178      	bne.n	800e21c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d002      	beq.n	800e138 <HAL_SPI_TransmitReceive+0x10a>
 800e132:	8b7b      	ldrh	r3, [r7, #26]
 800e134:	2b01      	cmp	r3, #1
 800e136:	d166      	bne.n	800e206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e13c:	881a      	ldrh	r2, [r3, #0]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e148:	1c9a      	adds	r2, r3, #2
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e152:	b29b      	uxth	r3, r3
 800e154:	3b01      	subs	r3, #1
 800e156:	b29a      	uxth	r2, r3
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e15c:	e053      	b.n	800e206 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	689b      	ldr	r3, [r3, #8]
 800e164:	f003 0302 	and.w	r3, r3, #2
 800e168:	2b02      	cmp	r3, #2
 800e16a:	d11b      	bne.n	800e1a4 <HAL_SPI_TransmitReceive+0x176>
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e170:	b29b      	uxth	r3, r3
 800e172:	2b00      	cmp	r3, #0
 800e174:	d016      	beq.n	800e1a4 <HAL_SPI_TransmitReceive+0x176>
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d113      	bne.n	800e1a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e180:	881a      	ldrh	r2, [r3, #0]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e18c:	1c9a      	adds	r2, r3, #2
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e196:	b29b      	uxth	r3, r3
 800e198:	3b01      	subs	r3, #1
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	689b      	ldr	r3, [r3, #8]
 800e1aa:	f003 0301 	and.w	r3, r3, #1
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d119      	bne.n	800e1e6 <HAL_SPI_TransmitReceive+0x1b8>
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1b6:	b29b      	uxth	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d014      	beq.n	800e1e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	68da      	ldr	r2, [r3, #12]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1c6:	b292      	uxth	r2, r2
 800e1c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1ce:	1c9a      	adds	r2, r3, #2
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e1d8:	b29b      	uxth	r3, r3
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	b29a      	uxth	r2, r3
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e1e6:	f7fc fcc3 	bl	800ab70 <HAL_GetTick>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	1ad3      	subs	r3, r2, r3
 800e1f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d807      	bhi.n	800e206 <HAL_SPI_TransmitReceive+0x1d8>
 800e1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1fc:	d003      	beq.n	800e206 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e1fe:	2303      	movs	r3, #3
 800e200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e204:	e0a7      	b.n	800e356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e20a:	b29b      	uxth	r3, r3
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d1a6      	bne.n	800e15e <HAL_SPI_TransmitReceive+0x130>
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e214:	b29b      	uxth	r3, r3
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1a1      	bne.n	800e15e <HAL_SPI_TransmitReceive+0x130>
 800e21a:	e07c      	b.n	800e316 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d002      	beq.n	800e22a <HAL_SPI_TransmitReceive+0x1fc>
 800e224:	8b7b      	ldrh	r3, [r7, #26]
 800e226:	2b01      	cmp	r3, #1
 800e228:	d16b      	bne.n	800e302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	330c      	adds	r3, #12
 800e234:	7812      	ldrb	r2, [r2, #0]
 800e236:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e23c:	1c5a      	adds	r2, r3, #1
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e246:	b29b      	uxth	r3, r3
 800e248:	3b01      	subs	r3, #1
 800e24a:	b29a      	uxth	r2, r3
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e250:	e057      	b.n	800e302 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	f003 0302 	and.w	r3, r3, #2
 800e25c:	2b02      	cmp	r3, #2
 800e25e:	d11c      	bne.n	800e29a <HAL_SPI_TransmitReceive+0x26c>
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e264:	b29b      	uxth	r3, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	d017      	beq.n	800e29a <HAL_SPI_TransmitReceive+0x26c>
 800e26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d114      	bne.n	800e29a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	330c      	adds	r3, #12
 800e27a:	7812      	ldrb	r2, [r2, #0]
 800e27c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e282:	1c5a      	adds	r2, r3, #1
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	3b01      	subs	r3, #1
 800e290:	b29a      	uxth	r2, r3
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e296:	2300      	movs	r3, #0
 800e298:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	689b      	ldr	r3, [r3, #8]
 800e2a0:	f003 0301 	and.w	r3, r3, #1
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	d119      	bne.n	800e2dc <HAL_SPI_TransmitReceive+0x2ae>
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2ac:	b29b      	uxth	r3, r3
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d014      	beq.n	800e2dc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	68da      	ldr	r2, [r3, #12]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2bc:	b2d2      	uxtb	r2, r2
 800e2be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2c4:	1c5a      	adds	r2, r3, #1
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e2ce:	b29b      	uxth	r3, r3
 800e2d0:	3b01      	subs	r3, #1
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e2d8:	2301      	movs	r3, #1
 800e2da:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e2dc:	f7fc fc48 	bl	800ab70 <HAL_GetTick>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e4:	1ad3      	subs	r3, r2, r3
 800e2e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d803      	bhi.n	800e2f4 <HAL_SPI_TransmitReceive+0x2c6>
 800e2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2f2:	d102      	bne.n	800e2fa <HAL_SPI_TransmitReceive+0x2cc>
 800e2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d103      	bne.n	800e302 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e2fa:	2303      	movs	r3, #3
 800e2fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e300:	e029      	b.n	800e356 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e306:	b29b      	uxth	r3, r3
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d1a2      	bne.n	800e252 <HAL_SPI_TransmitReceive+0x224>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e310:	b29b      	uxth	r3, r3
 800e312:	2b00      	cmp	r3, #0
 800e314:	d19d      	bne.n	800e252 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e318:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f000 f8b2 	bl	800e484 <SPI_EndRxTxTransaction>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d006      	beq.n	800e334 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e326:	2301      	movs	r3, #1
 800e328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	2220      	movs	r2, #32
 800e330:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e332:	e010      	b.n	800e356 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d10b      	bne.n	800e354 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e33c:	2300      	movs	r3, #0
 800e33e:	617b      	str	r3, [r7, #20]
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	617b      	str	r3, [r7, #20]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	617b      	str	r3, [r7, #20]
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	e000      	b.n	800e356 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e354:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	2201      	movs	r2, #1
 800e35a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2200      	movs	r2, #0
 800e362:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e366:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3730      	adds	r7, #48	; 0x30
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
	...

0800e374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	603b      	str	r3, [r7, #0]
 800e380:	4613      	mov	r3, r2
 800e382:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e384:	f7fc fbf4 	bl	800ab70 <HAL_GetTick>
 800e388:	4602      	mov	r2, r0
 800e38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38c:	1a9b      	subs	r3, r3, r2
 800e38e:	683a      	ldr	r2, [r7, #0]
 800e390:	4413      	add	r3, r2
 800e392:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e394:	f7fc fbec 	bl	800ab70 <HAL_GetTick>
 800e398:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e39a:	4b39      	ldr	r3, [pc, #228]	; (800e480 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	015b      	lsls	r3, r3, #5
 800e3a0:	0d1b      	lsrs	r3, r3, #20
 800e3a2:	69fa      	ldr	r2, [r7, #28]
 800e3a4:	fb02 f303 	mul.w	r3, r2, r3
 800e3a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e3aa:	e054      	b.n	800e456 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b2:	d050      	beq.n	800e456 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e3b4:	f7fc fbdc 	bl	800ab70 <HAL_GetTick>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	69bb      	ldr	r3, [r7, #24]
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	69fa      	ldr	r2, [r7, #28]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d902      	bls.n	800e3ca <SPI_WaitFlagStateUntilTimeout+0x56>
 800e3c4:	69fb      	ldr	r3, [r7, #28]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d13d      	bne.n	800e446 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	685a      	ldr	r2, [r3, #4]
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e3d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3e2:	d111      	bne.n	800e408 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	689b      	ldr	r3, [r3, #8]
 800e3e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3ec:	d004      	beq.n	800e3f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3f6:	d107      	bne.n	800e408 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e406:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e40c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e410:	d10f      	bne.n	800e432 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	681a      	ldr	r2, [r3, #0]
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e420:	601a      	str	r2, [r3, #0]
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	681a      	ldr	r2, [r3, #0]
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e430:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2201      	movs	r2, #1
 800e436:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e442:	2303      	movs	r3, #3
 800e444:	e017      	b.n	800e476 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e44c:	2300      	movs	r3, #0
 800e44e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	3b01      	subs	r3, #1
 800e454:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	689a      	ldr	r2, [r3, #8]
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	4013      	ands	r3, r2
 800e460:	68ba      	ldr	r2, [r7, #8]
 800e462:	429a      	cmp	r2, r3
 800e464:	bf0c      	ite	eq
 800e466:	2301      	moveq	r3, #1
 800e468:	2300      	movne	r3, #0
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	461a      	mov	r2, r3
 800e46e:	79fb      	ldrb	r3, [r7, #7]
 800e470:	429a      	cmp	r2, r3
 800e472:	d19b      	bne.n	800e3ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e474:	2300      	movs	r3, #0
}
 800e476:	4618      	mov	r0, r3
 800e478:	3720      	adds	r7, #32
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}
 800e47e:	bf00      	nop
 800e480:	20000294 	.word	0x20000294

0800e484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b088      	sub	sp, #32
 800e488:	af02      	add	r7, sp, #8
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e490:	4b1b      	ldr	r3, [pc, #108]	; (800e500 <SPI_EndRxTxTransaction+0x7c>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	4a1b      	ldr	r2, [pc, #108]	; (800e504 <SPI_EndRxTxTransaction+0x80>)
 800e496:	fba2 2303 	umull	r2, r3, r2, r3
 800e49a:	0d5b      	lsrs	r3, r3, #21
 800e49c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4a0:	fb02 f303 	mul.w	r3, r2, r3
 800e4a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4ae:	d112      	bne.n	800e4d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	2180      	movs	r1, #128	; 0x80
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f7ff ff5a 	bl	800e374 <SPI_WaitFlagStateUntilTimeout>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d016      	beq.n	800e4f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ca:	f043 0220 	orr.w	r2, r3, #32
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	e00f      	b.n	800e4f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d00a      	beq.n	800e4f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	3b01      	subs	r3, #1
 800e4e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	689b      	ldr	r3, [r3, #8]
 800e4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ec:	2b80      	cmp	r3, #128	; 0x80
 800e4ee:	d0f2      	beq.n	800e4d6 <SPI_EndRxTxTransaction+0x52>
 800e4f0:	e000      	b.n	800e4f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800e4f2:	bf00      	nop
  }

  return HAL_OK;
 800e4f4:	2300      	movs	r3, #0
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3718      	adds	r7, #24
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}
 800e4fe:	bf00      	nop
 800e500:	20000294 	.word	0x20000294
 800e504:	165e9f81 	.word	0x165e9f81

0800e508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	e041      	b.n	800e59e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d106      	bne.n	800e534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2200      	movs	r2, #0
 800e52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f7fb ff10 	bl	800a354 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2202      	movs	r2, #2
 800e538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681a      	ldr	r2, [r3, #0]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	3304      	adds	r3, #4
 800e544:	4619      	mov	r1, r3
 800e546:	4610      	mov	r0, r2
 800e548:	f000 fba8 	bl	800ec9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2201      	movs	r2, #1
 800e550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2201      	movs	r2, #1
 800e558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	2201      	movs	r2, #1
 800e568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2201      	movs	r2, #1
 800e570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2201      	movs	r2, #1
 800e578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2201      	movs	r2, #1
 800e588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2201      	movs	r2, #1
 800e590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2201      	movs	r2, #1
 800e598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e59c:	2300      	movs	r3, #0
}
 800e59e:	4618      	mov	r0, r3
 800e5a0:	3708      	adds	r7, #8
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	bd80      	pop	{r7, pc}
	...

0800e5a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b085      	sub	sp, #20
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d001      	beq.n	800e5c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	e04e      	b.n	800e65e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2202      	movs	r2, #2
 800e5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f042 0201 	orr.w	r2, r2, #1
 800e5d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a23      	ldr	r2, [pc, #140]	; (800e66c <HAL_TIM_Base_Start_IT+0xc4>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d022      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5ea:	d01d      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a1f      	ldr	r2, [pc, #124]	; (800e670 <HAL_TIM_Base_Start_IT+0xc8>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d018      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a1e      	ldr	r2, [pc, #120]	; (800e674 <HAL_TIM_Base_Start_IT+0xcc>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d013      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a1c      	ldr	r2, [pc, #112]	; (800e678 <HAL_TIM_Base_Start_IT+0xd0>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d00e      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a1b      	ldr	r2, [pc, #108]	; (800e67c <HAL_TIM_Base_Start_IT+0xd4>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d009      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a19      	ldr	r2, [pc, #100]	; (800e680 <HAL_TIM_Base_Start_IT+0xd8>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d004      	beq.n	800e628 <HAL_TIM_Base_Start_IT+0x80>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a18      	ldr	r2, [pc, #96]	; (800e684 <HAL_TIM_Base_Start_IT+0xdc>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d111      	bne.n	800e64c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f003 0307 	and.w	r3, r3, #7
 800e632:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2b06      	cmp	r3, #6
 800e638:	d010      	beq.n	800e65c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f042 0201 	orr.w	r2, r2, #1
 800e648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e64a:	e007      	b.n	800e65c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f042 0201 	orr.w	r2, r2, #1
 800e65a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e65c:	2300      	movs	r3, #0
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	40010000 	.word	0x40010000
 800e670:	40000400 	.word	0x40000400
 800e674:	40000800 	.word	0x40000800
 800e678:	40000c00 	.word	0x40000c00
 800e67c:	40010400 	.word	0x40010400
 800e680:	40014000 	.word	0x40014000
 800e684:	40001800 	.word	0x40001800

0800e688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e696:	2301      	movs	r3, #1
 800e698:	e041      	b.n	800e71e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d106      	bne.n	800e6b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e6ae:	6878      	ldr	r0, [r7, #4]
 800e6b0:	f7fb fde6 	bl	800a280 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2202      	movs	r2, #2
 800e6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	681a      	ldr	r2, [r3, #0]
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	4610      	mov	r0, r2
 800e6c8:	f000 fae8 	bl	800ec9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e71c:	2300      	movs	r3, #0
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
	...

0800e728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d109      	bne.n	800e74c <HAL_TIM_PWM_Start+0x24>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e73e:	b2db      	uxtb	r3, r3
 800e740:	2b01      	cmp	r3, #1
 800e742:	bf14      	ite	ne
 800e744:	2301      	movne	r3, #1
 800e746:	2300      	moveq	r3, #0
 800e748:	b2db      	uxtb	r3, r3
 800e74a:	e022      	b.n	800e792 <HAL_TIM_PWM_Start+0x6a>
 800e74c:	683b      	ldr	r3, [r7, #0]
 800e74e:	2b04      	cmp	r3, #4
 800e750:	d109      	bne.n	800e766 <HAL_TIM_PWM_Start+0x3e>
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e758:	b2db      	uxtb	r3, r3
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	bf14      	ite	ne
 800e75e:	2301      	movne	r3, #1
 800e760:	2300      	moveq	r3, #0
 800e762:	b2db      	uxtb	r3, r3
 800e764:	e015      	b.n	800e792 <HAL_TIM_PWM_Start+0x6a>
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	2b08      	cmp	r3, #8
 800e76a:	d109      	bne.n	800e780 <HAL_TIM_PWM_Start+0x58>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b01      	cmp	r3, #1
 800e776:	bf14      	ite	ne
 800e778:	2301      	movne	r3, #1
 800e77a:	2300      	moveq	r3, #0
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	e008      	b.n	800e792 <HAL_TIM_PWM_Start+0x6a>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b01      	cmp	r3, #1
 800e78a:	bf14      	ite	ne
 800e78c:	2301      	movne	r3, #1
 800e78e:	2300      	moveq	r3, #0
 800e790:	b2db      	uxtb	r3, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	d001      	beq.n	800e79a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e796:	2301      	movs	r3, #1
 800e798:	e07c      	b.n	800e894 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d104      	bne.n	800e7aa <HAL_TIM_PWM_Start+0x82>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e7a8:	e013      	b.n	800e7d2 <HAL_TIM_PWM_Start+0xaa>
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	2b04      	cmp	r3, #4
 800e7ae:	d104      	bne.n	800e7ba <HAL_TIM_PWM_Start+0x92>
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e7b8:	e00b      	b.n	800e7d2 <HAL_TIM_PWM_Start+0xaa>
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	2b08      	cmp	r3, #8
 800e7be:	d104      	bne.n	800e7ca <HAL_TIM_PWM_Start+0xa2>
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e7c8:	e003      	b.n	800e7d2 <HAL_TIM_PWM_Start+0xaa>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2202      	movs	r2, #2
 800e7ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	2201      	movs	r2, #1
 800e7d8:	6839      	ldr	r1, [r7, #0]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f000 fcae 	bl	800f13c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a2d      	ldr	r2, [pc, #180]	; (800e89c <HAL_TIM_PWM_Start+0x174>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d004      	beq.n	800e7f4 <HAL_TIM_PWM_Start+0xcc>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a2c      	ldr	r2, [pc, #176]	; (800e8a0 <HAL_TIM_PWM_Start+0x178>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d101      	bne.n	800e7f8 <HAL_TIM_PWM_Start+0xd0>
 800e7f4:	2301      	movs	r3, #1
 800e7f6:	e000      	b.n	800e7fa <HAL_TIM_PWM_Start+0xd2>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d007      	beq.n	800e80e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e80c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	4a22      	ldr	r2, [pc, #136]	; (800e89c <HAL_TIM_PWM_Start+0x174>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d022      	beq.n	800e85e <HAL_TIM_PWM_Start+0x136>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e820:	d01d      	beq.n	800e85e <HAL_TIM_PWM_Start+0x136>
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	4a1f      	ldr	r2, [pc, #124]	; (800e8a4 <HAL_TIM_PWM_Start+0x17c>)
 800e828:	4293      	cmp	r3, r2
 800e82a:	d018      	beq.n	800e85e <HAL_TIM_PWM_Start+0x136>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a1d      	ldr	r2, [pc, #116]	; (800e8a8 <HAL_TIM_PWM_Start+0x180>)
 800e832:	4293      	cmp	r3, r2
 800e834:	d013      	beq.n	800e85e <HAL_TIM_PWM_Start+0x136>
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a1c      	ldr	r2, [pc, #112]	; (800e8ac <HAL_TIM_PWM_Start+0x184>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d00e      	beq.n	800e85e <HAL_TIM_PWM_Start+0x136>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	4a16      	ldr	r2, [pc, #88]	; (800e8a0 <HAL_TIM_PWM_Start+0x178>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d009      	beq.n	800e85e <HAL_TIM_PWM_Start+0x136>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a18      	ldr	r2, [pc, #96]	; (800e8b0 <HAL_TIM_PWM_Start+0x188>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d004      	beq.n	800e85e <HAL_TIM_PWM_Start+0x136>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a16      	ldr	r2, [pc, #88]	; (800e8b4 <HAL_TIM_PWM_Start+0x18c>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d111      	bne.n	800e882 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	f003 0307 	and.w	r3, r3, #7
 800e868:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2b06      	cmp	r3, #6
 800e86e:	d010      	beq.n	800e892 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	681a      	ldr	r2, [r3, #0]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f042 0201 	orr.w	r2, r2, #1
 800e87e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e880:	e007      	b.n	800e892 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	681a      	ldr	r2, [r3, #0]
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f042 0201 	orr.w	r2, r2, #1
 800e890:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	4618      	mov	r0, r3
 800e896:	3710      	adds	r7, #16
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	40010000 	.word	0x40010000
 800e8a0:	40010400 	.word	0x40010400
 800e8a4:	40000400 	.word	0x40000400
 800e8a8:	40000800 	.word	0x40000800
 800e8ac:	40000c00 	.word	0x40000c00
 800e8b0:	40014000 	.word	0x40014000
 800e8b4:	40001800 	.word	0x40001800

0800e8b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	f003 0302 	and.w	r3, r3, #2
 800e8ca:	2b02      	cmp	r3, #2
 800e8cc:	d122      	bne.n	800e914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	f003 0302 	and.w	r3, r3, #2
 800e8d8:	2b02      	cmp	r3, #2
 800e8da:	d11b      	bne.n	800e914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f06f 0202 	mvn.w	r2, #2
 800e8e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	f003 0303 	and.w	r3, r3, #3
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d003      	beq.n	800e902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 f9b0 	bl	800ec60 <HAL_TIM_IC_CaptureCallback>
 800e900:	e005      	b.n	800e90e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 f9a2 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 f9b3 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	2200      	movs	r2, #0
 800e912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	f003 0304 	and.w	r3, r3, #4
 800e91e:	2b04      	cmp	r3, #4
 800e920:	d122      	bne.n	800e968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	f003 0304 	and.w	r3, r3, #4
 800e92c:	2b04      	cmp	r3, #4
 800e92e:	d11b      	bne.n	800e968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f06f 0204 	mvn.w	r2, #4
 800e938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2202      	movs	r2, #2
 800e93e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	699b      	ldr	r3, [r3, #24]
 800e946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d003      	beq.n	800e956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 f986 	bl	800ec60 <HAL_TIM_IC_CaptureCallback>
 800e954:	e005      	b.n	800e962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f978 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f000 f989 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	f003 0308 	and.w	r3, r3, #8
 800e972:	2b08      	cmp	r3, #8
 800e974:	d122      	bne.n	800e9bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	68db      	ldr	r3, [r3, #12]
 800e97c:	f003 0308 	and.w	r3, r3, #8
 800e980:	2b08      	cmp	r3, #8
 800e982:	d11b      	bne.n	800e9bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f06f 0208 	mvn.w	r2, #8
 800e98c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2204      	movs	r2, #4
 800e992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	f003 0303 	and.w	r3, r3, #3
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d003      	beq.n	800e9aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f000 f95c 	bl	800ec60 <HAL_TIM_IC_CaptureCallback>
 800e9a8:	e005      	b.n	800e9b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f94e 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f000 f95f 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	691b      	ldr	r3, [r3, #16]
 800e9c2:	f003 0310 	and.w	r3, r3, #16
 800e9c6:	2b10      	cmp	r3, #16
 800e9c8:	d122      	bne.n	800ea10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	f003 0310 	and.w	r3, r3, #16
 800e9d4:	2b10      	cmp	r3, #16
 800e9d6:	d11b      	bne.n	800ea10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	f06f 0210 	mvn.w	r2, #16
 800e9e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	2208      	movs	r2, #8
 800e9e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	69db      	ldr	r3, [r3, #28]
 800e9ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d003      	beq.n	800e9fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f932 	bl	800ec60 <HAL_TIM_IC_CaptureCallback>
 800e9fc:	e005      	b.n	800ea0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9fe:	6878      	ldr	r0, [r7, #4]
 800ea00:	f000 f924 	bl	800ec4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f000 f935 	bl	800ec74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	691b      	ldr	r3, [r3, #16]
 800ea16:	f003 0301 	and.w	r3, r3, #1
 800ea1a:	2b01      	cmp	r3, #1
 800ea1c:	d10e      	bne.n	800ea3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	f003 0301 	and.w	r3, r3, #1
 800ea28:	2b01      	cmp	r3, #1
 800ea2a:	d107      	bne.n	800ea3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f06f 0201 	mvn.w	r2, #1
 800ea34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea36:	6878      	ldr	r0, [r7, #4]
 800ea38:	f7fa fec2 	bl	80097c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea46:	2b80      	cmp	r3, #128	; 0x80
 800ea48:	d10e      	bne.n	800ea68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea54:	2b80      	cmp	r3, #128	; 0x80
 800ea56:	d107      	bne.n	800ea68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ea60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f000 fc68 	bl	800f338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	691b      	ldr	r3, [r3, #16]
 800ea6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea72:	2b40      	cmp	r3, #64	; 0x40
 800ea74:	d10e      	bne.n	800ea94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea80:	2b40      	cmp	r3, #64	; 0x40
 800ea82:	d107      	bne.n	800ea94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ea8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 f8fa 	bl	800ec88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	691b      	ldr	r3, [r3, #16]
 800ea9a:	f003 0320 	and.w	r3, r3, #32
 800ea9e:	2b20      	cmp	r3, #32
 800eaa0:	d10e      	bne.n	800eac0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	f003 0320 	and.w	r3, r3, #32
 800eaac:	2b20      	cmp	r3, #32
 800eaae:	d107      	bne.n	800eac0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f06f 0220 	mvn.w	r2, #32
 800eab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	f000 fc32 	bl	800f324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b086      	sub	sp, #24
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d101      	bne.n	800eae6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eae2:	2302      	movs	r3, #2
 800eae4:	e0ae      	b.n	800ec44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	2201      	movs	r2, #1
 800eaea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	2b0c      	cmp	r3, #12
 800eaf2:	f200 809f 	bhi.w	800ec34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800eaf6:	a201      	add	r2, pc, #4	; (adr r2, 800eafc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eaf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eafc:	0800eb31 	.word	0x0800eb31
 800eb00:	0800ec35 	.word	0x0800ec35
 800eb04:	0800ec35 	.word	0x0800ec35
 800eb08:	0800ec35 	.word	0x0800ec35
 800eb0c:	0800eb71 	.word	0x0800eb71
 800eb10:	0800ec35 	.word	0x0800ec35
 800eb14:	0800ec35 	.word	0x0800ec35
 800eb18:	0800ec35 	.word	0x0800ec35
 800eb1c:	0800ebb3 	.word	0x0800ebb3
 800eb20:	0800ec35 	.word	0x0800ec35
 800eb24:	0800ec35 	.word	0x0800ec35
 800eb28:	0800ec35 	.word	0x0800ec35
 800eb2c:	0800ebf3 	.word	0x0800ebf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	68b9      	ldr	r1, [r7, #8]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 f950 	bl	800eddc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	699a      	ldr	r2, [r3, #24]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f042 0208 	orr.w	r2, r2, #8
 800eb4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	699a      	ldr	r2, [r3, #24]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f022 0204 	bic.w	r2, r2, #4
 800eb5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	6999      	ldr	r1, [r3, #24]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	691a      	ldr	r2, [r3, #16]
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	430a      	orrs	r2, r1
 800eb6c:	619a      	str	r2, [r3, #24]
      break;
 800eb6e:	e064      	b.n	800ec3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	68b9      	ldr	r1, [r7, #8]
 800eb76:	4618      	mov	r0, r3
 800eb78:	f000 f9a0 	bl	800eebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	699a      	ldr	r2, [r3, #24]
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	699a      	ldr	r2, [r3, #24]
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eb9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	6999      	ldr	r1, [r3, #24]
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	691b      	ldr	r3, [r3, #16]
 800eba6:	021a      	lsls	r2, r3, #8
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	430a      	orrs	r2, r1
 800ebae:	619a      	str	r2, [r3, #24]
      break;
 800ebb0:	e043      	b.n	800ec3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68b9      	ldr	r1, [r7, #8]
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f000 f9f5 	bl	800efa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	69da      	ldr	r2, [r3, #28]
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f042 0208 	orr.w	r2, r2, #8
 800ebcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	69da      	ldr	r2, [r3, #28]
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	f022 0204 	bic.w	r2, r2, #4
 800ebdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	69d9      	ldr	r1, [r3, #28]
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	691a      	ldr	r2, [r3, #16]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	61da      	str	r2, [r3, #28]
      break;
 800ebf0:	e023      	b.n	800ec3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68b9      	ldr	r1, [r7, #8]
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 fa49 	bl	800f090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	69da      	ldr	r2, [r3, #28]
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	69da      	ldr	r2, [r3, #28]
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	69d9      	ldr	r1, [r3, #28]
 800ec24:	68bb      	ldr	r3, [r7, #8]
 800ec26:	691b      	ldr	r3, [r3, #16]
 800ec28:	021a      	lsls	r2, r3, #8
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	430a      	orrs	r2, r1
 800ec30:	61da      	str	r2, [r3, #28]
      break;
 800ec32:	e002      	b.n	800ec3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800ec34:	2301      	movs	r3, #1
 800ec36:	75fb      	strb	r3, [r7, #23]
      break;
 800ec38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ec42:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3718      	adds	r7, #24
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec60:	b480      	push	{r7}
 800ec62:	b083      	sub	sp, #12
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec68:	bf00      	nop
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec7c:	bf00      	nop
 800ec7e:	370c      	adds	r7, #12
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec88:	b480      	push	{r7}
 800ec8a:	b083      	sub	sp, #12
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec90:	bf00      	nop
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr

0800ec9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	4a40      	ldr	r2, [pc, #256]	; (800edb0 <TIM_Base_SetConfig+0x114>)
 800ecb0:	4293      	cmp	r3, r2
 800ecb2:	d013      	beq.n	800ecdc <TIM_Base_SetConfig+0x40>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecba:	d00f      	beq.n	800ecdc <TIM_Base_SetConfig+0x40>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	4a3d      	ldr	r2, [pc, #244]	; (800edb4 <TIM_Base_SetConfig+0x118>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d00b      	beq.n	800ecdc <TIM_Base_SetConfig+0x40>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a3c      	ldr	r2, [pc, #240]	; (800edb8 <TIM_Base_SetConfig+0x11c>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d007      	beq.n	800ecdc <TIM_Base_SetConfig+0x40>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a3b      	ldr	r2, [pc, #236]	; (800edbc <TIM_Base_SetConfig+0x120>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d003      	beq.n	800ecdc <TIM_Base_SetConfig+0x40>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a3a      	ldr	r2, [pc, #232]	; (800edc0 <TIM_Base_SetConfig+0x124>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d108      	bne.n	800ecee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ece2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ece4:	683b      	ldr	r3, [r7, #0]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	68fa      	ldr	r2, [r7, #12]
 800ecea:	4313      	orrs	r3, r2
 800ecec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	4a2f      	ldr	r2, [pc, #188]	; (800edb0 <TIM_Base_SetConfig+0x114>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d02b      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecfc:	d027      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	4a2c      	ldr	r2, [pc, #176]	; (800edb4 <TIM_Base_SetConfig+0x118>)
 800ed02:	4293      	cmp	r3, r2
 800ed04:	d023      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a2b      	ldr	r2, [pc, #172]	; (800edb8 <TIM_Base_SetConfig+0x11c>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d01f      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a2a      	ldr	r2, [pc, #168]	; (800edbc <TIM_Base_SetConfig+0x120>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d01b      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a29      	ldr	r2, [pc, #164]	; (800edc0 <TIM_Base_SetConfig+0x124>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d017      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a28      	ldr	r2, [pc, #160]	; (800edc4 <TIM_Base_SetConfig+0x128>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d013      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a27      	ldr	r2, [pc, #156]	; (800edc8 <TIM_Base_SetConfig+0x12c>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d00f      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a26      	ldr	r2, [pc, #152]	; (800edcc <TIM_Base_SetConfig+0x130>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d00b      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a25      	ldr	r2, [pc, #148]	; (800edd0 <TIM_Base_SetConfig+0x134>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d007      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a24      	ldr	r2, [pc, #144]	; (800edd4 <TIM_Base_SetConfig+0x138>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d003      	beq.n	800ed4e <TIM_Base_SetConfig+0xb2>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4a23      	ldr	r2, [pc, #140]	; (800edd8 <TIM_Base_SetConfig+0x13c>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d108      	bne.n	800ed60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	695b      	ldr	r3, [r3, #20]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68fa      	ldr	r2, [r7, #12]
 800ed72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	681a      	ldr	r2, [r3, #0]
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	4a0a      	ldr	r2, [pc, #40]	; (800edb0 <TIM_Base_SetConfig+0x114>)
 800ed88:	4293      	cmp	r3, r2
 800ed8a:	d003      	beq.n	800ed94 <TIM_Base_SetConfig+0xf8>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	4a0c      	ldr	r2, [pc, #48]	; (800edc0 <TIM_Base_SetConfig+0x124>)
 800ed90:	4293      	cmp	r3, r2
 800ed92:	d103      	bne.n	800ed9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	691a      	ldr	r2, [r3, #16]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2201      	movs	r2, #1
 800eda0:	615a      	str	r2, [r3, #20]
}
 800eda2:	bf00      	nop
 800eda4:	3714      	adds	r7, #20
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr
 800edae:	bf00      	nop
 800edb0:	40010000 	.word	0x40010000
 800edb4:	40000400 	.word	0x40000400
 800edb8:	40000800 	.word	0x40000800
 800edbc:	40000c00 	.word	0x40000c00
 800edc0:	40010400 	.word	0x40010400
 800edc4:	40014000 	.word	0x40014000
 800edc8:	40014400 	.word	0x40014400
 800edcc:	40014800 	.word	0x40014800
 800edd0:	40001800 	.word	0x40001800
 800edd4:	40001c00 	.word	0x40001c00
 800edd8:	40002000 	.word	0x40002000

0800eddc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eddc:	b480      	push	{r7}
 800edde:	b087      	sub	sp, #28
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	f023 0201 	bic.w	r2, r3, #1
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	699b      	ldr	r3, [r3, #24]
 800ee02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f023 0303 	bic.w	r3, r3, #3
 800ee12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee14:	683b      	ldr	r3, [r7, #0]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	4313      	orrs	r3, r2
 800ee1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	f023 0302 	bic.w	r3, r3, #2
 800ee24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	689b      	ldr	r3, [r3, #8]
 800ee2a:	697a      	ldr	r2, [r7, #20]
 800ee2c:	4313      	orrs	r3, r2
 800ee2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4a20      	ldr	r2, [pc, #128]	; (800eeb4 <TIM_OC1_SetConfig+0xd8>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d003      	beq.n	800ee40 <TIM_OC1_SetConfig+0x64>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	4a1f      	ldr	r2, [pc, #124]	; (800eeb8 <TIM_OC1_SetConfig+0xdc>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d10c      	bne.n	800ee5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	f023 0308 	bic.w	r3, r3, #8
 800ee46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	68db      	ldr	r3, [r3, #12]
 800ee4c:	697a      	ldr	r2, [r7, #20]
 800ee4e:	4313      	orrs	r3, r2
 800ee50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	f023 0304 	bic.w	r3, r3, #4
 800ee58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4a15      	ldr	r2, [pc, #84]	; (800eeb4 <TIM_OC1_SetConfig+0xd8>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d003      	beq.n	800ee6a <TIM_OC1_SetConfig+0x8e>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a14      	ldr	r2, [pc, #80]	; (800eeb8 <TIM_OC1_SetConfig+0xdc>)
 800ee66:	4293      	cmp	r3, r2
 800ee68:	d111      	bne.n	800ee8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ee78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	695b      	ldr	r3, [r3, #20]
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	4313      	orrs	r3, r2
 800ee82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	693a      	ldr	r2, [r7, #16]
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	693a      	ldr	r2, [r7, #16]
 800ee92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68fa      	ldr	r2, [r7, #12]
 800ee98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	685a      	ldr	r2, [r3, #4]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	621a      	str	r2, [r3, #32]
}
 800eea8:	bf00      	nop
 800eeaa:	371c      	adds	r7, #28
 800eeac:	46bd      	mov	sp, r7
 800eeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb2:	4770      	bx	lr
 800eeb4:	40010000 	.word	0x40010000
 800eeb8:	40010400 	.word	0x40010400

0800eebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b087      	sub	sp, #28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a1b      	ldr	r3, [r3, #32]
 800eeca:	f023 0210 	bic.w	r2, r3, #16
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a1b      	ldr	r3, [r3, #32]
 800eed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	685b      	ldr	r3, [r3, #4]
 800eedc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	699b      	ldr	r3, [r3, #24]
 800eee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	021b      	lsls	r3, r3, #8
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	f023 0320 	bic.w	r3, r3, #32
 800ef06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	011b      	lsls	r3, r3, #4
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	4313      	orrs	r3, r2
 800ef12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	4a22      	ldr	r2, [pc, #136]	; (800efa0 <TIM_OC2_SetConfig+0xe4>)
 800ef18:	4293      	cmp	r3, r2
 800ef1a:	d003      	beq.n	800ef24 <TIM_OC2_SetConfig+0x68>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	4a21      	ldr	r2, [pc, #132]	; (800efa4 <TIM_OC2_SetConfig+0xe8>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d10d      	bne.n	800ef40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ef2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	011b      	lsls	r3, r3, #4
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	4313      	orrs	r3, r2
 800ef36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ef38:	697b      	ldr	r3, [r7, #20]
 800ef3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4a17      	ldr	r2, [pc, #92]	; (800efa0 <TIM_OC2_SetConfig+0xe4>)
 800ef44:	4293      	cmp	r3, r2
 800ef46:	d003      	beq.n	800ef50 <TIM_OC2_SetConfig+0x94>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4a16      	ldr	r2, [pc, #88]	; (800efa4 <TIM_OC2_SetConfig+0xe8>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d113      	bne.n	800ef78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	693a      	ldr	r2, [r7, #16]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	699b      	ldr	r3, [r3, #24]
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	693a      	ldr	r2, [r7, #16]
 800ef74:	4313      	orrs	r3, r2
 800ef76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	693a      	ldr	r2, [r7, #16]
 800ef7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	685a      	ldr	r2, [r3, #4]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	621a      	str	r2, [r3, #32]
}
 800ef92:	bf00      	nop
 800ef94:	371c      	adds	r7, #28
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr
 800ef9e:	bf00      	nop
 800efa0:	40010000 	.word	0x40010000
 800efa4:	40010400 	.word	0x40010400

0800efa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b087      	sub	sp, #28
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6a1b      	ldr	r3, [r3, #32]
 800efb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a1b      	ldr	r3, [r3, #32]
 800efc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	69db      	ldr	r3, [r3, #28]
 800efce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800efd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f023 0303 	bic.w	r3, r3, #3
 800efde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	4313      	orrs	r3, r2
 800efe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	689b      	ldr	r3, [r3, #8]
 800eff6:	021b      	lsls	r3, r3, #8
 800eff8:	697a      	ldr	r2, [r7, #20]
 800effa:	4313      	orrs	r3, r2
 800effc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	4a21      	ldr	r2, [pc, #132]	; (800f088 <TIM_OC3_SetConfig+0xe0>)
 800f002:	4293      	cmp	r3, r2
 800f004:	d003      	beq.n	800f00e <TIM_OC3_SetConfig+0x66>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4a20      	ldr	r2, [pc, #128]	; (800f08c <TIM_OC3_SetConfig+0xe4>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d10d      	bne.n	800f02a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	021b      	lsls	r3, r3, #8
 800f01c:	697a      	ldr	r2, [r7, #20]
 800f01e:	4313      	orrs	r3, r2
 800f020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4a16      	ldr	r2, [pc, #88]	; (800f088 <TIM_OC3_SetConfig+0xe0>)
 800f02e:	4293      	cmp	r3, r2
 800f030:	d003      	beq.n	800f03a <TIM_OC3_SetConfig+0x92>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	4a15      	ldr	r2, [pc, #84]	; (800f08c <TIM_OC3_SetConfig+0xe4>)
 800f036:	4293      	cmp	r3, r2
 800f038:	d113      	bne.n	800f062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f03a:	693b      	ldr	r3, [r7, #16]
 800f03c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f042:	693b      	ldr	r3, [r7, #16]
 800f044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	695b      	ldr	r3, [r3, #20]
 800f04e:	011b      	lsls	r3, r3, #4
 800f050:	693a      	ldr	r2, [r7, #16]
 800f052:	4313      	orrs	r3, r2
 800f054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	699b      	ldr	r3, [r3, #24]
 800f05a:	011b      	lsls	r3, r3, #4
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	4313      	orrs	r3, r2
 800f060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	693a      	ldr	r2, [r7, #16]
 800f066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	68fa      	ldr	r2, [r7, #12]
 800f06c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	685a      	ldr	r2, [r3, #4]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	697a      	ldr	r2, [r7, #20]
 800f07a:	621a      	str	r2, [r3, #32]
}
 800f07c:	bf00      	nop
 800f07e:	371c      	adds	r7, #28
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr
 800f088:	40010000 	.word	0x40010000
 800f08c:	40010400 	.word	0x40010400

0800f090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f090:	b480      	push	{r7}
 800f092:	b087      	sub	sp, #28
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	6a1b      	ldr	r3, [r3, #32]
 800f09e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	6a1b      	ldr	r3, [r3, #32]
 800f0aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	69db      	ldr	r3, [r3, #28]
 800f0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f0be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f0c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	021b      	lsls	r3, r3, #8
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	4313      	orrs	r3, r2
 800f0d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f0da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	031b      	lsls	r3, r3, #12
 800f0e2:	693a      	ldr	r2, [r7, #16]
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a12      	ldr	r2, [pc, #72]	; (800f134 <TIM_OC4_SetConfig+0xa4>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d003      	beq.n	800f0f8 <TIM_OC4_SetConfig+0x68>
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	4a11      	ldr	r2, [pc, #68]	; (800f138 <TIM_OC4_SetConfig+0xa8>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d109      	bne.n	800f10c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f0fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	695b      	ldr	r3, [r3, #20]
 800f104:	019b      	lsls	r3, r3, #6
 800f106:	697a      	ldr	r2, [r7, #20]
 800f108:	4313      	orrs	r3, r2
 800f10a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	697a      	ldr	r2, [r7, #20]
 800f110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	693a      	ldr	r2, [r7, #16]
 800f124:	621a      	str	r2, [r3, #32]
}
 800f126:	bf00      	nop
 800f128:	371c      	adds	r7, #28
 800f12a:	46bd      	mov	sp, r7
 800f12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f130:	4770      	bx	lr
 800f132:	bf00      	nop
 800f134:	40010000 	.word	0x40010000
 800f138:	40010400 	.word	0x40010400

0800f13c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b087      	sub	sp, #28
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	f003 031f 	and.w	r3, r3, #31
 800f14e:	2201      	movs	r2, #1
 800f150:	fa02 f303 	lsl.w	r3, r2, r3
 800f154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6a1a      	ldr	r2, [r3, #32]
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	43db      	mvns	r3, r3
 800f15e:	401a      	ands	r2, r3
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	6a1a      	ldr	r2, [r3, #32]
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	f003 031f 	and.w	r3, r3, #31
 800f16e:	6879      	ldr	r1, [r7, #4]
 800f170:	fa01 f303 	lsl.w	r3, r1, r3
 800f174:	431a      	orrs	r2, r3
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	621a      	str	r2, [r3, #32]
}
 800f17a:	bf00      	nop
 800f17c:	371c      	adds	r7, #28
 800f17e:	46bd      	mov	sp, r7
 800f180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f184:	4770      	bx	lr
	...

0800f188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f198:	2b01      	cmp	r3, #1
 800f19a:	d101      	bne.n	800f1a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f19c:	2302      	movs	r3, #2
 800f19e:	e05a      	b.n	800f256 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2202      	movs	r2, #2
 800f1ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	689b      	ldr	r3, [r3, #8]
 800f1be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	68fa      	ldr	r2, [r7, #12]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	4a21      	ldr	r2, [pc, #132]	; (800f264 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d022      	beq.n	800f22a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1ec:	d01d      	beq.n	800f22a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	4a1d      	ldr	r2, [pc, #116]	; (800f268 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d018      	beq.n	800f22a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	4a1b      	ldr	r2, [pc, #108]	; (800f26c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d013      	beq.n	800f22a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a1a      	ldr	r2, [pc, #104]	; (800f270 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d00e      	beq.n	800f22a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a18      	ldr	r2, [pc, #96]	; (800f274 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f212:	4293      	cmp	r3, r2
 800f214:	d009      	beq.n	800f22a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4a17      	ldr	r2, [pc, #92]	; (800f278 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f21c:	4293      	cmp	r3, r2
 800f21e:	d004      	beq.n	800f22a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	4a15      	ldr	r2, [pc, #84]	; (800f27c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d10c      	bne.n	800f244 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	685b      	ldr	r3, [r3, #4]
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	4313      	orrs	r3, r2
 800f23a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	68ba      	ldr	r2, [r7, #8]
 800f242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	2201      	movs	r2, #1
 800f248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	2200      	movs	r2, #0
 800f250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f254:	2300      	movs	r3, #0
}
 800f256:	4618      	mov	r0, r3
 800f258:	3714      	adds	r7, #20
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	40010000 	.word	0x40010000
 800f268:	40000400 	.word	0x40000400
 800f26c:	40000800 	.word	0x40000800
 800f270:	40000c00 	.word	0x40000c00
 800f274:	40010400 	.word	0x40010400
 800f278:	40014000 	.word	0x40014000
 800f27c:	40001800 	.word	0x40001800

0800f280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
 800f288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f28a:	2300      	movs	r3, #0
 800f28c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f294:	2b01      	cmp	r3, #1
 800f296:	d101      	bne.n	800f29c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f298:	2302      	movs	r3, #2
 800f29a:	e03d      	b.n	800f318 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	68db      	ldr	r3, [r3, #12]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	4313      	orrs	r3, r2
 800f2be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	691b      	ldr	r3, [r3, #16]
 800f2e6:	4313      	orrs	r3, r2
 800f2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	695b      	ldr	r3, [r3, #20]
 800f2f4:	4313      	orrs	r3, r2
 800f2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	69db      	ldr	r3, [r3, #28]
 800f302:	4313      	orrs	r3, r2
 800f304:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	68fa      	ldr	r2, [r7, #12]
 800f30c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2200      	movs	r2, #0
 800f312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f316:	2300      	movs	r3, #0
}
 800f318:	4618      	mov	r0, r3
 800f31a:	3714      	adds	r7, #20
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f324:	b480      	push	{r7}
 800f326:	b083      	sub	sp, #12
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f32c:	bf00      	nop
 800f32e:	370c      	adds	r7, #12
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f340:	bf00      	nop
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr

0800f34c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e03f      	b.n	800f3de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b00      	cmp	r3, #0
 800f368:	d106      	bne.n	800f378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f7fb f988 	bl	800a688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2224      	movs	r2, #36	; 0x24
 800f37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68da      	ldr	r2, [r3, #12]
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f38e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f000 fee3 	bl	801015c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	691a      	ldr	r2, [r3, #16]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f3a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	695a      	ldr	r2, [r3, #20]
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f3b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	68da      	ldr	r2, [r3, #12]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f3c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2220      	movs	r2, #32
 800f3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2220      	movs	r2, #32
 800f3d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f3dc:	2300      	movs	r3, #0
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	60f8      	str	r0, [r7, #12]
 800f3ee:	60b9      	str	r1, [r7, #8]
 800f3f0:	4613      	mov	r3, r2
 800f3f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3fa:	b2db      	uxtb	r3, r3
 800f3fc:	2b20      	cmp	r3, #32
 800f3fe:	d11d      	bne.n	800f43c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	2b00      	cmp	r3, #0
 800f404:	d002      	beq.n	800f40c <HAL_UART_Receive_DMA+0x26>
 800f406:	88fb      	ldrh	r3, [r7, #6]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f40c:	2301      	movs	r3, #1
 800f40e:	e016      	b.n	800f43e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f416:	2b01      	cmp	r3, #1
 800f418:	d101      	bne.n	800f41e <HAL_UART_Receive_DMA+0x38>
 800f41a:	2302      	movs	r3, #2
 800f41c:	e00f      	b.n	800f43e <HAL_UART_Receive_DMA+0x58>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2201      	movs	r2, #1
 800f422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	2200      	movs	r2, #0
 800f42a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f42c:	88fb      	ldrh	r3, [r7, #6]
 800f42e:	461a      	mov	r2, r3
 800f430:	68b9      	ldr	r1, [r7, #8]
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f000 fc36 	bl	800fca4 <UART_Start_Receive_DMA>
 800f438:	4603      	mov	r3, r0
 800f43a:	e000      	b.n	800f43e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800f43c:	2302      	movs	r3, #2
  }
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}

0800f446 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800f446:	b580      	push	{r7, lr}
 800f448:	b090      	sub	sp, #64	; 0x40
 800f44a:	af00      	add	r7, sp, #0
 800f44c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f44e:	2300      	movs	r3, #0
 800f450:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	695b      	ldr	r3, [r3, #20]
 800f458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f45c:	2b80      	cmp	r3, #128	; 0x80
 800f45e:	bf0c      	ite	eq
 800f460:	2301      	moveq	r3, #1
 800f462:	2300      	movne	r3, #0
 800f464:	b2db      	uxtb	r3, r3
 800f466:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b21      	cmp	r3, #33	; 0x21
 800f472:	d128      	bne.n	800f4c6 <HAL_UART_DMAStop+0x80>
 800f474:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f476:	2b00      	cmp	r3, #0
 800f478:	d025      	beq.n	800f4c6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	3314      	adds	r3, #20
 800f480:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f484:	e853 3f00 	ldrex	r3, [r3]
 800f488:	623b      	str	r3, [r7, #32]
   return(result);
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f490:	63bb      	str	r3, [r7, #56]	; 0x38
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	3314      	adds	r3, #20
 800f498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f49a:	633a      	str	r2, [r7, #48]	; 0x30
 800f49c:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f49e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f4a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f4a2:	e841 2300 	strex	r3, r2, [r1]
 800f4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d1e5      	bne.n	800f47a <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d004      	beq.n	800f4c0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fc fc02 	bl	800bcc4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f000 fc89 	bl	800fdd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	695b      	ldr	r3, [r3, #20]
 800f4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4d0:	2b40      	cmp	r3, #64	; 0x40
 800f4d2:	bf0c      	ite	eq
 800f4d4:	2301      	moveq	r3, #1
 800f4d6:	2300      	movne	r3, #0
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f4e2:	b2db      	uxtb	r3, r3
 800f4e4:	2b22      	cmp	r3, #34	; 0x22
 800f4e6:	d128      	bne.n	800f53a <HAL_UART_DMAStop+0xf4>
 800f4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d025      	beq.n	800f53a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	3314      	adds	r3, #20
 800f4f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4f6:	693b      	ldr	r3, [r7, #16]
 800f4f8:	e853 3f00 	ldrex	r3, [r3]
 800f4fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f504:	637b      	str	r3, [r7, #52]	; 0x34
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	681b      	ldr	r3, [r3, #0]
 800f50a:	3314      	adds	r3, #20
 800f50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f50e:	61fa      	str	r2, [r7, #28]
 800f510:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f512:	69b9      	ldr	r1, [r7, #24]
 800f514:	69fa      	ldr	r2, [r7, #28]
 800f516:	e841 2300 	strex	r3, r2, [r1]
 800f51a:	617b      	str	r3, [r7, #20]
   return(result);
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d1e5      	bne.n	800f4ee <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f526:	2b00      	cmp	r3, #0
 800f528:	d004      	beq.n	800f534 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f52e:	4618      	mov	r0, r3
 800f530:	f7fc fbc8 	bl	800bcc4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 fc77 	bl	800fe28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3740      	adds	r7, #64	; 0x40
 800f540:	46bd      	mov	sp, r7
 800f542:	bd80      	pop	{r7, pc}

0800f544 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b0ba      	sub	sp, #232	; 0xe8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	695b      	ldr	r3, [r3, #20]
 800f566:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800f56a:	2300      	movs	r3, #0
 800f56c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800f570:	2300      	movs	r3, #0
 800f572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f57a:	f003 030f 	and.w	r3, r3, #15
 800f57e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800f582:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f586:	2b00      	cmp	r3, #0
 800f588:	d10f      	bne.n	800f5aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f58e:	f003 0320 	and.w	r3, r3, #32
 800f592:	2b00      	cmp	r3, #0
 800f594:	d009      	beq.n	800f5aa <HAL_UART_IRQHandler+0x66>
 800f596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f59a:	f003 0320 	and.w	r3, r3, #32
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d003      	beq.n	800f5aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f000 fd1f 	bl	800ffe6 <UART_Receive_IT>
      return;
 800f5a8:	e256      	b.n	800fa58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f5aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	f000 80de 	beq.w	800f770 <HAL_UART_IRQHandler+0x22c>
 800f5b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f5b8:	f003 0301 	and.w	r3, r3, #1
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d106      	bne.n	800f5ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f5c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	f000 80d1 	beq.w	800f770 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5d2:	f003 0301 	and.w	r3, r3, #1
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00b      	beq.n	800f5f2 <HAL_UART_IRQHandler+0xae>
 800f5da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f5de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d005      	beq.n	800f5f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ea:	f043 0201 	orr.w	r2, r3, #1
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f5f6:	f003 0304 	and.w	r3, r3, #4
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d00b      	beq.n	800f616 <HAL_UART_IRQHandler+0xd2>
 800f5fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	2b00      	cmp	r3, #0
 800f608:	d005      	beq.n	800f616 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f60e:	f043 0202 	orr.w	r2, r3, #2
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f61a:	f003 0302 	and.w	r3, r3, #2
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d00b      	beq.n	800f63a <HAL_UART_IRQHandler+0xf6>
 800f622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f626:	f003 0301 	and.w	r3, r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d005      	beq.n	800f63a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f632:	f043 0204 	orr.w	r2, r3, #4
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f63a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f63e:	f003 0308 	and.w	r3, r3, #8
 800f642:	2b00      	cmp	r3, #0
 800f644:	d011      	beq.n	800f66a <HAL_UART_IRQHandler+0x126>
 800f646:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f64a:	f003 0320 	and.w	r3, r3, #32
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d105      	bne.n	800f65e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f656:	f003 0301 	and.w	r3, r3, #1
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d005      	beq.n	800f66a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f662:	f043 0208 	orr.w	r2, r3, #8
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f000 81ed 	beq.w	800fa4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f678:	f003 0320 	and.w	r3, r3, #32
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d008      	beq.n	800f692 <HAL_UART_IRQHandler+0x14e>
 800f680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f684:	f003 0320 	and.w	r3, r3, #32
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d002      	beq.n	800f692 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f000 fcaa 	bl	800ffe6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	695b      	ldr	r3, [r3, #20]
 800f698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f69c:	2b40      	cmp	r3, #64	; 0x40
 800f69e:	bf0c      	ite	eq
 800f6a0:	2301      	moveq	r3, #1
 800f6a2:	2300      	movne	r3, #0
 800f6a4:	b2db      	uxtb	r3, r3
 800f6a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ae:	f003 0308 	and.w	r3, r3, #8
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d103      	bne.n	800f6be <HAL_UART_IRQHandler+0x17a>
 800f6b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d04f      	beq.n	800f75e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 fbb2 	bl	800fe28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	695b      	ldr	r3, [r3, #20]
 800f6ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6ce:	2b40      	cmp	r3, #64	; 0x40
 800f6d0:	d141      	bne.n	800f756 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	3314      	adds	r3, #20
 800f6d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800f6e0:	e853 3f00 	ldrex	r3, [r3]
 800f6e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800f6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f6ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	3314      	adds	r3, #20
 800f6fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800f6fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f706:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800f70a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f70e:	e841 2300 	strex	r3, r2, [r1]
 800f712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800f716:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1d9      	bne.n	800f6d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f722:	2b00      	cmp	r3, #0
 800f724:	d013      	beq.n	800f74e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f72a:	4a7d      	ldr	r2, [pc, #500]	; (800f920 <HAL_UART_IRQHandler+0x3dc>)
 800f72c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f732:	4618      	mov	r0, r3
 800f734:	f7fc fb36 	bl	800bda4 <HAL_DMA_Abort_IT>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d016      	beq.n	800f76c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f744:	687a      	ldr	r2, [r7, #4]
 800f746:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f748:	4610      	mov	r0, r2
 800f74a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f74c:	e00e      	b.n	800f76c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f99a 	bl	800fa88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f754:	e00a      	b.n	800f76c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 f996 	bl	800fa88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f75c:	e006      	b.n	800f76c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 f992 	bl	800fa88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800f76a:	e170      	b.n	800fa4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f76c:	bf00      	nop
    return;
 800f76e:	e16e      	b.n	800fa4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f774:	2b01      	cmp	r3, #1
 800f776:	f040 814a 	bne.w	800fa0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f77e:	f003 0310 	and.w	r3, r3, #16
 800f782:	2b00      	cmp	r3, #0
 800f784:	f000 8143 	beq.w	800fa0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f78c:	f003 0310 	and.w	r3, r3, #16
 800f790:	2b00      	cmp	r3, #0
 800f792:	f000 813c 	beq.w	800fa0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f796:	2300      	movs	r3, #0
 800f798:	60bb      	str	r3, [r7, #8]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	60bb      	str	r3, [r7, #8]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	60bb      	str	r3, [r7, #8]
 800f7aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	695b      	ldr	r3, [r3, #20]
 800f7b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7b6:	2b40      	cmp	r3, #64	; 0x40
 800f7b8:	f040 80b4 	bne.w	800f924 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f7c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f000 8140 	beq.w	800fa52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800f7d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	f080 8139 	bcs.w	800fa52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f7e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ec:	69db      	ldr	r3, [r3, #28]
 800f7ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7f2:	f000 8088 	beq.w	800f906 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	330c      	adds	r3, #12
 800f7fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f800:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f804:	e853 3f00 	ldrex	r3, [r3]
 800f808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f80c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	330c      	adds	r3, #12
 800f81e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f822:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800f826:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f82a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f82e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f832:	e841 2300 	strex	r3, r2, [r1]
 800f836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f83a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1d9      	bne.n	800f7f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	3314      	adds	r3, #20
 800f848:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f84c:	e853 3f00 	ldrex	r3, [r3]
 800f850:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f852:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f854:	f023 0301 	bic.w	r3, r3, #1
 800f858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	3314      	adds	r3, #20
 800f862:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f866:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f86a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f86c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f86e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f872:	e841 2300 	strex	r3, r2, [r1]
 800f876:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d1e1      	bne.n	800f842 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	3314      	adds	r3, #20
 800f884:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f886:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f888:	e853 3f00 	ldrex	r3, [r3]
 800f88c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f88e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	3314      	adds	r3, #20
 800f89e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f8a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f8a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f8a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f8aa:	e841 2300 	strex	r3, r2, [r1]
 800f8ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f8b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d1e3      	bne.n	800f87e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2220      	movs	r2, #32
 800f8ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	330c      	adds	r3, #12
 800f8ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ce:	e853 3f00 	ldrex	r3, [r3]
 800f8d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8d6:	f023 0310 	bic.w	r3, r3, #16
 800f8da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	330c      	adds	r3, #12
 800f8e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f8e8:	65ba      	str	r2, [r7, #88]	; 0x58
 800f8ea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f8f0:	e841 2300 	strex	r3, r2, [r1]
 800f8f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1e3      	bne.n	800f8c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f900:	4618      	mov	r0, r3
 800f902:	f7fc f9df 	bl	800bcc4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f90e:	b29b      	uxth	r3, r3
 800f910:	1ad3      	subs	r3, r2, r3
 800f912:	b29b      	uxth	r3, r3
 800f914:	4619      	mov	r1, r3
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f000 f8c0 	bl	800fa9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f91c:	e099      	b.n	800fa52 <HAL_UART_IRQHandler+0x50e>
 800f91e:	bf00      	nop
 800f920:	0800feef 	.word	0x0800feef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	1ad3      	subs	r3, r2, r3
 800f930:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800f938:	b29b      	uxth	r3, r3
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	f000 808b 	beq.w	800fa56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800f940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f944:	2b00      	cmp	r3, #0
 800f946:	f000 8086 	beq.w	800fa56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	330c      	adds	r3, #12
 800f950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	e853 3f00 	ldrex	r3, [r3]
 800f958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f95a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f95c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f960:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	681b      	ldr	r3, [r3, #0]
 800f968:	330c      	adds	r3, #12
 800f96a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800f96e:	647a      	str	r2, [r7, #68]	; 0x44
 800f970:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f976:	e841 2300 	strex	r3, r2, [r1]
 800f97a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d1e3      	bne.n	800f94a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	3314      	adds	r3, #20
 800f988:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f98c:	e853 3f00 	ldrex	r3, [r3]
 800f990:	623b      	str	r3, [r7, #32]
   return(result);
 800f992:	6a3b      	ldr	r3, [r7, #32]
 800f994:	f023 0301 	bic.w	r3, r3, #1
 800f998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	3314      	adds	r3, #20
 800f9a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f9a6:	633a      	str	r2, [r7, #48]	; 0x30
 800f9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9ae:	e841 2300 	strex	r3, r2, [r1]
 800f9b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d1e3      	bne.n	800f982 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2220      	movs	r2, #32
 800f9be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	330c      	adds	r3, #12
 800f9ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	e853 3f00 	ldrex	r3, [r3]
 800f9d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f023 0310 	bic.w	r3, r3, #16
 800f9de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	330c      	adds	r3, #12
 800f9e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f9ec:	61fa      	str	r2, [r7, #28]
 800f9ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9f0:	69b9      	ldr	r1, [r7, #24]
 800f9f2:	69fa      	ldr	r2, [r7, #28]
 800f9f4:	e841 2300 	strex	r3, r2, [r1]
 800f9f8:	617b      	str	r3, [r7, #20]
   return(result);
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d1e3      	bne.n	800f9c8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fa00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fa04:	4619      	mov	r1, r3
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f848 	bl	800fa9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fa0c:	e023      	b.n	800fa56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fa0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d009      	beq.n	800fa2e <HAL_UART_IRQHandler+0x4ea>
 800fa1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d003      	beq.n	800fa2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f000 fa75 	bl	800ff16 <UART_Transmit_IT>
    return;
 800fa2c:	e014      	b.n	800fa58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fa2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d00e      	beq.n	800fa58 <HAL_UART_IRQHandler+0x514>
 800fa3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d008      	beq.n	800fa58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800fa46:	6878      	ldr	r0, [r7, #4]
 800fa48:	f000 fab5 	bl	800ffb6 <UART_EndTransmit_IT>
    return;
 800fa4c:	e004      	b.n	800fa58 <HAL_UART_IRQHandler+0x514>
    return;
 800fa4e:	bf00      	nop
 800fa50:	e002      	b.n	800fa58 <HAL_UART_IRQHandler+0x514>
      return;
 800fa52:	bf00      	nop
 800fa54:	e000      	b.n	800fa58 <HAL_UART_IRQHandler+0x514>
      return;
 800fa56:	bf00      	nop
  }
}
 800fa58:	37e8      	adds	r7, #232	; 0xe8
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}
 800fa5e:	bf00      	nop

0800fa60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fa7c:	bf00      	nop
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b083      	sub	sp, #12
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fa90:	bf00      	nop
 800fa92:	370c      	adds	r7, #12
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	460b      	mov	r3, r1
 800faa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800faa8:	bf00      	nop
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b09c      	sub	sp, #112	; 0x70
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fac0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800facc:	2b00      	cmp	r3, #0
 800face:	d172      	bne.n	800fbb6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800fad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fad2:	2200      	movs	r2, #0
 800fad4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fad6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	330c      	adds	r3, #12
 800fadc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fae0:	e853 3f00 	ldrex	r3, [r3]
 800fae4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800faec:	66bb      	str	r3, [r7, #104]	; 0x68
 800faee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	330c      	adds	r3, #12
 800faf4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faf6:	65ba      	str	r2, [r7, #88]	; 0x58
 800faf8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fafa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fafc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fafe:	e841 2300 	strex	r3, r2, [r1]
 800fb02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d1e5      	bne.n	800fad6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3314      	adds	r3, #20
 800fb10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb14:	e853 3f00 	ldrex	r3, [r3]
 800fb18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fb1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb1c:	f023 0301 	bic.w	r3, r3, #1
 800fb20:	667b      	str	r3, [r7, #100]	; 0x64
 800fb22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	3314      	adds	r3, #20
 800fb28:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fb2a:	647a      	str	r2, [r7, #68]	; 0x44
 800fb2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fb30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fb32:	e841 2300 	strex	r3, r2, [r1]
 800fb36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fb38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d1e5      	bne.n	800fb0a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3314      	adds	r3, #20
 800fb44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb48:	e853 3f00 	ldrex	r3, [r3]
 800fb4c:	623b      	str	r3, [r7, #32]
   return(result);
 800fb4e:	6a3b      	ldr	r3, [r7, #32]
 800fb50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb54:	663b      	str	r3, [r7, #96]	; 0x60
 800fb56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3314      	adds	r3, #20
 800fb5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fb5e:	633a      	str	r2, [r7, #48]	; 0x30
 800fb60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb66:	e841 2300 	strex	r3, r2, [r1]
 800fb6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d1e5      	bne.n	800fb3e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fb72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb74:	2220      	movs	r2, #32
 800fb76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb7e:	2b01      	cmp	r3, #1
 800fb80:	d119      	bne.n	800fbb6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	330c      	adds	r3, #12
 800fb88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	e853 3f00 	ldrex	r3, [r3]
 800fb90:	60fb      	str	r3, [r7, #12]
   return(result);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	f023 0310 	bic.w	r3, r3, #16
 800fb98:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	330c      	adds	r3, #12
 800fba0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fba2:	61fa      	str	r2, [r7, #28]
 800fba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fba6:	69b9      	ldr	r1, [r7, #24]
 800fba8:	69fa      	ldr	r2, [r7, #28]
 800fbaa:	e841 2300 	strex	r3, r2, [r1]
 800fbae:	617b      	str	r3, [r7, #20]
   return(result);
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d1e5      	bne.n	800fb82 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d106      	bne.n	800fbcc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fbbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fbc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fbc2:	4619      	mov	r1, r3
 800fbc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fbc6:	f7ff ff69 	bl	800fa9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fbca:	e002      	b.n	800fbd2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800fbcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fbce:	f7f9 fe39 	bl	8009844 <HAL_UART_RxCpltCallback>
}
 800fbd2:	bf00      	nop
 800fbd4:	3770      	adds	r7, #112	; 0x70
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b084      	sub	sp, #16
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbe6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d108      	bne.n	800fc02 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800fbf4:	085b      	lsrs	r3, r3, #1
 800fbf6:	b29b      	uxth	r3, r3
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f7ff ff4e 	bl	800fa9c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc00:	e002      	b.n	800fc08 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800fc02:	68f8      	ldr	r0, [r7, #12]
 800fc04:	f7ff ff36 	bl	800fa74 <HAL_UART_RxHalfCpltCallback>
}
 800fc08:	bf00      	nop
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc20:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	695b      	ldr	r3, [r3, #20]
 800fc28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc2c:	2b80      	cmp	r3, #128	; 0x80
 800fc2e:	bf0c      	ite	eq
 800fc30:	2301      	moveq	r3, #1
 800fc32:	2300      	movne	r3, #0
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	2b21      	cmp	r3, #33	; 0x21
 800fc42:	d108      	bne.n	800fc56 <UART_DMAError+0x46>
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d005      	beq.n	800fc56 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800fc50:	68b8      	ldr	r0, [r7, #8]
 800fc52:	f000 f8c1 	bl	800fdd8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	695b      	ldr	r3, [r3, #20]
 800fc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc60:	2b40      	cmp	r3, #64	; 0x40
 800fc62:	bf0c      	ite	eq
 800fc64:	2301      	moveq	r3, #1
 800fc66:	2300      	movne	r3, #0
 800fc68:	b2db      	uxtb	r3, r3
 800fc6a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	2b22      	cmp	r3, #34	; 0x22
 800fc76:	d108      	bne.n	800fc8a <UART_DMAError+0x7a>
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d005      	beq.n	800fc8a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2200      	movs	r2, #0
 800fc82:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800fc84:	68b8      	ldr	r0, [r7, #8]
 800fc86:	f000 f8cf 	bl	800fe28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc8e:	f043 0210 	orr.w	r2, r3, #16
 800fc92:	68bb      	ldr	r3, [r7, #8]
 800fc94:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fc96:	68b8      	ldr	r0, [r7, #8]
 800fc98:	f7ff fef6 	bl	800fa88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc9c:	bf00      	nop
 800fc9e:	3710      	adds	r7, #16
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b098      	sub	sp, #96	; 0x60
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	60f8      	str	r0, [r7, #12]
 800fcac:	60b9      	str	r1, [r7, #8]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fcb2:	68ba      	ldr	r2, [r7, #8]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	88fa      	ldrh	r2, [r7, #6]
 800fcbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2222      	movs	r2, #34	; 0x22
 800fcc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd0:	4a3e      	ldr	r2, [pc, #248]	; (800fdcc <UART_Start_Receive_DMA+0x128>)
 800fcd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcd8:	4a3d      	ldr	r2, [pc, #244]	; (800fdd0 <UART_Start_Receive_DMA+0x12c>)
 800fcda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce0:	4a3c      	ldr	r2, [pc, #240]	; (800fdd4 <UART_Start_Receive_DMA+0x130>)
 800fce2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce8:	2200      	movs	r2, #0
 800fcea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fcec:	f107 0308 	add.w	r3, r7, #8
 800fcf0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	3304      	adds	r3, #4
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	88fb      	ldrh	r3, [r7, #6]
 800fd04:	f7fb ff86 	bl	800bc14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fd08:	2300      	movs	r3, #0
 800fd0a:	613b      	str	r3, [r7, #16]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	613b      	str	r3, [r7, #16]
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	613b      	str	r3, [r7, #16]
 800fd1c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	330c      	adds	r3, #12
 800fd2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd30:	e853 3f00 	ldrex	r3, [r3]
 800fd34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	330c      	adds	r3, #12
 800fd44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd46:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fd48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd4a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fd4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd4e:	e841 2300 	strex	r3, r2, [r1]
 800fd52:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fd54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d1e5      	bne.n	800fd26 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	3314      	adds	r3, #20
 800fd60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd64:	e853 3f00 	ldrex	r3, [r3]
 800fd68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd6c:	f043 0301 	orr.w	r3, r3, #1
 800fd70:	657b      	str	r3, [r7, #84]	; 0x54
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	3314      	adds	r3, #20
 800fd78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fd7a:	63ba      	str	r2, [r7, #56]	; 0x38
 800fd7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd82:	e841 2300 	strex	r3, r2, [r1]
 800fd86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d1e5      	bne.n	800fd5a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	3314      	adds	r3, #20
 800fd94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	e853 3f00 	ldrex	r3, [r3]
 800fd9c:	617b      	str	r3, [r7, #20]
   return(result);
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fda4:	653b      	str	r3, [r7, #80]	; 0x50
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	3314      	adds	r3, #20
 800fdac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fdae:	627a      	str	r2, [r7, #36]	; 0x24
 800fdb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb2:	6a39      	ldr	r1, [r7, #32]
 800fdb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdb6:	e841 2300 	strex	r3, r2, [r1]
 800fdba:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1e5      	bne.n	800fd8e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fdc2:	2300      	movs	r3, #0
}
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3760      	adds	r7, #96	; 0x60
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}
 800fdcc:	0800fab5 	.word	0x0800fab5
 800fdd0:	0800fbdb 	.word	0x0800fbdb
 800fdd4:	0800fc11 	.word	0x0800fc11

0800fdd8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fdd8:	b480      	push	{r7}
 800fdda:	b089      	sub	sp, #36	; 0x24
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	330c      	adds	r3, #12
 800fde6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	e853 3f00 	ldrex	r3, [r3]
 800fdee:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdf0:	68bb      	ldr	r3, [r7, #8]
 800fdf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fdf6:	61fb      	str	r3, [r7, #28]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	330c      	adds	r3, #12
 800fdfe:	69fa      	ldr	r2, [r7, #28]
 800fe00:	61ba      	str	r2, [r7, #24]
 800fe02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe04:	6979      	ldr	r1, [r7, #20]
 800fe06:	69ba      	ldr	r2, [r7, #24]
 800fe08:	e841 2300 	strex	r3, r2, [r1]
 800fe0c:	613b      	str	r3, [r7, #16]
   return(result);
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1e5      	bne.n	800fde0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2220      	movs	r2, #32
 800fe18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800fe1c:	bf00      	nop
 800fe1e:	3724      	adds	r7, #36	; 0x24
 800fe20:	46bd      	mov	sp, r7
 800fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe26:	4770      	bx	lr

0800fe28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b095      	sub	sp, #84	; 0x54
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	330c      	adds	r3, #12
 800fe36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe3a:	e853 3f00 	ldrex	r3, [r3]
 800fe3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	330c      	adds	r3, #12
 800fe4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe50:	643a      	str	r2, [r7, #64]	; 0x40
 800fe52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe58:	e841 2300 	strex	r3, r2, [r1]
 800fe5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d1e5      	bne.n	800fe30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	3314      	adds	r3, #20
 800fe6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	e853 3f00 	ldrex	r3, [r3]
 800fe72:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	f023 0301 	bic.w	r3, r3, #1
 800fe7a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3314      	adds	r3, #20
 800fe82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe84:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe8c:	e841 2300 	strex	r3, r2, [r1]
 800fe90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d1e5      	bne.n	800fe64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe9c:	2b01      	cmp	r3, #1
 800fe9e:	d119      	bne.n	800fed4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	330c      	adds	r3, #12
 800fea6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	e853 3f00 	ldrex	r3, [r3]
 800feae:	60bb      	str	r3, [r7, #8]
   return(result);
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	f023 0310 	bic.w	r3, r3, #16
 800feb6:	647b      	str	r3, [r7, #68]	; 0x44
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	330c      	adds	r3, #12
 800febe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fec0:	61ba      	str	r2, [r7, #24]
 800fec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fec4:	6979      	ldr	r1, [r7, #20]
 800fec6:	69ba      	ldr	r2, [r7, #24]
 800fec8:	e841 2300 	strex	r3, r2, [r1]
 800fecc:	613b      	str	r3, [r7, #16]
   return(result);
 800fece:	693b      	ldr	r3, [r7, #16]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d1e5      	bne.n	800fea0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2220      	movs	r2, #32
 800fed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	2200      	movs	r2, #0
 800fee0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800fee2:	bf00      	nop
 800fee4:	3754      	adds	r7, #84	; 0x54
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800feee:	b580      	push	{r7, lr}
 800fef0:	b084      	sub	sp, #16
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2200      	movs	r2, #0
 800ff00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2200      	movs	r2, #0
 800ff06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f7ff fdbd 	bl	800fa88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff0e:	bf00      	nop
 800ff10:	3710      	adds	r7, #16
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ff16:	b480      	push	{r7}
 800ff18:	b085      	sub	sp, #20
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ff24:	b2db      	uxtb	r3, r3
 800ff26:	2b21      	cmp	r3, #33	; 0x21
 800ff28:	d13e      	bne.n	800ffa8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	689b      	ldr	r3, [r3, #8]
 800ff2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff32:	d114      	bne.n	800ff5e <UART_Transmit_IT+0x48>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	691b      	ldr	r3, [r3, #16]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d110      	bne.n	800ff5e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6a1b      	ldr	r3, [r3, #32]
 800ff40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	881b      	ldrh	r3, [r3, #0]
 800ff46:	461a      	mov	r2, r3
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ff50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a1b      	ldr	r3, [r3, #32]
 800ff56:	1c9a      	adds	r2, r3, #2
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	621a      	str	r2, [r3, #32]
 800ff5c:	e008      	b.n	800ff70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6a1b      	ldr	r3, [r3, #32]
 800ff62:	1c59      	adds	r1, r3, #1
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	6211      	str	r1, [r2, #32]
 800ff68:	781a      	ldrb	r2, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ff74:	b29b      	uxth	r3, r3
 800ff76:	3b01      	subs	r3, #1
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d10f      	bne.n	800ffa4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	68da      	ldr	r2, [r3, #12]
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ff92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	68da      	ldr	r2, [r3, #12]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ffa2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	e000      	b.n	800ffaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ffa8:	2302      	movs	r3, #2
  }
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3714      	adds	r7, #20
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb4:	4770      	bx	lr

0800ffb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ffb6:	b580      	push	{r7, lr}
 800ffb8:	b082      	sub	sp, #8
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	68da      	ldr	r2, [r3, #12]
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ffcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2220      	movs	r2, #32
 800ffd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7ff fd42 	bl	800fa60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3708      	adds	r7, #8
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b08c      	sub	sp, #48	; 0x30
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	2b22      	cmp	r3, #34	; 0x22
 800fff8:	f040 80ab 	bne.w	8010152 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	689b      	ldr	r3, [r3, #8]
 8010000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010004:	d117      	bne.n	8010036 <UART_Receive_IT+0x50>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	691b      	ldr	r3, [r3, #16]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d113      	bne.n	8010036 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801000e:	2300      	movs	r3, #0
 8010010:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010016:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	b29b      	uxth	r3, r3
 8010020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010024:	b29a      	uxth	r2, r3
 8010026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010028:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801002e:	1c9a      	adds	r2, r3, #2
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	629a      	str	r2, [r3, #40]	; 0x28
 8010034:	e026      	b.n	8010084 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801003a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 801003c:	2300      	movs	r3, #0
 801003e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	689b      	ldr	r3, [r3, #8]
 8010044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010048:	d007      	beq.n	801005a <UART_Receive_IT+0x74>
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d10a      	bne.n	8010068 <UART_Receive_IT+0x82>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	691b      	ldr	r3, [r3, #16]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d106      	bne.n	8010068 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	b2da      	uxtb	r2, r3
 8010062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010064:	701a      	strb	r2, [r3, #0]
 8010066:	e008      	b.n	801007a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	b2db      	uxtb	r3, r3
 8010070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010074:	b2da      	uxtb	r2, r3
 8010076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010078:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801007e:	1c5a      	adds	r2, r3, #1
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010088:	b29b      	uxth	r3, r3
 801008a:	3b01      	subs	r3, #1
 801008c:	b29b      	uxth	r3, r3
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	4619      	mov	r1, r3
 8010092:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8010094:	2b00      	cmp	r3, #0
 8010096:	d15a      	bne.n	801014e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	68da      	ldr	r2, [r3, #12]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f022 0220 	bic.w	r2, r2, #32
 80100a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	68da      	ldr	r2, [r3, #12]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80100b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	695a      	ldr	r2, [r3, #20]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f022 0201 	bic.w	r2, r2, #1
 80100c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	2220      	movs	r2, #32
 80100cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d4:	2b01      	cmp	r3, #1
 80100d6:	d135      	bne.n	8010144 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	330c      	adds	r3, #12
 80100e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80100e6:	697b      	ldr	r3, [r7, #20]
 80100e8:	e853 3f00 	ldrex	r3, [r3]
 80100ec:	613b      	str	r3, [r7, #16]
   return(result);
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	f023 0310 	bic.w	r3, r3, #16
 80100f4:	627b      	str	r3, [r7, #36]	; 0x24
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	330c      	adds	r3, #12
 80100fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100fe:	623a      	str	r2, [r7, #32]
 8010100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010102:	69f9      	ldr	r1, [r7, #28]
 8010104:	6a3a      	ldr	r2, [r7, #32]
 8010106:	e841 2300 	strex	r3, r2, [r1]
 801010a:	61bb      	str	r3, [r7, #24]
   return(result);
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d1e5      	bne.n	80100de <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f003 0310 	and.w	r3, r3, #16
 801011c:	2b10      	cmp	r3, #16
 801011e:	d10a      	bne.n	8010136 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010120:	2300      	movs	r3, #0
 8010122:	60fb      	str	r3, [r7, #12]
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	60fb      	str	r3, [r7, #12]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	685b      	ldr	r3, [r3, #4]
 8010132:	60fb      	str	r3, [r7, #12]
 8010134:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801013a:	4619      	mov	r1, r3
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f7ff fcad 	bl	800fa9c <HAL_UARTEx_RxEventCallback>
 8010142:	e002      	b.n	801014a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010144:	6878      	ldr	r0, [r7, #4]
 8010146:	f7f9 fb7d 	bl	8009844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	e002      	b.n	8010154 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	e000      	b.n	8010154 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8010152:	2302      	movs	r3, #2
  }
}
 8010154:	4618      	mov	r0, r3
 8010156:	3730      	adds	r7, #48	; 0x30
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801015c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010160:	b09f      	sub	sp, #124	; 0x7c
 8010162:	af00      	add	r7, sp, #0
 8010164:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8010170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010172:	68d9      	ldr	r1, [r3, #12]
 8010174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010176:	681a      	ldr	r2, [r3, #0]
 8010178:	ea40 0301 	orr.w	r3, r0, r1
 801017c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 801017e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010180:	689a      	ldr	r2, [r3, #8]
 8010182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010184:	691b      	ldr	r3, [r3, #16]
 8010186:	431a      	orrs	r2, r3
 8010188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801018a:	695b      	ldr	r3, [r3, #20]
 801018c:	431a      	orrs	r2, r3
 801018e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010190:	69db      	ldr	r3, [r3, #28]
 8010192:	4313      	orrs	r3, r2
 8010194:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8010196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80101a0:	f021 010c 	bic.w	r1, r1, #12
 80101a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101a6:	681a      	ldr	r2, [r3, #0]
 80101a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80101aa:	430b      	orrs	r3, r1
 80101ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80101ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	695b      	ldr	r3, [r3, #20]
 80101b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80101b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ba:	6999      	ldr	r1, [r3, #24]
 80101bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101be:	681a      	ldr	r2, [r3, #0]
 80101c0:	ea40 0301 	orr.w	r3, r0, r1
 80101c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80101c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	4bc5      	ldr	r3, [pc, #788]	; (80104e0 <UART_SetConfig+0x384>)
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d004      	beq.n	80101da <UART_SetConfig+0x7e>
 80101d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	4bc3      	ldr	r3, [pc, #780]	; (80104e4 <UART_SetConfig+0x388>)
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d103      	bne.n	80101e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80101da:	f7fd fe8b 	bl	800def4 <HAL_RCC_GetPCLK2Freq>
 80101de:	6778      	str	r0, [r7, #116]	; 0x74
 80101e0:	e002      	b.n	80101e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80101e2:	f7fd fe73 	bl	800decc <HAL_RCC_GetPCLK1Freq>
 80101e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80101e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80101ea:	69db      	ldr	r3, [r3, #28]
 80101ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80101f0:	f040 80b6 	bne.w	8010360 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80101f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80101f6:	461c      	mov	r4, r3
 80101f8:	f04f 0500 	mov.w	r5, #0
 80101fc:	4622      	mov	r2, r4
 80101fe:	462b      	mov	r3, r5
 8010200:	1891      	adds	r1, r2, r2
 8010202:	6439      	str	r1, [r7, #64]	; 0x40
 8010204:	415b      	adcs	r3, r3
 8010206:	647b      	str	r3, [r7, #68]	; 0x44
 8010208:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801020c:	1912      	adds	r2, r2, r4
 801020e:	eb45 0303 	adc.w	r3, r5, r3
 8010212:	f04f 0000 	mov.w	r0, #0
 8010216:	f04f 0100 	mov.w	r1, #0
 801021a:	00d9      	lsls	r1, r3, #3
 801021c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010220:	00d0      	lsls	r0, r2, #3
 8010222:	4602      	mov	r2, r0
 8010224:	460b      	mov	r3, r1
 8010226:	1911      	adds	r1, r2, r4
 8010228:	6639      	str	r1, [r7, #96]	; 0x60
 801022a:	416b      	adcs	r3, r5
 801022c:	667b      	str	r3, [r7, #100]	; 0x64
 801022e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010230:	685b      	ldr	r3, [r3, #4]
 8010232:	461a      	mov	r2, r3
 8010234:	f04f 0300 	mov.w	r3, #0
 8010238:	1891      	adds	r1, r2, r2
 801023a:	63b9      	str	r1, [r7, #56]	; 0x38
 801023c:	415b      	adcs	r3, r3
 801023e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010244:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8010248:	f7f0 fcfe 	bl	8000c48 <__aeabi_uldivmod>
 801024c:	4602      	mov	r2, r0
 801024e:	460b      	mov	r3, r1
 8010250:	4ba5      	ldr	r3, [pc, #660]	; (80104e8 <UART_SetConfig+0x38c>)
 8010252:	fba3 2302 	umull	r2, r3, r3, r2
 8010256:	095b      	lsrs	r3, r3, #5
 8010258:	011e      	lsls	r6, r3, #4
 801025a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801025c:	461c      	mov	r4, r3
 801025e:	f04f 0500 	mov.w	r5, #0
 8010262:	4622      	mov	r2, r4
 8010264:	462b      	mov	r3, r5
 8010266:	1891      	adds	r1, r2, r2
 8010268:	6339      	str	r1, [r7, #48]	; 0x30
 801026a:	415b      	adcs	r3, r3
 801026c:	637b      	str	r3, [r7, #52]	; 0x34
 801026e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010272:	1912      	adds	r2, r2, r4
 8010274:	eb45 0303 	adc.w	r3, r5, r3
 8010278:	f04f 0000 	mov.w	r0, #0
 801027c:	f04f 0100 	mov.w	r1, #0
 8010280:	00d9      	lsls	r1, r3, #3
 8010282:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010286:	00d0      	lsls	r0, r2, #3
 8010288:	4602      	mov	r2, r0
 801028a:	460b      	mov	r3, r1
 801028c:	1911      	adds	r1, r2, r4
 801028e:	65b9      	str	r1, [r7, #88]	; 0x58
 8010290:	416b      	adcs	r3, r5
 8010292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	461a      	mov	r2, r3
 801029a:	f04f 0300 	mov.w	r3, #0
 801029e:	1891      	adds	r1, r2, r2
 80102a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80102a2:	415b      	adcs	r3, r3
 80102a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80102a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80102aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80102ae:	f7f0 fccb 	bl	8000c48 <__aeabi_uldivmod>
 80102b2:	4602      	mov	r2, r0
 80102b4:	460b      	mov	r3, r1
 80102b6:	4b8c      	ldr	r3, [pc, #560]	; (80104e8 <UART_SetConfig+0x38c>)
 80102b8:	fba3 1302 	umull	r1, r3, r3, r2
 80102bc:	095b      	lsrs	r3, r3, #5
 80102be:	2164      	movs	r1, #100	; 0x64
 80102c0:	fb01 f303 	mul.w	r3, r1, r3
 80102c4:	1ad3      	subs	r3, r2, r3
 80102c6:	00db      	lsls	r3, r3, #3
 80102c8:	3332      	adds	r3, #50	; 0x32
 80102ca:	4a87      	ldr	r2, [pc, #540]	; (80104e8 <UART_SetConfig+0x38c>)
 80102cc:	fba2 2303 	umull	r2, r3, r2, r3
 80102d0:	095b      	lsrs	r3, r3, #5
 80102d2:	005b      	lsls	r3, r3, #1
 80102d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80102d8:	441e      	add	r6, r3
 80102da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80102dc:	4618      	mov	r0, r3
 80102de:	f04f 0100 	mov.w	r1, #0
 80102e2:	4602      	mov	r2, r0
 80102e4:	460b      	mov	r3, r1
 80102e6:	1894      	adds	r4, r2, r2
 80102e8:	623c      	str	r4, [r7, #32]
 80102ea:	415b      	adcs	r3, r3
 80102ec:	627b      	str	r3, [r7, #36]	; 0x24
 80102ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80102f2:	1812      	adds	r2, r2, r0
 80102f4:	eb41 0303 	adc.w	r3, r1, r3
 80102f8:	f04f 0400 	mov.w	r4, #0
 80102fc:	f04f 0500 	mov.w	r5, #0
 8010300:	00dd      	lsls	r5, r3, #3
 8010302:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010306:	00d4      	lsls	r4, r2, #3
 8010308:	4622      	mov	r2, r4
 801030a:	462b      	mov	r3, r5
 801030c:	1814      	adds	r4, r2, r0
 801030e:	653c      	str	r4, [r7, #80]	; 0x50
 8010310:	414b      	adcs	r3, r1
 8010312:	657b      	str	r3, [r7, #84]	; 0x54
 8010314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	461a      	mov	r2, r3
 801031a:	f04f 0300 	mov.w	r3, #0
 801031e:	1891      	adds	r1, r2, r2
 8010320:	61b9      	str	r1, [r7, #24]
 8010322:	415b      	adcs	r3, r3
 8010324:	61fb      	str	r3, [r7, #28]
 8010326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801032a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 801032e:	f7f0 fc8b 	bl	8000c48 <__aeabi_uldivmod>
 8010332:	4602      	mov	r2, r0
 8010334:	460b      	mov	r3, r1
 8010336:	4b6c      	ldr	r3, [pc, #432]	; (80104e8 <UART_SetConfig+0x38c>)
 8010338:	fba3 1302 	umull	r1, r3, r3, r2
 801033c:	095b      	lsrs	r3, r3, #5
 801033e:	2164      	movs	r1, #100	; 0x64
 8010340:	fb01 f303 	mul.w	r3, r1, r3
 8010344:	1ad3      	subs	r3, r2, r3
 8010346:	00db      	lsls	r3, r3, #3
 8010348:	3332      	adds	r3, #50	; 0x32
 801034a:	4a67      	ldr	r2, [pc, #412]	; (80104e8 <UART_SetConfig+0x38c>)
 801034c:	fba2 2303 	umull	r2, r3, r2, r3
 8010350:	095b      	lsrs	r3, r3, #5
 8010352:	f003 0207 	and.w	r2, r3, #7
 8010356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	4432      	add	r2, r6
 801035c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 801035e:	e0b9      	b.n	80104d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010362:	461c      	mov	r4, r3
 8010364:	f04f 0500 	mov.w	r5, #0
 8010368:	4622      	mov	r2, r4
 801036a:	462b      	mov	r3, r5
 801036c:	1891      	adds	r1, r2, r2
 801036e:	6139      	str	r1, [r7, #16]
 8010370:	415b      	adcs	r3, r3
 8010372:	617b      	str	r3, [r7, #20]
 8010374:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010378:	1912      	adds	r2, r2, r4
 801037a:	eb45 0303 	adc.w	r3, r5, r3
 801037e:	f04f 0000 	mov.w	r0, #0
 8010382:	f04f 0100 	mov.w	r1, #0
 8010386:	00d9      	lsls	r1, r3, #3
 8010388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801038c:	00d0      	lsls	r0, r2, #3
 801038e:	4602      	mov	r2, r0
 8010390:	460b      	mov	r3, r1
 8010392:	eb12 0804 	adds.w	r8, r2, r4
 8010396:	eb43 0905 	adc.w	r9, r3, r5
 801039a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	4618      	mov	r0, r3
 80103a0:	f04f 0100 	mov.w	r1, #0
 80103a4:	f04f 0200 	mov.w	r2, #0
 80103a8:	f04f 0300 	mov.w	r3, #0
 80103ac:	008b      	lsls	r3, r1, #2
 80103ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80103b2:	0082      	lsls	r2, r0, #2
 80103b4:	4640      	mov	r0, r8
 80103b6:	4649      	mov	r1, r9
 80103b8:	f7f0 fc46 	bl	8000c48 <__aeabi_uldivmod>
 80103bc:	4602      	mov	r2, r0
 80103be:	460b      	mov	r3, r1
 80103c0:	4b49      	ldr	r3, [pc, #292]	; (80104e8 <UART_SetConfig+0x38c>)
 80103c2:	fba3 2302 	umull	r2, r3, r3, r2
 80103c6:	095b      	lsrs	r3, r3, #5
 80103c8:	011e      	lsls	r6, r3, #4
 80103ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103cc:	4618      	mov	r0, r3
 80103ce:	f04f 0100 	mov.w	r1, #0
 80103d2:	4602      	mov	r2, r0
 80103d4:	460b      	mov	r3, r1
 80103d6:	1894      	adds	r4, r2, r2
 80103d8:	60bc      	str	r4, [r7, #8]
 80103da:	415b      	adcs	r3, r3
 80103dc:	60fb      	str	r3, [r7, #12]
 80103de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80103e2:	1812      	adds	r2, r2, r0
 80103e4:	eb41 0303 	adc.w	r3, r1, r3
 80103e8:	f04f 0400 	mov.w	r4, #0
 80103ec:	f04f 0500 	mov.w	r5, #0
 80103f0:	00dd      	lsls	r5, r3, #3
 80103f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80103f6:	00d4      	lsls	r4, r2, #3
 80103f8:	4622      	mov	r2, r4
 80103fa:	462b      	mov	r3, r5
 80103fc:	1814      	adds	r4, r2, r0
 80103fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8010400:	414b      	adcs	r3, r1
 8010402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010406:	685b      	ldr	r3, [r3, #4]
 8010408:	4618      	mov	r0, r3
 801040a:	f04f 0100 	mov.w	r1, #0
 801040e:	f04f 0200 	mov.w	r2, #0
 8010412:	f04f 0300 	mov.w	r3, #0
 8010416:	008b      	lsls	r3, r1, #2
 8010418:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801041c:	0082      	lsls	r2, r0, #2
 801041e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8010422:	f7f0 fc11 	bl	8000c48 <__aeabi_uldivmod>
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	4b2f      	ldr	r3, [pc, #188]	; (80104e8 <UART_SetConfig+0x38c>)
 801042c:	fba3 1302 	umull	r1, r3, r3, r2
 8010430:	095b      	lsrs	r3, r3, #5
 8010432:	2164      	movs	r1, #100	; 0x64
 8010434:	fb01 f303 	mul.w	r3, r1, r3
 8010438:	1ad3      	subs	r3, r2, r3
 801043a:	011b      	lsls	r3, r3, #4
 801043c:	3332      	adds	r3, #50	; 0x32
 801043e:	4a2a      	ldr	r2, [pc, #168]	; (80104e8 <UART_SetConfig+0x38c>)
 8010440:	fba2 2303 	umull	r2, r3, r2, r3
 8010444:	095b      	lsrs	r3, r3, #5
 8010446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801044a:	441e      	add	r6, r3
 801044c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801044e:	4618      	mov	r0, r3
 8010450:	f04f 0100 	mov.w	r1, #0
 8010454:	4602      	mov	r2, r0
 8010456:	460b      	mov	r3, r1
 8010458:	1894      	adds	r4, r2, r2
 801045a:	603c      	str	r4, [r7, #0]
 801045c:	415b      	adcs	r3, r3
 801045e:	607b      	str	r3, [r7, #4]
 8010460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010464:	1812      	adds	r2, r2, r0
 8010466:	eb41 0303 	adc.w	r3, r1, r3
 801046a:	f04f 0400 	mov.w	r4, #0
 801046e:	f04f 0500 	mov.w	r5, #0
 8010472:	00dd      	lsls	r5, r3, #3
 8010474:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8010478:	00d4      	lsls	r4, r2, #3
 801047a:	4622      	mov	r2, r4
 801047c:	462b      	mov	r3, r5
 801047e:	eb12 0a00 	adds.w	sl, r2, r0
 8010482:	eb43 0b01 	adc.w	fp, r3, r1
 8010486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010488:	685b      	ldr	r3, [r3, #4]
 801048a:	4618      	mov	r0, r3
 801048c:	f04f 0100 	mov.w	r1, #0
 8010490:	f04f 0200 	mov.w	r2, #0
 8010494:	f04f 0300 	mov.w	r3, #0
 8010498:	008b      	lsls	r3, r1, #2
 801049a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 801049e:	0082      	lsls	r2, r0, #2
 80104a0:	4650      	mov	r0, sl
 80104a2:	4659      	mov	r1, fp
 80104a4:	f7f0 fbd0 	bl	8000c48 <__aeabi_uldivmod>
 80104a8:	4602      	mov	r2, r0
 80104aa:	460b      	mov	r3, r1
 80104ac:	4b0e      	ldr	r3, [pc, #56]	; (80104e8 <UART_SetConfig+0x38c>)
 80104ae:	fba3 1302 	umull	r1, r3, r3, r2
 80104b2:	095b      	lsrs	r3, r3, #5
 80104b4:	2164      	movs	r1, #100	; 0x64
 80104b6:	fb01 f303 	mul.w	r3, r1, r3
 80104ba:	1ad3      	subs	r3, r2, r3
 80104bc:	011b      	lsls	r3, r3, #4
 80104be:	3332      	adds	r3, #50	; 0x32
 80104c0:	4a09      	ldr	r2, [pc, #36]	; (80104e8 <UART_SetConfig+0x38c>)
 80104c2:	fba2 2303 	umull	r2, r3, r2, r3
 80104c6:	095b      	lsrs	r3, r3, #5
 80104c8:	f003 020f 	and.w	r2, r3, #15
 80104cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4432      	add	r2, r6
 80104d2:	609a      	str	r2, [r3, #8]
}
 80104d4:	bf00      	nop
 80104d6:	377c      	adds	r7, #124	; 0x7c
 80104d8:	46bd      	mov	sp, r7
 80104da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104de:	bf00      	nop
 80104e0:	40011000 	.word	0x40011000
 80104e4:	40011400 	.word	0x40011400
 80104e8:	51eb851f 	.word	0x51eb851f

080104ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b085      	sub	sp, #20
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	4603      	mov	r3, r0
 80104f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80104f6:	2300      	movs	r3, #0
 80104f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80104fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80104fe:	2b84      	cmp	r3, #132	; 0x84
 8010500:	d005      	beq.n	801050e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010502:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	4413      	add	r3, r2
 801050a:	3303      	adds	r3, #3
 801050c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801050e:	68fb      	ldr	r3, [r7, #12]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3714      	adds	r7, #20
 8010514:	46bd      	mov	sp, r7
 8010516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051a:	4770      	bx	lr

0801051c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010520:	f000 fc2a 	bl	8010d78 <vTaskStartScheduler>
  
  return osOK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	bd80      	pop	{r7, pc}

0801052a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801052a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801052c:	b089      	sub	sp, #36	; 0x24
 801052e:	af04      	add	r7, sp, #16
 8010530:	6078      	str	r0, [r7, #4]
 8010532:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	695b      	ldr	r3, [r3, #20]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d020      	beq.n	801057e <osThreadCreate+0x54>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	699b      	ldr	r3, [r3, #24]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d01c      	beq.n	801057e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	685c      	ldr	r4, [r3, #4]
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681d      	ldr	r5, [r3, #0]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	691e      	ldr	r6, [r3, #16]
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010556:	4618      	mov	r0, r3
 8010558:	f7ff ffc8 	bl	80104ec <makeFreeRtosPriority>
 801055c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	695b      	ldr	r3, [r3, #20]
 8010562:	687a      	ldr	r2, [r7, #4]
 8010564:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010566:	9202      	str	r2, [sp, #8]
 8010568:	9301      	str	r3, [sp, #4]
 801056a:	9100      	str	r1, [sp, #0]
 801056c:	683b      	ldr	r3, [r7, #0]
 801056e:	4632      	mov	r2, r6
 8010570:	4629      	mov	r1, r5
 8010572:	4620      	mov	r0, r4
 8010574:	f000 f9af 	bl	80108d6 <xTaskCreateStatic>
 8010578:	4603      	mov	r3, r0
 801057a:	60fb      	str	r3, [r7, #12]
 801057c:	e01c      	b.n	80105b8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	685c      	ldr	r4, [r3, #4]
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801058a:	b29e      	uxth	r6, r3
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff ffaa 	bl	80104ec <makeFreeRtosPriority>
 8010598:	4602      	mov	r2, r0
 801059a:	f107 030c 	add.w	r3, r7, #12
 801059e:	9301      	str	r3, [sp, #4]
 80105a0:	9200      	str	r2, [sp, #0]
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	4632      	mov	r2, r6
 80105a6:	4629      	mov	r1, r5
 80105a8:	4620      	mov	r0, r4
 80105aa:	f000 f9f1 	bl	8010990 <xTaskCreate>
 80105ae:	4603      	mov	r3, r0
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d001      	beq.n	80105b8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80105b4:	2300      	movs	r3, #0
 80105b6:	e000      	b.n	80105ba <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80105b8:	68fb      	ldr	r3, [r7, #12]
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080105c2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80105c2:	b580      	push	{r7, lr}
 80105c4:	b084      	sub	sp, #16
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d001      	beq.n	80105d8 <osDelay+0x16>
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	e000      	b.n	80105da <osDelay+0x18>
 80105d8:	2301      	movs	r3, #1
 80105da:	4618      	mov	r0, r3
 80105dc:	f000 fb98 	bl	8010d10 <vTaskDelay>
  
  return osOK;
 80105e0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80105e2:	4618      	mov	r0, r3
 80105e4:	3710      	adds	r7, #16
 80105e6:	46bd      	mov	sp, r7
 80105e8:	bd80      	pop	{r7, pc}

080105ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80105ea:	b480      	push	{r7}
 80105ec:	b083      	sub	sp, #12
 80105ee:	af00      	add	r7, sp, #0
 80105f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f103 0208 	add.w	r2, r3, #8
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f04f 32ff 	mov.w	r2, #4294967295
 8010602:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	f103 0208 	add.w	r2, r3, #8
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f103 0208 	add.w	r2, r3, #8
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	2200      	movs	r2, #0
 801061c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801061e:	bf00      	nop
 8010620:	370c      	adds	r7, #12
 8010622:	46bd      	mov	sp, r7
 8010624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010628:	4770      	bx	lr

0801062a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801062a:	b480      	push	{r7}
 801062c:	b083      	sub	sp, #12
 801062e:	af00      	add	r7, sp, #0
 8010630:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	2200      	movs	r2, #0
 8010636:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010638:	bf00      	nop
 801063a:	370c      	adds	r7, #12
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010644:	b480      	push	{r7}
 8010646:	b085      	sub	sp, #20
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	685b      	ldr	r3, [r3, #4]
 8010652:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	68fa      	ldr	r2, [r7, #12]
 8010658:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	689a      	ldr	r2, [r3, #8]
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	689b      	ldr	r3, [r3, #8]
 8010666:	683a      	ldr	r2, [r7, #0]
 8010668:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	683a      	ldr	r2, [r7, #0]
 801066e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	1c5a      	adds	r2, r3, #1
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	601a      	str	r2, [r3, #0]
}
 8010680:	bf00      	nop
 8010682:	3714      	adds	r7, #20
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr

0801068c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801068c:	b480      	push	{r7}
 801068e:	b085      	sub	sp, #20
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010696:	683b      	ldr	r3, [r7, #0]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106a2:	d103      	bne.n	80106ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	691b      	ldr	r3, [r3, #16]
 80106a8:	60fb      	str	r3, [r7, #12]
 80106aa:	e00c      	b.n	80106c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	3308      	adds	r3, #8
 80106b0:	60fb      	str	r3, [r7, #12]
 80106b2:	e002      	b.n	80106ba <vListInsert+0x2e>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	60fb      	str	r3, [r7, #12]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	685b      	ldr	r3, [r3, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	68ba      	ldr	r2, [r7, #8]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d2f6      	bcs.n	80106b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	685a      	ldr	r2, [r3, #4]
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	683a      	ldr	r2, [r7, #0]
 80106e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	687a      	ldr	r2, [r7, #4]
 80106e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	1c5a      	adds	r2, r3, #1
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	601a      	str	r2, [r3, #0]
}
 80106f2:	bf00      	nop
 80106f4:	3714      	adds	r7, #20
 80106f6:	46bd      	mov	sp, r7
 80106f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fc:	4770      	bx	lr

080106fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80106fe:	b480      	push	{r7}
 8010700:	b085      	sub	sp, #20
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	691b      	ldr	r3, [r3, #16]
 801070a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	6892      	ldr	r2, [r2, #8]
 8010714:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	687a      	ldr	r2, [r7, #4]
 801071c:	6852      	ldr	r2, [r2, #4]
 801071e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	687a      	ldr	r2, [r7, #4]
 8010726:	429a      	cmp	r2, r3
 8010728:	d103      	bne.n	8010732 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	689a      	ldr	r2, [r3, #8]
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2200      	movs	r2, #0
 8010736:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	1e5a      	subs	r2, r3, #1
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
}
 8010746:	4618      	mov	r0, r3
 8010748:	3714      	adds	r7, #20
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr
	...

08010754 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010754:	b580      	push	{r7, lr}
 8010756:	b084      	sub	sp, #16
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
 801075c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10a      	bne.n	801077e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076c:	f383 8811 	msr	BASEPRI, r3
 8010770:	f3bf 8f6f 	isb	sy
 8010774:	f3bf 8f4f 	dsb	sy
 8010778:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801077a:	bf00      	nop
 801077c:	e7fe      	b.n	801077c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801077e:	f001 f819 	bl	80117b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801078a:	68f9      	ldr	r1, [r7, #12]
 801078c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801078e:	fb01 f303 	mul.w	r3, r1, r3
 8010792:	441a      	add	r2, r3
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	2200      	movs	r2, #0
 801079c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681a      	ldr	r2, [r3, #0]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	681a      	ldr	r2, [r3, #0]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107ae:	3b01      	subs	r3, #1
 80107b0:	68f9      	ldr	r1, [r7, #12]
 80107b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80107b4:	fb01 f303 	mul.w	r3, r1, r3
 80107b8:	441a      	add	r2, r3
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	22ff      	movs	r2, #255	; 0xff
 80107c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	22ff      	movs	r2, #255	; 0xff
 80107ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d114      	bne.n	80107fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	691b      	ldr	r3, [r3, #16]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d01a      	beq.n	8010812 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	3310      	adds	r3, #16
 80107e0:	4618      	mov	r0, r3
 80107e2:	f000 fcf7 	bl	80111d4 <xTaskRemoveFromEventList>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d012      	beq.n	8010812 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80107ec:	4b0c      	ldr	r3, [pc, #48]	; (8010820 <xQueueGenericReset+0xcc>)
 80107ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	f3bf 8f4f 	dsb	sy
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	e009      	b.n	8010812 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	3310      	adds	r3, #16
 8010802:	4618      	mov	r0, r3
 8010804:	f7ff fef1 	bl	80105ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	3324      	adds	r3, #36	; 0x24
 801080c:	4618      	mov	r0, r3
 801080e:	f7ff feec 	bl	80105ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010812:	f000 ffff 	bl	8011814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010816:	2301      	movs	r3, #1
}
 8010818:	4618      	mov	r0, r3
 801081a:	3710      	adds	r7, #16
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	e000ed04 	.word	0xe000ed04

08010824 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010824:	b580      	push	{r7, lr}
 8010826:	b08a      	sub	sp, #40	; 0x28
 8010828:	af02      	add	r7, sp, #8
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	4613      	mov	r3, r2
 8010830:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d10a      	bne.n	801084e <xQueueGenericCreate+0x2a>
	__asm volatile
 8010838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083c:	f383 8811 	msr	BASEPRI, r3
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	f3bf 8f4f 	dsb	sy
 8010848:	613b      	str	r3, [r7, #16]
}
 801084a:	bf00      	nop
 801084c:	e7fe      	b.n	801084c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	68ba      	ldr	r2, [r7, #8]
 8010852:	fb02 f303 	mul.w	r3, r2, r3
 8010856:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	3348      	adds	r3, #72	; 0x48
 801085c:	4618      	mov	r0, r3
 801085e:	f001 f88b 	bl	8011978 <pvPortMalloc>
 8010862:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d011      	beq.n	801088e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801086e:	697b      	ldr	r3, [r7, #20]
 8010870:	3348      	adds	r3, #72	; 0x48
 8010872:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010874:	69bb      	ldr	r3, [r7, #24]
 8010876:	2200      	movs	r2, #0
 8010878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801087c:	79fa      	ldrb	r2, [r7, #7]
 801087e:	69bb      	ldr	r3, [r7, #24]
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	4613      	mov	r3, r2
 8010884:	697a      	ldr	r2, [r7, #20]
 8010886:	68b9      	ldr	r1, [r7, #8]
 8010888:	68f8      	ldr	r0, [r7, #12]
 801088a:	f000 f805 	bl	8010898 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801088e:	69bb      	ldr	r3, [r7, #24]
	}
 8010890:	4618      	mov	r0, r3
 8010892:	3720      	adds	r7, #32
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}

08010898 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b084      	sub	sp, #16
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
 80108a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d103      	bne.n	80108b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	69ba      	ldr	r2, [r7, #24]
 80108b0:	601a      	str	r2, [r3, #0]
 80108b2:	e002      	b.n	80108ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80108b4:	69bb      	ldr	r3, [r7, #24]
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80108ba:	69bb      	ldr	r3, [r7, #24]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80108c0:	69bb      	ldr	r3, [r7, #24]
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80108c6:	2101      	movs	r1, #1
 80108c8:	69b8      	ldr	r0, [r7, #24]
 80108ca:	f7ff ff43 	bl	8010754 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80108ce:	bf00      	nop
 80108d0:	3710      	adds	r7, #16
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bd80      	pop	{r7, pc}

080108d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80108d6:	b580      	push	{r7, lr}
 80108d8:	b08e      	sub	sp, #56	; 0x38
 80108da:	af04      	add	r7, sp, #16
 80108dc:	60f8      	str	r0, [r7, #12]
 80108de:	60b9      	str	r1, [r7, #8]
 80108e0:	607a      	str	r2, [r7, #4]
 80108e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80108e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d10a      	bne.n	8010900 <xTaskCreateStatic+0x2a>
	__asm volatile
 80108ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ee:	f383 8811 	msr	BASEPRI, r3
 80108f2:	f3bf 8f6f 	isb	sy
 80108f6:	f3bf 8f4f 	dsb	sy
 80108fa:	623b      	str	r3, [r7, #32]
}
 80108fc:	bf00      	nop
 80108fe:	e7fe      	b.n	80108fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010902:	2b00      	cmp	r3, #0
 8010904:	d10a      	bne.n	801091c <xTaskCreateStatic+0x46>
	__asm volatile
 8010906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801090a:	f383 8811 	msr	BASEPRI, r3
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f3bf 8f4f 	dsb	sy
 8010916:	61fb      	str	r3, [r7, #28]
}
 8010918:	bf00      	nop
 801091a:	e7fe      	b.n	801091a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801091c:	2354      	movs	r3, #84	; 0x54
 801091e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	2b54      	cmp	r3, #84	; 0x54
 8010924:	d00a      	beq.n	801093c <xTaskCreateStatic+0x66>
	__asm volatile
 8010926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092a:	f383 8811 	msr	BASEPRI, r3
 801092e:	f3bf 8f6f 	isb	sy
 8010932:	f3bf 8f4f 	dsb	sy
 8010936:	61bb      	str	r3, [r7, #24]
}
 8010938:	bf00      	nop
 801093a:	e7fe      	b.n	801093a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801093c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801093e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010940:	2b00      	cmp	r3, #0
 8010942:	d01e      	beq.n	8010982 <xTaskCreateStatic+0xac>
 8010944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010946:	2b00      	cmp	r3, #0
 8010948:	d01b      	beq.n	8010982 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801094a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801094e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010950:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010952:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010956:	2202      	movs	r2, #2
 8010958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801095c:	2300      	movs	r3, #0
 801095e:	9303      	str	r3, [sp, #12]
 8010960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010962:	9302      	str	r3, [sp, #8]
 8010964:	f107 0314 	add.w	r3, r7, #20
 8010968:	9301      	str	r3, [sp, #4]
 801096a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801096c:	9300      	str	r3, [sp, #0]
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	68b9      	ldr	r1, [r7, #8]
 8010974:	68f8      	ldr	r0, [r7, #12]
 8010976:	f000 f850 	bl	8010a1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801097a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801097c:	f000 f8e0 	bl	8010b40 <prvAddNewTaskToReadyList>
 8010980:	e001      	b.n	8010986 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010982:	2300      	movs	r3, #0
 8010984:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010986:	697b      	ldr	r3, [r7, #20]
	}
 8010988:	4618      	mov	r0, r3
 801098a:	3728      	adds	r7, #40	; 0x28
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}

08010990 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010990:	b580      	push	{r7, lr}
 8010992:	b08c      	sub	sp, #48	; 0x30
 8010994:	af04      	add	r7, sp, #16
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	603b      	str	r3, [r7, #0]
 801099c:	4613      	mov	r3, r2
 801099e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80109a0:	88fb      	ldrh	r3, [r7, #6]
 80109a2:	009b      	lsls	r3, r3, #2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f000 ffe7 	bl	8011978 <pvPortMalloc>
 80109aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00e      	beq.n	80109d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80109b2:	2054      	movs	r0, #84	; 0x54
 80109b4:	f000 ffe0 	bl	8011978 <pvPortMalloc>
 80109b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d003      	beq.n	80109c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	697a      	ldr	r2, [r7, #20]
 80109c4:	631a      	str	r2, [r3, #48]	; 0x30
 80109c6:	e005      	b.n	80109d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80109c8:	6978      	ldr	r0, [r7, #20]
 80109ca:	f001 f8a1 	bl	8011b10 <vPortFree>
 80109ce:	e001      	b.n	80109d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80109d0:	2300      	movs	r3, #0
 80109d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d017      	beq.n	8010a0a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	2200      	movs	r2, #0
 80109de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80109e2:	88fa      	ldrh	r2, [r7, #6]
 80109e4:	2300      	movs	r3, #0
 80109e6:	9303      	str	r3, [sp, #12]
 80109e8:	69fb      	ldr	r3, [r7, #28]
 80109ea:	9302      	str	r3, [sp, #8]
 80109ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ee:	9301      	str	r3, [sp, #4]
 80109f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	68b9      	ldr	r1, [r7, #8]
 80109f8:	68f8      	ldr	r0, [r7, #12]
 80109fa:	f000 f80e 	bl	8010a1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109fe:	69f8      	ldr	r0, [r7, #28]
 8010a00:	f000 f89e 	bl	8010b40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010a04:	2301      	movs	r3, #1
 8010a06:	61bb      	str	r3, [r7, #24]
 8010a08:	e002      	b.n	8010a10 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8010a0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a10:	69bb      	ldr	r3, [r7, #24]
	}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3720      	adds	r7, #32
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a1a:	b580      	push	{r7, lr}
 8010a1c:	b088      	sub	sp, #32
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	60f8      	str	r0, [r7, #12]
 8010a22:	60b9      	str	r1, [r7, #8]
 8010a24:	607a      	str	r2, [r7, #4]
 8010a26:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	009b      	lsls	r3, r3, #2
 8010a30:	461a      	mov	r2, r3
 8010a32:	21a5      	movs	r1, #165	; 0xa5
 8010a34:	f001 fa80 	bl	8011f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010a42:	3b01      	subs	r3, #1
 8010a44:	009b      	lsls	r3, r3, #2
 8010a46:	4413      	add	r3, r2
 8010a48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010a4a:	69bb      	ldr	r3, [r7, #24]
 8010a4c:	f023 0307 	bic.w	r3, r3, #7
 8010a50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010a52:	69bb      	ldr	r3, [r7, #24]
 8010a54:	f003 0307 	and.w	r3, r3, #7
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d00a      	beq.n	8010a72 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a60:	f383 8811 	msr	BASEPRI, r3
 8010a64:	f3bf 8f6f 	isb	sy
 8010a68:	f3bf 8f4f 	dsb	sy
 8010a6c:	617b      	str	r3, [r7, #20]
}
 8010a6e:	bf00      	nop
 8010a70:	e7fe      	b.n	8010a70 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d01f      	beq.n	8010ab8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a78:	2300      	movs	r3, #0
 8010a7a:	61fb      	str	r3, [r7, #28]
 8010a7c:	e012      	b.n	8010aa4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010a7e:	68ba      	ldr	r2, [r7, #8]
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	4413      	add	r3, r2
 8010a84:	7819      	ldrb	r1, [r3, #0]
 8010a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	4413      	add	r3, r2
 8010a8c:	3334      	adds	r3, #52	; 0x34
 8010a8e:	460a      	mov	r2, r1
 8010a90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010a92:	68ba      	ldr	r2, [r7, #8]
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	4413      	add	r3, r2
 8010a98:	781b      	ldrb	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d006      	beq.n	8010aac <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010a9e:	69fb      	ldr	r3, [r7, #28]
 8010aa0:	3301      	adds	r3, #1
 8010aa2:	61fb      	str	r3, [r7, #28]
 8010aa4:	69fb      	ldr	r3, [r7, #28]
 8010aa6:	2b0f      	cmp	r3, #15
 8010aa8:	d9e9      	bls.n	8010a7e <prvInitialiseNewTask+0x64>
 8010aaa:	e000      	b.n	8010aae <prvInitialiseNewTask+0x94>
			{
				break;
 8010aac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010ab6:	e003      	b.n	8010ac0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aba:	2200      	movs	r2, #0
 8010abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac2:	2b06      	cmp	r3, #6
 8010ac4:	d901      	bls.n	8010aca <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ac6:	2306      	movs	r3, #6
 8010ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ace:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ad4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ad8:	2200      	movs	r2, #0
 8010ada:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ade:	3304      	adds	r3, #4
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7ff fda2 	bl	801062a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ae8:	3318      	adds	r3, #24
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7ff fd9d 	bl	801062a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010af4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af8:	f1c3 0207 	rsb	r2, r3, #7
 8010afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010afe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b08:	2200      	movs	r2, #0
 8010b0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b0e:	2200      	movs	r2, #0
 8010b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8010b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b16:	2200      	movs	r2, #0
 8010b18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010b1c:	683a      	ldr	r2, [r7, #0]
 8010b1e:	68f9      	ldr	r1, [r7, #12]
 8010b20:	69b8      	ldr	r0, [r7, #24]
 8010b22:	f000 fd17 	bl	8011554 <pxPortInitialiseStack>
 8010b26:	4602      	mov	r2, r0
 8010b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d002      	beq.n	8010b38 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010b38:	bf00      	nop
 8010b3a:	3720      	adds	r7, #32
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010b48:	f000 fe34 	bl	80117b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010b4c:	4b2a      	ldr	r3, [pc, #168]	; (8010bf8 <prvAddNewTaskToReadyList+0xb8>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	3301      	adds	r3, #1
 8010b52:	4a29      	ldr	r2, [pc, #164]	; (8010bf8 <prvAddNewTaskToReadyList+0xb8>)
 8010b54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010b56:	4b29      	ldr	r3, [pc, #164]	; (8010bfc <prvAddNewTaskToReadyList+0xbc>)
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d109      	bne.n	8010b72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010b5e:	4a27      	ldr	r2, [pc, #156]	; (8010bfc <prvAddNewTaskToReadyList+0xbc>)
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010b64:	4b24      	ldr	r3, [pc, #144]	; (8010bf8 <prvAddNewTaskToReadyList+0xb8>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	2b01      	cmp	r3, #1
 8010b6a:	d110      	bne.n	8010b8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010b6c:	f000 fbac 	bl	80112c8 <prvInitialiseTaskLists>
 8010b70:	e00d      	b.n	8010b8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010b72:	4b23      	ldr	r3, [pc, #140]	; (8010c00 <prvAddNewTaskToReadyList+0xc0>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d109      	bne.n	8010b8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010b7a:	4b20      	ldr	r3, [pc, #128]	; (8010bfc <prvAddNewTaskToReadyList+0xbc>)
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d802      	bhi.n	8010b8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010b88:	4a1c      	ldr	r2, [pc, #112]	; (8010bfc <prvAddNewTaskToReadyList+0xbc>)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010b8e:	4b1d      	ldr	r3, [pc, #116]	; (8010c04 <prvAddNewTaskToReadyList+0xc4>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	3301      	adds	r3, #1
 8010b94:	4a1b      	ldr	r2, [pc, #108]	; (8010c04 <prvAddNewTaskToReadyList+0xc4>)
 8010b96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b9c:	2201      	movs	r2, #1
 8010b9e:	409a      	lsls	r2, r3
 8010ba0:	4b19      	ldr	r3, [pc, #100]	; (8010c08 <prvAddNewTaskToReadyList+0xc8>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	4313      	orrs	r3, r2
 8010ba6:	4a18      	ldr	r2, [pc, #96]	; (8010c08 <prvAddNewTaskToReadyList+0xc8>)
 8010ba8:	6013      	str	r3, [r2, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bae:	4613      	mov	r3, r2
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4413      	add	r3, r2
 8010bb4:	009b      	lsls	r3, r3, #2
 8010bb6:	4a15      	ldr	r2, [pc, #84]	; (8010c0c <prvAddNewTaskToReadyList+0xcc>)
 8010bb8:	441a      	add	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	3304      	adds	r3, #4
 8010bbe:	4619      	mov	r1, r3
 8010bc0:	4610      	mov	r0, r2
 8010bc2:	f7ff fd3f 	bl	8010644 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010bc6:	f000 fe25 	bl	8011814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010bca:	4b0d      	ldr	r3, [pc, #52]	; (8010c00 <prvAddNewTaskToReadyList+0xc0>)
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00e      	beq.n	8010bf0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010bd2:	4b0a      	ldr	r3, [pc, #40]	; (8010bfc <prvAddNewTaskToReadyList+0xbc>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d207      	bcs.n	8010bf0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010be0:	4b0b      	ldr	r3, [pc, #44]	; (8010c10 <prvAddNewTaskToReadyList+0xd0>)
 8010be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010be6:	601a      	str	r2, [r3, #0]
 8010be8:	f3bf 8f4f 	dsb	sy
 8010bec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010bf0:	bf00      	nop
 8010bf2:	3708      	adds	r7, #8
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}
 8010bf8:	20000998 	.word	0x20000998
 8010bfc:	20000898 	.word	0x20000898
 8010c00:	200009a4 	.word	0x200009a4
 8010c04:	200009b4 	.word	0x200009b4
 8010c08:	200009a0 	.word	0x200009a0
 8010c0c:	2000089c 	.word	0x2000089c
 8010c10:	e000ed04 	.word	0xe000ed04

08010c14 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b08a      	sub	sp, #40	; 0x28
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d10a      	bne.n	8010c3e <vTaskDelayUntil+0x2a>
	__asm volatile
 8010c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c2c:	f383 8811 	msr	BASEPRI, r3
 8010c30:	f3bf 8f6f 	isb	sy
 8010c34:	f3bf 8f4f 	dsb	sy
 8010c38:	617b      	str	r3, [r7, #20]
}
 8010c3a:	bf00      	nop
 8010c3c:	e7fe      	b.n	8010c3c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d10a      	bne.n	8010c5a <vTaskDelayUntil+0x46>
	__asm volatile
 8010c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c48:	f383 8811 	msr	BASEPRI, r3
 8010c4c:	f3bf 8f6f 	isb	sy
 8010c50:	f3bf 8f4f 	dsb	sy
 8010c54:	613b      	str	r3, [r7, #16]
}
 8010c56:	bf00      	nop
 8010c58:	e7fe      	b.n	8010c58 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8010c5a:	4b2a      	ldr	r3, [pc, #168]	; (8010d04 <vTaskDelayUntil+0xf0>)
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d00a      	beq.n	8010c78 <vTaskDelayUntil+0x64>
	__asm volatile
 8010c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c66:	f383 8811 	msr	BASEPRI, r3
 8010c6a:	f3bf 8f6f 	isb	sy
 8010c6e:	f3bf 8f4f 	dsb	sy
 8010c72:	60fb      	str	r3, [r7, #12]
}
 8010c74:	bf00      	nop
 8010c76:	e7fe      	b.n	8010c76 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8010c78:	f000 f8de 	bl	8010e38 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8010c7c:	4b22      	ldr	r3, [pc, #136]	; (8010d08 <vTaskDelayUntil+0xf4>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	683a      	ldr	r2, [r7, #0]
 8010c88:	4413      	add	r3, r2
 8010c8a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	6a3a      	ldr	r2, [r7, #32]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d20b      	bcs.n	8010cae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	69fa      	ldr	r2, [r7, #28]
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	d211      	bcs.n	8010cc4 <vTaskDelayUntil+0xb0>
 8010ca0:	69fa      	ldr	r2, [r7, #28]
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d90d      	bls.n	8010cc4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010ca8:	2301      	movs	r3, #1
 8010caa:	627b      	str	r3, [r7, #36]	; 0x24
 8010cac:	e00a      	b.n	8010cc4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	69fa      	ldr	r2, [r7, #28]
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	d303      	bcc.n	8010cc0 <vTaskDelayUntil+0xac>
 8010cb8:	69fa      	ldr	r2, [r7, #28]
 8010cba:	6a3b      	ldr	r3, [r7, #32]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	d901      	bls.n	8010cc4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	69fa      	ldr	r2, [r7, #28]
 8010cc8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d006      	beq.n	8010cde <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8010cd0:	69fa      	ldr	r2, [r7, #28]
 8010cd2:	6a3b      	ldr	r3, [r7, #32]
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f000 fbd1 	bl	8011480 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8010cde:	f000 f8b9 	bl	8010e54 <xTaskResumeAll>
 8010ce2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010ce4:	69bb      	ldr	r3, [r7, #24]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d107      	bne.n	8010cfa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8010cea:	4b08      	ldr	r3, [pc, #32]	; (8010d0c <vTaskDelayUntil+0xf8>)
 8010cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cf0:	601a      	str	r2, [r3, #0]
 8010cf2:	f3bf 8f4f 	dsb	sy
 8010cf6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010cfa:	bf00      	nop
 8010cfc:	3728      	adds	r7, #40	; 0x28
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	200009c0 	.word	0x200009c0
 8010d08:	2000099c 	.word	0x2000099c
 8010d0c:	e000ed04 	.word	0xe000ed04

08010d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010d18:	2300      	movs	r3, #0
 8010d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d017      	beq.n	8010d52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010d22:	4b13      	ldr	r3, [pc, #76]	; (8010d70 <vTaskDelay+0x60>)
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00a      	beq.n	8010d40 <vTaskDelay+0x30>
	__asm volatile
 8010d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d2e:	f383 8811 	msr	BASEPRI, r3
 8010d32:	f3bf 8f6f 	isb	sy
 8010d36:	f3bf 8f4f 	dsb	sy
 8010d3a:	60bb      	str	r3, [r7, #8]
}
 8010d3c:	bf00      	nop
 8010d3e:	e7fe      	b.n	8010d3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010d40:	f000 f87a 	bl	8010e38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010d44:	2100      	movs	r1, #0
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 fb9a 	bl	8011480 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010d4c:	f000 f882 	bl	8010e54 <xTaskResumeAll>
 8010d50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d107      	bne.n	8010d68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010d58:	4b06      	ldr	r3, [pc, #24]	; (8010d74 <vTaskDelay+0x64>)
 8010d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d5e:	601a      	str	r2, [r3, #0]
 8010d60:	f3bf 8f4f 	dsb	sy
 8010d64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010d68:	bf00      	nop
 8010d6a:	3710      	adds	r7, #16
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd80      	pop	{r7, pc}
 8010d70:	200009c0 	.word	0x200009c0
 8010d74:	e000ed04 	.word	0xe000ed04

08010d78 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b08a      	sub	sp, #40	; 0x28
 8010d7c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010d7e:	2300      	movs	r3, #0
 8010d80:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010d82:	2300      	movs	r3, #0
 8010d84:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010d86:	463a      	mov	r2, r7
 8010d88:	1d39      	adds	r1, r7, #4
 8010d8a:	f107 0308 	add.w	r3, r7, #8
 8010d8e:	4618      	mov	r0, r3
 8010d90:	f7f8 f8da 	bl	8008f48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010d94:	6839      	ldr	r1, [r7, #0]
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	68ba      	ldr	r2, [r7, #8]
 8010d9a:	9202      	str	r2, [sp, #8]
 8010d9c:	9301      	str	r3, [sp, #4]
 8010d9e:	2300      	movs	r3, #0
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	2300      	movs	r3, #0
 8010da4:	460a      	mov	r2, r1
 8010da6:	491e      	ldr	r1, [pc, #120]	; (8010e20 <vTaskStartScheduler+0xa8>)
 8010da8:	481e      	ldr	r0, [pc, #120]	; (8010e24 <vTaskStartScheduler+0xac>)
 8010daa:	f7ff fd94 	bl	80108d6 <xTaskCreateStatic>
 8010dae:	4603      	mov	r3, r0
 8010db0:	4a1d      	ldr	r2, [pc, #116]	; (8010e28 <vTaskStartScheduler+0xb0>)
 8010db2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010db4:	4b1c      	ldr	r3, [pc, #112]	; (8010e28 <vTaskStartScheduler+0xb0>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	617b      	str	r3, [r7, #20]
 8010dc0:	e001      	b.n	8010dc6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	2b01      	cmp	r3, #1
 8010dca:	d116      	bne.n	8010dfa <vTaskStartScheduler+0x82>
	__asm volatile
 8010dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dd0:	f383 8811 	msr	BASEPRI, r3
 8010dd4:	f3bf 8f6f 	isb	sy
 8010dd8:	f3bf 8f4f 	dsb	sy
 8010ddc:	613b      	str	r3, [r7, #16]
}
 8010dde:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010de0:	4b12      	ldr	r3, [pc, #72]	; (8010e2c <vTaskStartScheduler+0xb4>)
 8010de2:	f04f 32ff 	mov.w	r2, #4294967295
 8010de6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010de8:	4b11      	ldr	r3, [pc, #68]	; (8010e30 <vTaskStartScheduler+0xb8>)
 8010dea:	2201      	movs	r2, #1
 8010dec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010dee:	4b11      	ldr	r3, [pc, #68]	; (8010e34 <vTaskStartScheduler+0xbc>)
 8010df0:	2200      	movs	r2, #0
 8010df2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010df4:	f000 fc3c 	bl	8011670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010df8:	e00e      	b.n	8010e18 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e00:	d10a      	bne.n	8010e18 <vTaskStartScheduler+0xa0>
	__asm volatile
 8010e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e06:	f383 8811 	msr	BASEPRI, r3
 8010e0a:	f3bf 8f6f 	isb	sy
 8010e0e:	f3bf 8f4f 	dsb	sy
 8010e12:	60fb      	str	r3, [r7, #12]
}
 8010e14:	bf00      	nop
 8010e16:	e7fe      	b.n	8010e16 <vTaskStartScheduler+0x9e>
}
 8010e18:	bf00      	nop
 8010e1a:	3718      	adds	r7, #24
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	08015588 	.word	0x08015588
 8010e24:	08011299 	.word	0x08011299
 8010e28:	200009bc 	.word	0x200009bc
 8010e2c:	200009b8 	.word	0x200009b8
 8010e30:	200009a4 	.word	0x200009a4
 8010e34:	2000099c 	.word	0x2000099c

08010e38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010e38:	b480      	push	{r7}
 8010e3a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010e3c:	4b04      	ldr	r3, [pc, #16]	; (8010e50 <vTaskSuspendAll+0x18>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	3301      	adds	r3, #1
 8010e42:	4a03      	ldr	r2, [pc, #12]	; (8010e50 <vTaskSuspendAll+0x18>)
 8010e44:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010e46:	bf00      	nop
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr
 8010e50:	200009c0 	.word	0x200009c0

08010e54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b084      	sub	sp, #16
 8010e58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010e62:	4b41      	ldr	r3, [pc, #260]	; (8010f68 <xTaskResumeAll+0x114>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d10a      	bne.n	8010e80 <xTaskResumeAll+0x2c>
	__asm volatile
 8010e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e6e:	f383 8811 	msr	BASEPRI, r3
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	f3bf 8f4f 	dsb	sy
 8010e7a:	603b      	str	r3, [r7, #0]
}
 8010e7c:	bf00      	nop
 8010e7e:	e7fe      	b.n	8010e7e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010e80:	f000 fc98 	bl	80117b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010e84:	4b38      	ldr	r3, [pc, #224]	; (8010f68 <xTaskResumeAll+0x114>)
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	3b01      	subs	r3, #1
 8010e8a:	4a37      	ldr	r2, [pc, #220]	; (8010f68 <xTaskResumeAll+0x114>)
 8010e8c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e8e:	4b36      	ldr	r3, [pc, #216]	; (8010f68 <xTaskResumeAll+0x114>)
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d161      	bne.n	8010f5a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010e96:	4b35      	ldr	r3, [pc, #212]	; (8010f6c <xTaskResumeAll+0x118>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d05d      	beq.n	8010f5a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e9e:	e02e      	b.n	8010efe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ea0:	4b33      	ldr	r3, [pc, #204]	; (8010f70 <xTaskResumeAll+0x11c>)
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	68db      	ldr	r3, [r3, #12]
 8010ea6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	3318      	adds	r3, #24
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7ff fc26 	bl	80106fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	3304      	adds	r3, #4
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7ff fc21 	bl	80106fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec0:	2201      	movs	r2, #1
 8010ec2:	409a      	lsls	r2, r3
 8010ec4:	4b2b      	ldr	r3, [pc, #172]	; (8010f74 <xTaskResumeAll+0x120>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	4a2a      	ldr	r2, [pc, #168]	; (8010f74 <xTaskResumeAll+0x120>)
 8010ecc:	6013      	str	r3, [r2, #0]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	009b      	lsls	r3, r3, #2
 8010ed6:	4413      	add	r3, r2
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	4a27      	ldr	r2, [pc, #156]	; (8010f78 <xTaskResumeAll+0x124>)
 8010edc:	441a      	add	r2, r3
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	3304      	adds	r3, #4
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	4610      	mov	r0, r2
 8010ee6:	f7ff fbad 	bl	8010644 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010eee:	4b23      	ldr	r3, [pc, #140]	; (8010f7c <xTaskResumeAll+0x128>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d302      	bcc.n	8010efe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010ef8:	4b21      	ldr	r3, [pc, #132]	; (8010f80 <xTaskResumeAll+0x12c>)
 8010efa:	2201      	movs	r2, #1
 8010efc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010efe:	4b1c      	ldr	r3, [pc, #112]	; (8010f70 <xTaskResumeAll+0x11c>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d1cc      	bne.n	8010ea0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010f0c:	f000 fa7a 	bl	8011404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8010f10:	4b1c      	ldr	r3, [pc, #112]	; (8010f84 <xTaskResumeAll+0x130>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d010      	beq.n	8010f3e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010f1c:	f000 f846 	bl	8010fac <xTaskIncrementTick>
 8010f20:	4603      	mov	r3, r0
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d002      	beq.n	8010f2c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8010f26:	4b16      	ldr	r3, [pc, #88]	; (8010f80 <xTaskResumeAll+0x12c>)
 8010f28:	2201      	movs	r2, #1
 8010f2a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	3b01      	subs	r3, #1
 8010f30:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d1f1      	bne.n	8010f1c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8010f38:	4b12      	ldr	r3, [pc, #72]	; (8010f84 <xTaskResumeAll+0x130>)
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010f3e:	4b10      	ldr	r3, [pc, #64]	; (8010f80 <xTaskResumeAll+0x12c>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d009      	beq.n	8010f5a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010f46:	2301      	movs	r3, #1
 8010f48:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010f4a:	4b0f      	ldr	r3, [pc, #60]	; (8010f88 <xTaskResumeAll+0x134>)
 8010f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f50:	601a      	str	r2, [r3, #0]
 8010f52:	f3bf 8f4f 	dsb	sy
 8010f56:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010f5a:	f000 fc5b 	bl	8011814 <vPortExitCritical>

	return xAlreadyYielded;
 8010f5e:	68bb      	ldr	r3, [r7, #8]
}
 8010f60:	4618      	mov	r0, r3
 8010f62:	3710      	adds	r7, #16
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	200009c0 	.word	0x200009c0
 8010f6c:	20000998 	.word	0x20000998
 8010f70:	20000958 	.word	0x20000958
 8010f74:	200009a0 	.word	0x200009a0
 8010f78:	2000089c 	.word	0x2000089c
 8010f7c:	20000898 	.word	0x20000898
 8010f80:	200009ac 	.word	0x200009ac
 8010f84:	200009a8 	.word	0x200009a8
 8010f88:	e000ed04 	.word	0xe000ed04

08010f8c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010f92:	4b05      	ldr	r3, [pc, #20]	; (8010fa8 <xTaskGetTickCount+0x1c>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010f98:	687b      	ldr	r3, [r7, #4]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	370c      	adds	r7, #12
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa4:	4770      	bx	lr
 8010fa6:	bf00      	nop
 8010fa8:	2000099c 	.word	0x2000099c

08010fac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b086      	sub	sp, #24
 8010fb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fb6:	4b4e      	ldr	r3, [pc, #312]	; (80110f0 <xTaskIncrementTick+0x144>)
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f040 808e 	bne.w	80110dc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010fc0:	4b4c      	ldr	r3, [pc, #304]	; (80110f4 <xTaskIncrementTick+0x148>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010fc8:	4a4a      	ldr	r2, [pc, #296]	; (80110f4 <xTaskIncrementTick+0x148>)
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010fce:	693b      	ldr	r3, [r7, #16]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d120      	bne.n	8011016 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010fd4:	4b48      	ldr	r3, [pc, #288]	; (80110f8 <xTaskIncrementTick+0x14c>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d00a      	beq.n	8010ff4 <xTaskIncrementTick+0x48>
	__asm volatile
 8010fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fe2:	f383 8811 	msr	BASEPRI, r3
 8010fe6:	f3bf 8f6f 	isb	sy
 8010fea:	f3bf 8f4f 	dsb	sy
 8010fee:	603b      	str	r3, [r7, #0]
}
 8010ff0:	bf00      	nop
 8010ff2:	e7fe      	b.n	8010ff2 <xTaskIncrementTick+0x46>
 8010ff4:	4b40      	ldr	r3, [pc, #256]	; (80110f8 <xTaskIncrementTick+0x14c>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	60fb      	str	r3, [r7, #12]
 8010ffa:	4b40      	ldr	r3, [pc, #256]	; (80110fc <xTaskIncrementTick+0x150>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	4a3e      	ldr	r2, [pc, #248]	; (80110f8 <xTaskIncrementTick+0x14c>)
 8011000:	6013      	str	r3, [r2, #0]
 8011002:	4a3e      	ldr	r2, [pc, #248]	; (80110fc <xTaskIncrementTick+0x150>)
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6013      	str	r3, [r2, #0]
 8011008:	4b3d      	ldr	r3, [pc, #244]	; (8011100 <xTaskIncrementTick+0x154>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3301      	adds	r3, #1
 801100e:	4a3c      	ldr	r2, [pc, #240]	; (8011100 <xTaskIncrementTick+0x154>)
 8011010:	6013      	str	r3, [r2, #0]
 8011012:	f000 f9f7 	bl	8011404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011016:	4b3b      	ldr	r3, [pc, #236]	; (8011104 <xTaskIncrementTick+0x158>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	693a      	ldr	r2, [r7, #16]
 801101c:	429a      	cmp	r2, r3
 801101e:	d348      	bcc.n	80110b2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011020:	4b35      	ldr	r3, [pc, #212]	; (80110f8 <xTaskIncrementTick+0x14c>)
 8011022:	681b      	ldr	r3, [r3, #0]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d104      	bne.n	8011034 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801102a:	4b36      	ldr	r3, [pc, #216]	; (8011104 <xTaskIncrementTick+0x158>)
 801102c:	f04f 32ff 	mov.w	r2, #4294967295
 8011030:	601a      	str	r2, [r3, #0]
					break;
 8011032:	e03e      	b.n	80110b2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011034:	4b30      	ldr	r3, [pc, #192]	; (80110f8 <xTaskIncrementTick+0x14c>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	68db      	ldr	r3, [r3, #12]
 801103a:	68db      	ldr	r3, [r3, #12]
 801103c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011044:	693a      	ldr	r2, [r7, #16]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	429a      	cmp	r2, r3
 801104a:	d203      	bcs.n	8011054 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801104c:	4a2d      	ldr	r2, [pc, #180]	; (8011104 <xTaskIncrementTick+0x158>)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011052:	e02e      	b.n	80110b2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	3304      	adds	r3, #4
 8011058:	4618      	mov	r0, r3
 801105a:	f7ff fb50 	bl	80106fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011062:	2b00      	cmp	r3, #0
 8011064:	d004      	beq.n	8011070 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	3318      	adds	r3, #24
 801106a:	4618      	mov	r0, r3
 801106c:	f7ff fb47 	bl	80106fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011074:	2201      	movs	r2, #1
 8011076:	409a      	lsls	r2, r3
 8011078:	4b23      	ldr	r3, [pc, #140]	; (8011108 <xTaskIncrementTick+0x15c>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4313      	orrs	r3, r2
 801107e:	4a22      	ldr	r2, [pc, #136]	; (8011108 <xTaskIncrementTick+0x15c>)
 8011080:	6013      	str	r3, [r2, #0]
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011086:	4613      	mov	r3, r2
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	4413      	add	r3, r2
 801108c:	009b      	lsls	r3, r3, #2
 801108e:	4a1f      	ldr	r2, [pc, #124]	; (801110c <xTaskIncrementTick+0x160>)
 8011090:	441a      	add	r2, r3
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	3304      	adds	r3, #4
 8011096:	4619      	mov	r1, r3
 8011098:	4610      	mov	r0, r2
 801109a:	f7ff fad3 	bl	8010644 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110a2:	4b1b      	ldr	r3, [pc, #108]	; (8011110 <xTaskIncrementTick+0x164>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a8:	429a      	cmp	r2, r3
 80110aa:	d3b9      	bcc.n	8011020 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80110ac:	2301      	movs	r3, #1
 80110ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80110b0:	e7b6      	b.n	8011020 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80110b2:	4b17      	ldr	r3, [pc, #92]	; (8011110 <xTaskIncrementTick+0x164>)
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110b8:	4914      	ldr	r1, [pc, #80]	; (801110c <xTaskIncrementTick+0x160>)
 80110ba:	4613      	mov	r3, r2
 80110bc:	009b      	lsls	r3, r3, #2
 80110be:	4413      	add	r3, r2
 80110c0:	009b      	lsls	r3, r3, #2
 80110c2:	440b      	add	r3, r1
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d901      	bls.n	80110ce <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80110ca:	2301      	movs	r3, #1
 80110cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80110ce:	4b11      	ldr	r3, [pc, #68]	; (8011114 <xTaskIncrementTick+0x168>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d007      	beq.n	80110e6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80110d6:	2301      	movs	r3, #1
 80110d8:	617b      	str	r3, [r7, #20]
 80110da:	e004      	b.n	80110e6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80110dc:	4b0e      	ldr	r3, [pc, #56]	; (8011118 <xTaskIncrementTick+0x16c>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	3301      	adds	r3, #1
 80110e2:	4a0d      	ldr	r2, [pc, #52]	; (8011118 <xTaskIncrementTick+0x16c>)
 80110e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80110e6:	697b      	ldr	r3, [r7, #20]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}
 80110f0:	200009c0 	.word	0x200009c0
 80110f4:	2000099c 	.word	0x2000099c
 80110f8:	20000950 	.word	0x20000950
 80110fc:	20000954 	.word	0x20000954
 8011100:	200009b0 	.word	0x200009b0
 8011104:	200009b8 	.word	0x200009b8
 8011108:	200009a0 	.word	0x200009a0
 801110c:	2000089c 	.word	0x2000089c
 8011110:	20000898 	.word	0x20000898
 8011114:	200009ac 	.word	0x200009ac
 8011118:	200009a8 	.word	0x200009a8

0801111c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801111c:	b480      	push	{r7}
 801111e:	b087      	sub	sp, #28
 8011120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011122:	4b27      	ldr	r3, [pc, #156]	; (80111c0 <vTaskSwitchContext+0xa4>)
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d003      	beq.n	8011132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801112a:	4b26      	ldr	r3, [pc, #152]	; (80111c4 <vTaskSwitchContext+0xa8>)
 801112c:	2201      	movs	r2, #1
 801112e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011130:	e03f      	b.n	80111b2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8011132:	4b24      	ldr	r3, [pc, #144]	; (80111c4 <vTaskSwitchContext+0xa8>)
 8011134:	2200      	movs	r2, #0
 8011136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011138:	4b23      	ldr	r3, [pc, #140]	; (80111c8 <vTaskSwitchContext+0xac>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	fab3 f383 	clz	r3, r3
 8011144:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011146:	7afb      	ldrb	r3, [r7, #11]
 8011148:	f1c3 031f 	rsb	r3, r3, #31
 801114c:	617b      	str	r3, [r7, #20]
 801114e:	491f      	ldr	r1, [pc, #124]	; (80111cc <vTaskSwitchContext+0xb0>)
 8011150:	697a      	ldr	r2, [r7, #20]
 8011152:	4613      	mov	r3, r2
 8011154:	009b      	lsls	r3, r3, #2
 8011156:	4413      	add	r3, r2
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	440b      	add	r3, r1
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d10a      	bne.n	8011178 <vTaskSwitchContext+0x5c>
	__asm volatile
 8011162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011166:	f383 8811 	msr	BASEPRI, r3
 801116a:	f3bf 8f6f 	isb	sy
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	607b      	str	r3, [r7, #4]
}
 8011174:	bf00      	nop
 8011176:	e7fe      	b.n	8011176 <vTaskSwitchContext+0x5a>
 8011178:	697a      	ldr	r2, [r7, #20]
 801117a:	4613      	mov	r3, r2
 801117c:	009b      	lsls	r3, r3, #2
 801117e:	4413      	add	r3, r2
 8011180:	009b      	lsls	r3, r3, #2
 8011182:	4a12      	ldr	r2, [pc, #72]	; (80111cc <vTaskSwitchContext+0xb0>)
 8011184:	4413      	add	r3, r2
 8011186:	613b      	str	r3, [r7, #16]
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	685b      	ldr	r3, [r3, #4]
 801118c:	685a      	ldr	r2, [r3, #4]
 801118e:	693b      	ldr	r3, [r7, #16]
 8011190:	605a      	str	r2, [r3, #4]
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	685a      	ldr	r2, [r3, #4]
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	3308      	adds	r3, #8
 801119a:	429a      	cmp	r2, r3
 801119c:	d104      	bne.n	80111a8 <vTaskSwitchContext+0x8c>
 801119e:	693b      	ldr	r3, [r7, #16]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	685a      	ldr	r2, [r3, #4]
 80111a4:	693b      	ldr	r3, [r7, #16]
 80111a6:	605a      	str	r2, [r3, #4]
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	685b      	ldr	r3, [r3, #4]
 80111ac:	68db      	ldr	r3, [r3, #12]
 80111ae:	4a08      	ldr	r2, [pc, #32]	; (80111d0 <vTaskSwitchContext+0xb4>)
 80111b0:	6013      	str	r3, [r2, #0]
}
 80111b2:	bf00      	nop
 80111b4:	371c      	adds	r7, #28
 80111b6:	46bd      	mov	sp, r7
 80111b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111bc:	4770      	bx	lr
 80111be:	bf00      	nop
 80111c0:	200009c0 	.word	0x200009c0
 80111c4:	200009ac 	.word	0x200009ac
 80111c8:	200009a0 	.word	0x200009a0
 80111cc:	2000089c 	.word	0x2000089c
 80111d0:	20000898 	.word	0x20000898

080111d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	68db      	ldr	r3, [r3, #12]
 80111e0:	68db      	ldr	r3, [r3, #12]
 80111e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80111e4:	693b      	ldr	r3, [r7, #16]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10a      	bne.n	8011200 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80111ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111ee:	f383 8811 	msr	BASEPRI, r3
 80111f2:	f3bf 8f6f 	isb	sy
 80111f6:	f3bf 8f4f 	dsb	sy
 80111fa:	60fb      	str	r3, [r7, #12]
}
 80111fc:	bf00      	nop
 80111fe:	e7fe      	b.n	80111fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011200:	693b      	ldr	r3, [r7, #16]
 8011202:	3318      	adds	r3, #24
 8011204:	4618      	mov	r0, r3
 8011206:	f7ff fa7a 	bl	80106fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801120a:	4b1d      	ldr	r3, [pc, #116]	; (8011280 <xTaskRemoveFromEventList+0xac>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d11c      	bne.n	801124c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011212:	693b      	ldr	r3, [r7, #16]
 8011214:	3304      	adds	r3, #4
 8011216:	4618      	mov	r0, r3
 8011218:	f7ff fa71 	bl	80106fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801121c:	693b      	ldr	r3, [r7, #16]
 801121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011220:	2201      	movs	r2, #1
 8011222:	409a      	lsls	r2, r3
 8011224:	4b17      	ldr	r3, [pc, #92]	; (8011284 <xTaskRemoveFromEventList+0xb0>)
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	4313      	orrs	r3, r2
 801122a:	4a16      	ldr	r2, [pc, #88]	; (8011284 <xTaskRemoveFromEventList+0xb0>)
 801122c:	6013      	str	r3, [r2, #0]
 801122e:	693b      	ldr	r3, [r7, #16]
 8011230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011232:	4613      	mov	r3, r2
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	4413      	add	r3, r2
 8011238:	009b      	lsls	r3, r3, #2
 801123a:	4a13      	ldr	r2, [pc, #76]	; (8011288 <xTaskRemoveFromEventList+0xb4>)
 801123c:	441a      	add	r2, r3
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	3304      	adds	r3, #4
 8011242:	4619      	mov	r1, r3
 8011244:	4610      	mov	r0, r2
 8011246:	f7ff f9fd 	bl	8010644 <vListInsertEnd>
 801124a:	e005      	b.n	8011258 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	3318      	adds	r3, #24
 8011250:	4619      	mov	r1, r3
 8011252:	480e      	ldr	r0, [pc, #56]	; (801128c <xTaskRemoveFromEventList+0xb8>)
 8011254:	f7ff f9f6 	bl	8010644 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801125c:	4b0c      	ldr	r3, [pc, #48]	; (8011290 <xTaskRemoveFromEventList+0xbc>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011262:	429a      	cmp	r2, r3
 8011264:	d905      	bls.n	8011272 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011266:	2301      	movs	r3, #1
 8011268:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801126a:	4b0a      	ldr	r3, [pc, #40]	; (8011294 <xTaskRemoveFromEventList+0xc0>)
 801126c:	2201      	movs	r2, #1
 801126e:	601a      	str	r2, [r3, #0]
 8011270:	e001      	b.n	8011276 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8011272:	2300      	movs	r3, #0
 8011274:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011276:	697b      	ldr	r3, [r7, #20]
}
 8011278:	4618      	mov	r0, r3
 801127a:	3718      	adds	r7, #24
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}
 8011280:	200009c0 	.word	0x200009c0
 8011284:	200009a0 	.word	0x200009a0
 8011288:	2000089c 	.word	0x2000089c
 801128c:	20000958 	.word	0x20000958
 8011290:	20000898 	.word	0x20000898
 8011294:	200009ac 	.word	0x200009ac

08011298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80112a0:	f000 f852 	bl	8011348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80112a4:	4b06      	ldr	r3, [pc, #24]	; (80112c0 <prvIdleTask+0x28>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b01      	cmp	r3, #1
 80112aa:	d9f9      	bls.n	80112a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80112ac:	4b05      	ldr	r3, [pc, #20]	; (80112c4 <prvIdleTask+0x2c>)
 80112ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	f3bf 8f4f 	dsb	sy
 80112b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80112bc:	e7f0      	b.n	80112a0 <prvIdleTask+0x8>
 80112be:	bf00      	nop
 80112c0:	2000089c 	.word	0x2000089c
 80112c4:	e000ed04 	.word	0xe000ed04

080112c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112ce:	2300      	movs	r3, #0
 80112d0:	607b      	str	r3, [r7, #4]
 80112d2:	e00c      	b.n	80112ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	4613      	mov	r3, r2
 80112d8:	009b      	lsls	r3, r3, #2
 80112da:	4413      	add	r3, r2
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	4a12      	ldr	r2, [pc, #72]	; (8011328 <prvInitialiseTaskLists+0x60>)
 80112e0:	4413      	add	r3, r2
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7ff f981 	bl	80105ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	3301      	adds	r3, #1
 80112ec:	607b      	str	r3, [r7, #4]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2b06      	cmp	r3, #6
 80112f2:	d9ef      	bls.n	80112d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80112f4:	480d      	ldr	r0, [pc, #52]	; (801132c <prvInitialiseTaskLists+0x64>)
 80112f6:	f7ff f978 	bl	80105ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80112fa:	480d      	ldr	r0, [pc, #52]	; (8011330 <prvInitialiseTaskLists+0x68>)
 80112fc:	f7ff f975 	bl	80105ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011300:	480c      	ldr	r0, [pc, #48]	; (8011334 <prvInitialiseTaskLists+0x6c>)
 8011302:	f7ff f972 	bl	80105ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011306:	480c      	ldr	r0, [pc, #48]	; (8011338 <prvInitialiseTaskLists+0x70>)
 8011308:	f7ff f96f 	bl	80105ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801130c:	480b      	ldr	r0, [pc, #44]	; (801133c <prvInitialiseTaskLists+0x74>)
 801130e:	f7ff f96c 	bl	80105ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011312:	4b0b      	ldr	r3, [pc, #44]	; (8011340 <prvInitialiseTaskLists+0x78>)
 8011314:	4a05      	ldr	r2, [pc, #20]	; (801132c <prvInitialiseTaskLists+0x64>)
 8011316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011318:	4b0a      	ldr	r3, [pc, #40]	; (8011344 <prvInitialiseTaskLists+0x7c>)
 801131a:	4a05      	ldr	r2, [pc, #20]	; (8011330 <prvInitialiseTaskLists+0x68>)
 801131c:	601a      	str	r2, [r3, #0]
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	2000089c 	.word	0x2000089c
 801132c:	20000928 	.word	0x20000928
 8011330:	2000093c 	.word	0x2000093c
 8011334:	20000958 	.word	0x20000958
 8011338:	2000096c 	.word	0x2000096c
 801133c:	20000984 	.word	0x20000984
 8011340:	20000950 	.word	0x20000950
 8011344:	20000954 	.word	0x20000954

08011348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b082      	sub	sp, #8
 801134c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801134e:	e019      	b.n	8011384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011350:	f000 fa30 	bl	80117b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011354:	4b10      	ldr	r3, [pc, #64]	; (8011398 <prvCheckTasksWaitingTermination+0x50>)
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	68db      	ldr	r3, [r3, #12]
 801135a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3304      	adds	r3, #4
 8011360:	4618      	mov	r0, r3
 8011362:	f7ff f9cc 	bl	80106fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011366:	4b0d      	ldr	r3, [pc, #52]	; (801139c <prvCheckTasksWaitingTermination+0x54>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	3b01      	subs	r3, #1
 801136c:	4a0b      	ldr	r2, [pc, #44]	; (801139c <prvCheckTasksWaitingTermination+0x54>)
 801136e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011370:	4b0b      	ldr	r3, [pc, #44]	; (80113a0 <prvCheckTasksWaitingTermination+0x58>)
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	3b01      	subs	r3, #1
 8011376:	4a0a      	ldr	r2, [pc, #40]	; (80113a0 <prvCheckTasksWaitingTermination+0x58>)
 8011378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801137a:	f000 fa4b 	bl	8011814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 f810 	bl	80113a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011384:	4b06      	ldr	r3, [pc, #24]	; (80113a0 <prvCheckTasksWaitingTermination+0x58>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1e1      	bne.n	8011350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801138c:	bf00      	nop
 801138e:	bf00      	nop
 8011390:	3708      	adds	r7, #8
 8011392:	46bd      	mov	sp, r7
 8011394:	bd80      	pop	{r7, pc}
 8011396:	bf00      	nop
 8011398:	2000096c 	.word	0x2000096c
 801139c:	20000998 	.word	0x20000998
 80113a0:	20000980 	.word	0x20000980

080113a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b084      	sub	sp, #16
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d108      	bne.n	80113c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113ba:	4618      	mov	r0, r3
 80113bc:	f000 fba8 	bl	8011b10 <vPortFree>
				vPortFree( pxTCB );
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f000 fba5 	bl	8011b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80113c6:	e018      	b.n	80113fa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d103      	bne.n	80113da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 fb9c 	bl	8011b10 <vPortFree>
	}
 80113d8:	e00f      	b.n	80113fa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80113e0:	2b02      	cmp	r3, #2
 80113e2:	d00a      	beq.n	80113fa <prvDeleteTCB+0x56>
	__asm volatile
 80113e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	60fb      	str	r3, [r7, #12]
}
 80113f6:	bf00      	nop
 80113f8:	e7fe      	b.n	80113f8 <prvDeleteTCB+0x54>
	}
 80113fa:	bf00      	nop
 80113fc:	3710      	adds	r7, #16
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}
	...

08011404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801140a:	4b0c      	ldr	r3, [pc, #48]	; (801143c <prvResetNextTaskUnblockTime+0x38>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d104      	bne.n	801141e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011414:	4b0a      	ldr	r3, [pc, #40]	; (8011440 <prvResetNextTaskUnblockTime+0x3c>)
 8011416:	f04f 32ff 	mov.w	r2, #4294967295
 801141a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801141c:	e008      	b.n	8011430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801141e:	4b07      	ldr	r3, [pc, #28]	; (801143c <prvResetNextTaskUnblockTime+0x38>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	68db      	ldr	r3, [r3, #12]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	685b      	ldr	r3, [r3, #4]
 801142c:	4a04      	ldr	r2, [pc, #16]	; (8011440 <prvResetNextTaskUnblockTime+0x3c>)
 801142e:	6013      	str	r3, [r2, #0]
}
 8011430:	bf00      	nop
 8011432:	370c      	adds	r7, #12
 8011434:	46bd      	mov	sp, r7
 8011436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801143a:	4770      	bx	lr
 801143c:	20000950 	.word	0x20000950
 8011440:	200009b8 	.word	0x200009b8

08011444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011444:	b480      	push	{r7}
 8011446:	b083      	sub	sp, #12
 8011448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801144a:	4b0b      	ldr	r3, [pc, #44]	; (8011478 <xTaskGetSchedulerState+0x34>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d102      	bne.n	8011458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011452:	2301      	movs	r3, #1
 8011454:	607b      	str	r3, [r7, #4]
 8011456:	e008      	b.n	801146a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011458:	4b08      	ldr	r3, [pc, #32]	; (801147c <xTaskGetSchedulerState+0x38>)
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d102      	bne.n	8011466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011460:	2302      	movs	r3, #2
 8011462:	607b      	str	r3, [r7, #4]
 8011464:	e001      	b.n	801146a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011466:	2300      	movs	r3, #0
 8011468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801146a:	687b      	ldr	r3, [r7, #4]
	}
 801146c:	4618      	mov	r0, r3
 801146e:	370c      	adds	r7, #12
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr
 8011478:	200009a4 	.word	0x200009a4
 801147c:	200009c0 	.word	0x200009c0

08011480 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011480:	b580      	push	{r7, lr}
 8011482:	b084      	sub	sp, #16
 8011484:	af00      	add	r7, sp, #0
 8011486:	6078      	str	r0, [r7, #4]
 8011488:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801148a:	4b2b      	ldr	r3, [pc, #172]	; (8011538 <prvAddCurrentTaskToDelayedList+0xb8>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8011490:	4b2a      	ldr	r3, [pc, #168]	; (801153c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2200      	movs	r2, #0
 8011496:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801149a:	4b28      	ldr	r3, [pc, #160]	; (801153c <prvAddCurrentTaskToDelayedList+0xbc>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	3304      	adds	r3, #4
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7ff f92c 	bl	80106fe <uxListRemove>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d10b      	bne.n	80114c4 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80114ac:	4b23      	ldr	r3, [pc, #140]	; (801153c <prvAddCurrentTaskToDelayedList+0xbc>)
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b2:	2201      	movs	r2, #1
 80114b4:	fa02 f303 	lsl.w	r3, r2, r3
 80114b8:	43da      	mvns	r2, r3
 80114ba:	4b21      	ldr	r3, [pc, #132]	; (8011540 <prvAddCurrentTaskToDelayedList+0xc0>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	4013      	ands	r3, r2
 80114c0:	4a1f      	ldr	r2, [pc, #124]	; (8011540 <prvAddCurrentTaskToDelayedList+0xc0>)
 80114c2:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114ca:	d10a      	bne.n	80114e2 <prvAddCurrentTaskToDelayedList+0x62>
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d007      	beq.n	80114e2 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114d2:	4b1a      	ldr	r3, [pc, #104]	; (801153c <prvAddCurrentTaskToDelayedList+0xbc>)
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	3304      	adds	r3, #4
 80114d8:	4619      	mov	r1, r3
 80114da:	481a      	ldr	r0, [pc, #104]	; (8011544 <prvAddCurrentTaskToDelayedList+0xc4>)
 80114dc:	f7ff f8b2 	bl	8010644 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80114e0:	e026      	b.n	8011530 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80114e2:	68fa      	ldr	r2, [r7, #12]
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	4413      	add	r3, r2
 80114e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80114ea:	4b14      	ldr	r3, [pc, #80]	; (801153c <prvAddCurrentTaskToDelayedList+0xbc>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	68ba      	ldr	r2, [r7, #8]
 80114f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80114f2:	68ba      	ldr	r2, [r7, #8]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	429a      	cmp	r2, r3
 80114f8:	d209      	bcs.n	801150e <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80114fa:	4b13      	ldr	r3, [pc, #76]	; (8011548 <prvAddCurrentTaskToDelayedList+0xc8>)
 80114fc:	681a      	ldr	r2, [r3, #0]
 80114fe:	4b0f      	ldr	r3, [pc, #60]	; (801153c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	3304      	adds	r3, #4
 8011504:	4619      	mov	r1, r3
 8011506:	4610      	mov	r0, r2
 8011508:	f7ff f8c0 	bl	801068c <vListInsert>
}
 801150c:	e010      	b.n	8011530 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801150e:	4b0f      	ldr	r3, [pc, #60]	; (801154c <prvAddCurrentTaskToDelayedList+0xcc>)
 8011510:	681a      	ldr	r2, [r3, #0]
 8011512:	4b0a      	ldr	r3, [pc, #40]	; (801153c <prvAddCurrentTaskToDelayedList+0xbc>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	3304      	adds	r3, #4
 8011518:	4619      	mov	r1, r3
 801151a:	4610      	mov	r0, r2
 801151c:	f7ff f8b6 	bl	801068c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011520:	4b0b      	ldr	r3, [pc, #44]	; (8011550 <prvAddCurrentTaskToDelayedList+0xd0>)
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	68ba      	ldr	r2, [r7, #8]
 8011526:	429a      	cmp	r2, r3
 8011528:	d202      	bcs.n	8011530 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 801152a:	4a09      	ldr	r2, [pc, #36]	; (8011550 <prvAddCurrentTaskToDelayedList+0xd0>)
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	6013      	str	r3, [r2, #0]
}
 8011530:	bf00      	nop
 8011532:	3710      	adds	r7, #16
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	2000099c 	.word	0x2000099c
 801153c:	20000898 	.word	0x20000898
 8011540:	200009a0 	.word	0x200009a0
 8011544:	20000984 	.word	0x20000984
 8011548:	20000954 	.word	0x20000954
 801154c:	20000950 	.word	0x20000950
 8011550:	200009b8 	.word	0x200009b8

08011554 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011554:	b480      	push	{r7}
 8011556:	b085      	sub	sp, #20
 8011558:	af00      	add	r7, sp, #0
 801155a:	60f8      	str	r0, [r7, #12]
 801155c:	60b9      	str	r1, [r7, #8]
 801155e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	3b04      	subs	r3, #4
 8011564:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801156c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	3b04      	subs	r3, #4
 8011572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011574:	68bb      	ldr	r3, [r7, #8]
 8011576:	f023 0201 	bic.w	r2, r3, #1
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	3b04      	subs	r3, #4
 8011582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011584:	4a0c      	ldr	r2, [pc, #48]	; (80115b8 <pxPortInitialiseStack+0x64>)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	3b14      	subs	r3, #20
 801158e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011590:	687a      	ldr	r2, [r7, #4]
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	3b04      	subs	r3, #4
 801159a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f06f 0202 	mvn.w	r2, #2
 80115a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	3b20      	subs	r3, #32
 80115a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80115aa:	68fb      	ldr	r3, [r7, #12]
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3714      	adds	r7, #20
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr
 80115b8:	080115bd 	.word	0x080115bd

080115bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80115bc:	b480      	push	{r7}
 80115be:	b085      	sub	sp, #20
 80115c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80115c2:	2300      	movs	r3, #0
 80115c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80115c6:	4b12      	ldr	r3, [pc, #72]	; (8011610 <prvTaskExitError+0x54>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ce:	d00a      	beq.n	80115e6 <prvTaskExitError+0x2a>
	__asm volatile
 80115d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115d4:	f383 8811 	msr	BASEPRI, r3
 80115d8:	f3bf 8f6f 	isb	sy
 80115dc:	f3bf 8f4f 	dsb	sy
 80115e0:	60fb      	str	r3, [r7, #12]
}
 80115e2:	bf00      	nop
 80115e4:	e7fe      	b.n	80115e4 <prvTaskExitError+0x28>
	__asm volatile
 80115e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ea:	f383 8811 	msr	BASEPRI, r3
 80115ee:	f3bf 8f6f 	isb	sy
 80115f2:	f3bf 8f4f 	dsb	sy
 80115f6:	60bb      	str	r3, [r7, #8]
}
 80115f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80115fa:	bf00      	nop
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d0fc      	beq.n	80115fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011602:	bf00      	nop
 8011604:	bf00      	nop
 8011606:	3714      	adds	r7, #20
 8011608:	46bd      	mov	sp, r7
 801160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160e:	4770      	bx	lr
 8011610:	200002a0 	.word	0x200002a0
	...

08011620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011620:	4b07      	ldr	r3, [pc, #28]	; (8011640 <pxCurrentTCBConst2>)
 8011622:	6819      	ldr	r1, [r3, #0]
 8011624:	6808      	ldr	r0, [r1, #0]
 8011626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801162a:	f380 8809 	msr	PSP, r0
 801162e:	f3bf 8f6f 	isb	sy
 8011632:	f04f 0000 	mov.w	r0, #0
 8011636:	f380 8811 	msr	BASEPRI, r0
 801163a:	4770      	bx	lr
 801163c:	f3af 8000 	nop.w

08011640 <pxCurrentTCBConst2>:
 8011640:	20000898 	.word	0x20000898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011644:	bf00      	nop
 8011646:	bf00      	nop

08011648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011648:	4808      	ldr	r0, [pc, #32]	; (801166c <prvPortStartFirstTask+0x24>)
 801164a:	6800      	ldr	r0, [r0, #0]
 801164c:	6800      	ldr	r0, [r0, #0]
 801164e:	f380 8808 	msr	MSP, r0
 8011652:	f04f 0000 	mov.w	r0, #0
 8011656:	f380 8814 	msr	CONTROL, r0
 801165a:	b662      	cpsie	i
 801165c:	b661      	cpsie	f
 801165e:	f3bf 8f4f 	dsb	sy
 8011662:	f3bf 8f6f 	isb	sy
 8011666:	df00      	svc	0
 8011668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801166a:	bf00      	nop
 801166c:	e000ed08 	.word	0xe000ed08

08011670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b086      	sub	sp, #24
 8011674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011676:	4b46      	ldr	r3, [pc, #280]	; (8011790 <xPortStartScheduler+0x120>)
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	4a46      	ldr	r2, [pc, #280]	; (8011794 <xPortStartScheduler+0x124>)
 801167c:	4293      	cmp	r3, r2
 801167e:	d10a      	bne.n	8011696 <xPortStartScheduler+0x26>
	__asm volatile
 8011680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011684:	f383 8811 	msr	BASEPRI, r3
 8011688:	f3bf 8f6f 	isb	sy
 801168c:	f3bf 8f4f 	dsb	sy
 8011690:	613b      	str	r3, [r7, #16]
}
 8011692:	bf00      	nop
 8011694:	e7fe      	b.n	8011694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011696:	4b3e      	ldr	r3, [pc, #248]	; (8011790 <xPortStartScheduler+0x120>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	4a3f      	ldr	r2, [pc, #252]	; (8011798 <xPortStartScheduler+0x128>)
 801169c:	4293      	cmp	r3, r2
 801169e:	d10a      	bne.n	80116b6 <xPortStartScheduler+0x46>
	__asm volatile
 80116a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a4:	f383 8811 	msr	BASEPRI, r3
 80116a8:	f3bf 8f6f 	isb	sy
 80116ac:	f3bf 8f4f 	dsb	sy
 80116b0:	60fb      	str	r3, [r7, #12]
}
 80116b2:	bf00      	nop
 80116b4:	e7fe      	b.n	80116b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80116b6:	4b39      	ldr	r3, [pc, #228]	; (801179c <xPortStartScheduler+0x12c>)
 80116b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	b2db      	uxtb	r3, r3
 80116c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	22ff      	movs	r2, #255	; 0xff
 80116c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	781b      	ldrb	r3, [r3, #0]
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80116d0:	78fb      	ldrb	r3, [r7, #3]
 80116d2:	b2db      	uxtb	r3, r3
 80116d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80116d8:	b2da      	uxtb	r2, r3
 80116da:	4b31      	ldr	r3, [pc, #196]	; (80117a0 <xPortStartScheduler+0x130>)
 80116dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80116de:	4b31      	ldr	r3, [pc, #196]	; (80117a4 <xPortStartScheduler+0x134>)
 80116e0:	2207      	movs	r2, #7
 80116e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116e4:	e009      	b.n	80116fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80116e6:	4b2f      	ldr	r3, [pc, #188]	; (80117a4 <xPortStartScheduler+0x134>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	3b01      	subs	r3, #1
 80116ec:	4a2d      	ldr	r2, [pc, #180]	; (80117a4 <xPortStartScheduler+0x134>)
 80116ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80116f0:	78fb      	ldrb	r3, [r7, #3]
 80116f2:	b2db      	uxtb	r3, r3
 80116f4:	005b      	lsls	r3, r3, #1
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80116fa:	78fb      	ldrb	r3, [r7, #3]
 80116fc:	b2db      	uxtb	r3, r3
 80116fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011702:	2b80      	cmp	r3, #128	; 0x80
 8011704:	d0ef      	beq.n	80116e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011706:	4b27      	ldr	r3, [pc, #156]	; (80117a4 <xPortStartScheduler+0x134>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	f1c3 0307 	rsb	r3, r3, #7
 801170e:	2b04      	cmp	r3, #4
 8011710:	d00a      	beq.n	8011728 <xPortStartScheduler+0xb8>
	__asm volatile
 8011712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011716:	f383 8811 	msr	BASEPRI, r3
 801171a:	f3bf 8f6f 	isb	sy
 801171e:	f3bf 8f4f 	dsb	sy
 8011722:	60bb      	str	r3, [r7, #8]
}
 8011724:	bf00      	nop
 8011726:	e7fe      	b.n	8011726 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011728:	4b1e      	ldr	r3, [pc, #120]	; (80117a4 <xPortStartScheduler+0x134>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	021b      	lsls	r3, r3, #8
 801172e:	4a1d      	ldr	r2, [pc, #116]	; (80117a4 <xPortStartScheduler+0x134>)
 8011730:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011732:	4b1c      	ldr	r3, [pc, #112]	; (80117a4 <xPortStartScheduler+0x134>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801173a:	4a1a      	ldr	r2, [pc, #104]	; (80117a4 <xPortStartScheduler+0x134>)
 801173c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	b2da      	uxtb	r2, r3
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011746:	4b18      	ldr	r3, [pc, #96]	; (80117a8 <xPortStartScheduler+0x138>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	4a17      	ldr	r2, [pc, #92]	; (80117a8 <xPortStartScheduler+0x138>)
 801174c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011750:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011752:	4b15      	ldr	r3, [pc, #84]	; (80117a8 <xPortStartScheduler+0x138>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	4a14      	ldr	r2, [pc, #80]	; (80117a8 <xPortStartScheduler+0x138>)
 8011758:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801175c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801175e:	f000 f8dd 	bl	801191c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011762:	4b12      	ldr	r3, [pc, #72]	; (80117ac <xPortStartScheduler+0x13c>)
 8011764:	2200      	movs	r2, #0
 8011766:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011768:	f000 f8fc 	bl	8011964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801176c:	4b10      	ldr	r3, [pc, #64]	; (80117b0 <xPortStartScheduler+0x140>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4a0f      	ldr	r2, [pc, #60]	; (80117b0 <xPortStartScheduler+0x140>)
 8011772:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011776:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011778:	f7ff ff66 	bl	8011648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801177c:	f7ff fcce 	bl	801111c <vTaskSwitchContext>
	prvTaskExitError();
 8011780:	f7ff ff1c 	bl	80115bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011784:	2300      	movs	r3, #0
}
 8011786:	4618      	mov	r0, r3
 8011788:	3718      	adds	r7, #24
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	e000ed00 	.word	0xe000ed00
 8011794:	410fc271 	.word	0x410fc271
 8011798:	410fc270 	.word	0x410fc270
 801179c:	e000e400 	.word	0xe000e400
 80117a0:	200009c4 	.word	0x200009c4
 80117a4:	200009c8 	.word	0x200009c8
 80117a8:	e000ed20 	.word	0xe000ed20
 80117ac:	200002a0 	.word	0x200002a0
 80117b0:	e000ef34 	.word	0xe000ef34

080117b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
	__asm volatile
 80117ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117be:	f383 8811 	msr	BASEPRI, r3
 80117c2:	f3bf 8f6f 	isb	sy
 80117c6:	f3bf 8f4f 	dsb	sy
 80117ca:	607b      	str	r3, [r7, #4]
}
 80117cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80117ce:	4b0f      	ldr	r3, [pc, #60]	; (801180c <vPortEnterCritical+0x58>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	3301      	adds	r3, #1
 80117d4:	4a0d      	ldr	r2, [pc, #52]	; (801180c <vPortEnterCritical+0x58>)
 80117d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80117d8:	4b0c      	ldr	r3, [pc, #48]	; (801180c <vPortEnterCritical+0x58>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d10f      	bne.n	8011800 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80117e0:	4b0b      	ldr	r3, [pc, #44]	; (8011810 <vPortEnterCritical+0x5c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	b2db      	uxtb	r3, r3
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d00a      	beq.n	8011800 <vPortEnterCritical+0x4c>
	__asm volatile
 80117ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117ee:	f383 8811 	msr	BASEPRI, r3
 80117f2:	f3bf 8f6f 	isb	sy
 80117f6:	f3bf 8f4f 	dsb	sy
 80117fa:	603b      	str	r3, [r7, #0]
}
 80117fc:	bf00      	nop
 80117fe:	e7fe      	b.n	80117fe <vPortEnterCritical+0x4a>
	}
}
 8011800:	bf00      	nop
 8011802:	370c      	adds	r7, #12
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	200002a0 	.word	0x200002a0
 8011810:	e000ed04 	.word	0xe000ed04

08011814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801181a:	4b12      	ldr	r3, [pc, #72]	; (8011864 <vPortExitCritical+0x50>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d10a      	bne.n	8011838 <vPortExitCritical+0x24>
	__asm volatile
 8011822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011826:	f383 8811 	msr	BASEPRI, r3
 801182a:	f3bf 8f6f 	isb	sy
 801182e:	f3bf 8f4f 	dsb	sy
 8011832:	607b      	str	r3, [r7, #4]
}
 8011834:	bf00      	nop
 8011836:	e7fe      	b.n	8011836 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011838:	4b0a      	ldr	r3, [pc, #40]	; (8011864 <vPortExitCritical+0x50>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	3b01      	subs	r3, #1
 801183e:	4a09      	ldr	r2, [pc, #36]	; (8011864 <vPortExitCritical+0x50>)
 8011840:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011842:	4b08      	ldr	r3, [pc, #32]	; (8011864 <vPortExitCritical+0x50>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d105      	bne.n	8011856 <vPortExitCritical+0x42>
 801184a:	2300      	movs	r3, #0
 801184c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011854:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011856:	bf00      	nop
 8011858:	370c      	adds	r7, #12
 801185a:	46bd      	mov	sp, r7
 801185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011860:	4770      	bx	lr
 8011862:	bf00      	nop
 8011864:	200002a0 	.word	0x200002a0
	...

08011870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011870:	f3ef 8009 	mrs	r0, PSP
 8011874:	f3bf 8f6f 	isb	sy
 8011878:	4b15      	ldr	r3, [pc, #84]	; (80118d0 <pxCurrentTCBConst>)
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	f01e 0f10 	tst.w	lr, #16
 8011880:	bf08      	it	eq
 8011882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188a:	6010      	str	r0, [r2, #0]
 801188c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011894:	f380 8811 	msr	BASEPRI, r0
 8011898:	f3bf 8f4f 	dsb	sy
 801189c:	f3bf 8f6f 	isb	sy
 80118a0:	f7ff fc3c 	bl	801111c <vTaskSwitchContext>
 80118a4:	f04f 0000 	mov.w	r0, #0
 80118a8:	f380 8811 	msr	BASEPRI, r0
 80118ac:	bc09      	pop	{r0, r3}
 80118ae:	6819      	ldr	r1, [r3, #0]
 80118b0:	6808      	ldr	r0, [r1, #0]
 80118b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b6:	f01e 0f10 	tst.w	lr, #16
 80118ba:	bf08      	it	eq
 80118bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80118c0:	f380 8809 	msr	PSP, r0
 80118c4:	f3bf 8f6f 	isb	sy
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop
 80118cc:	f3af 8000 	nop.w

080118d0 <pxCurrentTCBConst>:
 80118d0:	20000898 	.word	0x20000898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80118d4:	bf00      	nop
 80118d6:	bf00      	nop

080118d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b082      	sub	sp, #8
 80118dc:	af00      	add	r7, sp, #0
	__asm volatile
 80118de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e2:	f383 8811 	msr	BASEPRI, r3
 80118e6:	f3bf 8f6f 	isb	sy
 80118ea:	f3bf 8f4f 	dsb	sy
 80118ee:	607b      	str	r3, [r7, #4]
}
 80118f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80118f2:	f7ff fb5b 	bl	8010fac <xTaskIncrementTick>
 80118f6:	4603      	mov	r3, r0
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d003      	beq.n	8011904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80118fc:	4b06      	ldr	r3, [pc, #24]	; (8011918 <xPortSysTickHandler+0x40>)
 80118fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011902:	601a      	str	r2, [r3, #0]
 8011904:	2300      	movs	r3, #0
 8011906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	f383 8811 	msr	BASEPRI, r3
}
 801190e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011910:	bf00      	nop
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	e000ed04 	.word	0xe000ed04

0801191c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801191c:	b480      	push	{r7}
 801191e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011920:	4b0b      	ldr	r3, [pc, #44]	; (8011950 <vPortSetupTimerInterrupt+0x34>)
 8011922:	2200      	movs	r2, #0
 8011924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011926:	4b0b      	ldr	r3, [pc, #44]	; (8011954 <vPortSetupTimerInterrupt+0x38>)
 8011928:	2200      	movs	r2, #0
 801192a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801192c:	4b0a      	ldr	r3, [pc, #40]	; (8011958 <vPortSetupTimerInterrupt+0x3c>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4a0a      	ldr	r2, [pc, #40]	; (801195c <vPortSetupTimerInterrupt+0x40>)
 8011932:	fba2 2303 	umull	r2, r3, r2, r3
 8011936:	099b      	lsrs	r3, r3, #6
 8011938:	4a09      	ldr	r2, [pc, #36]	; (8011960 <vPortSetupTimerInterrupt+0x44>)
 801193a:	3b01      	subs	r3, #1
 801193c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801193e:	4b04      	ldr	r3, [pc, #16]	; (8011950 <vPortSetupTimerInterrupt+0x34>)
 8011940:	2207      	movs	r2, #7
 8011942:	601a      	str	r2, [r3, #0]
}
 8011944:	bf00      	nop
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr
 801194e:	bf00      	nop
 8011950:	e000e010 	.word	0xe000e010
 8011954:	e000e018 	.word	0xe000e018
 8011958:	20000294 	.word	0x20000294
 801195c:	10624dd3 	.word	0x10624dd3
 8011960:	e000e014 	.word	0xe000e014

08011964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011964:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011974 <vPortEnableVFP+0x10>
 8011968:	6801      	ldr	r1, [r0, #0]
 801196a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801196e:	6001      	str	r1, [r0, #0]
 8011970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011972:	bf00      	nop
 8011974:	e000ed88 	.word	0xe000ed88

08011978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b08a      	sub	sp, #40	; 0x28
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011980:	2300      	movs	r3, #0
 8011982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011984:	f7ff fa58 	bl	8010e38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011988:	4b5b      	ldr	r3, [pc, #364]	; (8011af8 <pvPortMalloc+0x180>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d101      	bne.n	8011994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011990:	f000 f920 	bl	8011bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011994:	4b59      	ldr	r3, [pc, #356]	; (8011afc <pvPortMalloc+0x184>)
 8011996:	681a      	ldr	r2, [r3, #0]
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	4013      	ands	r3, r2
 801199c:	2b00      	cmp	r3, #0
 801199e:	f040 8093 	bne.w	8011ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d01d      	beq.n	80119e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80119a8:	2208      	movs	r2, #8
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	4413      	add	r3, r2
 80119ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f003 0307 	and.w	r3, r3, #7
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d014      	beq.n	80119e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f023 0307 	bic.w	r3, r3, #7
 80119c0:	3308      	adds	r3, #8
 80119c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f003 0307 	and.w	r3, r3, #7
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d00a      	beq.n	80119e4 <pvPortMalloc+0x6c>
	__asm volatile
 80119ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d2:	f383 8811 	msr	BASEPRI, r3
 80119d6:	f3bf 8f6f 	isb	sy
 80119da:	f3bf 8f4f 	dsb	sy
 80119de:	617b      	str	r3, [r7, #20]
}
 80119e0:	bf00      	nop
 80119e2:	e7fe      	b.n	80119e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d06e      	beq.n	8011ac8 <pvPortMalloc+0x150>
 80119ea:	4b45      	ldr	r3, [pc, #276]	; (8011b00 <pvPortMalloc+0x188>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d869      	bhi.n	8011ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80119f4:	4b43      	ldr	r3, [pc, #268]	; (8011b04 <pvPortMalloc+0x18c>)
 80119f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80119f8:	4b42      	ldr	r3, [pc, #264]	; (8011b04 <pvPortMalloc+0x18c>)
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80119fe:	e004      	b.n	8011a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	687a      	ldr	r2, [r7, #4]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d903      	bls.n	8011a1c <pvPortMalloc+0xa4>
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d1f1      	bne.n	8011a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011a1c:	4b36      	ldr	r3, [pc, #216]	; (8011af8 <pvPortMalloc+0x180>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a22:	429a      	cmp	r2, r3
 8011a24:	d050      	beq.n	8011ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011a26:	6a3b      	ldr	r3, [r7, #32]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	2208      	movs	r2, #8
 8011a2c:	4413      	add	r3, r2
 8011a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	6a3b      	ldr	r3, [r7, #32]
 8011a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a3a:	685a      	ldr	r2, [r3, #4]
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	1ad2      	subs	r2, r2, r3
 8011a40:	2308      	movs	r3, #8
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d91f      	bls.n	8011a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	f003 0307 	and.w	r3, r3, #7
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d00a      	beq.n	8011a70 <pvPortMalloc+0xf8>
	__asm volatile
 8011a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5e:	f383 8811 	msr	BASEPRI, r3
 8011a62:	f3bf 8f6f 	isb	sy
 8011a66:	f3bf 8f4f 	dsb	sy
 8011a6a:	613b      	str	r3, [r7, #16]
}
 8011a6c:	bf00      	nop
 8011a6e:	e7fe      	b.n	8011a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	685a      	ldr	r2, [r3, #4]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	1ad2      	subs	r2, r2, r3
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011a82:	69b8      	ldr	r0, [r7, #24]
 8011a84:	f000 f908 	bl	8011c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011a88:	4b1d      	ldr	r3, [pc, #116]	; (8011b00 <pvPortMalloc+0x188>)
 8011a8a:	681a      	ldr	r2, [r3, #0]
 8011a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a8e:	685b      	ldr	r3, [r3, #4]
 8011a90:	1ad3      	subs	r3, r2, r3
 8011a92:	4a1b      	ldr	r2, [pc, #108]	; (8011b00 <pvPortMalloc+0x188>)
 8011a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011a96:	4b1a      	ldr	r3, [pc, #104]	; (8011b00 <pvPortMalloc+0x188>)
 8011a98:	681a      	ldr	r2, [r3, #0]
 8011a9a:	4b1b      	ldr	r3, [pc, #108]	; (8011b08 <pvPortMalloc+0x190>)
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d203      	bcs.n	8011aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011aa2:	4b17      	ldr	r3, [pc, #92]	; (8011b00 <pvPortMalloc+0x188>)
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	4a18      	ldr	r2, [pc, #96]	; (8011b08 <pvPortMalloc+0x190>)
 8011aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aac:	685a      	ldr	r2, [r3, #4]
 8011aae:	4b13      	ldr	r3, [pc, #76]	; (8011afc <pvPortMalloc+0x184>)
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	431a      	orrs	r2, r3
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aba:	2200      	movs	r2, #0
 8011abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8011abe:	4b13      	ldr	r3, [pc, #76]	; (8011b0c <pvPortMalloc+0x194>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	4a11      	ldr	r2, [pc, #68]	; (8011b0c <pvPortMalloc+0x194>)
 8011ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011ac8:	f7ff f9c4 	bl	8010e54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011acc:	69fb      	ldr	r3, [r7, #28]
 8011ace:	f003 0307 	and.w	r3, r3, #7
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d00a      	beq.n	8011aec <pvPortMalloc+0x174>
	__asm volatile
 8011ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ada:	f383 8811 	msr	BASEPRI, r3
 8011ade:	f3bf 8f6f 	isb	sy
 8011ae2:	f3bf 8f4f 	dsb	sy
 8011ae6:	60fb      	str	r3, [r7, #12]
}
 8011ae8:	bf00      	nop
 8011aea:	e7fe      	b.n	8011aea <pvPortMalloc+0x172>
	return pvReturn;
 8011aec:	69fb      	ldr	r3, [r7, #28]
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	3728      	adds	r7, #40	; 0x28
 8011af2:	46bd      	mov	sp, r7
 8011af4:	bd80      	pop	{r7, pc}
 8011af6:	bf00      	nop
 8011af8:	200045d4 	.word	0x200045d4
 8011afc:	200045e8 	.word	0x200045e8
 8011b00:	200045d8 	.word	0x200045d8
 8011b04:	200045cc 	.word	0x200045cc
 8011b08:	200045dc 	.word	0x200045dc
 8011b0c:	200045e0 	.word	0x200045e0

08011b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	b086      	sub	sp, #24
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d04d      	beq.n	8011bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011b22:	2308      	movs	r3, #8
 8011b24:	425b      	negs	r3, r3
 8011b26:	697a      	ldr	r2, [r7, #20]
 8011b28:	4413      	add	r3, r2
 8011b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	685a      	ldr	r2, [r3, #4]
 8011b34:	4b24      	ldr	r3, [pc, #144]	; (8011bc8 <vPortFree+0xb8>)
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	4013      	ands	r3, r2
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d10a      	bne.n	8011b54 <vPortFree+0x44>
	__asm volatile
 8011b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b42:	f383 8811 	msr	BASEPRI, r3
 8011b46:	f3bf 8f6f 	isb	sy
 8011b4a:	f3bf 8f4f 	dsb	sy
 8011b4e:	60fb      	str	r3, [r7, #12]
}
 8011b50:	bf00      	nop
 8011b52:	e7fe      	b.n	8011b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d00a      	beq.n	8011b72 <vPortFree+0x62>
	__asm volatile
 8011b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b60:	f383 8811 	msr	BASEPRI, r3
 8011b64:	f3bf 8f6f 	isb	sy
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	60bb      	str	r3, [r7, #8]
}
 8011b6e:	bf00      	nop
 8011b70:	e7fe      	b.n	8011b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011b72:	693b      	ldr	r3, [r7, #16]
 8011b74:	685a      	ldr	r2, [r3, #4]
 8011b76:	4b14      	ldr	r3, [pc, #80]	; (8011bc8 <vPortFree+0xb8>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4013      	ands	r3, r2
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d01e      	beq.n	8011bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011b80:	693b      	ldr	r3, [r7, #16]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d11a      	bne.n	8011bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	685a      	ldr	r2, [r3, #4]
 8011b8c:	4b0e      	ldr	r3, [pc, #56]	; (8011bc8 <vPortFree+0xb8>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	43db      	mvns	r3, r3
 8011b92:	401a      	ands	r2, r3
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011b98:	f7ff f94e 	bl	8010e38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	685a      	ldr	r2, [r3, #4]
 8011ba0:	4b0a      	ldr	r3, [pc, #40]	; (8011bcc <vPortFree+0xbc>)
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	4413      	add	r3, r2
 8011ba6:	4a09      	ldr	r2, [pc, #36]	; (8011bcc <vPortFree+0xbc>)
 8011ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011baa:	6938      	ldr	r0, [r7, #16]
 8011bac:	f000 f874 	bl	8011c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011bb0:	4b07      	ldr	r3, [pc, #28]	; (8011bd0 <vPortFree+0xc0>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	4a06      	ldr	r2, [pc, #24]	; (8011bd0 <vPortFree+0xc0>)
 8011bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011bba:	f7ff f94b 	bl	8010e54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011bbe:	bf00      	nop
 8011bc0:	3718      	adds	r7, #24
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	bd80      	pop	{r7, pc}
 8011bc6:	bf00      	nop
 8011bc8:	200045e8 	.word	0x200045e8
 8011bcc:	200045d8 	.word	0x200045d8
 8011bd0:	200045e4 	.word	0x200045e4

08011bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b085      	sub	sp, #20
 8011bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011bda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8011bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011be0:	4b27      	ldr	r3, [pc, #156]	; (8011c80 <prvHeapInit+0xac>)
 8011be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f003 0307 	and.w	r3, r3, #7
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d00c      	beq.n	8011c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	3307      	adds	r3, #7
 8011bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f023 0307 	bic.w	r3, r3, #7
 8011bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011bfc:	68ba      	ldr	r2, [r7, #8]
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	1ad3      	subs	r3, r2, r3
 8011c02:	4a1f      	ldr	r2, [pc, #124]	; (8011c80 <prvHeapInit+0xac>)
 8011c04:	4413      	add	r3, r2
 8011c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011c0c:	4a1d      	ldr	r2, [pc, #116]	; (8011c84 <prvHeapInit+0xb0>)
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011c12:	4b1c      	ldr	r3, [pc, #112]	; (8011c84 <prvHeapInit+0xb0>)
 8011c14:	2200      	movs	r2, #0
 8011c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	68ba      	ldr	r2, [r7, #8]
 8011c1c:	4413      	add	r3, r2
 8011c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011c20:	2208      	movs	r2, #8
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	1a9b      	subs	r3, r3, r2
 8011c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	f023 0307 	bic.w	r3, r3, #7
 8011c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	4a15      	ldr	r2, [pc, #84]	; (8011c88 <prvHeapInit+0xb4>)
 8011c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011c36:	4b14      	ldr	r3, [pc, #80]	; (8011c88 <prvHeapInit+0xb4>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011c3e:	4b12      	ldr	r3, [pc, #72]	; (8011c88 <prvHeapInit+0xb4>)
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	2200      	movs	r2, #0
 8011c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	68fa      	ldr	r2, [r7, #12]
 8011c4e:	1ad2      	subs	r2, r2, r3
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011c54:	4b0c      	ldr	r3, [pc, #48]	; (8011c88 <prvHeapInit+0xb4>)
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c5c:	683b      	ldr	r3, [r7, #0]
 8011c5e:	685b      	ldr	r3, [r3, #4]
 8011c60:	4a0a      	ldr	r2, [pc, #40]	; (8011c8c <prvHeapInit+0xb8>)
 8011c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	4a09      	ldr	r2, [pc, #36]	; (8011c90 <prvHeapInit+0xbc>)
 8011c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011c6c:	4b09      	ldr	r3, [pc, #36]	; (8011c94 <prvHeapInit+0xc0>)
 8011c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011c72:	601a      	str	r2, [r3, #0]
}
 8011c74:	bf00      	nop
 8011c76:	3714      	adds	r7, #20
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr
 8011c80:	200009cc 	.word	0x200009cc
 8011c84:	200045cc 	.word	0x200045cc
 8011c88:	200045d4 	.word	0x200045d4
 8011c8c:	200045dc 	.word	0x200045dc
 8011c90:	200045d8 	.word	0x200045d8
 8011c94:	200045e8 	.word	0x200045e8

08011c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011c98:	b480      	push	{r7}
 8011c9a:	b085      	sub	sp, #20
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011ca0:	4b28      	ldr	r3, [pc, #160]	; (8011d44 <prvInsertBlockIntoFreeList+0xac>)
 8011ca2:	60fb      	str	r3, [r7, #12]
 8011ca4:	e002      	b.n	8011cac <prvInsertBlockIntoFreeList+0x14>
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	60fb      	str	r3, [r7, #12]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d8f7      	bhi.n	8011ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	685b      	ldr	r3, [r3, #4]
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	4413      	add	r3, r2
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	429a      	cmp	r2, r3
 8011cc6:	d108      	bne.n	8011cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	685a      	ldr	r2, [r3, #4]
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	441a      	add	r2, r3
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	68ba      	ldr	r2, [r7, #8]
 8011ce4:	441a      	add	r2, r3
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	429a      	cmp	r2, r3
 8011cec:	d118      	bne.n	8011d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	681a      	ldr	r2, [r3, #0]
 8011cf2:	4b15      	ldr	r3, [pc, #84]	; (8011d48 <prvInsertBlockIntoFreeList+0xb0>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d00d      	beq.n	8011d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	685a      	ldr	r2, [r3, #4]
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	441a      	add	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	681a      	ldr	r2, [r3, #0]
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	601a      	str	r2, [r3, #0]
 8011d14:	e008      	b.n	8011d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011d16:	4b0c      	ldr	r3, [pc, #48]	; (8011d48 <prvInsertBlockIntoFreeList+0xb0>)
 8011d18:	681a      	ldr	r2, [r3, #0]
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	601a      	str	r2, [r3, #0]
 8011d1e:	e003      	b.n	8011d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	681a      	ldr	r2, [r3, #0]
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011d28:	68fa      	ldr	r2, [r7, #12]
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d002      	beq.n	8011d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d36:	bf00      	nop
 8011d38:	3714      	adds	r7, #20
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d40:	4770      	bx	lr
 8011d42:	bf00      	nop
 8011d44:	200045cc 	.word	0x200045cc
 8011d48:	200045d4 	.word	0x200045d4

08011d4c <arm_sin_f32>:
 8011d4c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d54:	d42c      	bmi.n	8011db0 <arm_sin_f32+0x64>
 8011d56:	eddf 7a20 	vldr	s15, [pc, #128]	; 8011dd8 <arm_sin_f32+0x8c>
 8011d5a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011d5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011d62:	d432      	bmi.n	8011dca <arm_sin_f32+0x7e>
 8011d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d68:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8011ddc <arm_sin_f32+0x90>
 8011d6c:	4a1c      	ldr	r2, [pc, #112]	; (8011de0 <arm_sin_f32+0x94>)
 8011d6e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011d72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011d76:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011d7a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011d7e:	ee17 3a90 	vmov	r3, s15
 8011d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011d86:	ee07 3a90 	vmov	s15, r3
 8011d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011d8e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8011d92:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011d96:	edd1 6a01 	vldr	s13, [r1, #4]
 8011d9a:	ed91 0a00 	vldr	s0, [r1]
 8011d9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011da2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011da6:	ee27 0a00 	vmul.f32	s0, s14, s0
 8011daa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011dae:	4770      	bx	lr
 8011db0:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8011de4 <arm_sin_f32+0x98>
 8011db4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dbc:	da0b      	bge.n	8011dd6 <arm_sin_f32+0x8a>
 8011dbe:	eddf 7a06 	vldr	s15, [pc, #24]	; 8011dd8 <arm_sin_f32+0x8c>
 8011dc2:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011dc6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011dca:	ee17 3a90 	vmov	r3, s15
 8011dce:	3b01      	subs	r3, #1
 8011dd0:	ee07 3a90 	vmov	s15, r3
 8011dd4:	e7c6      	b.n	8011d64 <arm_sin_f32+0x18>
 8011dd6:	4770      	bx	lr
 8011dd8:	3e22f983 	.word	0x3e22f983
 8011ddc:	44000000 	.word	0x44000000
 8011de0:	080155d4 	.word	0x080155d4
 8011de4:	b44c02cd 	.word	0xb44c02cd

08011de8 <arm_cos_f32>:
 8011de8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8011e5c <arm_cos_f32+0x74>
 8011dec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011df0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8011df4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011df8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e00:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011e04:	d504      	bpl.n	8011e10 <arm_cos_f32+0x28>
 8011e06:	ee17 3a90 	vmov	r3, s15
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	ee07 3a90 	vmov	s15, r3
 8011e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011e14:	eddf 6a12 	vldr	s13, [pc, #72]	; 8011e60 <arm_cos_f32+0x78>
 8011e18:	4a12      	ldr	r2, [pc, #72]	; (8011e64 <arm_cos_f32+0x7c>)
 8011e1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011e1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011e22:	ee20 0a26 	vmul.f32	s0, s0, s13
 8011e26:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8011e2a:	ee17 3a90 	vmov	r3, s15
 8011e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e32:	ee07 3a90 	vmov	s15, r3
 8011e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011e3a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8011e3e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011e42:	edd1 6a01 	vldr	s13, [r1, #4]
 8011e46:	ed91 0a00 	vldr	s0, [r1]
 8011e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011e4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011e52:	ee27 0a00 	vmul.f32	s0, s14, s0
 8011e56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011e5a:	4770      	bx	lr
 8011e5c:	3e22f983 	.word	0x3e22f983
 8011e60:	44000000 	.word	0x44000000
 8011e64:	080155d4 	.word	0x080155d4

08011e68 <__assert_func>:
 8011e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e6a:	4614      	mov	r4, r2
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b09      	ldr	r3, [pc, #36]	; (8011e94 <__assert_func+0x2c>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	4605      	mov	r5, r0
 8011e74:	68d8      	ldr	r0, [r3, #12]
 8011e76:	b14c      	cbz	r4, 8011e8c <__assert_func+0x24>
 8011e78:	4b07      	ldr	r3, [pc, #28]	; (8011e98 <__assert_func+0x30>)
 8011e7a:	9100      	str	r1, [sp, #0]
 8011e7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e80:	4906      	ldr	r1, [pc, #24]	; (8011e9c <__assert_func+0x34>)
 8011e82:	462b      	mov	r3, r5
 8011e84:	f000 f814 	bl	8011eb0 <fiprintf>
 8011e88:	f000 fee2 	bl	8012c50 <abort>
 8011e8c:	4b04      	ldr	r3, [pc, #16]	; (8011ea0 <__assert_func+0x38>)
 8011e8e:	461c      	mov	r4, r3
 8011e90:	e7f3      	b.n	8011e7a <__assert_func+0x12>
 8011e92:	bf00      	nop
 8011e94:	200002a4 	.word	0x200002a4
 8011e98:	08015dd8 	.word	0x08015dd8
 8011e9c:	08015de5 	.word	0x08015de5
 8011ea0:	08015e13 	.word	0x08015e13

08011ea4 <__errno>:
 8011ea4:	4b01      	ldr	r3, [pc, #4]	; (8011eac <__errno+0x8>)
 8011ea6:	6818      	ldr	r0, [r3, #0]
 8011ea8:	4770      	bx	lr
 8011eaa:	bf00      	nop
 8011eac:	200002a4 	.word	0x200002a4

08011eb0 <fiprintf>:
 8011eb0:	b40e      	push	{r1, r2, r3}
 8011eb2:	b503      	push	{r0, r1, lr}
 8011eb4:	4601      	mov	r1, r0
 8011eb6:	ab03      	add	r3, sp, #12
 8011eb8:	4805      	ldr	r0, [pc, #20]	; (8011ed0 <fiprintf+0x20>)
 8011eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ebe:	6800      	ldr	r0, [r0, #0]
 8011ec0:	9301      	str	r3, [sp, #4]
 8011ec2:	f000 f86b 	bl	8011f9c <_vfiprintf_r>
 8011ec6:	b002      	add	sp, #8
 8011ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ecc:	b003      	add	sp, #12
 8011ece:	4770      	bx	lr
 8011ed0:	200002a4 	.word	0x200002a4

08011ed4 <__libc_init_array>:
 8011ed4:	b570      	push	{r4, r5, r6, lr}
 8011ed6:	4d0d      	ldr	r5, [pc, #52]	; (8011f0c <__libc_init_array+0x38>)
 8011ed8:	4c0d      	ldr	r4, [pc, #52]	; (8011f10 <__libc_init_array+0x3c>)
 8011eda:	1b64      	subs	r4, r4, r5
 8011edc:	10a4      	asrs	r4, r4, #2
 8011ede:	2600      	movs	r6, #0
 8011ee0:	42a6      	cmp	r6, r4
 8011ee2:	d109      	bne.n	8011ef8 <__libc_init_array+0x24>
 8011ee4:	4d0b      	ldr	r5, [pc, #44]	; (8011f14 <__libc_init_array+0x40>)
 8011ee6:	4c0c      	ldr	r4, [pc, #48]	; (8011f18 <__libc_init_array+0x44>)
 8011ee8:	f003 fa7a 	bl	80153e0 <_init>
 8011eec:	1b64      	subs	r4, r4, r5
 8011eee:	10a4      	asrs	r4, r4, #2
 8011ef0:	2600      	movs	r6, #0
 8011ef2:	42a6      	cmp	r6, r4
 8011ef4:	d105      	bne.n	8011f02 <__libc_init_array+0x2e>
 8011ef6:	bd70      	pop	{r4, r5, r6, pc}
 8011ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8011efc:	4798      	blx	r3
 8011efe:	3601      	adds	r6, #1
 8011f00:	e7ee      	b.n	8011ee0 <__libc_init_array+0xc>
 8011f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f06:	4798      	blx	r3
 8011f08:	3601      	adds	r6, #1
 8011f0a:	e7f2      	b.n	8011ef2 <__libc_init_array+0x1e>
 8011f0c:	08016238 	.word	0x08016238
 8011f10:	08016238 	.word	0x08016238
 8011f14:	08016238 	.word	0x08016238
 8011f18:	0801623c 	.word	0x0801623c

08011f1c <memcpy>:
 8011f1c:	440a      	add	r2, r1
 8011f1e:	4291      	cmp	r1, r2
 8011f20:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f24:	d100      	bne.n	8011f28 <memcpy+0xc>
 8011f26:	4770      	bx	lr
 8011f28:	b510      	push	{r4, lr}
 8011f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f32:	4291      	cmp	r1, r2
 8011f34:	d1f9      	bne.n	8011f2a <memcpy+0xe>
 8011f36:	bd10      	pop	{r4, pc}

08011f38 <memset>:
 8011f38:	4402      	add	r2, r0
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	4293      	cmp	r3, r2
 8011f3e:	d100      	bne.n	8011f42 <memset+0xa>
 8011f40:	4770      	bx	lr
 8011f42:	f803 1b01 	strb.w	r1, [r3], #1
 8011f46:	e7f9      	b.n	8011f3c <memset+0x4>

08011f48 <__sfputc_r>:
 8011f48:	6893      	ldr	r3, [r2, #8]
 8011f4a:	3b01      	subs	r3, #1
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	b410      	push	{r4}
 8011f50:	6093      	str	r3, [r2, #8]
 8011f52:	da08      	bge.n	8011f66 <__sfputc_r+0x1e>
 8011f54:	6994      	ldr	r4, [r2, #24]
 8011f56:	42a3      	cmp	r3, r4
 8011f58:	db01      	blt.n	8011f5e <__sfputc_r+0x16>
 8011f5a:	290a      	cmp	r1, #10
 8011f5c:	d103      	bne.n	8011f66 <__sfputc_r+0x1e>
 8011f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f62:	f000 bdb5 	b.w	8012ad0 <__swbuf_r>
 8011f66:	6813      	ldr	r3, [r2, #0]
 8011f68:	1c58      	adds	r0, r3, #1
 8011f6a:	6010      	str	r0, [r2, #0]
 8011f6c:	7019      	strb	r1, [r3, #0]
 8011f6e:	4608      	mov	r0, r1
 8011f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f74:	4770      	bx	lr

08011f76 <__sfputs_r>:
 8011f76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f78:	4606      	mov	r6, r0
 8011f7a:	460f      	mov	r7, r1
 8011f7c:	4614      	mov	r4, r2
 8011f7e:	18d5      	adds	r5, r2, r3
 8011f80:	42ac      	cmp	r4, r5
 8011f82:	d101      	bne.n	8011f88 <__sfputs_r+0x12>
 8011f84:	2000      	movs	r0, #0
 8011f86:	e007      	b.n	8011f98 <__sfputs_r+0x22>
 8011f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f8c:	463a      	mov	r2, r7
 8011f8e:	4630      	mov	r0, r6
 8011f90:	f7ff ffda 	bl	8011f48 <__sfputc_r>
 8011f94:	1c43      	adds	r3, r0, #1
 8011f96:	d1f3      	bne.n	8011f80 <__sfputs_r+0xa>
 8011f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f9c <_vfiprintf_r>:
 8011f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa0:	460d      	mov	r5, r1
 8011fa2:	b09d      	sub	sp, #116	; 0x74
 8011fa4:	4614      	mov	r4, r2
 8011fa6:	4698      	mov	r8, r3
 8011fa8:	4606      	mov	r6, r0
 8011faa:	b118      	cbz	r0, 8011fb4 <_vfiprintf_r+0x18>
 8011fac:	6983      	ldr	r3, [r0, #24]
 8011fae:	b90b      	cbnz	r3, 8011fb4 <_vfiprintf_r+0x18>
 8011fb0:	f001 fde8 	bl	8013b84 <__sinit>
 8011fb4:	4b89      	ldr	r3, [pc, #548]	; (80121dc <_vfiprintf_r+0x240>)
 8011fb6:	429d      	cmp	r5, r3
 8011fb8:	d11b      	bne.n	8011ff2 <_vfiprintf_r+0x56>
 8011fba:	6875      	ldr	r5, [r6, #4]
 8011fbc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fbe:	07d9      	lsls	r1, r3, #31
 8011fc0:	d405      	bmi.n	8011fce <_vfiprintf_r+0x32>
 8011fc2:	89ab      	ldrh	r3, [r5, #12]
 8011fc4:	059a      	lsls	r2, r3, #22
 8011fc6:	d402      	bmi.n	8011fce <_vfiprintf_r+0x32>
 8011fc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fca:	f001 fe7e 	bl	8013cca <__retarget_lock_acquire_recursive>
 8011fce:	89ab      	ldrh	r3, [r5, #12]
 8011fd0:	071b      	lsls	r3, r3, #28
 8011fd2:	d501      	bpl.n	8011fd8 <_vfiprintf_r+0x3c>
 8011fd4:	692b      	ldr	r3, [r5, #16]
 8011fd6:	b9eb      	cbnz	r3, 8012014 <_vfiprintf_r+0x78>
 8011fd8:	4629      	mov	r1, r5
 8011fda:	4630      	mov	r0, r6
 8011fdc:	f000 fdca 	bl	8012b74 <__swsetup_r>
 8011fe0:	b1c0      	cbz	r0, 8012014 <_vfiprintf_r+0x78>
 8011fe2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011fe4:	07dc      	lsls	r4, r3, #31
 8011fe6:	d50e      	bpl.n	8012006 <_vfiprintf_r+0x6a>
 8011fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fec:	b01d      	add	sp, #116	; 0x74
 8011fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff2:	4b7b      	ldr	r3, [pc, #492]	; (80121e0 <_vfiprintf_r+0x244>)
 8011ff4:	429d      	cmp	r5, r3
 8011ff6:	d101      	bne.n	8011ffc <_vfiprintf_r+0x60>
 8011ff8:	68b5      	ldr	r5, [r6, #8]
 8011ffa:	e7df      	b.n	8011fbc <_vfiprintf_r+0x20>
 8011ffc:	4b79      	ldr	r3, [pc, #484]	; (80121e4 <_vfiprintf_r+0x248>)
 8011ffe:	429d      	cmp	r5, r3
 8012000:	bf08      	it	eq
 8012002:	68f5      	ldreq	r5, [r6, #12]
 8012004:	e7da      	b.n	8011fbc <_vfiprintf_r+0x20>
 8012006:	89ab      	ldrh	r3, [r5, #12]
 8012008:	0598      	lsls	r0, r3, #22
 801200a:	d4ed      	bmi.n	8011fe8 <_vfiprintf_r+0x4c>
 801200c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801200e:	f001 fe5d 	bl	8013ccc <__retarget_lock_release_recursive>
 8012012:	e7e9      	b.n	8011fe8 <_vfiprintf_r+0x4c>
 8012014:	2300      	movs	r3, #0
 8012016:	9309      	str	r3, [sp, #36]	; 0x24
 8012018:	2320      	movs	r3, #32
 801201a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801201e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012022:	2330      	movs	r3, #48	; 0x30
 8012024:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80121e8 <_vfiprintf_r+0x24c>
 8012028:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801202c:	f04f 0901 	mov.w	r9, #1
 8012030:	4623      	mov	r3, r4
 8012032:	469a      	mov	sl, r3
 8012034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012038:	b10a      	cbz	r2, 801203e <_vfiprintf_r+0xa2>
 801203a:	2a25      	cmp	r2, #37	; 0x25
 801203c:	d1f9      	bne.n	8012032 <_vfiprintf_r+0x96>
 801203e:	ebba 0b04 	subs.w	fp, sl, r4
 8012042:	d00b      	beq.n	801205c <_vfiprintf_r+0xc0>
 8012044:	465b      	mov	r3, fp
 8012046:	4622      	mov	r2, r4
 8012048:	4629      	mov	r1, r5
 801204a:	4630      	mov	r0, r6
 801204c:	f7ff ff93 	bl	8011f76 <__sfputs_r>
 8012050:	3001      	adds	r0, #1
 8012052:	f000 80aa 	beq.w	80121aa <_vfiprintf_r+0x20e>
 8012056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012058:	445a      	add	r2, fp
 801205a:	9209      	str	r2, [sp, #36]	; 0x24
 801205c:	f89a 3000 	ldrb.w	r3, [sl]
 8012060:	2b00      	cmp	r3, #0
 8012062:	f000 80a2 	beq.w	80121aa <_vfiprintf_r+0x20e>
 8012066:	2300      	movs	r3, #0
 8012068:	f04f 32ff 	mov.w	r2, #4294967295
 801206c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012070:	f10a 0a01 	add.w	sl, sl, #1
 8012074:	9304      	str	r3, [sp, #16]
 8012076:	9307      	str	r3, [sp, #28]
 8012078:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801207c:	931a      	str	r3, [sp, #104]	; 0x68
 801207e:	4654      	mov	r4, sl
 8012080:	2205      	movs	r2, #5
 8012082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012086:	4858      	ldr	r0, [pc, #352]	; (80121e8 <_vfiprintf_r+0x24c>)
 8012088:	f7ee f8aa 	bl	80001e0 <memchr>
 801208c:	9a04      	ldr	r2, [sp, #16]
 801208e:	b9d8      	cbnz	r0, 80120c8 <_vfiprintf_r+0x12c>
 8012090:	06d1      	lsls	r1, r2, #27
 8012092:	bf44      	itt	mi
 8012094:	2320      	movmi	r3, #32
 8012096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801209a:	0713      	lsls	r3, r2, #28
 801209c:	bf44      	itt	mi
 801209e:	232b      	movmi	r3, #43	; 0x2b
 80120a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120a4:	f89a 3000 	ldrb.w	r3, [sl]
 80120a8:	2b2a      	cmp	r3, #42	; 0x2a
 80120aa:	d015      	beq.n	80120d8 <_vfiprintf_r+0x13c>
 80120ac:	9a07      	ldr	r2, [sp, #28]
 80120ae:	4654      	mov	r4, sl
 80120b0:	2000      	movs	r0, #0
 80120b2:	f04f 0c0a 	mov.w	ip, #10
 80120b6:	4621      	mov	r1, r4
 80120b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80120bc:	3b30      	subs	r3, #48	; 0x30
 80120be:	2b09      	cmp	r3, #9
 80120c0:	d94e      	bls.n	8012160 <_vfiprintf_r+0x1c4>
 80120c2:	b1b0      	cbz	r0, 80120f2 <_vfiprintf_r+0x156>
 80120c4:	9207      	str	r2, [sp, #28]
 80120c6:	e014      	b.n	80120f2 <_vfiprintf_r+0x156>
 80120c8:	eba0 0308 	sub.w	r3, r0, r8
 80120cc:	fa09 f303 	lsl.w	r3, r9, r3
 80120d0:	4313      	orrs	r3, r2
 80120d2:	9304      	str	r3, [sp, #16]
 80120d4:	46a2      	mov	sl, r4
 80120d6:	e7d2      	b.n	801207e <_vfiprintf_r+0xe2>
 80120d8:	9b03      	ldr	r3, [sp, #12]
 80120da:	1d19      	adds	r1, r3, #4
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	9103      	str	r1, [sp, #12]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	bfbb      	ittet	lt
 80120e4:	425b      	neglt	r3, r3
 80120e6:	f042 0202 	orrlt.w	r2, r2, #2
 80120ea:	9307      	strge	r3, [sp, #28]
 80120ec:	9307      	strlt	r3, [sp, #28]
 80120ee:	bfb8      	it	lt
 80120f0:	9204      	strlt	r2, [sp, #16]
 80120f2:	7823      	ldrb	r3, [r4, #0]
 80120f4:	2b2e      	cmp	r3, #46	; 0x2e
 80120f6:	d10c      	bne.n	8012112 <_vfiprintf_r+0x176>
 80120f8:	7863      	ldrb	r3, [r4, #1]
 80120fa:	2b2a      	cmp	r3, #42	; 0x2a
 80120fc:	d135      	bne.n	801216a <_vfiprintf_r+0x1ce>
 80120fe:	9b03      	ldr	r3, [sp, #12]
 8012100:	1d1a      	adds	r2, r3, #4
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	9203      	str	r2, [sp, #12]
 8012106:	2b00      	cmp	r3, #0
 8012108:	bfb8      	it	lt
 801210a:	f04f 33ff 	movlt.w	r3, #4294967295
 801210e:	3402      	adds	r4, #2
 8012110:	9305      	str	r3, [sp, #20]
 8012112:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80121f8 <_vfiprintf_r+0x25c>
 8012116:	7821      	ldrb	r1, [r4, #0]
 8012118:	2203      	movs	r2, #3
 801211a:	4650      	mov	r0, sl
 801211c:	f7ee f860 	bl	80001e0 <memchr>
 8012120:	b140      	cbz	r0, 8012134 <_vfiprintf_r+0x198>
 8012122:	2340      	movs	r3, #64	; 0x40
 8012124:	eba0 000a 	sub.w	r0, r0, sl
 8012128:	fa03 f000 	lsl.w	r0, r3, r0
 801212c:	9b04      	ldr	r3, [sp, #16]
 801212e:	4303      	orrs	r3, r0
 8012130:	3401      	adds	r4, #1
 8012132:	9304      	str	r3, [sp, #16]
 8012134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012138:	482c      	ldr	r0, [pc, #176]	; (80121ec <_vfiprintf_r+0x250>)
 801213a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801213e:	2206      	movs	r2, #6
 8012140:	f7ee f84e 	bl	80001e0 <memchr>
 8012144:	2800      	cmp	r0, #0
 8012146:	d03f      	beq.n	80121c8 <_vfiprintf_r+0x22c>
 8012148:	4b29      	ldr	r3, [pc, #164]	; (80121f0 <_vfiprintf_r+0x254>)
 801214a:	bb1b      	cbnz	r3, 8012194 <_vfiprintf_r+0x1f8>
 801214c:	9b03      	ldr	r3, [sp, #12]
 801214e:	3307      	adds	r3, #7
 8012150:	f023 0307 	bic.w	r3, r3, #7
 8012154:	3308      	adds	r3, #8
 8012156:	9303      	str	r3, [sp, #12]
 8012158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801215a:	443b      	add	r3, r7
 801215c:	9309      	str	r3, [sp, #36]	; 0x24
 801215e:	e767      	b.n	8012030 <_vfiprintf_r+0x94>
 8012160:	fb0c 3202 	mla	r2, ip, r2, r3
 8012164:	460c      	mov	r4, r1
 8012166:	2001      	movs	r0, #1
 8012168:	e7a5      	b.n	80120b6 <_vfiprintf_r+0x11a>
 801216a:	2300      	movs	r3, #0
 801216c:	3401      	adds	r4, #1
 801216e:	9305      	str	r3, [sp, #20]
 8012170:	4619      	mov	r1, r3
 8012172:	f04f 0c0a 	mov.w	ip, #10
 8012176:	4620      	mov	r0, r4
 8012178:	f810 2b01 	ldrb.w	r2, [r0], #1
 801217c:	3a30      	subs	r2, #48	; 0x30
 801217e:	2a09      	cmp	r2, #9
 8012180:	d903      	bls.n	801218a <_vfiprintf_r+0x1ee>
 8012182:	2b00      	cmp	r3, #0
 8012184:	d0c5      	beq.n	8012112 <_vfiprintf_r+0x176>
 8012186:	9105      	str	r1, [sp, #20]
 8012188:	e7c3      	b.n	8012112 <_vfiprintf_r+0x176>
 801218a:	fb0c 2101 	mla	r1, ip, r1, r2
 801218e:	4604      	mov	r4, r0
 8012190:	2301      	movs	r3, #1
 8012192:	e7f0      	b.n	8012176 <_vfiprintf_r+0x1da>
 8012194:	ab03      	add	r3, sp, #12
 8012196:	9300      	str	r3, [sp, #0]
 8012198:	462a      	mov	r2, r5
 801219a:	4b16      	ldr	r3, [pc, #88]	; (80121f4 <_vfiprintf_r+0x258>)
 801219c:	a904      	add	r1, sp, #16
 801219e:	4630      	mov	r0, r6
 80121a0:	f000 f8cc 	bl	801233c <_printf_float>
 80121a4:	4607      	mov	r7, r0
 80121a6:	1c78      	adds	r0, r7, #1
 80121a8:	d1d6      	bne.n	8012158 <_vfiprintf_r+0x1bc>
 80121aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80121ac:	07d9      	lsls	r1, r3, #31
 80121ae:	d405      	bmi.n	80121bc <_vfiprintf_r+0x220>
 80121b0:	89ab      	ldrh	r3, [r5, #12]
 80121b2:	059a      	lsls	r2, r3, #22
 80121b4:	d402      	bmi.n	80121bc <_vfiprintf_r+0x220>
 80121b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80121b8:	f001 fd88 	bl	8013ccc <__retarget_lock_release_recursive>
 80121bc:	89ab      	ldrh	r3, [r5, #12]
 80121be:	065b      	lsls	r3, r3, #25
 80121c0:	f53f af12 	bmi.w	8011fe8 <_vfiprintf_r+0x4c>
 80121c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80121c6:	e711      	b.n	8011fec <_vfiprintf_r+0x50>
 80121c8:	ab03      	add	r3, sp, #12
 80121ca:	9300      	str	r3, [sp, #0]
 80121cc:	462a      	mov	r2, r5
 80121ce:	4b09      	ldr	r3, [pc, #36]	; (80121f4 <_vfiprintf_r+0x258>)
 80121d0:	a904      	add	r1, sp, #16
 80121d2:	4630      	mov	r0, r6
 80121d4:	f000 fb56 	bl	8012884 <_printf_i>
 80121d8:	e7e4      	b.n	80121a4 <_vfiprintf_r+0x208>
 80121da:	bf00      	nop
 80121dc:	08015f14 	.word	0x08015f14
 80121e0:	08015f34 	.word	0x08015f34
 80121e4:	08015ef4 	.word	0x08015ef4
 80121e8:	08015e18 	.word	0x08015e18
 80121ec:	08015e22 	.word	0x08015e22
 80121f0:	0801233d 	.word	0x0801233d
 80121f4:	08011f77 	.word	0x08011f77
 80121f8:	08015e1e 	.word	0x08015e1e

080121fc <__cvt>:
 80121fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012200:	ec55 4b10 	vmov	r4, r5, d0
 8012204:	2d00      	cmp	r5, #0
 8012206:	460e      	mov	r6, r1
 8012208:	4619      	mov	r1, r3
 801220a:	462b      	mov	r3, r5
 801220c:	bfbb      	ittet	lt
 801220e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012212:	461d      	movlt	r5, r3
 8012214:	2300      	movge	r3, #0
 8012216:	232d      	movlt	r3, #45	; 0x2d
 8012218:	700b      	strb	r3, [r1, #0]
 801221a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801221c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012220:	4691      	mov	r9, r2
 8012222:	f023 0820 	bic.w	r8, r3, #32
 8012226:	bfbc      	itt	lt
 8012228:	4622      	movlt	r2, r4
 801222a:	4614      	movlt	r4, r2
 801222c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012230:	d005      	beq.n	801223e <__cvt+0x42>
 8012232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012236:	d100      	bne.n	801223a <__cvt+0x3e>
 8012238:	3601      	adds	r6, #1
 801223a:	2102      	movs	r1, #2
 801223c:	e000      	b.n	8012240 <__cvt+0x44>
 801223e:	2103      	movs	r1, #3
 8012240:	ab03      	add	r3, sp, #12
 8012242:	9301      	str	r3, [sp, #4]
 8012244:	ab02      	add	r3, sp, #8
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	ec45 4b10 	vmov	d0, r4, r5
 801224c:	4653      	mov	r3, sl
 801224e:	4632      	mov	r2, r6
 8012250:	f000 fd92 	bl	8012d78 <_dtoa_r>
 8012254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012258:	4607      	mov	r7, r0
 801225a:	d102      	bne.n	8012262 <__cvt+0x66>
 801225c:	f019 0f01 	tst.w	r9, #1
 8012260:	d022      	beq.n	80122a8 <__cvt+0xac>
 8012262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012266:	eb07 0906 	add.w	r9, r7, r6
 801226a:	d110      	bne.n	801228e <__cvt+0x92>
 801226c:	783b      	ldrb	r3, [r7, #0]
 801226e:	2b30      	cmp	r3, #48	; 0x30
 8012270:	d10a      	bne.n	8012288 <__cvt+0x8c>
 8012272:	2200      	movs	r2, #0
 8012274:	2300      	movs	r3, #0
 8012276:	4620      	mov	r0, r4
 8012278:	4629      	mov	r1, r5
 801227a:	f7ee fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 801227e:	b918      	cbnz	r0, 8012288 <__cvt+0x8c>
 8012280:	f1c6 0601 	rsb	r6, r6, #1
 8012284:	f8ca 6000 	str.w	r6, [sl]
 8012288:	f8da 3000 	ldr.w	r3, [sl]
 801228c:	4499      	add	r9, r3
 801228e:	2200      	movs	r2, #0
 8012290:	2300      	movs	r3, #0
 8012292:	4620      	mov	r0, r4
 8012294:	4629      	mov	r1, r5
 8012296:	f7ee fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 801229a:	b108      	cbz	r0, 80122a0 <__cvt+0xa4>
 801229c:	f8cd 900c 	str.w	r9, [sp, #12]
 80122a0:	2230      	movs	r2, #48	; 0x30
 80122a2:	9b03      	ldr	r3, [sp, #12]
 80122a4:	454b      	cmp	r3, r9
 80122a6:	d307      	bcc.n	80122b8 <__cvt+0xbc>
 80122a8:	9b03      	ldr	r3, [sp, #12]
 80122aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122ac:	1bdb      	subs	r3, r3, r7
 80122ae:	4638      	mov	r0, r7
 80122b0:	6013      	str	r3, [r2, #0]
 80122b2:	b004      	add	sp, #16
 80122b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122b8:	1c59      	adds	r1, r3, #1
 80122ba:	9103      	str	r1, [sp, #12]
 80122bc:	701a      	strb	r2, [r3, #0]
 80122be:	e7f0      	b.n	80122a2 <__cvt+0xa6>

080122c0 <__exponent>:
 80122c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122c2:	4603      	mov	r3, r0
 80122c4:	2900      	cmp	r1, #0
 80122c6:	bfb8      	it	lt
 80122c8:	4249      	neglt	r1, r1
 80122ca:	f803 2b02 	strb.w	r2, [r3], #2
 80122ce:	bfb4      	ite	lt
 80122d0:	222d      	movlt	r2, #45	; 0x2d
 80122d2:	222b      	movge	r2, #43	; 0x2b
 80122d4:	2909      	cmp	r1, #9
 80122d6:	7042      	strb	r2, [r0, #1]
 80122d8:	dd2a      	ble.n	8012330 <__exponent+0x70>
 80122da:	f10d 0407 	add.w	r4, sp, #7
 80122de:	46a4      	mov	ip, r4
 80122e0:	270a      	movs	r7, #10
 80122e2:	46a6      	mov	lr, r4
 80122e4:	460a      	mov	r2, r1
 80122e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80122ea:	fb07 1516 	mls	r5, r7, r6, r1
 80122ee:	3530      	adds	r5, #48	; 0x30
 80122f0:	2a63      	cmp	r2, #99	; 0x63
 80122f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80122f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80122fa:	4631      	mov	r1, r6
 80122fc:	dcf1      	bgt.n	80122e2 <__exponent+0x22>
 80122fe:	3130      	adds	r1, #48	; 0x30
 8012300:	f1ae 0502 	sub.w	r5, lr, #2
 8012304:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012308:	1c44      	adds	r4, r0, #1
 801230a:	4629      	mov	r1, r5
 801230c:	4561      	cmp	r1, ip
 801230e:	d30a      	bcc.n	8012326 <__exponent+0x66>
 8012310:	f10d 0209 	add.w	r2, sp, #9
 8012314:	eba2 020e 	sub.w	r2, r2, lr
 8012318:	4565      	cmp	r5, ip
 801231a:	bf88      	it	hi
 801231c:	2200      	movhi	r2, #0
 801231e:	4413      	add	r3, r2
 8012320:	1a18      	subs	r0, r3, r0
 8012322:	b003      	add	sp, #12
 8012324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012326:	f811 2b01 	ldrb.w	r2, [r1], #1
 801232a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801232e:	e7ed      	b.n	801230c <__exponent+0x4c>
 8012330:	2330      	movs	r3, #48	; 0x30
 8012332:	3130      	adds	r1, #48	; 0x30
 8012334:	7083      	strb	r3, [r0, #2]
 8012336:	70c1      	strb	r1, [r0, #3]
 8012338:	1d03      	adds	r3, r0, #4
 801233a:	e7f1      	b.n	8012320 <__exponent+0x60>

0801233c <_printf_float>:
 801233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012340:	ed2d 8b02 	vpush	{d8}
 8012344:	b08d      	sub	sp, #52	; 0x34
 8012346:	460c      	mov	r4, r1
 8012348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801234c:	4616      	mov	r6, r2
 801234e:	461f      	mov	r7, r3
 8012350:	4605      	mov	r5, r0
 8012352:	f001 fcb5 	bl	8013cc0 <_localeconv_r>
 8012356:	f8d0 a000 	ldr.w	sl, [r0]
 801235a:	4650      	mov	r0, sl
 801235c:	f7ed ff38 	bl	80001d0 <strlen>
 8012360:	2300      	movs	r3, #0
 8012362:	930a      	str	r3, [sp, #40]	; 0x28
 8012364:	6823      	ldr	r3, [r4, #0]
 8012366:	9305      	str	r3, [sp, #20]
 8012368:	f8d8 3000 	ldr.w	r3, [r8]
 801236c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012370:	3307      	adds	r3, #7
 8012372:	f023 0307 	bic.w	r3, r3, #7
 8012376:	f103 0208 	add.w	r2, r3, #8
 801237a:	f8c8 2000 	str.w	r2, [r8]
 801237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012386:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801238a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801238e:	9307      	str	r3, [sp, #28]
 8012390:	f8cd 8018 	str.w	r8, [sp, #24]
 8012394:	ee08 0a10 	vmov	s16, r0
 8012398:	4b9f      	ldr	r3, [pc, #636]	; (8012618 <_printf_float+0x2dc>)
 801239a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801239e:	f04f 32ff 	mov.w	r2, #4294967295
 80123a2:	f7ee fbc3 	bl	8000b2c <__aeabi_dcmpun>
 80123a6:	bb88      	cbnz	r0, 801240c <_printf_float+0xd0>
 80123a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80123ac:	4b9a      	ldr	r3, [pc, #616]	; (8012618 <_printf_float+0x2dc>)
 80123ae:	f04f 32ff 	mov.w	r2, #4294967295
 80123b2:	f7ee fb9d 	bl	8000af0 <__aeabi_dcmple>
 80123b6:	bb48      	cbnz	r0, 801240c <_printf_float+0xd0>
 80123b8:	2200      	movs	r2, #0
 80123ba:	2300      	movs	r3, #0
 80123bc:	4640      	mov	r0, r8
 80123be:	4649      	mov	r1, r9
 80123c0:	f7ee fb8c 	bl	8000adc <__aeabi_dcmplt>
 80123c4:	b110      	cbz	r0, 80123cc <_printf_float+0x90>
 80123c6:	232d      	movs	r3, #45	; 0x2d
 80123c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123cc:	4b93      	ldr	r3, [pc, #588]	; (801261c <_printf_float+0x2e0>)
 80123ce:	4894      	ldr	r0, [pc, #592]	; (8012620 <_printf_float+0x2e4>)
 80123d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80123d4:	bf94      	ite	ls
 80123d6:	4698      	movls	r8, r3
 80123d8:	4680      	movhi	r8, r0
 80123da:	2303      	movs	r3, #3
 80123dc:	6123      	str	r3, [r4, #16]
 80123de:	9b05      	ldr	r3, [sp, #20]
 80123e0:	f023 0204 	bic.w	r2, r3, #4
 80123e4:	6022      	str	r2, [r4, #0]
 80123e6:	f04f 0900 	mov.w	r9, #0
 80123ea:	9700      	str	r7, [sp, #0]
 80123ec:	4633      	mov	r3, r6
 80123ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80123f0:	4621      	mov	r1, r4
 80123f2:	4628      	mov	r0, r5
 80123f4:	f000 f9d8 	bl	80127a8 <_printf_common>
 80123f8:	3001      	adds	r0, #1
 80123fa:	f040 8090 	bne.w	801251e <_printf_float+0x1e2>
 80123fe:	f04f 30ff 	mov.w	r0, #4294967295
 8012402:	b00d      	add	sp, #52	; 0x34
 8012404:	ecbd 8b02 	vpop	{d8}
 8012408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801240c:	4642      	mov	r2, r8
 801240e:	464b      	mov	r3, r9
 8012410:	4640      	mov	r0, r8
 8012412:	4649      	mov	r1, r9
 8012414:	f7ee fb8a 	bl	8000b2c <__aeabi_dcmpun>
 8012418:	b140      	cbz	r0, 801242c <_printf_float+0xf0>
 801241a:	464b      	mov	r3, r9
 801241c:	2b00      	cmp	r3, #0
 801241e:	bfbc      	itt	lt
 8012420:	232d      	movlt	r3, #45	; 0x2d
 8012422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012426:	487f      	ldr	r0, [pc, #508]	; (8012624 <_printf_float+0x2e8>)
 8012428:	4b7f      	ldr	r3, [pc, #508]	; (8012628 <_printf_float+0x2ec>)
 801242a:	e7d1      	b.n	80123d0 <_printf_float+0x94>
 801242c:	6863      	ldr	r3, [r4, #4]
 801242e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012432:	9206      	str	r2, [sp, #24]
 8012434:	1c5a      	adds	r2, r3, #1
 8012436:	d13f      	bne.n	80124b8 <_printf_float+0x17c>
 8012438:	2306      	movs	r3, #6
 801243a:	6063      	str	r3, [r4, #4]
 801243c:	9b05      	ldr	r3, [sp, #20]
 801243e:	6861      	ldr	r1, [r4, #4]
 8012440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012444:	2300      	movs	r3, #0
 8012446:	9303      	str	r3, [sp, #12]
 8012448:	ab0a      	add	r3, sp, #40	; 0x28
 801244a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801244e:	ab09      	add	r3, sp, #36	; 0x24
 8012450:	ec49 8b10 	vmov	d0, r8, r9
 8012454:	9300      	str	r3, [sp, #0]
 8012456:	6022      	str	r2, [r4, #0]
 8012458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801245c:	4628      	mov	r0, r5
 801245e:	f7ff fecd 	bl	80121fc <__cvt>
 8012462:	9b06      	ldr	r3, [sp, #24]
 8012464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012466:	2b47      	cmp	r3, #71	; 0x47
 8012468:	4680      	mov	r8, r0
 801246a:	d108      	bne.n	801247e <_printf_float+0x142>
 801246c:	1cc8      	adds	r0, r1, #3
 801246e:	db02      	blt.n	8012476 <_printf_float+0x13a>
 8012470:	6863      	ldr	r3, [r4, #4]
 8012472:	4299      	cmp	r1, r3
 8012474:	dd41      	ble.n	80124fa <_printf_float+0x1be>
 8012476:	f1ab 0b02 	sub.w	fp, fp, #2
 801247a:	fa5f fb8b 	uxtb.w	fp, fp
 801247e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012482:	d820      	bhi.n	80124c6 <_printf_float+0x18a>
 8012484:	3901      	subs	r1, #1
 8012486:	465a      	mov	r2, fp
 8012488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801248c:	9109      	str	r1, [sp, #36]	; 0x24
 801248e:	f7ff ff17 	bl	80122c0 <__exponent>
 8012492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012494:	1813      	adds	r3, r2, r0
 8012496:	2a01      	cmp	r2, #1
 8012498:	4681      	mov	r9, r0
 801249a:	6123      	str	r3, [r4, #16]
 801249c:	dc02      	bgt.n	80124a4 <_printf_float+0x168>
 801249e:	6822      	ldr	r2, [r4, #0]
 80124a0:	07d2      	lsls	r2, r2, #31
 80124a2:	d501      	bpl.n	80124a8 <_printf_float+0x16c>
 80124a4:	3301      	adds	r3, #1
 80124a6:	6123      	str	r3, [r4, #16]
 80124a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d09c      	beq.n	80123ea <_printf_float+0xae>
 80124b0:	232d      	movs	r3, #45	; 0x2d
 80124b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124b6:	e798      	b.n	80123ea <_printf_float+0xae>
 80124b8:	9a06      	ldr	r2, [sp, #24]
 80124ba:	2a47      	cmp	r2, #71	; 0x47
 80124bc:	d1be      	bne.n	801243c <_printf_float+0x100>
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d1bc      	bne.n	801243c <_printf_float+0x100>
 80124c2:	2301      	movs	r3, #1
 80124c4:	e7b9      	b.n	801243a <_printf_float+0xfe>
 80124c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80124ca:	d118      	bne.n	80124fe <_printf_float+0x1c2>
 80124cc:	2900      	cmp	r1, #0
 80124ce:	6863      	ldr	r3, [r4, #4]
 80124d0:	dd0b      	ble.n	80124ea <_printf_float+0x1ae>
 80124d2:	6121      	str	r1, [r4, #16]
 80124d4:	b913      	cbnz	r3, 80124dc <_printf_float+0x1a0>
 80124d6:	6822      	ldr	r2, [r4, #0]
 80124d8:	07d0      	lsls	r0, r2, #31
 80124da:	d502      	bpl.n	80124e2 <_printf_float+0x1a6>
 80124dc:	3301      	adds	r3, #1
 80124de:	440b      	add	r3, r1
 80124e0:	6123      	str	r3, [r4, #16]
 80124e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80124e4:	f04f 0900 	mov.w	r9, #0
 80124e8:	e7de      	b.n	80124a8 <_printf_float+0x16c>
 80124ea:	b913      	cbnz	r3, 80124f2 <_printf_float+0x1b6>
 80124ec:	6822      	ldr	r2, [r4, #0]
 80124ee:	07d2      	lsls	r2, r2, #31
 80124f0:	d501      	bpl.n	80124f6 <_printf_float+0x1ba>
 80124f2:	3302      	adds	r3, #2
 80124f4:	e7f4      	b.n	80124e0 <_printf_float+0x1a4>
 80124f6:	2301      	movs	r3, #1
 80124f8:	e7f2      	b.n	80124e0 <_printf_float+0x1a4>
 80124fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80124fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012500:	4299      	cmp	r1, r3
 8012502:	db05      	blt.n	8012510 <_printf_float+0x1d4>
 8012504:	6823      	ldr	r3, [r4, #0]
 8012506:	6121      	str	r1, [r4, #16]
 8012508:	07d8      	lsls	r0, r3, #31
 801250a:	d5ea      	bpl.n	80124e2 <_printf_float+0x1a6>
 801250c:	1c4b      	adds	r3, r1, #1
 801250e:	e7e7      	b.n	80124e0 <_printf_float+0x1a4>
 8012510:	2900      	cmp	r1, #0
 8012512:	bfd4      	ite	le
 8012514:	f1c1 0202 	rsble	r2, r1, #2
 8012518:	2201      	movgt	r2, #1
 801251a:	4413      	add	r3, r2
 801251c:	e7e0      	b.n	80124e0 <_printf_float+0x1a4>
 801251e:	6823      	ldr	r3, [r4, #0]
 8012520:	055a      	lsls	r2, r3, #21
 8012522:	d407      	bmi.n	8012534 <_printf_float+0x1f8>
 8012524:	6923      	ldr	r3, [r4, #16]
 8012526:	4642      	mov	r2, r8
 8012528:	4631      	mov	r1, r6
 801252a:	4628      	mov	r0, r5
 801252c:	47b8      	blx	r7
 801252e:	3001      	adds	r0, #1
 8012530:	d12c      	bne.n	801258c <_printf_float+0x250>
 8012532:	e764      	b.n	80123fe <_printf_float+0xc2>
 8012534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012538:	f240 80e0 	bls.w	80126fc <_printf_float+0x3c0>
 801253c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012540:	2200      	movs	r2, #0
 8012542:	2300      	movs	r3, #0
 8012544:	f7ee fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8012548:	2800      	cmp	r0, #0
 801254a:	d034      	beq.n	80125b6 <_printf_float+0x27a>
 801254c:	4a37      	ldr	r2, [pc, #220]	; (801262c <_printf_float+0x2f0>)
 801254e:	2301      	movs	r3, #1
 8012550:	4631      	mov	r1, r6
 8012552:	4628      	mov	r0, r5
 8012554:	47b8      	blx	r7
 8012556:	3001      	adds	r0, #1
 8012558:	f43f af51 	beq.w	80123fe <_printf_float+0xc2>
 801255c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012560:	429a      	cmp	r2, r3
 8012562:	db02      	blt.n	801256a <_printf_float+0x22e>
 8012564:	6823      	ldr	r3, [r4, #0]
 8012566:	07d8      	lsls	r0, r3, #31
 8012568:	d510      	bpl.n	801258c <_printf_float+0x250>
 801256a:	ee18 3a10 	vmov	r3, s16
 801256e:	4652      	mov	r2, sl
 8012570:	4631      	mov	r1, r6
 8012572:	4628      	mov	r0, r5
 8012574:	47b8      	blx	r7
 8012576:	3001      	adds	r0, #1
 8012578:	f43f af41 	beq.w	80123fe <_printf_float+0xc2>
 801257c:	f04f 0800 	mov.w	r8, #0
 8012580:	f104 091a 	add.w	r9, r4, #26
 8012584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012586:	3b01      	subs	r3, #1
 8012588:	4543      	cmp	r3, r8
 801258a:	dc09      	bgt.n	80125a0 <_printf_float+0x264>
 801258c:	6823      	ldr	r3, [r4, #0]
 801258e:	079b      	lsls	r3, r3, #30
 8012590:	f100 8105 	bmi.w	801279e <_printf_float+0x462>
 8012594:	68e0      	ldr	r0, [r4, #12]
 8012596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012598:	4298      	cmp	r0, r3
 801259a:	bfb8      	it	lt
 801259c:	4618      	movlt	r0, r3
 801259e:	e730      	b.n	8012402 <_printf_float+0xc6>
 80125a0:	2301      	movs	r3, #1
 80125a2:	464a      	mov	r2, r9
 80125a4:	4631      	mov	r1, r6
 80125a6:	4628      	mov	r0, r5
 80125a8:	47b8      	blx	r7
 80125aa:	3001      	adds	r0, #1
 80125ac:	f43f af27 	beq.w	80123fe <_printf_float+0xc2>
 80125b0:	f108 0801 	add.w	r8, r8, #1
 80125b4:	e7e6      	b.n	8012584 <_printf_float+0x248>
 80125b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	dc39      	bgt.n	8012630 <_printf_float+0x2f4>
 80125bc:	4a1b      	ldr	r2, [pc, #108]	; (801262c <_printf_float+0x2f0>)
 80125be:	2301      	movs	r3, #1
 80125c0:	4631      	mov	r1, r6
 80125c2:	4628      	mov	r0, r5
 80125c4:	47b8      	blx	r7
 80125c6:	3001      	adds	r0, #1
 80125c8:	f43f af19 	beq.w	80123fe <_printf_float+0xc2>
 80125cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80125d0:	4313      	orrs	r3, r2
 80125d2:	d102      	bne.n	80125da <_printf_float+0x29e>
 80125d4:	6823      	ldr	r3, [r4, #0]
 80125d6:	07d9      	lsls	r1, r3, #31
 80125d8:	d5d8      	bpl.n	801258c <_printf_float+0x250>
 80125da:	ee18 3a10 	vmov	r3, s16
 80125de:	4652      	mov	r2, sl
 80125e0:	4631      	mov	r1, r6
 80125e2:	4628      	mov	r0, r5
 80125e4:	47b8      	blx	r7
 80125e6:	3001      	adds	r0, #1
 80125e8:	f43f af09 	beq.w	80123fe <_printf_float+0xc2>
 80125ec:	f04f 0900 	mov.w	r9, #0
 80125f0:	f104 0a1a 	add.w	sl, r4, #26
 80125f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f6:	425b      	negs	r3, r3
 80125f8:	454b      	cmp	r3, r9
 80125fa:	dc01      	bgt.n	8012600 <_printf_float+0x2c4>
 80125fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80125fe:	e792      	b.n	8012526 <_printf_float+0x1ea>
 8012600:	2301      	movs	r3, #1
 8012602:	4652      	mov	r2, sl
 8012604:	4631      	mov	r1, r6
 8012606:	4628      	mov	r0, r5
 8012608:	47b8      	blx	r7
 801260a:	3001      	adds	r0, #1
 801260c:	f43f aef7 	beq.w	80123fe <_printf_float+0xc2>
 8012610:	f109 0901 	add.w	r9, r9, #1
 8012614:	e7ee      	b.n	80125f4 <_printf_float+0x2b8>
 8012616:	bf00      	nop
 8012618:	7fefffff 	.word	0x7fefffff
 801261c:	08015e29 	.word	0x08015e29
 8012620:	08015e2d 	.word	0x08015e2d
 8012624:	08015e35 	.word	0x08015e35
 8012628:	08015e31 	.word	0x08015e31
 801262c:	08015e39 	.word	0x08015e39
 8012630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012634:	429a      	cmp	r2, r3
 8012636:	bfa8      	it	ge
 8012638:	461a      	movge	r2, r3
 801263a:	2a00      	cmp	r2, #0
 801263c:	4691      	mov	r9, r2
 801263e:	dc37      	bgt.n	80126b0 <_printf_float+0x374>
 8012640:	f04f 0b00 	mov.w	fp, #0
 8012644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012648:	f104 021a 	add.w	r2, r4, #26
 801264c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801264e:	9305      	str	r3, [sp, #20]
 8012650:	eba3 0309 	sub.w	r3, r3, r9
 8012654:	455b      	cmp	r3, fp
 8012656:	dc33      	bgt.n	80126c0 <_printf_float+0x384>
 8012658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801265c:	429a      	cmp	r2, r3
 801265e:	db3b      	blt.n	80126d8 <_printf_float+0x39c>
 8012660:	6823      	ldr	r3, [r4, #0]
 8012662:	07da      	lsls	r2, r3, #31
 8012664:	d438      	bmi.n	80126d8 <_printf_float+0x39c>
 8012666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012668:	9b05      	ldr	r3, [sp, #20]
 801266a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801266c:	1ad3      	subs	r3, r2, r3
 801266e:	eba2 0901 	sub.w	r9, r2, r1
 8012672:	4599      	cmp	r9, r3
 8012674:	bfa8      	it	ge
 8012676:	4699      	movge	r9, r3
 8012678:	f1b9 0f00 	cmp.w	r9, #0
 801267c:	dc35      	bgt.n	80126ea <_printf_float+0x3ae>
 801267e:	f04f 0800 	mov.w	r8, #0
 8012682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012686:	f104 0a1a 	add.w	sl, r4, #26
 801268a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801268e:	1a9b      	subs	r3, r3, r2
 8012690:	eba3 0309 	sub.w	r3, r3, r9
 8012694:	4543      	cmp	r3, r8
 8012696:	f77f af79 	ble.w	801258c <_printf_float+0x250>
 801269a:	2301      	movs	r3, #1
 801269c:	4652      	mov	r2, sl
 801269e:	4631      	mov	r1, r6
 80126a0:	4628      	mov	r0, r5
 80126a2:	47b8      	blx	r7
 80126a4:	3001      	adds	r0, #1
 80126a6:	f43f aeaa 	beq.w	80123fe <_printf_float+0xc2>
 80126aa:	f108 0801 	add.w	r8, r8, #1
 80126ae:	e7ec      	b.n	801268a <_printf_float+0x34e>
 80126b0:	4613      	mov	r3, r2
 80126b2:	4631      	mov	r1, r6
 80126b4:	4642      	mov	r2, r8
 80126b6:	4628      	mov	r0, r5
 80126b8:	47b8      	blx	r7
 80126ba:	3001      	adds	r0, #1
 80126bc:	d1c0      	bne.n	8012640 <_printf_float+0x304>
 80126be:	e69e      	b.n	80123fe <_printf_float+0xc2>
 80126c0:	2301      	movs	r3, #1
 80126c2:	4631      	mov	r1, r6
 80126c4:	4628      	mov	r0, r5
 80126c6:	9205      	str	r2, [sp, #20]
 80126c8:	47b8      	blx	r7
 80126ca:	3001      	adds	r0, #1
 80126cc:	f43f ae97 	beq.w	80123fe <_printf_float+0xc2>
 80126d0:	9a05      	ldr	r2, [sp, #20]
 80126d2:	f10b 0b01 	add.w	fp, fp, #1
 80126d6:	e7b9      	b.n	801264c <_printf_float+0x310>
 80126d8:	ee18 3a10 	vmov	r3, s16
 80126dc:	4652      	mov	r2, sl
 80126de:	4631      	mov	r1, r6
 80126e0:	4628      	mov	r0, r5
 80126e2:	47b8      	blx	r7
 80126e4:	3001      	adds	r0, #1
 80126e6:	d1be      	bne.n	8012666 <_printf_float+0x32a>
 80126e8:	e689      	b.n	80123fe <_printf_float+0xc2>
 80126ea:	9a05      	ldr	r2, [sp, #20]
 80126ec:	464b      	mov	r3, r9
 80126ee:	4442      	add	r2, r8
 80126f0:	4631      	mov	r1, r6
 80126f2:	4628      	mov	r0, r5
 80126f4:	47b8      	blx	r7
 80126f6:	3001      	adds	r0, #1
 80126f8:	d1c1      	bne.n	801267e <_printf_float+0x342>
 80126fa:	e680      	b.n	80123fe <_printf_float+0xc2>
 80126fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80126fe:	2a01      	cmp	r2, #1
 8012700:	dc01      	bgt.n	8012706 <_printf_float+0x3ca>
 8012702:	07db      	lsls	r3, r3, #31
 8012704:	d538      	bpl.n	8012778 <_printf_float+0x43c>
 8012706:	2301      	movs	r3, #1
 8012708:	4642      	mov	r2, r8
 801270a:	4631      	mov	r1, r6
 801270c:	4628      	mov	r0, r5
 801270e:	47b8      	blx	r7
 8012710:	3001      	adds	r0, #1
 8012712:	f43f ae74 	beq.w	80123fe <_printf_float+0xc2>
 8012716:	ee18 3a10 	vmov	r3, s16
 801271a:	4652      	mov	r2, sl
 801271c:	4631      	mov	r1, r6
 801271e:	4628      	mov	r0, r5
 8012720:	47b8      	blx	r7
 8012722:	3001      	adds	r0, #1
 8012724:	f43f ae6b 	beq.w	80123fe <_printf_float+0xc2>
 8012728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801272c:	2200      	movs	r2, #0
 801272e:	2300      	movs	r3, #0
 8012730:	f7ee f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8012734:	b9d8      	cbnz	r0, 801276e <_printf_float+0x432>
 8012736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012738:	f108 0201 	add.w	r2, r8, #1
 801273c:	3b01      	subs	r3, #1
 801273e:	4631      	mov	r1, r6
 8012740:	4628      	mov	r0, r5
 8012742:	47b8      	blx	r7
 8012744:	3001      	adds	r0, #1
 8012746:	d10e      	bne.n	8012766 <_printf_float+0x42a>
 8012748:	e659      	b.n	80123fe <_printf_float+0xc2>
 801274a:	2301      	movs	r3, #1
 801274c:	4652      	mov	r2, sl
 801274e:	4631      	mov	r1, r6
 8012750:	4628      	mov	r0, r5
 8012752:	47b8      	blx	r7
 8012754:	3001      	adds	r0, #1
 8012756:	f43f ae52 	beq.w	80123fe <_printf_float+0xc2>
 801275a:	f108 0801 	add.w	r8, r8, #1
 801275e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012760:	3b01      	subs	r3, #1
 8012762:	4543      	cmp	r3, r8
 8012764:	dcf1      	bgt.n	801274a <_printf_float+0x40e>
 8012766:	464b      	mov	r3, r9
 8012768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801276c:	e6dc      	b.n	8012528 <_printf_float+0x1ec>
 801276e:	f04f 0800 	mov.w	r8, #0
 8012772:	f104 0a1a 	add.w	sl, r4, #26
 8012776:	e7f2      	b.n	801275e <_printf_float+0x422>
 8012778:	2301      	movs	r3, #1
 801277a:	4642      	mov	r2, r8
 801277c:	e7df      	b.n	801273e <_printf_float+0x402>
 801277e:	2301      	movs	r3, #1
 8012780:	464a      	mov	r2, r9
 8012782:	4631      	mov	r1, r6
 8012784:	4628      	mov	r0, r5
 8012786:	47b8      	blx	r7
 8012788:	3001      	adds	r0, #1
 801278a:	f43f ae38 	beq.w	80123fe <_printf_float+0xc2>
 801278e:	f108 0801 	add.w	r8, r8, #1
 8012792:	68e3      	ldr	r3, [r4, #12]
 8012794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012796:	1a5b      	subs	r3, r3, r1
 8012798:	4543      	cmp	r3, r8
 801279a:	dcf0      	bgt.n	801277e <_printf_float+0x442>
 801279c:	e6fa      	b.n	8012594 <_printf_float+0x258>
 801279e:	f04f 0800 	mov.w	r8, #0
 80127a2:	f104 0919 	add.w	r9, r4, #25
 80127a6:	e7f4      	b.n	8012792 <_printf_float+0x456>

080127a8 <_printf_common>:
 80127a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127ac:	4616      	mov	r6, r2
 80127ae:	4699      	mov	r9, r3
 80127b0:	688a      	ldr	r2, [r1, #8]
 80127b2:	690b      	ldr	r3, [r1, #16]
 80127b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80127b8:	4293      	cmp	r3, r2
 80127ba:	bfb8      	it	lt
 80127bc:	4613      	movlt	r3, r2
 80127be:	6033      	str	r3, [r6, #0]
 80127c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80127c4:	4607      	mov	r7, r0
 80127c6:	460c      	mov	r4, r1
 80127c8:	b10a      	cbz	r2, 80127ce <_printf_common+0x26>
 80127ca:	3301      	adds	r3, #1
 80127cc:	6033      	str	r3, [r6, #0]
 80127ce:	6823      	ldr	r3, [r4, #0]
 80127d0:	0699      	lsls	r1, r3, #26
 80127d2:	bf42      	ittt	mi
 80127d4:	6833      	ldrmi	r3, [r6, #0]
 80127d6:	3302      	addmi	r3, #2
 80127d8:	6033      	strmi	r3, [r6, #0]
 80127da:	6825      	ldr	r5, [r4, #0]
 80127dc:	f015 0506 	ands.w	r5, r5, #6
 80127e0:	d106      	bne.n	80127f0 <_printf_common+0x48>
 80127e2:	f104 0a19 	add.w	sl, r4, #25
 80127e6:	68e3      	ldr	r3, [r4, #12]
 80127e8:	6832      	ldr	r2, [r6, #0]
 80127ea:	1a9b      	subs	r3, r3, r2
 80127ec:	42ab      	cmp	r3, r5
 80127ee:	dc26      	bgt.n	801283e <_printf_common+0x96>
 80127f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80127f4:	1e13      	subs	r3, r2, #0
 80127f6:	6822      	ldr	r2, [r4, #0]
 80127f8:	bf18      	it	ne
 80127fa:	2301      	movne	r3, #1
 80127fc:	0692      	lsls	r2, r2, #26
 80127fe:	d42b      	bmi.n	8012858 <_printf_common+0xb0>
 8012800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012804:	4649      	mov	r1, r9
 8012806:	4638      	mov	r0, r7
 8012808:	47c0      	blx	r8
 801280a:	3001      	adds	r0, #1
 801280c:	d01e      	beq.n	801284c <_printf_common+0xa4>
 801280e:	6823      	ldr	r3, [r4, #0]
 8012810:	68e5      	ldr	r5, [r4, #12]
 8012812:	6832      	ldr	r2, [r6, #0]
 8012814:	f003 0306 	and.w	r3, r3, #6
 8012818:	2b04      	cmp	r3, #4
 801281a:	bf08      	it	eq
 801281c:	1aad      	subeq	r5, r5, r2
 801281e:	68a3      	ldr	r3, [r4, #8]
 8012820:	6922      	ldr	r2, [r4, #16]
 8012822:	bf0c      	ite	eq
 8012824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012828:	2500      	movne	r5, #0
 801282a:	4293      	cmp	r3, r2
 801282c:	bfc4      	itt	gt
 801282e:	1a9b      	subgt	r3, r3, r2
 8012830:	18ed      	addgt	r5, r5, r3
 8012832:	2600      	movs	r6, #0
 8012834:	341a      	adds	r4, #26
 8012836:	42b5      	cmp	r5, r6
 8012838:	d11a      	bne.n	8012870 <_printf_common+0xc8>
 801283a:	2000      	movs	r0, #0
 801283c:	e008      	b.n	8012850 <_printf_common+0xa8>
 801283e:	2301      	movs	r3, #1
 8012840:	4652      	mov	r2, sl
 8012842:	4649      	mov	r1, r9
 8012844:	4638      	mov	r0, r7
 8012846:	47c0      	blx	r8
 8012848:	3001      	adds	r0, #1
 801284a:	d103      	bne.n	8012854 <_printf_common+0xac>
 801284c:	f04f 30ff 	mov.w	r0, #4294967295
 8012850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012854:	3501      	adds	r5, #1
 8012856:	e7c6      	b.n	80127e6 <_printf_common+0x3e>
 8012858:	18e1      	adds	r1, r4, r3
 801285a:	1c5a      	adds	r2, r3, #1
 801285c:	2030      	movs	r0, #48	; 0x30
 801285e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012862:	4422      	add	r2, r4
 8012864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801286c:	3302      	adds	r3, #2
 801286e:	e7c7      	b.n	8012800 <_printf_common+0x58>
 8012870:	2301      	movs	r3, #1
 8012872:	4622      	mov	r2, r4
 8012874:	4649      	mov	r1, r9
 8012876:	4638      	mov	r0, r7
 8012878:	47c0      	blx	r8
 801287a:	3001      	adds	r0, #1
 801287c:	d0e6      	beq.n	801284c <_printf_common+0xa4>
 801287e:	3601      	adds	r6, #1
 8012880:	e7d9      	b.n	8012836 <_printf_common+0x8e>
	...

08012884 <_printf_i>:
 8012884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012888:	460c      	mov	r4, r1
 801288a:	4691      	mov	r9, r2
 801288c:	7e27      	ldrb	r7, [r4, #24]
 801288e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012890:	2f78      	cmp	r7, #120	; 0x78
 8012892:	4680      	mov	r8, r0
 8012894:	469a      	mov	sl, r3
 8012896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801289a:	d807      	bhi.n	80128ac <_printf_i+0x28>
 801289c:	2f62      	cmp	r7, #98	; 0x62
 801289e:	d80a      	bhi.n	80128b6 <_printf_i+0x32>
 80128a0:	2f00      	cmp	r7, #0
 80128a2:	f000 80d8 	beq.w	8012a56 <_printf_i+0x1d2>
 80128a6:	2f58      	cmp	r7, #88	; 0x58
 80128a8:	f000 80a3 	beq.w	80129f2 <_printf_i+0x16e>
 80128ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80128b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80128b4:	e03a      	b.n	801292c <_printf_i+0xa8>
 80128b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80128ba:	2b15      	cmp	r3, #21
 80128bc:	d8f6      	bhi.n	80128ac <_printf_i+0x28>
 80128be:	a001      	add	r0, pc, #4	; (adr r0, 80128c4 <_printf_i+0x40>)
 80128c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80128c4:	0801291d 	.word	0x0801291d
 80128c8:	08012931 	.word	0x08012931
 80128cc:	080128ad 	.word	0x080128ad
 80128d0:	080128ad 	.word	0x080128ad
 80128d4:	080128ad 	.word	0x080128ad
 80128d8:	080128ad 	.word	0x080128ad
 80128dc:	08012931 	.word	0x08012931
 80128e0:	080128ad 	.word	0x080128ad
 80128e4:	080128ad 	.word	0x080128ad
 80128e8:	080128ad 	.word	0x080128ad
 80128ec:	080128ad 	.word	0x080128ad
 80128f0:	08012a3d 	.word	0x08012a3d
 80128f4:	08012961 	.word	0x08012961
 80128f8:	08012a1f 	.word	0x08012a1f
 80128fc:	080128ad 	.word	0x080128ad
 8012900:	080128ad 	.word	0x080128ad
 8012904:	08012a5f 	.word	0x08012a5f
 8012908:	080128ad 	.word	0x080128ad
 801290c:	08012961 	.word	0x08012961
 8012910:	080128ad 	.word	0x080128ad
 8012914:	080128ad 	.word	0x080128ad
 8012918:	08012a27 	.word	0x08012a27
 801291c:	680b      	ldr	r3, [r1, #0]
 801291e:	1d1a      	adds	r2, r3, #4
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	600a      	str	r2, [r1, #0]
 8012924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8012928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801292c:	2301      	movs	r3, #1
 801292e:	e0a3      	b.n	8012a78 <_printf_i+0x1f4>
 8012930:	6825      	ldr	r5, [r4, #0]
 8012932:	6808      	ldr	r0, [r1, #0]
 8012934:	062e      	lsls	r6, r5, #24
 8012936:	f100 0304 	add.w	r3, r0, #4
 801293a:	d50a      	bpl.n	8012952 <_printf_i+0xce>
 801293c:	6805      	ldr	r5, [r0, #0]
 801293e:	600b      	str	r3, [r1, #0]
 8012940:	2d00      	cmp	r5, #0
 8012942:	da03      	bge.n	801294c <_printf_i+0xc8>
 8012944:	232d      	movs	r3, #45	; 0x2d
 8012946:	426d      	negs	r5, r5
 8012948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801294c:	485e      	ldr	r0, [pc, #376]	; (8012ac8 <_printf_i+0x244>)
 801294e:	230a      	movs	r3, #10
 8012950:	e019      	b.n	8012986 <_printf_i+0x102>
 8012952:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012956:	6805      	ldr	r5, [r0, #0]
 8012958:	600b      	str	r3, [r1, #0]
 801295a:	bf18      	it	ne
 801295c:	b22d      	sxthne	r5, r5
 801295e:	e7ef      	b.n	8012940 <_printf_i+0xbc>
 8012960:	680b      	ldr	r3, [r1, #0]
 8012962:	6825      	ldr	r5, [r4, #0]
 8012964:	1d18      	adds	r0, r3, #4
 8012966:	6008      	str	r0, [r1, #0]
 8012968:	0628      	lsls	r0, r5, #24
 801296a:	d501      	bpl.n	8012970 <_printf_i+0xec>
 801296c:	681d      	ldr	r5, [r3, #0]
 801296e:	e002      	b.n	8012976 <_printf_i+0xf2>
 8012970:	0669      	lsls	r1, r5, #25
 8012972:	d5fb      	bpl.n	801296c <_printf_i+0xe8>
 8012974:	881d      	ldrh	r5, [r3, #0]
 8012976:	4854      	ldr	r0, [pc, #336]	; (8012ac8 <_printf_i+0x244>)
 8012978:	2f6f      	cmp	r7, #111	; 0x6f
 801297a:	bf0c      	ite	eq
 801297c:	2308      	moveq	r3, #8
 801297e:	230a      	movne	r3, #10
 8012980:	2100      	movs	r1, #0
 8012982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012986:	6866      	ldr	r6, [r4, #4]
 8012988:	60a6      	str	r6, [r4, #8]
 801298a:	2e00      	cmp	r6, #0
 801298c:	bfa2      	ittt	ge
 801298e:	6821      	ldrge	r1, [r4, #0]
 8012990:	f021 0104 	bicge.w	r1, r1, #4
 8012994:	6021      	strge	r1, [r4, #0]
 8012996:	b90d      	cbnz	r5, 801299c <_printf_i+0x118>
 8012998:	2e00      	cmp	r6, #0
 801299a:	d04d      	beq.n	8012a38 <_printf_i+0x1b4>
 801299c:	4616      	mov	r6, r2
 801299e:	fbb5 f1f3 	udiv	r1, r5, r3
 80129a2:	fb03 5711 	mls	r7, r3, r1, r5
 80129a6:	5dc7      	ldrb	r7, [r0, r7]
 80129a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80129ac:	462f      	mov	r7, r5
 80129ae:	42bb      	cmp	r3, r7
 80129b0:	460d      	mov	r5, r1
 80129b2:	d9f4      	bls.n	801299e <_printf_i+0x11a>
 80129b4:	2b08      	cmp	r3, #8
 80129b6:	d10b      	bne.n	80129d0 <_printf_i+0x14c>
 80129b8:	6823      	ldr	r3, [r4, #0]
 80129ba:	07df      	lsls	r7, r3, #31
 80129bc:	d508      	bpl.n	80129d0 <_printf_i+0x14c>
 80129be:	6923      	ldr	r3, [r4, #16]
 80129c0:	6861      	ldr	r1, [r4, #4]
 80129c2:	4299      	cmp	r1, r3
 80129c4:	bfde      	ittt	le
 80129c6:	2330      	movle	r3, #48	; 0x30
 80129c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80129cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80129d0:	1b92      	subs	r2, r2, r6
 80129d2:	6122      	str	r2, [r4, #16]
 80129d4:	f8cd a000 	str.w	sl, [sp]
 80129d8:	464b      	mov	r3, r9
 80129da:	aa03      	add	r2, sp, #12
 80129dc:	4621      	mov	r1, r4
 80129de:	4640      	mov	r0, r8
 80129e0:	f7ff fee2 	bl	80127a8 <_printf_common>
 80129e4:	3001      	adds	r0, #1
 80129e6:	d14c      	bne.n	8012a82 <_printf_i+0x1fe>
 80129e8:	f04f 30ff 	mov.w	r0, #4294967295
 80129ec:	b004      	add	sp, #16
 80129ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80129f2:	4835      	ldr	r0, [pc, #212]	; (8012ac8 <_printf_i+0x244>)
 80129f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80129f8:	6823      	ldr	r3, [r4, #0]
 80129fa:	680e      	ldr	r6, [r1, #0]
 80129fc:	061f      	lsls	r7, r3, #24
 80129fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8012a02:	600e      	str	r6, [r1, #0]
 8012a04:	d514      	bpl.n	8012a30 <_printf_i+0x1ac>
 8012a06:	07d9      	lsls	r1, r3, #31
 8012a08:	bf44      	itt	mi
 8012a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8012a0e:	6023      	strmi	r3, [r4, #0]
 8012a10:	b91d      	cbnz	r5, 8012a1a <_printf_i+0x196>
 8012a12:	6823      	ldr	r3, [r4, #0]
 8012a14:	f023 0320 	bic.w	r3, r3, #32
 8012a18:	6023      	str	r3, [r4, #0]
 8012a1a:	2310      	movs	r3, #16
 8012a1c:	e7b0      	b.n	8012980 <_printf_i+0xfc>
 8012a1e:	6823      	ldr	r3, [r4, #0]
 8012a20:	f043 0320 	orr.w	r3, r3, #32
 8012a24:	6023      	str	r3, [r4, #0]
 8012a26:	2378      	movs	r3, #120	; 0x78
 8012a28:	4828      	ldr	r0, [pc, #160]	; (8012acc <_printf_i+0x248>)
 8012a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012a2e:	e7e3      	b.n	80129f8 <_printf_i+0x174>
 8012a30:	065e      	lsls	r6, r3, #25
 8012a32:	bf48      	it	mi
 8012a34:	b2ad      	uxthmi	r5, r5
 8012a36:	e7e6      	b.n	8012a06 <_printf_i+0x182>
 8012a38:	4616      	mov	r6, r2
 8012a3a:	e7bb      	b.n	80129b4 <_printf_i+0x130>
 8012a3c:	680b      	ldr	r3, [r1, #0]
 8012a3e:	6826      	ldr	r6, [r4, #0]
 8012a40:	6960      	ldr	r0, [r4, #20]
 8012a42:	1d1d      	adds	r5, r3, #4
 8012a44:	600d      	str	r5, [r1, #0]
 8012a46:	0635      	lsls	r5, r6, #24
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	d501      	bpl.n	8012a50 <_printf_i+0x1cc>
 8012a4c:	6018      	str	r0, [r3, #0]
 8012a4e:	e002      	b.n	8012a56 <_printf_i+0x1d2>
 8012a50:	0671      	lsls	r1, r6, #25
 8012a52:	d5fb      	bpl.n	8012a4c <_printf_i+0x1c8>
 8012a54:	8018      	strh	r0, [r3, #0]
 8012a56:	2300      	movs	r3, #0
 8012a58:	6123      	str	r3, [r4, #16]
 8012a5a:	4616      	mov	r6, r2
 8012a5c:	e7ba      	b.n	80129d4 <_printf_i+0x150>
 8012a5e:	680b      	ldr	r3, [r1, #0]
 8012a60:	1d1a      	adds	r2, r3, #4
 8012a62:	600a      	str	r2, [r1, #0]
 8012a64:	681e      	ldr	r6, [r3, #0]
 8012a66:	6862      	ldr	r2, [r4, #4]
 8012a68:	2100      	movs	r1, #0
 8012a6a:	4630      	mov	r0, r6
 8012a6c:	f7ed fbb8 	bl	80001e0 <memchr>
 8012a70:	b108      	cbz	r0, 8012a76 <_printf_i+0x1f2>
 8012a72:	1b80      	subs	r0, r0, r6
 8012a74:	6060      	str	r0, [r4, #4]
 8012a76:	6863      	ldr	r3, [r4, #4]
 8012a78:	6123      	str	r3, [r4, #16]
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a80:	e7a8      	b.n	80129d4 <_printf_i+0x150>
 8012a82:	6923      	ldr	r3, [r4, #16]
 8012a84:	4632      	mov	r2, r6
 8012a86:	4649      	mov	r1, r9
 8012a88:	4640      	mov	r0, r8
 8012a8a:	47d0      	blx	sl
 8012a8c:	3001      	adds	r0, #1
 8012a8e:	d0ab      	beq.n	80129e8 <_printf_i+0x164>
 8012a90:	6823      	ldr	r3, [r4, #0]
 8012a92:	079b      	lsls	r3, r3, #30
 8012a94:	d413      	bmi.n	8012abe <_printf_i+0x23a>
 8012a96:	68e0      	ldr	r0, [r4, #12]
 8012a98:	9b03      	ldr	r3, [sp, #12]
 8012a9a:	4298      	cmp	r0, r3
 8012a9c:	bfb8      	it	lt
 8012a9e:	4618      	movlt	r0, r3
 8012aa0:	e7a4      	b.n	80129ec <_printf_i+0x168>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	4632      	mov	r2, r6
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	4640      	mov	r0, r8
 8012aaa:	47d0      	blx	sl
 8012aac:	3001      	adds	r0, #1
 8012aae:	d09b      	beq.n	80129e8 <_printf_i+0x164>
 8012ab0:	3501      	adds	r5, #1
 8012ab2:	68e3      	ldr	r3, [r4, #12]
 8012ab4:	9903      	ldr	r1, [sp, #12]
 8012ab6:	1a5b      	subs	r3, r3, r1
 8012ab8:	42ab      	cmp	r3, r5
 8012aba:	dcf2      	bgt.n	8012aa2 <_printf_i+0x21e>
 8012abc:	e7eb      	b.n	8012a96 <_printf_i+0x212>
 8012abe:	2500      	movs	r5, #0
 8012ac0:	f104 0619 	add.w	r6, r4, #25
 8012ac4:	e7f5      	b.n	8012ab2 <_printf_i+0x22e>
 8012ac6:	bf00      	nop
 8012ac8:	08015e3b 	.word	0x08015e3b
 8012acc:	08015e4c 	.word	0x08015e4c

08012ad0 <__swbuf_r>:
 8012ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ad2:	460e      	mov	r6, r1
 8012ad4:	4614      	mov	r4, r2
 8012ad6:	4605      	mov	r5, r0
 8012ad8:	b118      	cbz	r0, 8012ae2 <__swbuf_r+0x12>
 8012ada:	6983      	ldr	r3, [r0, #24]
 8012adc:	b90b      	cbnz	r3, 8012ae2 <__swbuf_r+0x12>
 8012ade:	f001 f851 	bl	8013b84 <__sinit>
 8012ae2:	4b21      	ldr	r3, [pc, #132]	; (8012b68 <__swbuf_r+0x98>)
 8012ae4:	429c      	cmp	r4, r3
 8012ae6:	d12b      	bne.n	8012b40 <__swbuf_r+0x70>
 8012ae8:	686c      	ldr	r4, [r5, #4]
 8012aea:	69a3      	ldr	r3, [r4, #24]
 8012aec:	60a3      	str	r3, [r4, #8]
 8012aee:	89a3      	ldrh	r3, [r4, #12]
 8012af0:	071a      	lsls	r2, r3, #28
 8012af2:	d52f      	bpl.n	8012b54 <__swbuf_r+0x84>
 8012af4:	6923      	ldr	r3, [r4, #16]
 8012af6:	b36b      	cbz	r3, 8012b54 <__swbuf_r+0x84>
 8012af8:	6923      	ldr	r3, [r4, #16]
 8012afa:	6820      	ldr	r0, [r4, #0]
 8012afc:	1ac0      	subs	r0, r0, r3
 8012afe:	6963      	ldr	r3, [r4, #20]
 8012b00:	b2f6      	uxtb	r6, r6
 8012b02:	4283      	cmp	r3, r0
 8012b04:	4637      	mov	r7, r6
 8012b06:	dc04      	bgt.n	8012b12 <__swbuf_r+0x42>
 8012b08:	4621      	mov	r1, r4
 8012b0a:	4628      	mov	r0, r5
 8012b0c:	f000 ffa6 	bl	8013a5c <_fflush_r>
 8012b10:	bb30      	cbnz	r0, 8012b60 <__swbuf_r+0x90>
 8012b12:	68a3      	ldr	r3, [r4, #8]
 8012b14:	3b01      	subs	r3, #1
 8012b16:	60a3      	str	r3, [r4, #8]
 8012b18:	6823      	ldr	r3, [r4, #0]
 8012b1a:	1c5a      	adds	r2, r3, #1
 8012b1c:	6022      	str	r2, [r4, #0]
 8012b1e:	701e      	strb	r6, [r3, #0]
 8012b20:	6963      	ldr	r3, [r4, #20]
 8012b22:	3001      	adds	r0, #1
 8012b24:	4283      	cmp	r3, r0
 8012b26:	d004      	beq.n	8012b32 <__swbuf_r+0x62>
 8012b28:	89a3      	ldrh	r3, [r4, #12]
 8012b2a:	07db      	lsls	r3, r3, #31
 8012b2c:	d506      	bpl.n	8012b3c <__swbuf_r+0x6c>
 8012b2e:	2e0a      	cmp	r6, #10
 8012b30:	d104      	bne.n	8012b3c <__swbuf_r+0x6c>
 8012b32:	4621      	mov	r1, r4
 8012b34:	4628      	mov	r0, r5
 8012b36:	f000 ff91 	bl	8013a5c <_fflush_r>
 8012b3a:	b988      	cbnz	r0, 8012b60 <__swbuf_r+0x90>
 8012b3c:	4638      	mov	r0, r7
 8012b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b40:	4b0a      	ldr	r3, [pc, #40]	; (8012b6c <__swbuf_r+0x9c>)
 8012b42:	429c      	cmp	r4, r3
 8012b44:	d101      	bne.n	8012b4a <__swbuf_r+0x7a>
 8012b46:	68ac      	ldr	r4, [r5, #8]
 8012b48:	e7cf      	b.n	8012aea <__swbuf_r+0x1a>
 8012b4a:	4b09      	ldr	r3, [pc, #36]	; (8012b70 <__swbuf_r+0xa0>)
 8012b4c:	429c      	cmp	r4, r3
 8012b4e:	bf08      	it	eq
 8012b50:	68ec      	ldreq	r4, [r5, #12]
 8012b52:	e7ca      	b.n	8012aea <__swbuf_r+0x1a>
 8012b54:	4621      	mov	r1, r4
 8012b56:	4628      	mov	r0, r5
 8012b58:	f000 f80c 	bl	8012b74 <__swsetup_r>
 8012b5c:	2800      	cmp	r0, #0
 8012b5e:	d0cb      	beq.n	8012af8 <__swbuf_r+0x28>
 8012b60:	f04f 37ff 	mov.w	r7, #4294967295
 8012b64:	e7ea      	b.n	8012b3c <__swbuf_r+0x6c>
 8012b66:	bf00      	nop
 8012b68:	08015f14 	.word	0x08015f14
 8012b6c:	08015f34 	.word	0x08015f34
 8012b70:	08015ef4 	.word	0x08015ef4

08012b74 <__swsetup_r>:
 8012b74:	4b32      	ldr	r3, [pc, #200]	; (8012c40 <__swsetup_r+0xcc>)
 8012b76:	b570      	push	{r4, r5, r6, lr}
 8012b78:	681d      	ldr	r5, [r3, #0]
 8012b7a:	4606      	mov	r6, r0
 8012b7c:	460c      	mov	r4, r1
 8012b7e:	b125      	cbz	r5, 8012b8a <__swsetup_r+0x16>
 8012b80:	69ab      	ldr	r3, [r5, #24]
 8012b82:	b913      	cbnz	r3, 8012b8a <__swsetup_r+0x16>
 8012b84:	4628      	mov	r0, r5
 8012b86:	f000 fffd 	bl	8013b84 <__sinit>
 8012b8a:	4b2e      	ldr	r3, [pc, #184]	; (8012c44 <__swsetup_r+0xd0>)
 8012b8c:	429c      	cmp	r4, r3
 8012b8e:	d10f      	bne.n	8012bb0 <__swsetup_r+0x3c>
 8012b90:	686c      	ldr	r4, [r5, #4]
 8012b92:	89a3      	ldrh	r3, [r4, #12]
 8012b94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012b98:	0719      	lsls	r1, r3, #28
 8012b9a:	d42c      	bmi.n	8012bf6 <__swsetup_r+0x82>
 8012b9c:	06dd      	lsls	r5, r3, #27
 8012b9e:	d411      	bmi.n	8012bc4 <__swsetup_r+0x50>
 8012ba0:	2309      	movs	r3, #9
 8012ba2:	6033      	str	r3, [r6, #0]
 8012ba4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012ba8:	81a3      	strh	r3, [r4, #12]
 8012baa:	f04f 30ff 	mov.w	r0, #4294967295
 8012bae:	e03e      	b.n	8012c2e <__swsetup_r+0xba>
 8012bb0:	4b25      	ldr	r3, [pc, #148]	; (8012c48 <__swsetup_r+0xd4>)
 8012bb2:	429c      	cmp	r4, r3
 8012bb4:	d101      	bne.n	8012bba <__swsetup_r+0x46>
 8012bb6:	68ac      	ldr	r4, [r5, #8]
 8012bb8:	e7eb      	b.n	8012b92 <__swsetup_r+0x1e>
 8012bba:	4b24      	ldr	r3, [pc, #144]	; (8012c4c <__swsetup_r+0xd8>)
 8012bbc:	429c      	cmp	r4, r3
 8012bbe:	bf08      	it	eq
 8012bc0:	68ec      	ldreq	r4, [r5, #12]
 8012bc2:	e7e6      	b.n	8012b92 <__swsetup_r+0x1e>
 8012bc4:	0758      	lsls	r0, r3, #29
 8012bc6:	d512      	bpl.n	8012bee <__swsetup_r+0x7a>
 8012bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bca:	b141      	cbz	r1, 8012bde <__swsetup_r+0x6a>
 8012bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bd0:	4299      	cmp	r1, r3
 8012bd2:	d002      	beq.n	8012bda <__swsetup_r+0x66>
 8012bd4:	4630      	mov	r0, r6
 8012bd6:	f001 fc75 	bl	80144c4 <_free_r>
 8012bda:	2300      	movs	r3, #0
 8012bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012be4:	81a3      	strh	r3, [r4, #12]
 8012be6:	2300      	movs	r3, #0
 8012be8:	6063      	str	r3, [r4, #4]
 8012bea:	6923      	ldr	r3, [r4, #16]
 8012bec:	6023      	str	r3, [r4, #0]
 8012bee:	89a3      	ldrh	r3, [r4, #12]
 8012bf0:	f043 0308 	orr.w	r3, r3, #8
 8012bf4:	81a3      	strh	r3, [r4, #12]
 8012bf6:	6923      	ldr	r3, [r4, #16]
 8012bf8:	b94b      	cbnz	r3, 8012c0e <__swsetup_r+0x9a>
 8012bfa:	89a3      	ldrh	r3, [r4, #12]
 8012bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c04:	d003      	beq.n	8012c0e <__swsetup_r+0x9a>
 8012c06:	4621      	mov	r1, r4
 8012c08:	4630      	mov	r0, r6
 8012c0a:	f001 f885 	bl	8013d18 <__smakebuf_r>
 8012c0e:	89a0      	ldrh	r0, [r4, #12]
 8012c10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012c14:	f010 0301 	ands.w	r3, r0, #1
 8012c18:	d00a      	beq.n	8012c30 <__swsetup_r+0xbc>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	60a3      	str	r3, [r4, #8]
 8012c1e:	6963      	ldr	r3, [r4, #20]
 8012c20:	425b      	negs	r3, r3
 8012c22:	61a3      	str	r3, [r4, #24]
 8012c24:	6923      	ldr	r3, [r4, #16]
 8012c26:	b943      	cbnz	r3, 8012c3a <__swsetup_r+0xc6>
 8012c28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012c2c:	d1ba      	bne.n	8012ba4 <__swsetup_r+0x30>
 8012c2e:	bd70      	pop	{r4, r5, r6, pc}
 8012c30:	0781      	lsls	r1, r0, #30
 8012c32:	bf58      	it	pl
 8012c34:	6963      	ldrpl	r3, [r4, #20]
 8012c36:	60a3      	str	r3, [r4, #8]
 8012c38:	e7f4      	b.n	8012c24 <__swsetup_r+0xb0>
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	e7f7      	b.n	8012c2e <__swsetup_r+0xba>
 8012c3e:	bf00      	nop
 8012c40:	200002a4 	.word	0x200002a4
 8012c44:	08015f14 	.word	0x08015f14
 8012c48:	08015f34 	.word	0x08015f34
 8012c4c:	08015ef4 	.word	0x08015ef4

08012c50 <abort>:
 8012c50:	b508      	push	{r3, lr}
 8012c52:	2006      	movs	r0, #6
 8012c54:	f001 fd18 	bl	8014688 <raise>
 8012c58:	2001      	movs	r0, #1
 8012c5a:	f7f7 f80d 	bl	8009c78 <_exit>

08012c5e <quorem>:
 8012c5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c62:	6903      	ldr	r3, [r0, #16]
 8012c64:	690c      	ldr	r4, [r1, #16]
 8012c66:	42a3      	cmp	r3, r4
 8012c68:	4607      	mov	r7, r0
 8012c6a:	f2c0 8081 	blt.w	8012d70 <quorem+0x112>
 8012c6e:	3c01      	subs	r4, #1
 8012c70:	f101 0814 	add.w	r8, r1, #20
 8012c74:	f100 0514 	add.w	r5, r0, #20
 8012c78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c7c:	9301      	str	r3, [sp, #4]
 8012c7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012c82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c86:	3301      	adds	r3, #1
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012c8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012c92:	fbb2 f6f3 	udiv	r6, r2, r3
 8012c96:	d331      	bcc.n	8012cfc <quorem+0x9e>
 8012c98:	f04f 0e00 	mov.w	lr, #0
 8012c9c:	4640      	mov	r0, r8
 8012c9e:	46ac      	mov	ip, r5
 8012ca0:	46f2      	mov	sl, lr
 8012ca2:	f850 2b04 	ldr.w	r2, [r0], #4
 8012ca6:	b293      	uxth	r3, r2
 8012ca8:	fb06 e303 	mla	r3, r6, r3, lr
 8012cac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012cb0:	b29b      	uxth	r3, r3
 8012cb2:	ebaa 0303 	sub.w	r3, sl, r3
 8012cb6:	0c12      	lsrs	r2, r2, #16
 8012cb8:	f8dc a000 	ldr.w	sl, [ip]
 8012cbc:	fb06 e202 	mla	r2, r6, r2, lr
 8012cc0:	fa13 f38a 	uxtah	r3, r3, sl
 8012cc4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012cc8:	fa1f fa82 	uxth.w	sl, r2
 8012ccc:	f8dc 2000 	ldr.w	r2, [ip]
 8012cd0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8012cd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012cde:	4581      	cmp	r9, r0
 8012ce0:	f84c 3b04 	str.w	r3, [ip], #4
 8012ce4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012ce8:	d2db      	bcs.n	8012ca2 <quorem+0x44>
 8012cea:	f855 300b 	ldr.w	r3, [r5, fp]
 8012cee:	b92b      	cbnz	r3, 8012cfc <quorem+0x9e>
 8012cf0:	9b01      	ldr	r3, [sp, #4]
 8012cf2:	3b04      	subs	r3, #4
 8012cf4:	429d      	cmp	r5, r3
 8012cf6:	461a      	mov	r2, r3
 8012cf8:	d32e      	bcc.n	8012d58 <quorem+0xfa>
 8012cfa:	613c      	str	r4, [r7, #16]
 8012cfc:	4638      	mov	r0, r7
 8012cfe:	f001 fad1 	bl	80142a4 <__mcmp>
 8012d02:	2800      	cmp	r0, #0
 8012d04:	db24      	blt.n	8012d50 <quorem+0xf2>
 8012d06:	3601      	adds	r6, #1
 8012d08:	4628      	mov	r0, r5
 8012d0a:	f04f 0c00 	mov.w	ip, #0
 8012d0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8012d12:	f8d0 e000 	ldr.w	lr, [r0]
 8012d16:	b293      	uxth	r3, r2
 8012d18:	ebac 0303 	sub.w	r3, ip, r3
 8012d1c:	0c12      	lsrs	r2, r2, #16
 8012d1e:	fa13 f38e 	uxtah	r3, r3, lr
 8012d22:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012d30:	45c1      	cmp	r9, r8
 8012d32:	f840 3b04 	str.w	r3, [r0], #4
 8012d36:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012d3a:	d2e8      	bcs.n	8012d0e <quorem+0xb0>
 8012d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d44:	b922      	cbnz	r2, 8012d50 <quorem+0xf2>
 8012d46:	3b04      	subs	r3, #4
 8012d48:	429d      	cmp	r5, r3
 8012d4a:	461a      	mov	r2, r3
 8012d4c:	d30a      	bcc.n	8012d64 <quorem+0x106>
 8012d4e:	613c      	str	r4, [r7, #16]
 8012d50:	4630      	mov	r0, r6
 8012d52:	b003      	add	sp, #12
 8012d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d58:	6812      	ldr	r2, [r2, #0]
 8012d5a:	3b04      	subs	r3, #4
 8012d5c:	2a00      	cmp	r2, #0
 8012d5e:	d1cc      	bne.n	8012cfa <quorem+0x9c>
 8012d60:	3c01      	subs	r4, #1
 8012d62:	e7c7      	b.n	8012cf4 <quorem+0x96>
 8012d64:	6812      	ldr	r2, [r2, #0]
 8012d66:	3b04      	subs	r3, #4
 8012d68:	2a00      	cmp	r2, #0
 8012d6a:	d1f0      	bne.n	8012d4e <quorem+0xf0>
 8012d6c:	3c01      	subs	r4, #1
 8012d6e:	e7eb      	b.n	8012d48 <quorem+0xea>
 8012d70:	2000      	movs	r0, #0
 8012d72:	e7ee      	b.n	8012d52 <quorem+0xf4>
 8012d74:	0000      	movs	r0, r0
	...

08012d78 <_dtoa_r>:
 8012d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d7c:	ed2d 8b02 	vpush	{d8}
 8012d80:	ec57 6b10 	vmov	r6, r7, d0
 8012d84:	b095      	sub	sp, #84	; 0x54
 8012d86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012d88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012d8c:	9105      	str	r1, [sp, #20]
 8012d8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8012d92:	4604      	mov	r4, r0
 8012d94:	9209      	str	r2, [sp, #36]	; 0x24
 8012d96:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d98:	b975      	cbnz	r5, 8012db8 <_dtoa_r+0x40>
 8012d9a:	2010      	movs	r0, #16
 8012d9c:	f000 fffc 	bl	8013d98 <malloc>
 8012da0:	4602      	mov	r2, r0
 8012da2:	6260      	str	r0, [r4, #36]	; 0x24
 8012da4:	b920      	cbnz	r0, 8012db0 <_dtoa_r+0x38>
 8012da6:	4bb2      	ldr	r3, [pc, #712]	; (8013070 <_dtoa_r+0x2f8>)
 8012da8:	21ea      	movs	r1, #234	; 0xea
 8012daa:	48b2      	ldr	r0, [pc, #712]	; (8013074 <_dtoa_r+0x2fc>)
 8012dac:	f7ff f85c 	bl	8011e68 <__assert_func>
 8012db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012db4:	6005      	str	r5, [r0, #0]
 8012db6:	60c5      	str	r5, [r0, #12]
 8012db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dba:	6819      	ldr	r1, [r3, #0]
 8012dbc:	b151      	cbz	r1, 8012dd4 <_dtoa_r+0x5c>
 8012dbe:	685a      	ldr	r2, [r3, #4]
 8012dc0:	604a      	str	r2, [r1, #4]
 8012dc2:	2301      	movs	r3, #1
 8012dc4:	4093      	lsls	r3, r2
 8012dc6:	608b      	str	r3, [r1, #8]
 8012dc8:	4620      	mov	r0, r4
 8012dca:	f001 f82d 	bl	8013e28 <_Bfree>
 8012dce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	601a      	str	r2, [r3, #0]
 8012dd4:	1e3b      	subs	r3, r7, #0
 8012dd6:	bfb9      	ittee	lt
 8012dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012ddc:	9303      	strlt	r3, [sp, #12]
 8012dde:	2300      	movge	r3, #0
 8012de0:	f8c8 3000 	strge.w	r3, [r8]
 8012de4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8012de8:	4ba3      	ldr	r3, [pc, #652]	; (8013078 <_dtoa_r+0x300>)
 8012dea:	bfbc      	itt	lt
 8012dec:	2201      	movlt	r2, #1
 8012dee:	f8c8 2000 	strlt.w	r2, [r8]
 8012df2:	ea33 0309 	bics.w	r3, r3, r9
 8012df6:	d11b      	bne.n	8012e30 <_dtoa_r+0xb8>
 8012df8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8012dfe:	6013      	str	r3, [r2, #0]
 8012e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e04:	4333      	orrs	r3, r6
 8012e06:	f000 857a 	beq.w	80138fe <_dtoa_r+0xb86>
 8012e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e0c:	b963      	cbnz	r3, 8012e28 <_dtoa_r+0xb0>
 8012e0e:	4b9b      	ldr	r3, [pc, #620]	; (801307c <_dtoa_r+0x304>)
 8012e10:	e024      	b.n	8012e5c <_dtoa_r+0xe4>
 8012e12:	4b9b      	ldr	r3, [pc, #620]	; (8013080 <_dtoa_r+0x308>)
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	3308      	adds	r3, #8
 8012e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012e1a:	6013      	str	r3, [r2, #0]
 8012e1c:	9800      	ldr	r0, [sp, #0]
 8012e1e:	b015      	add	sp, #84	; 0x54
 8012e20:	ecbd 8b02 	vpop	{d8}
 8012e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e28:	4b94      	ldr	r3, [pc, #592]	; (801307c <_dtoa_r+0x304>)
 8012e2a:	9300      	str	r3, [sp, #0]
 8012e2c:	3303      	adds	r3, #3
 8012e2e:	e7f3      	b.n	8012e18 <_dtoa_r+0xa0>
 8012e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e34:	2200      	movs	r2, #0
 8012e36:	ec51 0b17 	vmov	r0, r1, d7
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8012e40:	f7ed fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e44:	4680      	mov	r8, r0
 8012e46:	b158      	cbz	r0, 8012e60 <_dtoa_r+0xe8>
 8012e48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	6013      	str	r3, [r2, #0]
 8012e4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	f000 8551 	beq.w	80138f8 <_dtoa_r+0xb80>
 8012e56:	488b      	ldr	r0, [pc, #556]	; (8013084 <_dtoa_r+0x30c>)
 8012e58:	6018      	str	r0, [r3, #0]
 8012e5a:	1e43      	subs	r3, r0, #1
 8012e5c:	9300      	str	r3, [sp, #0]
 8012e5e:	e7dd      	b.n	8012e1c <_dtoa_r+0xa4>
 8012e60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8012e64:	aa12      	add	r2, sp, #72	; 0x48
 8012e66:	a913      	add	r1, sp, #76	; 0x4c
 8012e68:	4620      	mov	r0, r4
 8012e6a:	f001 fabf 	bl	80143ec <__d2b>
 8012e6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012e72:	4683      	mov	fp, r0
 8012e74:	2d00      	cmp	r5, #0
 8012e76:	d07c      	beq.n	8012f72 <_dtoa_r+0x1fa>
 8012e78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8012e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012e82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8012e86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012e8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012e8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012e92:	4b7d      	ldr	r3, [pc, #500]	; (8013088 <_dtoa_r+0x310>)
 8012e94:	2200      	movs	r2, #0
 8012e96:	4630      	mov	r0, r6
 8012e98:	4639      	mov	r1, r7
 8012e9a:	f7ed f9f5 	bl	8000288 <__aeabi_dsub>
 8012e9e:	a36e      	add	r3, pc, #440	; (adr r3, 8013058 <_dtoa_r+0x2e0>)
 8012ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea4:	f7ed fba8 	bl	80005f8 <__aeabi_dmul>
 8012ea8:	a36d      	add	r3, pc, #436	; (adr r3, 8013060 <_dtoa_r+0x2e8>)
 8012eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eae:	f7ed f9ed 	bl	800028c <__adddf3>
 8012eb2:	4606      	mov	r6, r0
 8012eb4:	4628      	mov	r0, r5
 8012eb6:	460f      	mov	r7, r1
 8012eb8:	f7ed fb34 	bl	8000524 <__aeabi_i2d>
 8012ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8013068 <_dtoa_r+0x2f0>)
 8012ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec2:	f7ed fb99 	bl	80005f8 <__aeabi_dmul>
 8012ec6:	4602      	mov	r2, r0
 8012ec8:	460b      	mov	r3, r1
 8012eca:	4630      	mov	r0, r6
 8012ecc:	4639      	mov	r1, r7
 8012ece:	f7ed f9dd 	bl	800028c <__adddf3>
 8012ed2:	4606      	mov	r6, r0
 8012ed4:	460f      	mov	r7, r1
 8012ed6:	f7ed fe3f 	bl	8000b58 <__aeabi_d2iz>
 8012eda:	2200      	movs	r2, #0
 8012edc:	4682      	mov	sl, r0
 8012ede:	2300      	movs	r3, #0
 8012ee0:	4630      	mov	r0, r6
 8012ee2:	4639      	mov	r1, r7
 8012ee4:	f7ed fdfa 	bl	8000adc <__aeabi_dcmplt>
 8012ee8:	b148      	cbz	r0, 8012efe <_dtoa_r+0x186>
 8012eea:	4650      	mov	r0, sl
 8012eec:	f7ed fb1a 	bl	8000524 <__aeabi_i2d>
 8012ef0:	4632      	mov	r2, r6
 8012ef2:	463b      	mov	r3, r7
 8012ef4:	f7ed fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ef8:	b908      	cbnz	r0, 8012efe <_dtoa_r+0x186>
 8012efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012efe:	f1ba 0f16 	cmp.w	sl, #22
 8012f02:	d854      	bhi.n	8012fae <_dtoa_r+0x236>
 8012f04:	4b61      	ldr	r3, [pc, #388]	; (801308c <_dtoa_r+0x314>)
 8012f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012f12:	f7ed fde3 	bl	8000adc <__aeabi_dcmplt>
 8012f16:	2800      	cmp	r0, #0
 8012f18:	d04b      	beq.n	8012fb2 <_dtoa_r+0x23a>
 8012f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012f1e:	2300      	movs	r3, #0
 8012f20:	930e      	str	r3, [sp, #56]	; 0x38
 8012f22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012f24:	1b5d      	subs	r5, r3, r5
 8012f26:	1e6b      	subs	r3, r5, #1
 8012f28:	9304      	str	r3, [sp, #16]
 8012f2a:	bf43      	ittte	mi
 8012f2c:	2300      	movmi	r3, #0
 8012f2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8012f32:	9304      	strmi	r3, [sp, #16]
 8012f34:	f04f 0800 	movpl.w	r8, #0
 8012f38:	f1ba 0f00 	cmp.w	sl, #0
 8012f3c:	db3b      	blt.n	8012fb6 <_dtoa_r+0x23e>
 8012f3e:	9b04      	ldr	r3, [sp, #16]
 8012f40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8012f44:	4453      	add	r3, sl
 8012f46:	9304      	str	r3, [sp, #16]
 8012f48:	2300      	movs	r3, #0
 8012f4a:	9306      	str	r3, [sp, #24]
 8012f4c:	9b05      	ldr	r3, [sp, #20]
 8012f4e:	2b09      	cmp	r3, #9
 8012f50:	d869      	bhi.n	8013026 <_dtoa_r+0x2ae>
 8012f52:	2b05      	cmp	r3, #5
 8012f54:	bfc4      	itt	gt
 8012f56:	3b04      	subgt	r3, #4
 8012f58:	9305      	strgt	r3, [sp, #20]
 8012f5a:	9b05      	ldr	r3, [sp, #20]
 8012f5c:	f1a3 0302 	sub.w	r3, r3, #2
 8012f60:	bfcc      	ite	gt
 8012f62:	2500      	movgt	r5, #0
 8012f64:	2501      	movle	r5, #1
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d869      	bhi.n	801303e <_dtoa_r+0x2c6>
 8012f6a:	e8df f003 	tbb	[pc, r3]
 8012f6e:	4e2c      	.short	0x4e2c
 8012f70:	5a4c      	.short	0x5a4c
 8012f72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8012f76:	441d      	add	r5, r3
 8012f78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012f7c:	2b20      	cmp	r3, #32
 8012f7e:	bfc1      	itttt	gt
 8012f80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012f84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012f88:	fa09 f303 	lslgt.w	r3, r9, r3
 8012f8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012f90:	bfda      	itte	le
 8012f92:	f1c3 0320 	rsble	r3, r3, #32
 8012f96:	fa06 f003 	lslle.w	r0, r6, r3
 8012f9a:	4318      	orrgt	r0, r3
 8012f9c:	f7ed fab2 	bl	8000504 <__aeabi_ui2d>
 8012fa0:	2301      	movs	r3, #1
 8012fa2:	4606      	mov	r6, r0
 8012fa4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012fa8:	3d01      	subs	r5, #1
 8012faa:	9310      	str	r3, [sp, #64]	; 0x40
 8012fac:	e771      	b.n	8012e92 <_dtoa_r+0x11a>
 8012fae:	2301      	movs	r3, #1
 8012fb0:	e7b6      	b.n	8012f20 <_dtoa_r+0x1a8>
 8012fb2:	900e      	str	r0, [sp, #56]	; 0x38
 8012fb4:	e7b5      	b.n	8012f22 <_dtoa_r+0x1aa>
 8012fb6:	f1ca 0300 	rsb	r3, sl, #0
 8012fba:	9306      	str	r3, [sp, #24]
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	eba8 080a 	sub.w	r8, r8, sl
 8012fc2:	930d      	str	r3, [sp, #52]	; 0x34
 8012fc4:	e7c2      	b.n	8012f4c <_dtoa_r+0x1d4>
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	9308      	str	r3, [sp, #32]
 8012fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	dc39      	bgt.n	8013044 <_dtoa_r+0x2cc>
 8012fd0:	f04f 0901 	mov.w	r9, #1
 8012fd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8012fd8:	464b      	mov	r3, r9
 8012fda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8012fde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012fe0:	2200      	movs	r2, #0
 8012fe2:	6042      	str	r2, [r0, #4]
 8012fe4:	2204      	movs	r2, #4
 8012fe6:	f102 0614 	add.w	r6, r2, #20
 8012fea:	429e      	cmp	r6, r3
 8012fec:	6841      	ldr	r1, [r0, #4]
 8012fee:	d92f      	bls.n	8013050 <_dtoa_r+0x2d8>
 8012ff0:	4620      	mov	r0, r4
 8012ff2:	f000 fed9 	bl	8013da8 <_Balloc>
 8012ff6:	9000      	str	r0, [sp, #0]
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d14b      	bne.n	8013094 <_dtoa_r+0x31c>
 8012ffc:	4b24      	ldr	r3, [pc, #144]	; (8013090 <_dtoa_r+0x318>)
 8012ffe:	4602      	mov	r2, r0
 8013000:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013004:	e6d1      	b.n	8012daa <_dtoa_r+0x32>
 8013006:	2301      	movs	r3, #1
 8013008:	e7de      	b.n	8012fc8 <_dtoa_r+0x250>
 801300a:	2300      	movs	r3, #0
 801300c:	9308      	str	r3, [sp, #32]
 801300e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013010:	eb0a 0903 	add.w	r9, sl, r3
 8013014:	f109 0301 	add.w	r3, r9, #1
 8013018:	2b01      	cmp	r3, #1
 801301a:	9301      	str	r3, [sp, #4]
 801301c:	bfb8      	it	lt
 801301e:	2301      	movlt	r3, #1
 8013020:	e7dd      	b.n	8012fde <_dtoa_r+0x266>
 8013022:	2301      	movs	r3, #1
 8013024:	e7f2      	b.n	801300c <_dtoa_r+0x294>
 8013026:	2501      	movs	r5, #1
 8013028:	2300      	movs	r3, #0
 801302a:	9305      	str	r3, [sp, #20]
 801302c:	9508      	str	r5, [sp, #32]
 801302e:	f04f 39ff 	mov.w	r9, #4294967295
 8013032:	2200      	movs	r2, #0
 8013034:	f8cd 9004 	str.w	r9, [sp, #4]
 8013038:	2312      	movs	r3, #18
 801303a:	9209      	str	r2, [sp, #36]	; 0x24
 801303c:	e7cf      	b.n	8012fde <_dtoa_r+0x266>
 801303e:	2301      	movs	r3, #1
 8013040:	9308      	str	r3, [sp, #32]
 8013042:	e7f4      	b.n	801302e <_dtoa_r+0x2b6>
 8013044:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013048:	f8cd 9004 	str.w	r9, [sp, #4]
 801304c:	464b      	mov	r3, r9
 801304e:	e7c6      	b.n	8012fde <_dtoa_r+0x266>
 8013050:	3101      	adds	r1, #1
 8013052:	6041      	str	r1, [r0, #4]
 8013054:	0052      	lsls	r2, r2, #1
 8013056:	e7c6      	b.n	8012fe6 <_dtoa_r+0x26e>
 8013058:	636f4361 	.word	0x636f4361
 801305c:	3fd287a7 	.word	0x3fd287a7
 8013060:	8b60c8b3 	.word	0x8b60c8b3
 8013064:	3fc68a28 	.word	0x3fc68a28
 8013068:	509f79fb 	.word	0x509f79fb
 801306c:	3fd34413 	.word	0x3fd34413
 8013070:	08015e6a 	.word	0x08015e6a
 8013074:	08015e81 	.word	0x08015e81
 8013078:	7ff00000 	.word	0x7ff00000
 801307c:	08015e66 	.word	0x08015e66
 8013080:	08015e5d 	.word	0x08015e5d
 8013084:	08015e3a 	.word	0x08015e3a
 8013088:	3ff80000 	.word	0x3ff80000
 801308c:	08015fe0 	.word	0x08015fe0
 8013090:	08015ee0 	.word	0x08015ee0
 8013094:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013096:	9a00      	ldr	r2, [sp, #0]
 8013098:	601a      	str	r2, [r3, #0]
 801309a:	9b01      	ldr	r3, [sp, #4]
 801309c:	2b0e      	cmp	r3, #14
 801309e:	f200 80ad 	bhi.w	80131fc <_dtoa_r+0x484>
 80130a2:	2d00      	cmp	r5, #0
 80130a4:	f000 80aa 	beq.w	80131fc <_dtoa_r+0x484>
 80130a8:	f1ba 0f00 	cmp.w	sl, #0
 80130ac:	dd36      	ble.n	801311c <_dtoa_r+0x3a4>
 80130ae:	4ac3      	ldr	r2, [pc, #780]	; (80133bc <_dtoa_r+0x644>)
 80130b0:	f00a 030f 	and.w	r3, sl, #15
 80130b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130b8:	ed93 7b00 	vldr	d7, [r3]
 80130bc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80130c0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80130c4:	eeb0 8a47 	vmov.f32	s16, s14
 80130c8:	eef0 8a67 	vmov.f32	s17, s15
 80130cc:	d016      	beq.n	80130fc <_dtoa_r+0x384>
 80130ce:	4bbc      	ldr	r3, [pc, #752]	; (80133c0 <_dtoa_r+0x648>)
 80130d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80130d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80130d8:	f7ed fbb8 	bl	800084c <__aeabi_ddiv>
 80130dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130e0:	f007 070f 	and.w	r7, r7, #15
 80130e4:	2503      	movs	r5, #3
 80130e6:	4eb6      	ldr	r6, [pc, #728]	; (80133c0 <_dtoa_r+0x648>)
 80130e8:	b957      	cbnz	r7, 8013100 <_dtoa_r+0x388>
 80130ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130ee:	ec53 2b18 	vmov	r2, r3, d8
 80130f2:	f7ed fbab 	bl	800084c <__aeabi_ddiv>
 80130f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80130fa:	e029      	b.n	8013150 <_dtoa_r+0x3d8>
 80130fc:	2502      	movs	r5, #2
 80130fe:	e7f2      	b.n	80130e6 <_dtoa_r+0x36e>
 8013100:	07f9      	lsls	r1, r7, #31
 8013102:	d508      	bpl.n	8013116 <_dtoa_r+0x39e>
 8013104:	ec51 0b18 	vmov	r0, r1, d8
 8013108:	e9d6 2300 	ldrd	r2, r3, [r6]
 801310c:	f7ed fa74 	bl	80005f8 <__aeabi_dmul>
 8013110:	ec41 0b18 	vmov	d8, r0, r1
 8013114:	3501      	adds	r5, #1
 8013116:	107f      	asrs	r7, r7, #1
 8013118:	3608      	adds	r6, #8
 801311a:	e7e5      	b.n	80130e8 <_dtoa_r+0x370>
 801311c:	f000 80a6 	beq.w	801326c <_dtoa_r+0x4f4>
 8013120:	f1ca 0600 	rsb	r6, sl, #0
 8013124:	4ba5      	ldr	r3, [pc, #660]	; (80133bc <_dtoa_r+0x644>)
 8013126:	4fa6      	ldr	r7, [pc, #664]	; (80133c0 <_dtoa_r+0x648>)
 8013128:	f006 020f 	and.w	r2, r6, #15
 801312c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013134:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013138:	f7ed fa5e 	bl	80005f8 <__aeabi_dmul>
 801313c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013140:	1136      	asrs	r6, r6, #4
 8013142:	2300      	movs	r3, #0
 8013144:	2502      	movs	r5, #2
 8013146:	2e00      	cmp	r6, #0
 8013148:	f040 8085 	bne.w	8013256 <_dtoa_r+0x4de>
 801314c:	2b00      	cmp	r3, #0
 801314e:	d1d2      	bne.n	80130f6 <_dtoa_r+0x37e>
 8013150:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013152:	2b00      	cmp	r3, #0
 8013154:	f000 808c 	beq.w	8013270 <_dtoa_r+0x4f8>
 8013158:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801315c:	4b99      	ldr	r3, [pc, #612]	; (80133c4 <_dtoa_r+0x64c>)
 801315e:	2200      	movs	r2, #0
 8013160:	4630      	mov	r0, r6
 8013162:	4639      	mov	r1, r7
 8013164:	f7ed fcba 	bl	8000adc <__aeabi_dcmplt>
 8013168:	2800      	cmp	r0, #0
 801316a:	f000 8081 	beq.w	8013270 <_dtoa_r+0x4f8>
 801316e:	9b01      	ldr	r3, [sp, #4]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d07d      	beq.n	8013270 <_dtoa_r+0x4f8>
 8013174:	f1b9 0f00 	cmp.w	r9, #0
 8013178:	dd3c      	ble.n	80131f4 <_dtoa_r+0x47c>
 801317a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801317e:	9307      	str	r3, [sp, #28]
 8013180:	2200      	movs	r2, #0
 8013182:	4b91      	ldr	r3, [pc, #580]	; (80133c8 <_dtoa_r+0x650>)
 8013184:	4630      	mov	r0, r6
 8013186:	4639      	mov	r1, r7
 8013188:	f7ed fa36 	bl	80005f8 <__aeabi_dmul>
 801318c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013190:	3501      	adds	r5, #1
 8013192:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013196:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801319a:	4628      	mov	r0, r5
 801319c:	f7ed f9c2 	bl	8000524 <__aeabi_i2d>
 80131a0:	4632      	mov	r2, r6
 80131a2:	463b      	mov	r3, r7
 80131a4:	f7ed fa28 	bl	80005f8 <__aeabi_dmul>
 80131a8:	4b88      	ldr	r3, [pc, #544]	; (80133cc <_dtoa_r+0x654>)
 80131aa:	2200      	movs	r2, #0
 80131ac:	f7ed f86e 	bl	800028c <__adddf3>
 80131b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80131b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80131b8:	9303      	str	r3, [sp, #12]
 80131ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d15c      	bne.n	801327a <_dtoa_r+0x502>
 80131c0:	4b83      	ldr	r3, [pc, #524]	; (80133d0 <_dtoa_r+0x658>)
 80131c2:	2200      	movs	r2, #0
 80131c4:	4630      	mov	r0, r6
 80131c6:	4639      	mov	r1, r7
 80131c8:	f7ed f85e 	bl	8000288 <__aeabi_dsub>
 80131cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80131d0:	4606      	mov	r6, r0
 80131d2:	460f      	mov	r7, r1
 80131d4:	f7ed fca0 	bl	8000b18 <__aeabi_dcmpgt>
 80131d8:	2800      	cmp	r0, #0
 80131da:	f040 8296 	bne.w	801370a <_dtoa_r+0x992>
 80131de:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80131e2:	4630      	mov	r0, r6
 80131e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80131e8:	4639      	mov	r1, r7
 80131ea:	f7ed fc77 	bl	8000adc <__aeabi_dcmplt>
 80131ee:	2800      	cmp	r0, #0
 80131f0:	f040 8288 	bne.w	8013704 <_dtoa_r+0x98c>
 80131f4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80131f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80131fe:	2b00      	cmp	r3, #0
 8013200:	f2c0 8158 	blt.w	80134b4 <_dtoa_r+0x73c>
 8013204:	f1ba 0f0e 	cmp.w	sl, #14
 8013208:	f300 8154 	bgt.w	80134b4 <_dtoa_r+0x73c>
 801320c:	4b6b      	ldr	r3, [pc, #428]	; (80133bc <_dtoa_r+0x644>)
 801320e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013212:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013218:	2b00      	cmp	r3, #0
 801321a:	f280 80e3 	bge.w	80133e4 <_dtoa_r+0x66c>
 801321e:	9b01      	ldr	r3, [sp, #4]
 8013220:	2b00      	cmp	r3, #0
 8013222:	f300 80df 	bgt.w	80133e4 <_dtoa_r+0x66c>
 8013226:	f040 826d 	bne.w	8013704 <_dtoa_r+0x98c>
 801322a:	4b69      	ldr	r3, [pc, #420]	; (80133d0 <_dtoa_r+0x658>)
 801322c:	2200      	movs	r2, #0
 801322e:	4640      	mov	r0, r8
 8013230:	4649      	mov	r1, r9
 8013232:	f7ed f9e1 	bl	80005f8 <__aeabi_dmul>
 8013236:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801323a:	f7ed fc63 	bl	8000b04 <__aeabi_dcmpge>
 801323e:	9e01      	ldr	r6, [sp, #4]
 8013240:	4637      	mov	r7, r6
 8013242:	2800      	cmp	r0, #0
 8013244:	f040 8243 	bne.w	80136ce <_dtoa_r+0x956>
 8013248:	9d00      	ldr	r5, [sp, #0]
 801324a:	2331      	movs	r3, #49	; 0x31
 801324c:	f805 3b01 	strb.w	r3, [r5], #1
 8013250:	f10a 0a01 	add.w	sl, sl, #1
 8013254:	e23f      	b.n	80136d6 <_dtoa_r+0x95e>
 8013256:	07f2      	lsls	r2, r6, #31
 8013258:	d505      	bpl.n	8013266 <_dtoa_r+0x4ee>
 801325a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801325e:	f7ed f9cb 	bl	80005f8 <__aeabi_dmul>
 8013262:	3501      	adds	r5, #1
 8013264:	2301      	movs	r3, #1
 8013266:	1076      	asrs	r6, r6, #1
 8013268:	3708      	adds	r7, #8
 801326a:	e76c      	b.n	8013146 <_dtoa_r+0x3ce>
 801326c:	2502      	movs	r5, #2
 801326e:	e76f      	b.n	8013150 <_dtoa_r+0x3d8>
 8013270:	9b01      	ldr	r3, [sp, #4]
 8013272:	f8cd a01c 	str.w	sl, [sp, #28]
 8013276:	930c      	str	r3, [sp, #48]	; 0x30
 8013278:	e78d      	b.n	8013196 <_dtoa_r+0x41e>
 801327a:	9900      	ldr	r1, [sp, #0]
 801327c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801327e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013280:	4b4e      	ldr	r3, [pc, #312]	; (80133bc <_dtoa_r+0x644>)
 8013282:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013286:	4401      	add	r1, r0
 8013288:	9102      	str	r1, [sp, #8]
 801328a:	9908      	ldr	r1, [sp, #32]
 801328c:	eeb0 8a47 	vmov.f32	s16, s14
 8013290:	eef0 8a67 	vmov.f32	s17, s15
 8013294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013298:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801329c:	2900      	cmp	r1, #0
 801329e:	d045      	beq.n	801332c <_dtoa_r+0x5b4>
 80132a0:	494c      	ldr	r1, [pc, #304]	; (80133d4 <_dtoa_r+0x65c>)
 80132a2:	2000      	movs	r0, #0
 80132a4:	f7ed fad2 	bl	800084c <__aeabi_ddiv>
 80132a8:	ec53 2b18 	vmov	r2, r3, d8
 80132ac:	f7ec ffec 	bl	8000288 <__aeabi_dsub>
 80132b0:	9d00      	ldr	r5, [sp, #0]
 80132b2:	ec41 0b18 	vmov	d8, r0, r1
 80132b6:	4639      	mov	r1, r7
 80132b8:	4630      	mov	r0, r6
 80132ba:	f7ed fc4d 	bl	8000b58 <__aeabi_d2iz>
 80132be:	900c      	str	r0, [sp, #48]	; 0x30
 80132c0:	f7ed f930 	bl	8000524 <__aeabi_i2d>
 80132c4:	4602      	mov	r2, r0
 80132c6:	460b      	mov	r3, r1
 80132c8:	4630      	mov	r0, r6
 80132ca:	4639      	mov	r1, r7
 80132cc:	f7ec ffdc 	bl	8000288 <__aeabi_dsub>
 80132d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80132d2:	3330      	adds	r3, #48	; 0x30
 80132d4:	f805 3b01 	strb.w	r3, [r5], #1
 80132d8:	ec53 2b18 	vmov	r2, r3, d8
 80132dc:	4606      	mov	r6, r0
 80132de:	460f      	mov	r7, r1
 80132e0:	f7ed fbfc 	bl	8000adc <__aeabi_dcmplt>
 80132e4:	2800      	cmp	r0, #0
 80132e6:	d165      	bne.n	80133b4 <_dtoa_r+0x63c>
 80132e8:	4632      	mov	r2, r6
 80132ea:	463b      	mov	r3, r7
 80132ec:	4935      	ldr	r1, [pc, #212]	; (80133c4 <_dtoa_r+0x64c>)
 80132ee:	2000      	movs	r0, #0
 80132f0:	f7ec ffca 	bl	8000288 <__aeabi_dsub>
 80132f4:	ec53 2b18 	vmov	r2, r3, d8
 80132f8:	f7ed fbf0 	bl	8000adc <__aeabi_dcmplt>
 80132fc:	2800      	cmp	r0, #0
 80132fe:	f040 80b9 	bne.w	8013474 <_dtoa_r+0x6fc>
 8013302:	9b02      	ldr	r3, [sp, #8]
 8013304:	429d      	cmp	r5, r3
 8013306:	f43f af75 	beq.w	80131f4 <_dtoa_r+0x47c>
 801330a:	4b2f      	ldr	r3, [pc, #188]	; (80133c8 <_dtoa_r+0x650>)
 801330c:	ec51 0b18 	vmov	r0, r1, d8
 8013310:	2200      	movs	r2, #0
 8013312:	f7ed f971 	bl	80005f8 <__aeabi_dmul>
 8013316:	4b2c      	ldr	r3, [pc, #176]	; (80133c8 <_dtoa_r+0x650>)
 8013318:	ec41 0b18 	vmov	d8, r0, r1
 801331c:	2200      	movs	r2, #0
 801331e:	4630      	mov	r0, r6
 8013320:	4639      	mov	r1, r7
 8013322:	f7ed f969 	bl	80005f8 <__aeabi_dmul>
 8013326:	4606      	mov	r6, r0
 8013328:	460f      	mov	r7, r1
 801332a:	e7c4      	b.n	80132b6 <_dtoa_r+0x53e>
 801332c:	ec51 0b17 	vmov	r0, r1, d7
 8013330:	f7ed f962 	bl	80005f8 <__aeabi_dmul>
 8013334:	9b02      	ldr	r3, [sp, #8]
 8013336:	9d00      	ldr	r5, [sp, #0]
 8013338:	930c      	str	r3, [sp, #48]	; 0x30
 801333a:	ec41 0b18 	vmov	d8, r0, r1
 801333e:	4639      	mov	r1, r7
 8013340:	4630      	mov	r0, r6
 8013342:	f7ed fc09 	bl	8000b58 <__aeabi_d2iz>
 8013346:	9011      	str	r0, [sp, #68]	; 0x44
 8013348:	f7ed f8ec 	bl	8000524 <__aeabi_i2d>
 801334c:	4602      	mov	r2, r0
 801334e:	460b      	mov	r3, r1
 8013350:	4630      	mov	r0, r6
 8013352:	4639      	mov	r1, r7
 8013354:	f7ec ff98 	bl	8000288 <__aeabi_dsub>
 8013358:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801335a:	3330      	adds	r3, #48	; 0x30
 801335c:	f805 3b01 	strb.w	r3, [r5], #1
 8013360:	9b02      	ldr	r3, [sp, #8]
 8013362:	429d      	cmp	r5, r3
 8013364:	4606      	mov	r6, r0
 8013366:	460f      	mov	r7, r1
 8013368:	f04f 0200 	mov.w	r2, #0
 801336c:	d134      	bne.n	80133d8 <_dtoa_r+0x660>
 801336e:	4b19      	ldr	r3, [pc, #100]	; (80133d4 <_dtoa_r+0x65c>)
 8013370:	ec51 0b18 	vmov	r0, r1, d8
 8013374:	f7ec ff8a 	bl	800028c <__adddf3>
 8013378:	4602      	mov	r2, r0
 801337a:	460b      	mov	r3, r1
 801337c:	4630      	mov	r0, r6
 801337e:	4639      	mov	r1, r7
 8013380:	f7ed fbca 	bl	8000b18 <__aeabi_dcmpgt>
 8013384:	2800      	cmp	r0, #0
 8013386:	d175      	bne.n	8013474 <_dtoa_r+0x6fc>
 8013388:	ec53 2b18 	vmov	r2, r3, d8
 801338c:	4911      	ldr	r1, [pc, #68]	; (80133d4 <_dtoa_r+0x65c>)
 801338e:	2000      	movs	r0, #0
 8013390:	f7ec ff7a 	bl	8000288 <__aeabi_dsub>
 8013394:	4602      	mov	r2, r0
 8013396:	460b      	mov	r3, r1
 8013398:	4630      	mov	r0, r6
 801339a:	4639      	mov	r1, r7
 801339c:	f7ed fb9e 	bl	8000adc <__aeabi_dcmplt>
 80133a0:	2800      	cmp	r0, #0
 80133a2:	f43f af27 	beq.w	80131f4 <_dtoa_r+0x47c>
 80133a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80133a8:	1e6b      	subs	r3, r5, #1
 80133aa:	930c      	str	r3, [sp, #48]	; 0x30
 80133ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80133b0:	2b30      	cmp	r3, #48	; 0x30
 80133b2:	d0f8      	beq.n	80133a6 <_dtoa_r+0x62e>
 80133b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80133b8:	e04a      	b.n	8013450 <_dtoa_r+0x6d8>
 80133ba:	bf00      	nop
 80133bc:	08015fe0 	.word	0x08015fe0
 80133c0:	08015fb8 	.word	0x08015fb8
 80133c4:	3ff00000 	.word	0x3ff00000
 80133c8:	40240000 	.word	0x40240000
 80133cc:	401c0000 	.word	0x401c0000
 80133d0:	40140000 	.word	0x40140000
 80133d4:	3fe00000 	.word	0x3fe00000
 80133d8:	4baf      	ldr	r3, [pc, #700]	; (8013698 <_dtoa_r+0x920>)
 80133da:	f7ed f90d 	bl	80005f8 <__aeabi_dmul>
 80133de:	4606      	mov	r6, r0
 80133e0:	460f      	mov	r7, r1
 80133e2:	e7ac      	b.n	801333e <_dtoa_r+0x5c6>
 80133e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80133e8:	9d00      	ldr	r5, [sp, #0]
 80133ea:	4642      	mov	r2, r8
 80133ec:	464b      	mov	r3, r9
 80133ee:	4630      	mov	r0, r6
 80133f0:	4639      	mov	r1, r7
 80133f2:	f7ed fa2b 	bl	800084c <__aeabi_ddiv>
 80133f6:	f7ed fbaf 	bl	8000b58 <__aeabi_d2iz>
 80133fa:	9002      	str	r0, [sp, #8]
 80133fc:	f7ed f892 	bl	8000524 <__aeabi_i2d>
 8013400:	4642      	mov	r2, r8
 8013402:	464b      	mov	r3, r9
 8013404:	f7ed f8f8 	bl	80005f8 <__aeabi_dmul>
 8013408:	4602      	mov	r2, r0
 801340a:	460b      	mov	r3, r1
 801340c:	4630      	mov	r0, r6
 801340e:	4639      	mov	r1, r7
 8013410:	f7ec ff3a 	bl	8000288 <__aeabi_dsub>
 8013414:	9e02      	ldr	r6, [sp, #8]
 8013416:	9f01      	ldr	r7, [sp, #4]
 8013418:	3630      	adds	r6, #48	; 0x30
 801341a:	f805 6b01 	strb.w	r6, [r5], #1
 801341e:	9e00      	ldr	r6, [sp, #0]
 8013420:	1bae      	subs	r6, r5, r6
 8013422:	42b7      	cmp	r7, r6
 8013424:	4602      	mov	r2, r0
 8013426:	460b      	mov	r3, r1
 8013428:	d137      	bne.n	801349a <_dtoa_r+0x722>
 801342a:	f7ec ff2f 	bl	800028c <__adddf3>
 801342e:	4642      	mov	r2, r8
 8013430:	464b      	mov	r3, r9
 8013432:	4606      	mov	r6, r0
 8013434:	460f      	mov	r7, r1
 8013436:	f7ed fb6f 	bl	8000b18 <__aeabi_dcmpgt>
 801343a:	b9c8      	cbnz	r0, 8013470 <_dtoa_r+0x6f8>
 801343c:	4642      	mov	r2, r8
 801343e:	464b      	mov	r3, r9
 8013440:	4630      	mov	r0, r6
 8013442:	4639      	mov	r1, r7
 8013444:	f7ed fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8013448:	b110      	cbz	r0, 8013450 <_dtoa_r+0x6d8>
 801344a:	9b02      	ldr	r3, [sp, #8]
 801344c:	07d9      	lsls	r1, r3, #31
 801344e:	d40f      	bmi.n	8013470 <_dtoa_r+0x6f8>
 8013450:	4620      	mov	r0, r4
 8013452:	4659      	mov	r1, fp
 8013454:	f000 fce8 	bl	8013e28 <_Bfree>
 8013458:	2300      	movs	r3, #0
 801345a:	702b      	strb	r3, [r5, #0]
 801345c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801345e:	f10a 0001 	add.w	r0, sl, #1
 8013462:	6018      	str	r0, [r3, #0]
 8013464:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013466:	2b00      	cmp	r3, #0
 8013468:	f43f acd8 	beq.w	8012e1c <_dtoa_r+0xa4>
 801346c:	601d      	str	r5, [r3, #0]
 801346e:	e4d5      	b.n	8012e1c <_dtoa_r+0xa4>
 8013470:	f8cd a01c 	str.w	sl, [sp, #28]
 8013474:	462b      	mov	r3, r5
 8013476:	461d      	mov	r5, r3
 8013478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801347c:	2a39      	cmp	r2, #57	; 0x39
 801347e:	d108      	bne.n	8013492 <_dtoa_r+0x71a>
 8013480:	9a00      	ldr	r2, [sp, #0]
 8013482:	429a      	cmp	r2, r3
 8013484:	d1f7      	bne.n	8013476 <_dtoa_r+0x6fe>
 8013486:	9a07      	ldr	r2, [sp, #28]
 8013488:	9900      	ldr	r1, [sp, #0]
 801348a:	3201      	adds	r2, #1
 801348c:	9207      	str	r2, [sp, #28]
 801348e:	2230      	movs	r2, #48	; 0x30
 8013490:	700a      	strb	r2, [r1, #0]
 8013492:	781a      	ldrb	r2, [r3, #0]
 8013494:	3201      	adds	r2, #1
 8013496:	701a      	strb	r2, [r3, #0]
 8013498:	e78c      	b.n	80133b4 <_dtoa_r+0x63c>
 801349a:	4b7f      	ldr	r3, [pc, #508]	; (8013698 <_dtoa_r+0x920>)
 801349c:	2200      	movs	r2, #0
 801349e:	f7ed f8ab 	bl	80005f8 <__aeabi_dmul>
 80134a2:	2200      	movs	r2, #0
 80134a4:	2300      	movs	r3, #0
 80134a6:	4606      	mov	r6, r0
 80134a8:	460f      	mov	r7, r1
 80134aa:	f7ed fb0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80134ae:	2800      	cmp	r0, #0
 80134b0:	d09b      	beq.n	80133ea <_dtoa_r+0x672>
 80134b2:	e7cd      	b.n	8013450 <_dtoa_r+0x6d8>
 80134b4:	9a08      	ldr	r2, [sp, #32]
 80134b6:	2a00      	cmp	r2, #0
 80134b8:	f000 80c4 	beq.w	8013644 <_dtoa_r+0x8cc>
 80134bc:	9a05      	ldr	r2, [sp, #20]
 80134be:	2a01      	cmp	r2, #1
 80134c0:	f300 80a8 	bgt.w	8013614 <_dtoa_r+0x89c>
 80134c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80134c6:	2a00      	cmp	r2, #0
 80134c8:	f000 80a0 	beq.w	801360c <_dtoa_r+0x894>
 80134cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80134d0:	9e06      	ldr	r6, [sp, #24]
 80134d2:	4645      	mov	r5, r8
 80134d4:	9a04      	ldr	r2, [sp, #16]
 80134d6:	2101      	movs	r1, #1
 80134d8:	441a      	add	r2, r3
 80134da:	4620      	mov	r0, r4
 80134dc:	4498      	add	r8, r3
 80134de:	9204      	str	r2, [sp, #16]
 80134e0:	f000 fd5e 	bl	8013fa0 <__i2b>
 80134e4:	4607      	mov	r7, r0
 80134e6:	2d00      	cmp	r5, #0
 80134e8:	dd0b      	ble.n	8013502 <_dtoa_r+0x78a>
 80134ea:	9b04      	ldr	r3, [sp, #16]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	dd08      	ble.n	8013502 <_dtoa_r+0x78a>
 80134f0:	42ab      	cmp	r3, r5
 80134f2:	9a04      	ldr	r2, [sp, #16]
 80134f4:	bfa8      	it	ge
 80134f6:	462b      	movge	r3, r5
 80134f8:	eba8 0803 	sub.w	r8, r8, r3
 80134fc:	1aed      	subs	r5, r5, r3
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	9304      	str	r3, [sp, #16]
 8013502:	9b06      	ldr	r3, [sp, #24]
 8013504:	b1fb      	cbz	r3, 8013546 <_dtoa_r+0x7ce>
 8013506:	9b08      	ldr	r3, [sp, #32]
 8013508:	2b00      	cmp	r3, #0
 801350a:	f000 809f 	beq.w	801364c <_dtoa_r+0x8d4>
 801350e:	2e00      	cmp	r6, #0
 8013510:	dd11      	ble.n	8013536 <_dtoa_r+0x7be>
 8013512:	4639      	mov	r1, r7
 8013514:	4632      	mov	r2, r6
 8013516:	4620      	mov	r0, r4
 8013518:	f000 fdfe 	bl	8014118 <__pow5mult>
 801351c:	465a      	mov	r2, fp
 801351e:	4601      	mov	r1, r0
 8013520:	4607      	mov	r7, r0
 8013522:	4620      	mov	r0, r4
 8013524:	f000 fd52 	bl	8013fcc <__multiply>
 8013528:	4659      	mov	r1, fp
 801352a:	9007      	str	r0, [sp, #28]
 801352c:	4620      	mov	r0, r4
 801352e:	f000 fc7b 	bl	8013e28 <_Bfree>
 8013532:	9b07      	ldr	r3, [sp, #28]
 8013534:	469b      	mov	fp, r3
 8013536:	9b06      	ldr	r3, [sp, #24]
 8013538:	1b9a      	subs	r2, r3, r6
 801353a:	d004      	beq.n	8013546 <_dtoa_r+0x7ce>
 801353c:	4659      	mov	r1, fp
 801353e:	4620      	mov	r0, r4
 8013540:	f000 fdea 	bl	8014118 <__pow5mult>
 8013544:	4683      	mov	fp, r0
 8013546:	2101      	movs	r1, #1
 8013548:	4620      	mov	r0, r4
 801354a:	f000 fd29 	bl	8013fa0 <__i2b>
 801354e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013550:	2b00      	cmp	r3, #0
 8013552:	4606      	mov	r6, r0
 8013554:	dd7c      	ble.n	8013650 <_dtoa_r+0x8d8>
 8013556:	461a      	mov	r2, r3
 8013558:	4601      	mov	r1, r0
 801355a:	4620      	mov	r0, r4
 801355c:	f000 fddc 	bl	8014118 <__pow5mult>
 8013560:	9b05      	ldr	r3, [sp, #20]
 8013562:	2b01      	cmp	r3, #1
 8013564:	4606      	mov	r6, r0
 8013566:	dd76      	ble.n	8013656 <_dtoa_r+0x8de>
 8013568:	2300      	movs	r3, #0
 801356a:	9306      	str	r3, [sp, #24]
 801356c:	6933      	ldr	r3, [r6, #16]
 801356e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013572:	6918      	ldr	r0, [r3, #16]
 8013574:	f000 fcc4 	bl	8013f00 <__hi0bits>
 8013578:	f1c0 0020 	rsb	r0, r0, #32
 801357c:	9b04      	ldr	r3, [sp, #16]
 801357e:	4418      	add	r0, r3
 8013580:	f010 001f 	ands.w	r0, r0, #31
 8013584:	f000 8086 	beq.w	8013694 <_dtoa_r+0x91c>
 8013588:	f1c0 0320 	rsb	r3, r0, #32
 801358c:	2b04      	cmp	r3, #4
 801358e:	dd7f      	ble.n	8013690 <_dtoa_r+0x918>
 8013590:	f1c0 001c 	rsb	r0, r0, #28
 8013594:	9b04      	ldr	r3, [sp, #16]
 8013596:	4403      	add	r3, r0
 8013598:	4480      	add	r8, r0
 801359a:	4405      	add	r5, r0
 801359c:	9304      	str	r3, [sp, #16]
 801359e:	f1b8 0f00 	cmp.w	r8, #0
 80135a2:	dd05      	ble.n	80135b0 <_dtoa_r+0x838>
 80135a4:	4659      	mov	r1, fp
 80135a6:	4642      	mov	r2, r8
 80135a8:	4620      	mov	r0, r4
 80135aa:	f000 fe0f 	bl	80141cc <__lshift>
 80135ae:	4683      	mov	fp, r0
 80135b0:	9b04      	ldr	r3, [sp, #16]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	dd05      	ble.n	80135c2 <_dtoa_r+0x84a>
 80135b6:	4631      	mov	r1, r6
 80135b8:	461a      	mov	r2, r3
 80135ba:	4620      	mov	r0, r4
 80135bc:	f000 fe06 	bl	80141cc <__lshift>
 80135c0:	4606      	mov	r6, r0
 80135c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d069      	beq.n	801369c <_dtoa_r+0x924>
 80135c8:	4631      	mov	r1, r6
 80135ca:	4658      	mov	r0, fp
 80135cc:	f000 fe6a 	bl	80142a4 <__mcmp>
 80135d0:	2800      	cmp	r0, #0
 80135d2:	da63      	bge.n	801369c <_dtoa_r+0x924>
 80135d4:	2300      	movs	r3, #0
 80135d6:	4659      	mov	r1, fp
 80135d8:	220a      	movs	r2, #10
 80135da:	4620      	mov	r0, r4
 80135dc:	f000 fc46 	bl	8013e6c <__multadd>
 80135e0:	9b08      	ldr	r3, [sp, #32]
 80135e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80135e6:	4683      	mov	fp, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	f000 818f 	beq.w	801390c <_dtoa_r+0xb94>
 80135ee:	4639      	mov	r1, r7
 80135f0:	2300      	movs	r3, #0
 80135f2:	220a      	movs	r2, #10
 80135f4:	4620      	mov	r0, r4
 80135f6:	f000 fc39 	bl	8013e6c <__multadd>
 80135fa:	f1b9 0f00 	cmp.w	r9, #0
 80135fe:	4607      	mov	r7, r0
 8013600:	f300 808e 	bgt.w	8013720 <_dtoa_r+0x9a8>
 8013604:	9b05      	ldr	r3, [sp, #20]
 8013606:	2b02      	cmp	r3, #2
 8013608:	dc50      	bgt.n	80136ac <_dtoa_r+0x934>
 801360a:	e089      	b.n	8013720 <_dtoa_r+0x9a8>
 801360c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801360e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013612:	e75d      	b.n	80134d0 <_dtoa_r+0x758>
 8013614:	9b01      	ldr	r3, [sp, #4]
 8013616:	1e5e      	subs	r6, r3, #1
 8013618:	9b06      	ldr	r3, [sp, #24]
 801361a:	42b3      	cmp	r3, r6
 801361c:	bfbf      	itttt	lt
 801361e:	9b06      	ldrlt	r3, [sp, #24]
 8013620:	9606      	strlt	r6, [sp, #24]
 8013622:	1af2      	sublt	r2, r6, r3
 8013624:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8013626:	bfb6      	itet	lt
 8013628:	189b      	addlt	r3, r3, r2
 801362a:	1b9e      	subge	r6, r3, r6
 801362c:	930d      	strlt	r3, [sp, #52]	; 0x34
 801362e:	9b01      	ldr	r3, [sp, #4]
 8013630:	bfb8      	it	lt
 8013632:	2600      	movlt	r6, #0
 8013634:	2b00      	cmp	r3, #0
 8013636:	bfb5      	itete	lt
 8013638:	eba8 0503 	sublt.w	r5, r8, r3
 801363c:	9b01      	ldrge	r3, [sp, #4]
 801363e:	2300      	movlt	r3, #0
 8013640:	4645      	movge	r5, r8
 8013642:	e747      	b.n	80134d4 <_dtoa_r+0x75c>
 8013644:	9e06      	ldr	r6, [sp, #24]
 8013646:	9f08      	ldr	r7, [sp, #32]
 8013648:	4645      	mov	r5, r8
 801364a:	e74c      	b.n	80134e6 <_dtoa_r+0x76e>
 801364c:	9a06      	ldr	r2, [sp, #24]
 801364e:	e775      	b.n	801353c <_dtoa_r+0x7c4>
 8013650:	9b05      	ldr	r3, [sp, #20]
 8013652:	2b01      	cmp	r3, #1
 8013654:	dc18      	bgt.n	8013688 <_dtoa_r+0x910>
 8013656:	9b02      	ldr	r3, [sp, #8]
 8013658:	b9b3      	cbnz	r3, 8013688 <_dtoa_r+0x910>
 801365a:	9b03      	ldr	r3, [sp, #12]
 801365c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013660:	b9a3      	cbnz	r3, 801368c <_dtoa_r+0x914>
 8013662:	9b03      	ldr	r3, [sp, #12]
 8013664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013668:	0d1b      	lsrs	r3, r3, #20
 801366a:	051b      	lsls	r3, r3, #20
 801366c:	b12b      	cbz	r3, 801367a <_dtoa_r+0x902>
 801366e:	9b04      	ldr	r3, [sp, #16]
 8013670:	3301      	adds	r3, #1
 8013672:	9304      	str	r3, [sp, #16]
 8013674:	f108 0801 	add.w	r8, r8, #1
 8013678:	2301      	movs	r3, #1
 801367a:	9306      	str	r3, [sp, #24]
 801367c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801367e:	2b00      	cmp	r3, #0
 8013680:	f47f af74 	bne.w	801356c <_dtoa_r+0x7f4>
 8013684:	2001      	movs	r0, #1
 8013686:	e779      	b.n	801357c <_dtoa_r+0x804>
 8013688:	2300      	movs	r3, #0
 801368a:	e7f6      	b.n	801367a <_dtoa_r+0x902>
 801368c:	9b02      	ldr	r3, [sp, #8]
 801368e:	e7f4      	b.n	801367a <_dtoa_r+0x902>
 8013690:	d085      	beq.n	801359e <_dtoa_r+0x826>
 8013692:	4618      	mov	r0, r3
 8013694:	301c      	adds	r0, #28
 8013696:	e77d      	b.n	8013594 <_dtoa_r+0x81c>
 8013698:	40240000 	.word	0x40240000
 801369c:	9b01      	ldr	r3, [sp, #4]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	dc38      	bgt.n	8013714 <_dtoa_r+0x99c>
 80136a2:	9b05      	ldr	r3, [sp, #20]
 80136a4:	2b02      	cmp	r3, #2
 80136a6:	dd35      	ble.n	8013714 <_dtoa_r+0x99c>
 80136a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80136ac:	f1b9 0f00 	cmp.w	r9, #0
 80136b0:	d10d      	bne.n	80136ce <_dtoa_r+0x956>
 80136b2:	4631      	mov	r1, r6
 80136b4:	464b      	mov	r3, r9
 80136b6:	2205      	movs	r2, #5
 80136b8:	4620      	mov	r0, r4
 80136ba:	f000 fbd7 	bl	8013e6c <__multadd>
 80136be:	4601      	mov	r1, r0
 80136c0:	4606      	mov	r6, r0
 80136c2:	4658      	mov	r0, fp
 80136c4:	f000 fdee 	bl	80142a4 <__mcmp>
 80136c8:	2800      	cmp	r0, #0
 80136ca:	f73f adbd 	bgt.w	8013248 <_dtoa_r+0x4d0>
 80136ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d0:	9d00      	ldr	r5, [sp, #0]
 80136d2:	ea6f 0a03 	mvn.w	sl, r3
 80136d6:	f04f 0800 	mov.w	r8, #0
 80136da:	4631      	mov	r1, r6
 80136dc:	4620      	mov	r0, r4
 80136de:	f000 fba3 	bl	8013e28 <_Bfree>
 80136e2:	2f00      	cmp	r7, #0
 80136e4:	f43f aeb4 	beq.w	8013450 <_dtoa_r+0x6d8>
 80136e8:	f1b8 0f00 	cmp.w	r8, #0
 80136ec:	d005      	beq.n	80136fa <_dtoa_r+0x982>
 80136ee:	45b8      	cmp	r8, r7
 80136f0:	d003      	beq.n	80136fa <_dtoa_r+0x982>
 80136f2:	4641      	mov	r1, r8
 80136f4:	4620      	mov	r0, r4
 80136f6:	f000 fb97 	bl	8013e28 <_Bfree>
 80136fa:	4639      	mov	r1, r7
 80136fc:	4620      	mov	r0, r4
 80136fe:	f000 fb93 	bl	8013e28 <_Bfree>
 8013702:	e6a5      	b.n	8013450 <_dtoa_r+0x6d8>
 8013704:	2600      	movs	r6, #0
 8013706:	4637      	mov	r7, r6
 8013708:	e7e1      	b.n	80136ce <_dtoa_r+0x956>
 801370a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801370c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013710:	4637      	mov	r7, r6
 8013712:	e599      	b.n	8013248 <_dtoa_r+0x4d0>
 8013714:	9b08      	ldr	r3, [sp, #32]
 8013716:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	f000 80fd 	beq.w	801391a <_dtoa_r+0xba2>
 8013720:	2d00      	cmp	r5, #0
 8013722:	dd05      	ble.n	8013730 <_dtoa_r+0x9b8>
 8013724:	4639      	mov	r1, r7
 8013726:	462a      	mov	r2, r5
 8013728:	4620      	mov	r0, r4
 801372a:	f000 fd4f 	bl	80141cc <__lshift>
 801372e:	4607      	mov	r7, r0
 8013730:	9b06      	ldr	r3, [sp, #24]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d05c      	beq.n	80137f0 <_dtoa_r+0xa78>
 8013736:	6879      	ldr	r1, [r7, #4]
 8013738:	4620      	mov	r0, r4
 801373a:	f000 fb35 	bl	8013da8 <_Balloc>
 801373e:	4605      	mov	r5, r0
 8013740:	b928      	cbnz	r0, 801374e <_dtoa_r+0x9d6>
 8013742:	4b80      	ldr	r3, [pc, #512]	; (8013944 <_dtoa_r+0xbcc>)
 8013744:	4602      	mov	r2, r0
 8013746:	f240 21ea 	movw	r1, #746	; 0x2ea
 801374a:	f7ff bb2e 	b.w	8012daa <_dtoa_r+0x32>
 801374e:	693a      	ldr	r2, [r7, #16]
 8013750:	3202      	adds	r2, #2
 8013752:	0092      	lsls	r2, r2, #2
 8013754:	f107 010c 	add.w	r1, r7, #12
 8013758:	300c      	adds	r0, #12
 801375a:	f7fe fbdf 	bl	8011f1c <memcpy>
 801375e:	2201      	movs	r2, #1
 8013760:	4629      	mov	r1, r5
 8013762:	4620      	mov	r0, r4
 8013764:	f000 fd32 	bl	80141cc <__lshift>
 8013768:	9b00      	ldr	r3, [sp, #0]
 801376a:	3301      	adds	r3, #1
 801376c:	9301      	str	r3, [sp, #4]
 801376e:	9b00      	ldr	r3, [sp, #0]
 8013770:	444b      	add	r3, r9
 8013772:	9307      	str	r3, [sp, #28]
 8013774:	9b02      	ldr	r3, [sp, #8]
 8013776:	f003 0301 	and.w	r3, r3, #1
 801377a:	46b8      	mov	r8, r7
 801377c:	9306      	str	r3, [sp, #24]
 801377e:	4607      	mov	r7, r0
 8013780:	9b01      	ldr	r3, [sp, #4]
 8013782:	4631      	mov	r1, r6
 8013784:	3b01      	subs	r3, #1
 8013786:	4658      	mov	r0, fp
 8013788:	9302      	str	r3, [sp, #8]
 801378a:	f7ff fa68 	bl	8012c5e <quorem>
 801378e:	4603      	mov	r3, r0
 8013790:	3330      	adds	r3, #48	; 0x30
 8013792:	9004      	str	r0, [sp, #16]
 8013794:	4641      	mov	r1, r8
 8013796:	4658      	mov	r0, fp
 8013798:	9308      	str	r3, [sp, #32]
 801379a:	f000 fd83 	bl	80142a4 <__mcmp>
 801379e:	463a      	mov	r2, r7
 80137a0:	4681      	mov	r9, r0
 80137a2:	4631      	mov	r1, r6
 80137a4:	4620      	mov	r0, r4
 80137a6:	f000 fd99 	bl	80142dc <__mdiff>
 80137aa:	68c2      	ldr	r2, [r0, #12]
 80137ac:	9b08      	ldr	r3, [sp, #32]
 80137ae:	4605      	mov	r5, r0
 80137b0:	bb02      	cbnz	r2, 80137f4 <_dtoa_r+0xa7c>
 80137b2:	4601      	mov	r1, r0
 80137b4:	4658      	mov	r0, fp
 80137b6:	f000 fd75 	bl	80142a4 <__mcmp>
 80137ba:	9b08      	ldr	r3, [sp, #32]
 80137bc:	4602      	mov	r2, r0
 80137be:	4629      	mov	r1, r5
 80137c0:	4620      	mov	r0, r4
 80137c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80137c6:	f000 fb2f 	bl	8013e28 <_Bfree>
 80137ca:	9b05      	ldr	r3, [sp, #20]
 80137cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137ce:	9d01      	ldr	r5, [sp, #4]
 80137d0:	ea43 0102 	orr.w	r1, r3, r2
 80137d4:	9b06      	ldr	r3, [sp, #24]
 80137d6:	430b      	orrs	r3, r1
 80137d8:	9b08      	ldr	r3, [sp, #32]
 80137da:	d10d      	bne.n	80137f8 <_dtoa_r+0xa80>
 80137dc:	2b39      	cmp	r3, #57	; 0x39
 80137de:	d029      	beq.n	8013834 <_dtoa_r+0xabc>
 80137e0:	f1b9 0f00 	cmp.w	r9, #0
 80137e4:	dd01      	ble.n	80137ea <_dtoa_r+0xa72>
 80137e6:	9b04      	ldr	r3, [sp, #16]
 80137e8:	3331      	adds	r3, #49	; 0x31
 80137ea:	9a02      	ldr	r2, [sp, #8]
 80137ec:	7013      	strb	r3, [r2, #0]
 80137ee:	e774      	b.n	80136da <_dtoa_r+0x962>
 80137f0:	4638      	mov	r0, r7
 80137f2:	e7b9      	b.n	8013768 <_dtoa_r+0x9f0>
 80137f4:	2201      	movs	r2, #1
 80137f6:	e7e2      	b.n	80137be <_dtoa_r+0xa46>
 80137f8:	f1b9 0f00 	cmp.w	r9, #0
 80137fc:	db06      	blt.n	801380c <_dtoa_r+0xa94>
 80137fe:	9905      	ldr	r1, [sp, #20]
 8013800:	ea41 0909 	orr.w	r9, r1, r9
 8013804:	9906      	ldr	r1, [sp, #24]
 8013806:	ea59 0101 	orrs.w	r1, r9, r1
 801380a:	d120      	bne.n	801384e <_dtoa_r+0xad6>
 801380c:	2a00      	cmp	r2, #0
 801380e:	ddec      	ble.n	80137ea <_dtoa_r+0xa72>
 8013810:	4659      	mov	r1, fp
 8013812:	2201      	movs	r2, #1
 8013814:	4620      	mov	r0, r4
 8013816:	9301      	str	r3, [sp, #4]
 8013818:	f000 fcd8 	bl	80141cc <__lshift>
 801381c:	4631      	mov	r1, r6
 801381e:	4683      	mov	fp, r0
 8013820:	f000 fd40 	bl	80142a4 <__mcmp>
 8013824:	2800      	cmp	r0, #0
 8013826:	9b01      	ldr	r3, [sp, #4]
 8013828:	dc02      	bgt.n	8013830 <_dtoa_r+0xab8>
 801382a:	d1de      	bne.n	80137ea <_dtoa_r+0xa72>
 801382c:	07da      	lsls	r2, r3, #31
 801382e:	d5dc      	bpl.n	80137ea <_dtoa_r+0xa72>
 8013830:	2b39      	cmp	r3, #57	; 0x39
 8013832:	d1d8      	bne.n	80137e6 <_dtoa_r+0xa6e>
 8013834:	9a02      	ldr	r2, [sp, #8]
 8013836:	2339      	movs	r3, #57	; 0x39
 8013838:	7013      	strb	r3, [r2, #0]
 801383a:	462b      	mov	r3, r5
 801383c:	461d      	mov	r5, r3
 801383e:	3b01      	subs	r3, #1
 8013840:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013844:	2a39      	cmp	r2, #57	; 0x39
 8013846:	d050      	beq.n	80138ea <_dtoa_r+0xb72>
 8013848:	3201      	adds	r2, #1
 801384a:	701a      	strb	r2, [r3, #0]
 801384c:	e745      	b.n	80136da <_dtoa_r+0x962>
 801384e:	2a00      	cmp	r2, #0
 8013850:	dd03      	ble.n	801385a <_dtoa_r+0xae2>
 8013852:	2b39      	cmp	r3, #57	; 0x39
 8013854:	d0ee      	beq.n	8013834 <_dtoa_r+0xabc>
 8013856:	3301      	adds	r3, #1
 8013858:	e7c7      	b.n	80137ea <_dtoa_r+0xa72>
 801385a:	9a01      	ldr	r2, [sp, #4]
 801385c:	9907      	ldr	r1, [sp, #28]
 801385e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8013862:	428a      	cmp	r2, r1
 8013864:	d02a      	beq.n	80138bc <_dtoa_r+0xb44>
 8013866:	4659      	mov	r1, fp
 8013868:	2300      	movs	r3, #0
 801386a:	220a      	movs	r2, #10
 801386c:	4620      	mov	r0, r4
 801386e:	f000 fafd 	bl	8013e6c <__multadd>
 8013872:	45b8      	cmp	r8, r7
 8013874:	4683      	mov	fp, r0
 8013876:	f04f 0300 	mov.w	r3, #0
 801387a:	f04f 020a 	mov.w	r2, #10
 801387e:	4641      	mov	r1, r8
 8013880:	4620      	mov	r0, r4
 8013882:	d107      	bne.n	8013894 <_dtoa_r+0xb1c>
 8013884:	f000 faf2 	bl	8013e6c <__multadd>
 8013888:	4680      	mov	r8, r0
 801388a:	4607      	mov	r7, r0
 801388c:	9b01      	ldr	r3, [sp, #4]
 801388e:	3301      	adds	r3, #1
 8013890:	9301      	str	r3, [sp, #4]
 8013892:	e775      	b.n	8013780 <_dtoa_r+0xa08>
 8013894:	f000 faea 	bl	8013e6c <__multadd>
 8013898:	4639      	mov	r1, r7
 801389a:	4680      	mov	r8, r0
 801389c:	2300      	movs	r3, #0
 801389e:	220a      	movs	r2, #10
 80138a0:	4620      	mov	r0, r4
 80138a2:	f000 fae3 	bl	8013e6c <__multadd>
 80138a6:	4607      	mov	r7, r0
 80138a8:	e7f0      	b.n	801388c <_dtoa_r+0xb14>
 80138aa:	f1b9 0f00 	cmp.w	r9, #0
 80138ae:	9a00      	ldr	r2, [sp, #0]
 80138b0:	bfcc      	ite	gt
 80138b2:	464d      	movgt	r5, r9
 80138b4:	2501      	movle	r5, #1
 80138b6:	4415      	add	r5, r2
 80138b8:	f04f 0800 	mov.w	r8, #0
 80138bc:	4659      	mov	r1, fp
 80138be:	2201      	movs	r2, #1
 80138c0:	4620      	mov	r0, r4
 80138c2:	9301      	str	r3, [sp, #4]
 80138c4:	f000 fc82 	bl	80141cc <__lshift>
 80138c8:	4631      	mov	r1, r6
 80138ca:	4683      	mov	fp, r0
 80138cc:	f000 fcea 	bl	80142a4 <__mcmp>
 80138d0:	2800      	cmp	r0, #0
 80138d2:	dcb2      	bgt.n	801383a <_dtoa_r+0xac2>
 80138d4:	d102      	bne.n	80138dc <_dtoa_r+0xb64>
 80138d6:	9b01      	ldr	r3, [sp, #4]
 80138d8:	07db      	lsls	r3, r3, #31
 80138da:	d4ae      	bmi.n	801383a <_dtoa_r+0xac2>
 80138dc:	462b      	mov	r3, r5
 80138de:	461d      	mov	r5, r3
 80138e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80138e4:	2a30      	cmp	r2, #48	; 0x30
 80138e6:	d0fa      	beq.n	80138de <_dtoa_r+0xb66>
 80138e8:	e6f7      	b.n	80136da <_dtoa_r+0x962>
 80138ea:	9a00      	ldr	r2, [sp, #0]
 80138ec:	429a      	cmp	r2, r3
 80138ee:	d1a5      	bne.n	801383c <_dtoa_r+0xac4>
 80138f0:	f10a 0a01 	add.w	sl, sl, #1
 80138f4:	2331      	movs	r3, #49	; 0x31
 80138f6:	e779      	b.n	80137ec <_dtoa_r+0xa74>
 80138f8:	4b13      	ldr	r3, [pc, #76]	; (8013948 <_dtoa_r+0xbd0>)
 80138fa:	f7ff baaf 	b.w	8012e5c <_dtoa_r+0xe4>
 80138fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013900:	2b00      	cmp	r3, #0
 8013902:	f47f aa86 	bne.w	8012e12 <_dtoa_r+0x9a>
 8013906:	4b11      	ldr	r3, [pc, #68]	; (801394c <_dtoa_r+0xbd4>)
 8013908:	f7ff baa8 	b.w	8012e5c <_dtoa_r+0xe4>
 801390c:	f1b9 0f00 	cmp.w	r9, #0
 8013910:	dc03      	bgt.n	801391a <_dtoa_r+0xba2>
 8013912:	9b05      	ldr	r3, [sp, #20]
 8013914:	2b02      	cmp	r3, #2
 8013916:	f73f aec9 	bgt.w	80136ac <_dtoa_r+0x934>
 801391a:	9d00      	ldr	r5, [sp, #0]
 801391c:	4631      	mov	r1, r6
 801391e:	4658      	mov	r0, fp
 8013920:	f7ff f99d 	bl	8012c5e <quorem>
 8013924:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8013928:	f805 3b01 	strb.w	r3, [r5], #1
 801392c:	9a00      	ldr	r2, [sp, #0]
 801392e:	1aaa      	subs	r2, r5, r2
 8013930:	4591      	cmp	r9, r2
 8013932:	ddba      	ble.n	80138aa <_dtoa_r+0xb32>
 8013934:	4659      	mov	r1, fp
 8013936:	2300      	movs	r3, #0
 8013938:	220a      	movs	r2, #10
 801393a:	4620      	mov	r0, r4
 801393c:	f000 fa96 	bl	8013e6c <__multadd>
 8013940:	4683      	mov	fp, r0
 8013942:	e7eb      	b.n	801391c <_dtoa_r+0xba4>
 8013944:	08015ee0 	.word	0x08015ee0
 8013948:	08015e39 	.word	0x08015e39
 801394c:	08015e5d 	.word	0x08015e5d

08013950 <__sflush_r>:
 8013950:	898a      	ldrh	r2, [r1, #12]
 8013952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013956:	4605      	mov	r5, r0
 8013958:	0710      	lsls	r0, r2, #28
 801395a:	460c      	mov	r4, r1
 801395c:	d458      	bmi.n	8013a10 <__sflush_r+0xc0>
 801395e:	684b      	ldr	r3, [r1, #4]
 8013960:	2b00      	cmp	r3, #0
 8013962:	dc05      	bgt.n	8013970 <__sflush_r+0x20>
 8013964:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013966:	2b00      	cmp	r3, #0
 8013968:	dc02      	bgt.n	8013970 <__sflush_r+0x20>
 801396a:	2000      	movs	r0, #0
 801396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013970:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013972:	2e00      	cmp	r6, #0
 8013974:	d0f9      	beq.n	801396a <__sflush_r+0x1a>
 8013976:	2300      	movs	r3, #0
 8013978:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801397c:	682f      	ldr	r7, [r5, #0]
 801397e:	602b      	str	r3, [r5, #0]
 8013980:	d032      	beq.n	80139e8 <__sflush_r+0x98>
 8013982:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013984:	89a3      	ldrh	r3, [r4, #12]
 8013986:	075a      	lsls	r2, r3, #29
 8013988:	d505      	bpl.n	8013996 <__sflush_r+0x46>
 801398a:	6863      	ldr	r3, [r4, #4]
 801398c:	1ac0      	subs	r0, r0, r3
 801398e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013990:	b10b      	cbz	r3, 8013996 <__sflush_r+0x46>
 8013992:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013994:	1ac0      	subs	r0, r0, r3
 8013996:	2300      	movs	r3, #0
 8013998:	4602      	mov	r2, r0
 801399a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801399c:	6a21      	ldr	r1, [r4, #32]
 801399e:	4628      	mov	r0, r5
 80139a0:	47b0      	blx	r6
 80139a2:	1c43      	adds	r3, r0, #1
 80139a4:	89a3      	ldrh	r3, [r4, #12]
 80139a6:	d106      	bne.n	80139b6 <__sflush_r+0x66>
 80139a8:	6829      	ldr	r1, [r5, #0]
 80139aa:	291d      	cmp	r1, #29
 80139ac:	d82c      	bhi.n	8013a08 <__sflush_r+0xb8>
 80139ae:	4a2a      	ldr	r2, [pc, #168]	; (8013a58 <__sflush_r+0x108>)
 80139b0:	40ca      	lsrs	r2, r1
 80139b2:	07d6      	lsls	r6, r2, #31
 80139b4:	d528      	bpl.n	8013a08 <__sflush_r+0xb8>
 80139b6:	2200      	movs	r2, #0
 80139b8:	6062      	str	r2, [r4, #4]
 80139ba:	04d9      	lsls	r1, r3, #19
 80139bc:	6922      	ldr	r2, [r4, #16]
 80139be:	6022      	str	r2, [r4, #0]
 80139c0:	d504      	bpl.n	80139cc <__sflush_r+0x7c>
 80139c2:	1c42      	adds	r2, r0, #1
 80139c4:	d101      	bne.n	80139ca <__sflush_r+0x7a>
 80139c6:	682b      	ldr	r3, [r5, #0]
 80139c8:	b903      	cbnz	r3, 80139cc <__sflush_r+0x7c>
 80139ca:	6560      	str	r0, [r4, #84]	; 0x54
 80139cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139ce:	602f      	str	r7, [r5, #0]
 80139d0:	2900      	cmp	r1, #0
 80139d2:	d0ca      	beq.n	801396a <__sflush_r+0x1a>
 80139d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80139d8:	4299      	cmp	r1, r3
 80139da:	d002      	beq.n	80139e2 <__sflush_r+0x92>
 80139dc:	4628      	mov	r0, r5
 80139de:	f000 fd71 	bl	80144c4 <_free_r>
 80139e2:	2000      	movs	r0, #0
 80139e4:	6360      	str	r0, [r4, #52]	; 0x34
 80139e6:	e7c1      	b.n	801396c <__sflush_r+0x1c>
 80139e8:	6a21      	ldr	r1, [r4, #32]
 80139ea:	2301      	movs	r3, #1
 80139ec:	4628      	mov	r0, r5
 80139ee:	47b0      	blx	r6
 80139f0:	1c41      	adds	r1, r0, #1
 80139f2:	d1c7      	bne.n	8013984 <__sflush_r+0x34>
 80139f4:	682b      	ldr	r3, [r5, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d0c4      	beq.n	8013984 <__sflush_r+0x34>
 80139fa:	2b1d      	cmp	r3, #29
 80139fc:	d001      	beq.n	8013a02 <__sflush_r+0xb2>
 80139fe:	2b16      	cmp	r3, #22
 8013a00:	d101      	bne.n	8013a06 <__sflush_r+0xb6>
 8013a02:	602f      	str	r7, [r5, #0]
 8013a04:	e7b1      	b.n	801396a <__sflush_r+0x1a>
 8013a06:	89a3      	ldrh	r3, [r4, #12]
 8013a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a0c:	81a3      	strh	r3, [r4, #12]
 8013a0e:	e7ad      	b.n	801396c <__sflush_r+0x1c>
 8013a10:	690f      	ldr	r7, [r1, #16]
 8013a12:	2f00      	cmp	r7, #0
 8013a14:	d0a9      	beq.n	801396a <__sflush_r+0x1a>
 8013a16:	0793      	lsls	r3, r2, #30
 8013a18:	680e      	ldr	r6, [r1, #0]
 8013a1a:	bf08      	it	eq
 8013a1c:	694b      	ldreq	r3, [r1, #20]
 8013a1e:	600f      	str	r7, [r1, #0]
 8013a20:	bf18      	it	ne
 8013a22:	2300      	movne	r3, #0
 8013a24:	eba6 0807 	sub.w	r8, r6, r7
 8013a28:	608b      	str	r3, [r1, #8]
 8013a2a:	f1b8 0f00 	cmp.w	r8, #0
 8013a2e:	dd9c      	ble.n	801396a <__sflush_r+0x1a>
 8013a30:	6a21      	ldr	r1, [r4, #32]
 8013a32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a34:	4643      	mov	r3, r8
 8013a36:	463a      	mov	r2, r7
 8013a38:	4628      	mov	r0, r5
 8013a3a:	47b0      	blx	r6
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	dc06      	bgt.n	8013a4e <__sflush_r+0xfe>
 8013a40:	89a3      	ldrh	r3, [r4, #12]
 8013a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a46:	81a3      	strh	r3, [r4, #12]
 8013a48:	f04f 30ff 	mov.w	r0, #4294967295
 8013a4c:	e78e      	b.n	801396c <__sflush_r+0x1c>
 8013a4e:	4407      	add	r7, r0
 8013a50:	eba8 0800 	sub.w	r8, r8, r0
 8013a54:	e7e9      	b.n	8013a2a <__sflush_r+0xda>
 8013a56:	bf00      	nop
 8013a58:	20400001 	.word	0x20400001

08013a5c <_fflush_r>:
 8013a5c:	b538      	push	{r3, r4, r5, lr}
 8013a5e:	690b      	ldr	r3, [r1, #16]
 8013a60:	4605      	mov	r5, r0
 8013a62:	460c      	mov	r4, r1
 8013a64:	b913      	cbnz	r3, 8013a6c <_fflush_r+0x10>
 8013a66:	2500      	movs	r5, #0
 8013a68:	4628      	mov	r0, r5
 8013a6a:	bd38      	pop	{r3, r4, r5, pc}
 8013a6c:	b118      	cbz	r0, 8013a76 <_fflush_r+0x1a>
 8013a6e:	6983      	ldr	r3, [r0, #24]
 8013a70:	b90b      	cbnz	r3, 8013a76 <_fflush_r+0x1a>
 8013a72:	f000 f887 	bl	8013b84 <__sinit>
 8013a76:	4b14      	ldr	r3, [pc, #80]	; (8013ac8 <_fflush_r+0x6c>)
 8013a78:	429c      	cmp	r4, r3
 8013a7a:	d11b      	bne.n	8013ab4 <_fflush_r+0x58>
 8013a7c:	686c      	ldr	r4, [r5, #4]
 8013a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d0ef      	beq.n	8013a66 <_fflush_r+0xa>
 8013a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a88:	07d0      	lsls	r0, r2, #31
 8013a8a:	d404      	bmi.n	8013a96 <_fflush_r+0x3a>
 8013a8c:	0599      	lsls	r1, r3, #22
 8013a8e:	d402      	bmi.n	8013a96 <_fflush_r+0x3a>
 8013a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a92:	f000 f91a 	bl	8013cca <__retarget_lock_acquire_recursive>
 8013a96:	4628      	mov	r0, r5
 8013a98:	4621      	mov	r1, r4
 8013a9a:	f7ff ff59 	bl	8013950 <__sflush_r>
 8013a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013aa0:	07da      	lsls	r2, r3, #31
 8013aa2:	4605      	mov	r5, r0
 8013aa4:	d4e0      	bmi.n	8013a68 <_fflush_r+0xc>
 8013aa6:	89a3      	ldrh	r3, [r4, #12]
 8013aa8:	059b      	lsls	r3, r3, #22
 8013aaa:	d4dd      	bmi.n	8013a68 <_fflush_r+0xc>
 8013aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013aae:	f000 f90d 	bl	8013ccc <__retarget_lock_release_recursive>
 8013ab2:	e7d9      	b.n	8013a68 <_fflush_r+0xc>
 8013ab4:	4b05      	ldr	r3, [pc, #20]	; (8013acc <_fflush_r+0x70>)
 8013ab6:	429c      	cmp	r4, r3
 8013ab8:	d101      	bne.n	8013abe <_fflush_r+0x62>
 8013aba:	68ac      	ldr	r4, [r5, #8]
 8013abc:	e7df      	b.n	8013a7e <_fflush_r+0x22>
 8013abe:	4b04      	ldr	r3, [pc, #16]	; (8013ad0 <_fflush_r+0x74>)
 8013ac0:	429c      	cmp	r4, r3
 8013ac2:	bf08      	it	eq
 8013ac4:	68ec      	ldreq	r4, [r5, #12]
 8013ac6:	e7da      	b.n	8013a7e <_fflush_r+0x22>
 8013ac8:	08015f14 	.word	0x08015f14
 8013acc:	08015f34 	.word	0x08015f34
 8013ad0:	08015ef4 	.word	0x08015ef4

08013ad4 <std>:
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	b510      	push	{r4, lr}
 8013ad8:	4604      	mov	r4, r0
 8013ada:	e9c0 3300 	strd	r3, r3, [r0]
 8013ade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ae2:	6083      	str	r3, [r0, #8]
 8013ae4:	8181      	strh	r1, [r0, #12]
 8013ae6:	6643      	str	r3, [r0, #100]	; 0x64
 8013ae8:	81c2      	strh	r2, [r0, #14]
 8013aea:	6183      	str	r3, [r0, #24]
 8013aec:	4619      	mov	r1, r3
 8013aee:	2208      	movs	r2, #8
 8013af0:	305c      	adds	r0, #92	; 0x5c
 8013af2:	f7fe fa21 	bl	8011f38 <memset>
 8013af6:	4b05      	ldr	r3, [pc, #20]	; (8013b0c <std+0x38>)
 8013af8:	6263      	str	r3, [r4, #36]	; 0x24
 8013afa:	4b05      	ldr	r3, [pc, #20]	; (8013b10 <std+0x3c>)
 8013afc:	62a3      	str	r3, [r4, #40]	; 0x28
 8013afe:	4b05      	ldr	r3, [pc, #20]	; (8013b14 <std+0x40>)
 8013b00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013b02:	4b05      	ldr	r3, [pc, #20]	; (8013b18 <std+0x44>)
 8013b04:	6224      	str	r4, [r4, #32]
 8013b06:	6323      	str	r3, [r4, #48]	; 0x30
 8013b08:	bd10      	pop	{r4, pc}
 8013b0a:	bf00      	nop
 8013b0c:	080146c1 	.word	0x080146c1
 8013b10:	080146e3 	.word	0x080146e3
 8013b14:	0801471b 	.word	0x0801471b
 8013b18:	0801473f 	.word	0x0801473f

08013b1c <_cleanup_r>:
 8013b1c:	4901      	ldr	r1, [pc, #4]	; (8013b24 <_cleanup_r+0x8>)
 8013b1e:	f000 b8af 	b.w	8013c80 <_fwalk_reent>
 8013b22:	bf00      	nop
 8013b24:	08013a5d 	.word	0x08013a5d

08013b28 <__sfmoreglue>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	1e4a      	subs	r2, r1, #1
 8013b2c:	2568      	movs	r5, #104	; 0x68
 8013b2e:	4355      	muls	r5, r2
 8013b30:	460e      	mov	r6, r1
 8013b32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013b36:	f000 fd15 	bl	8014564 <_malloc_r>
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	b140      	cbz	r0, 8013b50 <__sfmoreglue+0x28>
 8013b3e:	2100      	movs	r1, #0
 8013b40:	e9c0 1600 	strd	r1, r6, [r0]
 8013b44:	300c      	adds	r0, #12
 8013b46:	60a0      	str	r0, [r4, #8]
 8013b48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013b4c:	f7fe f9f4 	bl	8011f38 <memset>
 8013b50:	4620      	mov	r0, r4
 8013b52:	bd70      	pop	{r4, r5, r6, pc}

08013b54 <__sfp_lock_acquire>:
 8013b54:	4801      	ldr	r0, [pc, #4]	; (8013b5c <__sfp_lock_acquire+0x8>)
 8013b56:	f000 b8b8 	b.w	8013cca <__retarget_lock_acquire_recursive>
 8013b5a:	bf00      	nop
 8013b5c:	2000df20 	.word	0x2000df20

08013b60 <__sfp_lock_release>:
 8013b60:	4801      	ldr	r0, [pc, #4]	; (8013b68 <__sfp_lock_release+0x8>)
 8013b62:	f000 b8b3 	b.w	8013ccc <__retarget_lock_release_recursive>
 8013b66:	bf00      	nop
 8013b68:	2000df20 	.word	0x2000df20

08013b6c <__sinit_lock_acquire>:
 8013b6c:	4801      	ldr	r0, [pc, #4]	; (8013b74 <__sinit_lock_acquire+0x8>)
 8013b6e:	f000 b8ac 	b.w	8013cca <__retarget_lock_acquire_recursive>
 8013b72:	bf00      	nop
 8013b74:	2000df1b 	.word	0x2000df1b

08013b78 <__sinit_lock_release>:
 8013b78:	4801      	ldr	r0, [pc, #4]	; (8013b80 <__sinit_lock_release+0x8>)
 8013b7a:	f000 b8a7 	b.w	8013ccc <__retarget_lock_release_recursive>
 8013b7e:	bf00      	nop
 8013b80:	2000df1b 	.word	0x2000df1b

08013b84 <__sinit>:
 8013b84:	b510      	push	{r4, lr}
 8013b86:	4604      	mov	r4, r0
 8013b88:	f7ff fff0 	bl	8013b6c <__sinit_lock_acquire>
 8013b8c:	69a3      	ldr	r3, [r4, #24]
 8013b8e:	b11b      	cbz	r3, 8013b98 <__sinit+0x14>
 8013b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013b94:	f7ff bff0 	b.w	8013b78 <__sinit_lock_release>
 8013b98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013b9c:	6523      	str	r3, [r4, #80]	; 0x50
 8013b9e:	4b13      	ldr	r3, [pc, #76]	; (8013bec <__sinit+0x68>)
 8013ba0:	4a13      	ldr	r2, [pc, #76]	; (8013bf0 <__sinit+0x6c>)
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	62a2      	str	r2, [r4, #40]	; 0x28
 8013ba6:	42a3      	cmp	r3, r4
 8013ba8:	bf04      	itt	eq
 8013baa:	2301      	moveq	r3, #1
 8013bac:	61a3      	streq	r3, [r4, #24]
 8013bae:	4620      	mov	r0, r4
 8013bb0:	f000 f820 	bl	8013bf4 <__sfp>
 8013bb4:	6060      	str	r0, [r4, #4]
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	f000 f81c 	bl	8013bf4 <__sfp>
 8013bbc:	60a0      	str	r0, [r4, #8]
 8013bbe:	4620      	mov	r0, r4
 8013bc0:	f000 f818 	bl	8013bf4 <__sfp>
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	60e0      	str	r0, [r4, #12]
 8013bc8:	2104      	movs	r1, #4
 8013bca:	6860      	ldr	r0, [r4, #4]
 8013bcc:	f7ff ff82 	bl	8013ad4 <std>
 8013bd0:	68a0      	ldr	r0, [r4, #8]
 8013bd2:	2201      	movs	r2, #1
 8013bd4:	2109      	movs	r1, #9
 8013bd6:	f7ff ff7d 	bl	8013ad4 <std>
 8013bda:	68e0      	ldr	r0, [r4, #12]
 8013bdc:	2202      	movs	r2, #2
 8013bde:	2112      	movs	r1, #18
 8013be0:	f7ff ff78 	bl	8013ad4 <std>
 8013be4:	2301      	movs	r3, #1
 8013be6:	61a3      	str	r3, [r4, #24]
 8013be8:	e7d2      	b.n	8013b90 <__sinit+0xc>
 8013bea:	bf00      	nop
 8013bec:	08015e14 	.word	0x08015e14
 8013bf0:	08013b1d 	.word	0x08013b1d

08013bf4 <__sfp>:
 8013bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bf6:	4607      	mov	r7, r0
 8013bf8:	f7ff ffac 	bl	8013b54 <__sfp_lock_acquire>
 8013bfc:	4b1e      	ldr	r3, [pc, #120]	; (8013c78 <__sfp+0x84>)
 8013bfe:	681e      	ldr	r6, [r3, #0]
 8013c00:	69b3      	ldr	r3, [r6, #24]
 8013c02:	b913      	cbnz	r3, 8013c0a <__sfp+0x16>
 8013c04:	4630      	mov	r0, r6
 8013c06:	f7ff ffbd 	bl	8013b84 <__sinit>
 8013c0a:	3648      	adds	r6, #72	; 0x48
 8013c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013c10:	3b01      	subs	r3, #1
 8013c12:	d503      	bpl.n	8013c1c <__sfp+0x28>
 8013c14:	6833      	ldr	r3, [r6, #0]
 8013c16:	b30b      	cbz	r3, 8013c5c <__sfp+0x68>
 8013c18:	6836      	ldr	r6, [r6, #0]
 8013c1a:	e7f7      	b.n	8013c0c <__sfp+0x18>
 8013c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013c20:	b9d5      	cbnz	r5, 8013c58 <__sfp+0x64>
 8013c22:	4b16      	ldr	r3, [pc, #88]	; (8013c7c <__sfp+0x88>)
 8013c24:	60e3      	str	r3, [r4, #12]
 8013c26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013c2a:	6665      	str	r5, [r4, #100]	; 0x64
 8013c2c:	f000 f84c 	bl	8013cc8 <__retarget_lock_init_recursive>
 8013c30:	f7ff ff96 	bl	8013b60 <__sfp_lock_release>
 8013c34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013c38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013c3c:	6025      	str	r5, [r4, #0]
 8013c3e:	61a5      	str	r5, [r4, #24]
 8013c40:	2208      	movs	r2, #8
 8013c42:	4629      	mov	r1, r5
 8013c44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013c48:	f7fe f976 	bl	8011f38 <memset>
 8013c4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013c50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013c54:	4620      	mov	r0, r4
 8013c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c58:	3468      	adds	r4, #104	; 0x68
 8013c5a:	e7d9      	b.n	8013c10 <__sfp+0x1c>
 8013c5c:	2104      	movs	r1, #4
 8013c5e:	4638      	mov	r0, r7
 8013c60:	f7ff ff62 	bl	8013b28 <__sfmoreglue>
 8013c64:	4604      	mov	r4, r0
 8013c66:	6030      	str	r0, [r6, #0]
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	d1d5      	bne.n	8013c18 <__sfp+0x24>
 8013c6c:	f7ff ff78 	bl	8013b60 <__sfp_lock_release>
 8013c70:	230c      	movs	r3, #12
 8013c72:	603b      	str	r3, [r7, #0]
 8013c74:	e7ee      	b.n	8013c54 <__sfp+0x60>
 8013c76:	bf00      	nop
 8013c78:	08015e14 	.word	0x08015e14
 8013c7c:	ffff0001 	.word	0xffff0001

08013c80 <_fwalk_reent>:
 8013c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c84:	4606      	mov	r6, r0
 8013c86:	4688      	mov	r8, r1
 8013c88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013c8c:	2700      	movs	r7, #0
 8013c8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013c92:	f1b9 0901 	subs.w	r9, r9, #1
 8013c96:	d505      	bpl.n	8013ca4 <_fwalk_reent+0x24>
 8013c98:	6824      	ldr	r4, [r4, #0]
 8013c9a:	2c00      	cmp	r4, #0
 8013c9c:	d1f7      	bne.n	8013c8e <_fwalk_reent+0xe>
 8013c9e:	4638      	mov	r0, r7
 8013ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ca4:	89ab      	ldrh	r3, [r5, #12]
 8013ca6:	2b01      	cmp	r3, #1
 8013ca8:	d907      	bls.n	8013cba <_fwalk_reent+0x3a>
 8013caa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013cae:	3301      	adds	r3, #1
 8013cb0:	d003      	beq.n	8013cba <_fwalk_reent+0x3a>
 8013cb2:	4629      	mov	r1, r5
 8013cb4:	4630      	mov	r0, r6
 8013cb6:	47c0      	blx	r8
 8013cb8:	4307      	orrs	r7, r0
 8013cba:	3568      	adds	r5, #104	; 0x68
 8013cbc:	e7e9      	b.n	8013c92 <_fwalk_reent+0x12>
	...

08013cc0 <_localeconv_r>:
 8013cc0:	4800      	ldr	r0, [pc, #0]	; (8013cc4 <_localeconv_r+0x4>)
 8013cc2:	4770      	bx	lr
 8013cc4:	200003f8 	.word	0x200003f8

08013cc8 <__retarget_lock_init_recursive>:
 8013cc8:	4770      	bx	lr

08013cca <__retarget_lock_acquire_recursive>:
 8013cca:	4770      	bx	lr

08013ccc <__retarget_lock_release_recursive>:
 8013ccc:	4770      	bx	lr

08013cce <__swhatbuf_r>:
 8013cce:	b570      	push	{r4, r5, r6, lr}
 8013cd0:	460e      	mov	r6, r1
 8013cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013cd6:	2900      	cmp	r1, #0
 8013cd8:	b096      	sub	sp, #88	; 0x58
 8013cda:	4614      	mov	r4, r2
 8013cdc:	461d      	mov	r5, r3
 8013cde:	da07      	bge.n	8013cf0 <__swhatbuf_r+0x22>
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	602b      	str	r3, [r5, #0]
 8013ce4:	89b3      	ldrh	r3, [r6, #12]
 8013ce6:	061a      	lsls	r2, r3, #24
 8013ce8:	d410      	bmi.n	8013d0c <__swhatbuf_r+0x3e>
 8013cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013cee:	e00e      	b.n	8013d0e <__swhatbuf_r+0x40>
 8013cf0:	466a      	mov	r2, sp
 8013cf2:	f000 fd4b 	bl	801478c <_fstat_r>
 8013cf6:	2800      	cmp	r0, #0
 8013cf8:	dbf2      	blt.n	8013ce0 <__swhatbuf_r+0x12>
 8013cfa:	9a01      	ldr	r2, [sp, #4]
 8013cfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013d00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013d04:	425a      	negs	r2, r3
 8013d06:	415a      	adcs	r2, r3
 8013d08:	602a      	str	r2, [r5, #0]
 8013d0a:	e7ee      	b.n	8013cea <__swhatbuf_r+0x1c>
 8013d0c:	2340      	movs	r3, #64	; 0x40
 8013d0e:	2000      	movs	r0, #0
 8013d10:	6023      	str	r3, [r4, #0]
 8013d12:	b016      	add	sp, #88	; 0x58
 8013d14:	bd70      	pop	{r4, r5, r6, pc}
	...

08013d18 <__smakebuf_r>:
 8013d18:	898b      	ldrh	r3, [r1, #12]
 8013d1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013d1c:	079d      	lsls	r5, r3, #30
 8013d1e:	4606      	mov	r6, r0
 8013d20:	460c      	mov	r4, r1
 8013d22:	d507      	bpl.n	8013d34 <__smakebuf_r+0x1c>
 8013d24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013d28:	6023      	str	r3, [r4, #0]
 8013d2a:	6123      	str	r3, [r4, #16]
 8013d2c:	2301      	movs	r3, #1
 8013d2e:	6163      	str	r3, [r4, #20]
 8013d30:	b002      	add	sp, #8
 8013d32:	bd70      	pop	{r4, r5, r6, pc}
 8013d34:	ab01      	add	r3, sp, #4
 8013d36:	466a      	mov	r2, sp
 8013d38:	f7ff ffc9 	bl	8013cce <__swhatbuf_r>
 8013d3c:	9900      	ldr	r1, [sp, #0]
 8013d3e:	4605      	mov	r5, r0
 8013d40:	4630      	mov	r0, r6
 8013d42:	f000 fc0f 	bl	8014564 <_malloc_r>
 8013d46:	b948      	cbnz	r0, 8013d5c <__smakebuf_r+0x44>
 8013d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013d4c:	059a      	lsls	r2, r3, #22
 8013d4e:	d4ef      	bmi.n	8013d30 <__smakebuf_r+0x18>
 8013d50:	f023 0303 	bic.w	r3, r3, #3
 8013d54:	f043 0302 	orr.w	r3, r3, #2
 8013d58:	81a3      	strh	r3, [r4, #12]
 8013d5a:	e7e3      	b.n	8013d24 <__smakebuf_r+0xc>
 8013d5c:	4b0d      	ldr	r3, [pc, #52]	; (8013d94 <__smakebuf_r+0x7c>)
 8013d5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013d60:	89a3      	ldrh	r3, [r4, #12]
 8013d62:	6020      	str	r0, [r4, #0]
 8013d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d68:	81a3      	strh	r3, [r4, #12]
 8013d6a:	9b00      	ldr	r3, [sp, #0]
 8013d6c:	6163      	str	r3, [r4, #20]
 8013d6e:	9b01      	ldr	r3, [sp, #4]
 8013d70:	6120      	str	r0, [r4, #16]
 8013d72:	b15b      	cbz	r3, 8013d8c <__smakebuf_r+0x74>
 8013d74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d78:	4630      	mov	r0, r6
 8013d7a:	f000 fd19 	bl	80147b0 <_isatty_r>
 8013d7e:	b128      	cbz	r0, 8013d8c <__smakebuf_r+0x74>
 8013d80:	89a3      	ldrh	r3, [r4, #12]
 8013d82:	f023 0303 	bic.w	r3, r3, #3
 8013d86:	f043 0301 	orr.w	r3, r3, #1
 8013d8a:	81a3      	strh	r3, [r4, #12]
 8013d8c:	89a0      	ldrh	r0, [r4, #12]
 8013d8e:	4305      	orrs	r5, r0
 8013d90:	81a5      	strh	r5, [r4, #12]
 8013d92:	e7cd      	b.n	8013d30 <__smakebuf_r+0x18>
 8013d94:	08013b1d 	.word	0x08013b1d

08013d98 <malloc>:
 8013d98:	4b02      	ldr	r3, [pc, #8]	; (8013da4 <malloc+0xc>)
 8013d9a:	4601      	mov	r1, r0
 8013d9c:	6818      	ldr	r0, [r3, #0]
 8013d9e:	f000 bbe1 	b.w	8014564 <_malloc_r>
 8013da2:	bf00      	nop
 8013da4:	200002a4 	.word	0x200002a4

08013da8 <_Balloc>:
 8013da8:	b570      	push	{r4, r5, r6, lr}
 8013daa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013dac:	4604      	mov	r4, r0
 8013dae:	460d      	mov	r5, r1
 8013db0:	b976      	cbnz	r6, 8013dd0 <_Balloc+0x28>
 8013db2:	2010      	movs	r0, #16
 8013db4:	f7ff fff0 	bl	8013d98 <malloc>
 8013db8:	4602      	mov	r2, r0
 8013dba:	6260      	str	r0, [r4, #36]	; 0x24
 8013dbc:	b920      	cbnz	r0, 8013dc8 <_Balloc+0x20>
 8013dbe:	4b18      	ldr	r3, [pc, #96]	; (8013e20 <_Balloc+0x78>)
 8013dc0:	4818      	ldr	r0, [pc, #96]	; (8013e24 <_Balloc+0x7c>)
 8013dc2:	2166      	movs	r1, #102	; 0x66
 8013dc4:	f7fe f850 	bl	8011e68 <__assert_func>
 8013dc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013dcc:	6006      	str	r6, [r0, #0]
 8013dce:	60c6      	str	r6, [r0, #12]
 8013dd0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013dd2:	68f3      	ldr	r3, [r6, #12]
 8013dd4:	b183      	cbz	r3, 8013df8 <_Balloc+0x50>
 8013dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013dde:	b9b8      	cbnz	r0, 8013e10 <_Balloc+0x68>
 8013de0:	2101      	movs	r1, #1
 8013de2:	fa01 f605 	lsl.w	r6, r1, r5
 8013de6:	1d72      	adds	r2, r6, #5
 8013de8:	0092      	lsls	r2, r2, #2
 8013dea:	4620      	mov	r0, r4
 8013dec:	f000 fb5a 	bl	80144a4 <_calloc_r>
 8013df0:	b160      	cbz	r0, 8013e0c <_Balloc+0x64>
 8013df2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013df6:	e00e      	b.n	8013e16 <_Balloc+0x6e>
 8013df8:	2221      	movs	r2, #33	; 0x21
 8013dfa:	2104      	movs	r1, #4
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f000 fb51 	bl	80144a4 <_calloc_r>
 8013e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e04:	60f0      	str	r0, [r6, #12]
 8013e06:	68db      	ldr	r3, [r3, #12]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d1e4      	bne.n	8013dd6 <_Balloc+0x2e>
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	bd70      	pop	{r4, r5, r6, pc}
 8013e10:	6802      	ldr	r2, [r0, #0]
 8013e12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013e16:	2300      	movs	r3, #0
 8013e18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013e1c:	e7f7      	b.n	8013e0e <_Balloc+0x66>
 8013e1e:	bf00      	nop
 8013e20:	08015e6a 	.word	0x08015e6a
 8013e24:	08015f54 	.word	0x08015f54

08013e28 <_Bfree>:
 8013e28:	b570      	push	{r4, r5, r6, lr}
 8013e2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013e2c:	4605      	mov	r5, r0
 8013e2e:	460c      	mov	r4, r1
 8013e30:	b976      	cbnz	r6, 8013e50 <_Bfree+0x28>
 8013e32:	2010      	movs	r0, #16
 8013e34:	f7ff ffb0 	bl	8013d98 <malloc>
 8013e38:	4602      	mov	r2, r0
 8013e3a:	6268      	str	r0, [r5, #36]	; 0x24
 8013e3c:	b920      	cbnz	r0, 8013e48 <_Bfree+0x20>
 8013e3e:	4b09      	ldr	r3, [pc, #36]	; (8013e64 <_Bfree+0x3c>)
 8013e40:	4809      	ldr	r0, [pc, #36]	; (8013e68 <_Bfree+0x40>)
 8013e42:	218a      	movs	r1, #138	; 0x8a
 8013e44:	f7fe f810 	bl	8011e68 <__assert_func>
 8013e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013e4c:	6006      	str	r6, [r0, #0]
 8013e4e:	60c6      	str	r6, [r0, #12]
 8013e50:	b13c      	cbz	r4, 8013e62 <_Bfree+0x3a>
 8013e52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013e54:	6862      	ldr	r2, [r4, #4]
 8013e56:	68db      	ldr	r3, [r3, #12]
 8013e58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013e5c:	6021      	str	r1, [r4, #0]
 8013e5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013e62:	bd70      	pop	{r4, r5, r6, pc}
 8013e64:	08015e6a 	.word	0x08015e6a
 8013e68:	08015f54 	.word	0x08015f54

08013e6c <__multadd>:
 8013e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e70:	690e      	ldr	r6, [r1, #16]
 8013e72:	4607      	mov	r7, r0
 8013e74:	4698      	mov	r8, r3
 8013e76:	460c      	mov	r4, r1
 8013e78:	f101 0014 	add.w	r0, r1, #20
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	6805      	ldr	r5, [r0, #0]
 8013e80:	b2a9      	uxth	r1, r5
 8013e82:	fb02 8101 	mla	r1, r2, r1, r8
 8013e86:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8013e8a:	0c2d      	lsrs	r5, r5, #16
 8013e8c:	fb02 c505 	mla	r5, r2, r5, ip
 8013e90:	b289      	uxth	r1, r1
 8013e92:	3301      	adds	r3, #1
 8013e94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8013e98:	429e      	cmp	r6, r3
 8013e9a:	f840 1b04 	str.w	r1, [r0], #4
 8013e9e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8013ea2:	dcec      	bgt.n	8013e7e <__multadd+0x12>
 8013ea4:	f1b8 0f00 	cmp.w	r8, #0
 8013ea8:	d022      	beq.n	8013ef0 <__multadd+0x84>
 8013eaa:	68a3      	ldr	r3, [r4, #8]
 8013eac:	42b3      	cmp	r3, r6
 8013eae:	dc19      	bgt.n	8013ee4 <__multadd+0x78>
 8013eb0:	6861      	ldr	r1, [r4, #4]
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	3101      	adds	r1, #1
 8013eb6:	f7ff ff77 	bl	8013da8 <_Balloc>
 8013eba:	4605      	mov	r5, r0
 8013ebc:	b928      	cbnz	r0, 8013eca <__multadd+0x5e>
 8013ebe:	4602      	mov	r2, r0
 8013ec0:	4b0d      	ldr	r3, [pc, #52]	; (8013ef8 <__multadd+0x8c>)
 8013ec2:	480e      	ldr	r0, [pc, #56]	; (8013efc <__multadd+0x90>)
 8013ec4:	21b5      	movs	r1, #181	; 0xb5
 8013ec6:	f7fd ffcf 	bl	8011e68 <__assert_func>
 8013eca:	6922      	ldr	r2, [r4, #16]
 8013ecc:	3202      	adds	r2, #2
 8013ece:	f104 010c 	add.w	r1, r4, #12
 8013ed2:	0092      	lsls	r2, r2, #2
 8013ed4:	300c      	adds	r0, #12
 8013ed6:	f7fe f821 	bl	8011f1c <memcpy>
 8013eda:	4621      	mov	r1, r4
 8013edc:	4638      	mov	r0, r7
 8013ede:	f7ff ffa3 	bl	8013e28 <_Bfree>
 8013ee2:	462c      	mov	r4, r5
 8013ee4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8013ee8:	3601      	adds	r6, #1
 8013eea:	f8c3 8014 	str.w	r8, [r3, #20]
 8013eee:	6126      	str	r6, [r4, #16]
 8013ef0:	4620      	mov	r0, r4
 8013ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ef6:	bf00      	nop
 8013ef8:	08015ee0 	.word	0x08015ee0
 8013efc:	08015f54 	.word	0x08015f54

08013f00 <__hi0bits>:
 8013f00:	0c03      	lsrs	r3, r0, #16
 8013f02:	041b      	lsls	r3, r3, #16
 8013f04:	b9d3      	cbnz	r3, 8013f3c <__hi0bits+0x3c>
 8013f06:	0400      	lsls	r0, r0, #16
 8013f08:	2310      	movs	r3, #16
 8013f0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013f0e:	bf04      	itt	eq
 8013f10:	0200      	lsleq	r0, r0, #8
 8013f12:	3308      	addeq	r3, #8
 8013f14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013f18:	bf04      	itt	eq
 8013f1a:	0100      	lsleq	r0, r0, #4
 8013f1c:	3304      	addeq	r3, #4
 8013f1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013f22:	bf04      	itt	eq
 8013f24:	0080      	lsleq	r0, r0, #2
 8013f26:	3302      	addeq	r3, #2
 8013f28:	2800      	cmp	r0, #0
 8013f2a:	db05      	blt.n	8013f38 <__hi0bits+0x38>
 8013f2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013f30:	f103 0301 	add.w	r3, r3, #1
 8013f34:	bf08      	it	eq
 8013f36:	2320      	moveq	r3, #32
 8013f38:	4618      	mov	r0, r3
 8013f3a:	4770      	bx	lr
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	e7e4      	b.n	8013f0a <__hi0bits+0xa>

08013f40 <__lo0bits>:
 8013f40:	6803      	ldr	r3, [r0, #0]
 8013f42:	f013 0207 	ands.w	r2, r3, #7
 8013f46:	4601      	mov	r1, r0
 8013f48:	d00b      	beq.n	8013f62 <__lo0bits+0x22>
 8013f4a:	07da      	lsls	r2, r3, #31
 8013f4c:	d424      	bmi.n	8013f98 <__lo0bits+0x58>
 8013f4e:	0798      	lsls	r0, r3, #30
 8013f50:	bf49      	itett	mi
 8013f52:	085b      	lsrmi	r3, r3, #1
 8013f54:	089b      	lsrpl	r3, r3, #2
 8013f56:	2001      	movmi	r0, #1
 8013f58:	600b      	strmi	r3, [r1, #0]
 8013f5a:	bf5c      	itt	pl
 8013f5c:	600b      	strpl	r3, [r1, #0]
 8013f5e:	2002      	movpl	r0, #2
 8013f60:	4770      	bx	lr
 8013f62:	b298      	uxth	r0, r3
 8013f64:	b9b0      	cbnz	r0, 8013f94 <__lo0bits+0x54>
 8013f66:	0c1b      	lsrs	r3, r3, #16
 8013f68:	2010      	movs	r0, #16
 8013f6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013f6e:	bf04      	itt	eq
 8013f70:	0a1b      	lsreq	r3, r3, #8
 8013f72:	3008      	addeq	r0, #8
 8013f74:	071a      	lsls	r2, r3, #28
 8013f76:	bf04      	itt	eq
 8013f78:	091b      	lsreq	r3, r3, #4
 8013f7a:	3004      	addeq	r0, #4
 8013f7c:	079a      	lsls	r2, r3, #30
 8013f7e:	bf04      	itt	eq
 8013f80:	089b      	lsreq	r3, r3, #2
 8013f82:	3002      	addeq	r0, #2
 8013f84:	07da      	lsls	r2, r3, #31
 8013f86:	d403      	bmi.n	8013f90 <__lo0bits+0x50>
 8013f88:	085b      	lsrs	r3, r3, #1
 8013f8a:	f100 0001 	add.w	r0, r0, #1
 8013f8e:	d005      	beq.n	8013f9c <__lo0bits+0x5c>
 8013f90:	600b      	str	r3, [r1, #0]
 8013f92:	4770      	bx	lr
 8013f94:	4610      	mov	r0, r2
 8013f96:	e7e8      	b.n	8013f6a <__lo0bits+0x2a>
 8013f98:	2000      	movs	r0, #0
 8013f9a:	4770      	bx	lr
 8013f9c:	2020      	movs	r0, #32
 8013f9e:	4770      	bx	lr

08013fa0 <__i2b>:
 8013fa0:	b510      	push	{r4, lr}
 8013fa2:	460c      	mov	r4, r1
 8013fa4:	2101      	movs	r1, #1
 8013fa6:	f7ff feff 	bl	8013da8 <_Balloc>
 8013faa:	4602      	mov	r2, r0
 8013fac:	b928      	cbnz	r0, 8013fba <__i2b+0x1a>
 8013fae:	4b05      	ldr	r3, [pc, #20]	; (8013fc4 <__i2b+0x24>)
 8013fb0:	4805      	ldr	r0, [pc, #20]	; (8013fc8 <__i2b+0x28>)
 8013fb2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013fb6:	f7fd ff57 	bl	8011e68 <__assert_func>
 8013fba:	2301      	movs	r3, #1
 8013fbc:	6144      	str	r4, [r0, #20]
 8013fbe:	6103      	str	r3, [r0, #16]
 8013fc0:	bd10      	pop	{r4, pc}
 8013fc2:	bf00      	nop
 8013fc4:	08015ee0 	.word	0x08015ee0
 8013fc8:	08015f54 	.word	0x08015f54

08013fcc <__multiply>:
 8013fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd0:	4614      	mov	r4, r2
 8013fd2:	690a      	ldr	r2, [r1, #16]
 8013fd4:	6923      	ldr	r3, [r4, #16]
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	bfb8      	it	lt
 8013fda:	460b      	movlt	r3, r1
 8013fdc:	460d      	mov	r5, r1
 8013fde:	bfbc      	itt	lt
 8013fe0:	4625      	movlt	r5, r4
 8013fe2:	461c      	movlt	r4, r3
 8013fe4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8013fe8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013fec:	68ab      	ldr	r3, [r5, #8]
 8013fee:	6869      	ldr	r1, [r5, #4]
 8013ff0:	eb0a 0709 	add.w	r7, sl, r9
 8013ff4:	42bb      	cmp	r3, r7
 8013ff6:	b085      	sub	sp, #20
 8013ff8:	bfb8      	it	lt
 8013ffa:	3101      	addlt	r1, #1
 8013ffc:	f7ff fed4 	bl	8013da8 <_Balloc>
 8014000:	b930      	cbnz	r0, 8014010 <__multiply+0x44>
 8014002:	4602      	mov	r2, r0
 8014004:	4b42      	ldr	r3, [pc, #264]	; (8014110 <__multiply+0x144>)
 8014006:	4843      	ldr	r0, [pc, #268]	; (8014114 <__multiply+0x148>)
 8014008:	f240 115d 	movw	r1, #349	; 0x15d
 801400c:	f7fd ff2c 	bl	8011e68 <__assert_func>
 8014010:	f100 0614 	add.w	r6, r0, #20
 8014014:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014018:	4633      	mov	r3, r6
 801401a:	2200      	movs	r2, #0
 801401c:	4543      	cmp	r3, r8
 801401e:	d31e      	bcc.n	801405e <__multiply+0x92>
 8014020:	f105 0c14 	add.w	ip, r5, #20
 8014024:	f104 0314 	add.w	r3, r4, #20
 8014028:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801402c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014030:	9202      	str	r2, [sp, #8]
 8014032:	ebac 0205 	sub.w	r2, ip, r5
 8014036:	3a15      	subs	r2, #21
 8014038:	f022 0203 	bic.w	r2, r2, #3
 801403c:	3204      	adds	r2, #4
 801403e:	f105 0115 	add.w	r1, r5, #21
 8014042:	458c      	cmp	ip, r1
 8014044:	bf38      	it	cc
 8014046:	2204      	movcc	r2, #4
 8014048:	9201      	str	r2, [sp, #4]
 801404a:	9a02      	ldr	r2, [sp, #8]
 801404c:	9303      	str	r3, [sp, #12]
 801404e:	429a      	cmp	r2, r3
 8014050:	d808      	bhi.n	8014064 <__multiply+0x98>
 8014052:	2f00      	cmp	r7, #0
 8014054:	dc55      	bgt.n	8014102 <__multiply+0x136>
 8014056:	6107      	str	r7, [r0, #16]
 8014058:	b005      	add	sp, #20
 801405a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405e:	f843 2b04 	str.w	r2, [r3], #4
 8014062:	e7db      	b.n	801401c <__multiply+0x50>
 8014064:	f8b3 a000 	ldrh.w	sl, [r3]
 8014068:	f1ba 0f00 	cmp.w	sl, #0
 801406c:	d020      	beq.n	80140b0 <__multiply+0xe4>
 801406e:	f105 0e14 	add.w	lr, r5, #20
 8014072:	46b1      	mov	r9, r6
 8014074:	2200      	movs	r2, #0
 8014076:	f85e 4b04 	ldr.w	r4, [lr], #4
 801407a:	f8d9 b000 	ldr.w	fp, [r9]
 801407e:	b2a1      	uxth	r1, r4
 8014080:	fa1f fb8b 	uxth.w	fp, fp
 8014084:	fb0a b101 	mla	r1, sl, r1, fp
 8014088:	4411      	add	r1, r2
 801408a:	f8d9 2000 	ldr.w	r2, [r9]
 801408e:	0c24      	lsrs	r4, r4, #16
 8014090:	0c12      	lsrs	r2, r2, #16
 8014092:	fb0a 2404 	mla	r4, sl, r4, r2
 8014096:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801409a:	b289      	uxth	r1, r1
 801409c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80140a0:	45f4      	cmp	ip, lr
 80140a2:	f849 1b04 	str.w	r1, [r9], #4
 80140a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80140aa:	d8e4      	bhi.n	8014076 <__multiply+0xaa>
 80140ac:	9901      	ldr	r1, [sp, #4]
 80140ae:	5072      	str	r2, [r6, r1]
 80140b0:	9a03      	ldr	r2, [sp, #12]
 80140b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80140b6:	3304      	adds	r3, #4
 80140b8:	f1b9 0f00 	cmp.w	r9, #0
 80140bc:	d01f      	beq.n	80140fe <__multiply+0x132>
 80140be:	6834      	ldr	r4, [r6, #0]
 80140c0:	f105 0114 	add.w	r1, r5, #20
 80140c4:	46b6      	mov	lr, r6
 80140c6:	f04f 0a00 	mov.w	sl, #0
 80140ca:	880a      	ldrh	r2, [r1, #0]
 80140cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80140d0:	fb09 b202 	mla	r2, r9, r2, fp
 80140d4:	4492      	add	sl, r2
 80140d6:	b2a4      	uxth	r4, r4
 80140d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80140dc:	f84e 4b04 	str.w	r4, [lr], #4
 80140e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80140e4:	f8be 2000 	ldrh.w	r2, [lr]
 80140e8:	0c24      	lsrs	r4, r4, #16
 80140ea:	fb09 2404 	mla	r4, r9, r4, r2
 80140ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80140f2:	458c      	cmp	ip, r1
 80140f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80140f8:	d8e7      	bhi.n	80140ca <__multiply+0xfe>
 80140fa:	9a01      	ldr	r2, [sp, #4]
 80140fc:	50b4      	str	r4, [r6, r2]
 80140fe:	3604      	adds	r6, #4
 8014100:	e7a3      	b.n	801404a <__multiply+0x7e>
 8014102:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014106:	2b00      	cmp	r3, #0
 8014108:	d1a5      	bne.n	8014056 <__multiply+0x8a>
 801410a:	3f01      	subs	r7, #1
 801410c:	e7a1      	b.n	8014052 <__multiply+0x86>
 801410e:	bf00      	nop
 8014110:	08015ee0 	.word	0x08015ee0
 8014114:	08015f54 	.word	0x08015f54

08014118 <__pow5mult>:
 8014118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801411c:	4615      	mov	r5, r2
 801411e:	f012 0203 	ands.w	r2, r2, #3
 8014122:	4606      	mov	r6, r0
 8014124:	460f      	mov	r7, r1
 8014126:	d007      	beq.n	8014138 <__pow5mult+0x20>
 8014128:	4c25      	ldr	r4, [pc, #148]	; (80141c0 <__pow5mult+0xa8>)
 801412a:	3a01      	subs	r2, #1
 801412c:	2300      	movs	r3, #0
 801412e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014132:	f7ff fe9b 	bl	8013e6c <__multadd>
 8014136:	4607      	mov	r7, r0
 8014138:	10ad      	asrs	r5, r5, #2
 801413a:	d03d      	beq.n	80141b8 <__pow5mult+0xa0>
 801413c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801413e:	b97c      	cbnz	r4, 8014160 <__pow5mult+0x48>
 8014140:	2010      	movs	r0, #16
 8014142:	f7ff fe29 	bl	8013d98 <malloc>
 8014146:	4602      	mov	r2, r0
 8014148:	6270      	str	r0, [r6, #36]	; 0x24
 801414a:	b928      	cbnz	r0, 8014158 <__pow5mult+0x40>
 801414c:	4b1d      	ldr	r3, [pc, #116]	; (80141c4 <__pow5mult+0xac>)
 801414e:	481e      	ldr	r0, [pc, #120]	; (80141c8 <__pow5mult+0xb0>)
 8014150:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014154:	f7fd fe88 	bl	8011e68 <__assert_func>
 8014158:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801415c:	6004      	str	r4, [r0, #0]
 801415e:	60c4      	str	r4, [r0, #12]
 8014160:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014164:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014168:	b94c      	cbnz	r4, 801417e <__pow5mult+0x66>
 801416a:	f240 2171 	movw	r1, #625	; 0x271
 801416e:	4630      	mov	r0, r6
 8014170:	f7ff ff16 	bl	8013fa0 <__i2b>
 8014174:	2300      	movs	r3, #0
 8014176:	f8c8 0008 	str.w	r0, [r8, #8]
 801417a:	4604      	mov	r4, r0
 801417c:	6003      	str	r3, [r0, #0]
 801417e:	f04f 0900 	mov.w	r9, #0
 8014182:	07eb      	lsls	r3, r5, #31
 8014184:	d50a      	bpl.n	801419c <__pow5mult+0x84>
 8014186:	4639      	mov	r1, r7
 8014188:	4622      	mov	r2, r4
 801418a:	4630      	mov	r0, r6
 801418c:	f7ff ff1e 	bl	8013fcc <__multiply>
 8014190:	4639      	mov	r1, r7
 8014192:	4680      	mov	r8, r0
 8014194:	4630      	mov	r0, r6
 8014196:	f7ff fe47 	bl	8013e28 <_Bfree>
 801419a:	4647      	mov	r7, r8
 801419c:	106d      	asrs	r5, r5, #1
 801419e:	d00b      	beq.n	80141b8 <__pow5mult+0xa0>
 80141a0:	6820      	ldr	r0, [r4, #0]
 80141a2:	b938      	cbnz	r0, 80141b4 <__pow5mult+0x9c>
 80141a4:	4622      	mov	r2, r4
 80141a6:	4621      	mov	r1, r4
 80141a8:	4630      	mov	r0, r6
 80141aa:	f7ff ff0f 	bl	8013fcc <__multiply>
 80141ae:	6020      	str	r0, [r4, #0]
 80141b0:	f8c0 9000 	str.w	r9, [r0]
 80141b4:	4604      	mov	r4, r0
 80141b6:	e7e4      	b.n	8014182 <__pow5mult+0x6a>
 80141b8:	4638      	mov	r0, r7
 80141ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141be:	bf00      	nop
 80141c0:	080160a8 	.word	0x080160a8
 80141c4:	08015e6a 	.word	0x08015e6a
 80141c8:	08015f54 	.word	0x08015f54

080141cc <__lshift>:
 80141cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141d0:	460c      	mov	r4, r1
 80141d2:	6849      	ldr	r1, [r1, #4]
 80141d4:	6923      	ldr	r3, [r4, #16]
 80141d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80141da:	68a3      	ldr	r3, [r4, #8]
 80141dc:	4607      	mov	r7, r0
 80141de:	4691      	mov	r9, r2
 80141e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80141e4:	f108 0601 	add.w	r6, r8, #1
 80141e8:	42b3      	cmp	r3, r6
 80141ea:	db0b      	blt.n	8014204 <__lshift+0x38>
 80141ec:	4638      	mov	r0, r7
 80141ee:	f7ff fddb 	bl	8013da8 <_Balloc>
 80141f2:	4605      	mov	r5, r0
 80141f4:	b948      	cbnz	r0, 801420a <__lshift+0x3e>
 80141f6:	4602      	mov	r2, r0
 80141f8:	4b28      	ldr	r3, [pc, #160]	; (801429c <__lshift+0xd0>)
 80141fa:	4829      	ldr	r0, [pc, #164]	; (80142a0 <__lshift+0xd4>)
 80141fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014200:	f7fd fe32 	bl	8011e68 <__assert_func>
 8014204:	3101      	adds	r1, #1
 8014206:	005b      	lsls	r3, r3, #1
 8014208:	e7ee      	b.n	80141e8 <__lshift+0x1c>
 801420a:	2300      	movs	r3, #0
 801420c:	f100 0114 	add.w	r1, r0, #20
 8014210:	f100 0210 	add.w	r2, r0, #16
 8014214:	4618      	mov	r0, r3
 8014216:	4553      	cmp	r3, sl
 8014218:	db33      	blt.n	8014282 <__lshift+0xb6>
 801421a:	6920      	ldr	r0, [r4, #16]
 801421c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014220:	f104 0314 	add.w	r3, r4, #20
 8014224:	f019 091f 	ands.w	r9, r9, #31
 8014228:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801422c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014230:	d02b      	beq.n	801428a <__lshift+0xbe>
 8014232:	f1c9 0e20 	rsb	lr, r9, #32
 8014236:	468a      	mov	sl, r1
 8014238:	2200      	movs	r2, #0
 801423a:	6818      	ldr	r0, [r3, #0]
 801423c:	fa00 f009 	lsl.w	r0, r0, r9
 8014240:	4302      	orrs	r2, r0
 8014242:	f84a 2b04 	str.w	r2, [sl], #4
 8014246:	f853 2b04 	ldr.w	r2, [r3], #4
 801424a:	459c      	cmp	ip, r3
 801424c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014250:	d8f3      	bhi.n	801423a <__lshift+0x6e>
 8014252:	ebac 0304 	sub.w	r3, ip, r4
 8014256:	3b15      	subs	r3, #21
 8014258:	f023 0303 	bic.w	r3, r3, #3
 801425c:	3304      	adds	r3, #4
 801425e:	f104 0015 	add.w	r0, r4, #21
 8014262:	4584      	cmp	ip, r0
 8014264:	bf38      	it	cc
 8014266:	2304      	movcc	r3, #4
 8014268:	50ca      	str	r2, [r1, r3]
 801426a:	b10a      	cbz	r2, 8014270 <__lshift+0xa4>
 801426c:	f108 0602 	add.w	r6, r8, #2
 8014270:	3e01      	subs	r6, #1
 8014272:	4638      	mov	r0, r7
 8014274:	612e      	str	r6, [r5, #16]
 8014276:	4621      	mov	r1, r4
 8014278:	f7ff fdd6 	bl	8013e28 <_Bfree>
 801427c:	4628      	mov	r0, r5
 801427e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014282:	f842 0f04 	str.w	r0, [r2, #4]!
 8014286:	3301      	adds	r3, #1
 8014288:	e7c5      	b.n	8014216 <__lshift+0x4a>
 801428a:	3904      	subs	r1, #4
 801428c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014290:	f841 2f04 	str.w	r2, [r1, #4]!
 8014294:	459c      	cmp	ip, r3
 8014296:	d8f9      	bhi.n	801428c <__lshift+0xc0>
 8014298:	e7ea      	b.n	8014270 <__lshift+0xa4>
 801429a:	bf00      	nop
 801429c:	08015ee0 	.word	0x08015ee0
 80142a0:	08015f54 	.word	0x08015f54

080142a4 <__mcmp>:
 80142a4:	b530      	push	{r4, r5, lr}
 80142a6:	6902      	ldr	r2, [r0, #16]
 80142a8:	690c      	ldr	r4, [r1, #16]
 80142aa:	1b12      	subs	r2, r2, r4
 80142ac:	d10e      	bne.n	80142cc <__mcmp+0x28>
 80142ae:	f100 0314 	add.w	r3, r0, #20
 80142b2:	3114      	adds	r1, #20
 80142b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80142b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80142bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80142c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80142c4:	42a5      	cmp	r5, r4
 80142c6:	d003      	beq.n	80142d0 <__mcmp+0x2c>
 80142c8:	d305      	bcc.n	80142d6 <__mcmp+0x32>
 80142ca:	2201      	movs	r2, #1
 80142cc:	4610      	mov	r0, r2
 80142ce:	bd30      	pop	{r4, r5, pc}
 80142d0:	4283      	cmp	r3, r0
 80142d2:	d3f3      	bcc.n	80142bc <__mcmp+0x18>
 80142d4:	e7fa      	b.n	80142cc <__mcmp+0x28>
 80142d6:	f04f 32ff 	mov.w	r2, #4294967295
 80142da:	e7f7      	b.n	80142cc <__mcmp+0x28>

080142dc <__mdiff>:
 80142dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e0:	460c      	mov	r4, r1
 80142e2:	4606      	mov	r6, r0
 80142e4:	4611      	mov	r1, r2
 80142e6:	4620      	mov	r0, r4
 80142e8:	4617      	mov	r7, r2
 80142ea:	f7ff ffdb 	bl	80142a4 <__mcmp>
 80142ee:	1e05      	subs	r5, r0, #0
 80142f0:	d110      	bne.n	8014314 <__mdiff+0x38>
 80142f2:	4629      	mov	r1, r5
 80142f4:	4630      	mov	r0, r6
 80142f6:	f7ff fd57 	bl	8013da8 <_Balloc>
 80142fa:	b930      	cbnz	r0, 801430a <__mdiff+0x2e>
 80142fc:	4b39      	ldr	r3, [pc, #228]	; (80143e4 <__mdiff+0x108>)
 80142fe:	4602      	mov	r2, r0
 8014300:	f240 2132 	movw	r1, #562	; 0x232
 8014304:	4838      	ldr	r0, [pc, #224]	; (80143e8 <__mdiff+0x10c>)
 8014306:	f7fd fdaf 	bl	8011e68 <__assert_func>
 801430a:	2301      	movs	r3, #1
 801430c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014310:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014314:	bfa4      	itt	ge
 8014316:	463b      	movge	r3, r7
 8014318:	4627      	movge	r7, r4
 801431a:	4630      	mov	r0, r6
 801431c:	6879      	ldr	r1, [r7, #4]
 801431e:	bfa6      	itte	ge
 8014320:	461c      	movge	r4, r3
 8014322:	2500      	movge	r5, #0
 8014324:	2501      	movlt	r5, #1
 8014326:	f7ff fd3f 	bl	8013da8 <_Balloc>
 801432a:	b920      	cbnz	r0, 8014336 <__mdiff+0x5a>
 801432c:	4b2d      	ldr	r3, [pc, #180]	; (80143e4 <__mdiff+0x108>)
 801432e:	4602      	mov	r2, r0
 8014330:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014334:	e7e6      	b.n	8014304 <__mdiff+0x28>
 8014336:	693e      	ldr	r6, [r7, #16]
 8014338:	60c5      	str	r5, [r0, #12]
 801433a:	6925      	ldr	r5, [r4, #16]
 801433c:	f107 0114 	add.w	r1, r7, #20
 8014340:	f104 0914 	add.w	r9, r4, #20
 8014344:	f100 0e14 	add.w	lr, r0, #20
 8014348:	f107 0210 	add.w	r2, r7, #16
 801434c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014350:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014354:	46f2      	mov	sl, lr
 8014356:	2700      	movs	r7, #0
 8014358:	f859 3b04 	ldr.w	r3, [r9], #4
 801435c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014360:	fa1f f883 	uxth.w	r8, r3
 8014364:	fa17 f78b 	uxtah	r7, r7, fp
 8014368:	0c1b      	lsrs	r3, r3, #16
 801436a:	eba7 0808 	sub.w	r8, r7, r8
 801436e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014372:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014376:	fa1f f888 	uxth.w	r8, r8
 801437a:	141f      	asrs	r7, r3, #16
 801437c:	454d      	cmp	r5, r9
 801437e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014382:	f84a 3b04 	str.w	r3, [sl], #4
 8014386:	d8e7      	bhi.n	8014358 <__mdiff+0x7c>
 8014388:	1b2b      	subs	r3, r5, r4
 801438a:	3b15      	subs	r3, #21
 801438c:	f023 0303 	bic.w	r3, r3, #3
 8014390:	3304      	adds	r3, #4
 8014392:	3415      	adds	r4, #21
 8014394:	42a5      	cmp	r5, r4
 8014396:	bf38      	it	cc
 8014398:	2304      	movcc	r3, #4
 801439a:	4419      	add	r1, r3
 801439c:	4473      	add	r3, lr
 801439e:	469e      	mov	lr, r3
 80143a0:	460d      	mov	r5, r1
 80143a2:	4565      	cmp	r5, ip
 80143a4:	d30e      	bcc.n	80143c4 <__mdiff+0xe8>
 80143a6:	f10c 0203 	add.w	r2, ip, #3
 80143aa:	1a52      	subs	r2, r2, r1
 80143ac:	f022 0203 	bic.w	r2, r2, #3
 80143b0:	3903      	subs	r1, #3
 80143b2:	458c      	cmp	ip, r1
 80143b4:	bf38      	it	cc
 80143b6:	2200      	movcc	r2, #0
 80143b8:	441a      	add	r2, r3
 80143ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80143be:	b17b      	cbz	r3, 80143e0 <__mdiff+0x104>
 80143c0:	6106      	str	r6, [r0, #16]
 80143c2:	e7a5      	b.n	8014310 <__mdiff+0x34>
 80143c4:	f855 8b04 	ldr.w	r8, [r5], #4
 80143c8:	fa17 f488 	uxtah	r4, r7, r8
 80143cc:	1422      	asrs	r2, r4, #16
 80143ce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80143d2:	b2a4      	uxth	r4, r4
 80143d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80143d8:	f84e 4b04 	str.w	r4, [lr], #4
 80143dc:	1417      	asrs	r7, r2, #16
 80143de:	e7e0      	b.n	80143a2 <__mdiff+0xc6>
 80143e0:	3e01      	subs	r6, #1
 80143e2:	e7ea      	b.n	80143ba <__mdiff+0xde>
 80143e4:	08015ee0 	.word	0x08015ee0
 80143e8:	08015f54 	.word	0x08015f54

080143ec <__d2b>:
 80143ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143f0:	4689      	mov	r9, r1
 80143f2:	2101      	movs	r1, #1
 80143f4:	ec57 6b10 	vmov	r6, r7, d0
 80143f8:	4690      	mov	r8, r2
 80143fa:	f7ff fcd5 	bl	8013da8 <_Balloc>
 80143fe:	4604      	mov	r4, r0
 8014400:	b930      	cbnz	r0, 8014410 <__d2b+0x24>
 8014402:	4602      	mov	r2, r0
 8014404:	4b25      	ldr	r3, [pc, #148]	; (801449c <__d2b+0xb0>)
 8014406:	4826      	ldr	r0, [pc, #152]	; (80144a0 <__d2b+0xb4>)
 8014408:	f240 310a 	movw	r1, #778	; 0x30a
 801440c:	f7fd fd2c 	bl	8011e68 <__assert_func>
 8014410:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014414:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014418:	bb35      	cbnz	r5, 8014468 <__d2b+0x7c>
 801441a:	2e00      	cmp	r6, #0
 801441c:	9301      	str	r3, [sp, #4]
 801441e:	d028      	beq.n	8014472 <__d2b+0x86>
 8014420:	4668      	mov	r0, sp
 8014422:	9600      	str	r6, [sp, #0]
 8014424:	f7ff fd8c 	bl	8013f40 <__lo0bits>
 8014428:	9900      	ldr	r1, [sp, #0]
 801442a:	b300      	cbz	r0, 801446e <__d2b+0x82>
 801442c:	9a01      	ldr	r2, [sp, #4]
 801442e:	f1c0 0320 	rsb	r3, r0, #32
 8014432:	fa02 f303 	lsl.w	r3, r2, r3
 8014436:	430b      	orrs	r3, r1
 8014438:	40c2      	lsrs	r2, r0
 801443a:	6163      	str	r3, [r4, #20]
 801443c:	9201      	str	r2, [sp, #4]
 801443e:	9b01      	ldr	r3, [sp, #4]
 8014440:	61a3      	str	r3, [r4, #24]
 8014442:	2b00      	cmp	r3, #0
 8014444:	bf14      	ite	ne
 8014446:	2202      	movne	r2, #2
 8014448:	2201      	moveq	r2, #1
 801444a:	6122      	str	r2, [r4, #16]
 801444c:	b1d5      	cbz	r5, 8014484 <__d2b+0x98>
 801444e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014452:	4405      	add	r5, r0
 8014454:	f8c9 5000 	str.w	r5, [r9]
 8014458:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801445c:	f8c8 0000 	str.w	r0, [r8]
 8014460:	4620      	mov	r0, r4
 8014462:	b003      	add	sp, #12
 8014464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801446c:	e7d5      	b.n	801441a <__d2b+0x2e>
 801446e:	6161      	str	r1, [r4, #20]
 8014470:	e7e5      	b.n	801443e <__d2b+0x52>
 8014472:	a801      	add	r0, sp, #4
 8014474:	f7ff fd64 	bl	8013f40 <__lo0bits>
 8014478:	9b01      	ldr	r3, [sp, #4]
 801447a:	6163      	str	r3, [r4, #20]
 801447c:	2201      	movs	r2, #1
 801447e:	6122      	str	r2, [r4, #16]
 8014480:	3020      	adds	r0, #32
 8014482:	e7e3      	b.n	801444c <__d2b+0x60>
 8014484:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014488:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801448c:	f8c9 0000 	str.w	r0, [r9]
 8014490:	6918      	ldr	r0, [r3, #16]
 8014492:	f7ff fd35 	bl	8013f00 <__hi0bits>
 8014496:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801449a:	e7df      	b.n	801445c <__d2b+0x70>
 801449c:	08015ee0 	.word	0x08015ee0
 80144a0:	08015f54 	.word	0x08015f54

080144a4 <_calloc_r>:
 80144a4:	b513      	push	{r0, r1, r4, lr}
 80144a6:	434a      	muls	r2, r1
 80144a8:	4611      	mov	r1, r2
 80144aa:	9201      	str	r2, [sp, #4]
 80144ac:	f000 f85a 	bl	8014564 <_malloc_r>
 80144b0:	4604      	mov	r4, r0
 80144b2:	b118      	cbz	r0, 80144bc <_calloc_r+0x18>
 80144b4:	9a01      	ldr	r2, [sp, #4]
 80144b6:	2100      	movs	r1, #0
 80144b8:	f7fd fd3e 	bl	8011f38 <memset>
 80144bc:	4620      	mov	r0, r4
 80144be:	b002      	add	sp, #8
 80144c0:	bd10      	pop	{r4, pc}
	...

080144c4 <_free_r>:
 80144c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144c6:	2900      	cmp	r1, #0
 80144c8:	d048      	beq.n	801455c <_free_r+0x98>
 80144ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80144ce:	9001      	str	r0, [sp, #4]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	f1a1 0404 	sub.w	r4, r1, #4
 80144d6:	bfb8      	it	lt
 80144d8:	18e4      	addlt	r4, r4, r3
 80144da:	f000 f99d 	bl	8014818 <__malloc_lock>
 80144de:	4a20      	ldr	r2, [pc, #128]	; (8014560 <_free_r+0x9c>)
 80144e0:	9801      	ldr	r0, [sp, #4]
 80144e2:	6813      	ldr	r3, [r2, #0]
 80144e4:	4615      	mov	r5, r2
 80144e6:	b933      	cbnz	r3, 80144f6 <_free_r+0x32>
 80144e8:	6063      	str	r3, [r4, #4]
 80144ea:	6014      	str	r4, [r2, #0]
 80144ec:	b003      	add	sp, #12
 80144ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80144f2:	f000 b997 	b.w	8014824 <__malloc_unlock>
 80144f6:	42a3      	cmp	r3, r4
 80144f8:	d90b      	bls.n	8014512 <_free_r+0x4e>
 80144fa:	6821      	ldr	r1, [r4, #0]
 80144fc:	1862      	adds	r2, r4, r1
 80144fe:	4293      	cmp	r3, r2
 8014500:	bf04      	itt	eq
 8014502:	681a      	ldreq	r2, [r3, #0]
 8014504:	685b      	ldreq	r3, [r3, #4]
 8014506:	6063      	str	r3, [r4, #4]
 8014508:	bf04      	itt	eq
 801450a:	1852      	addeq	r2, r2, r1
 801450c:	6022      	streq	r2, [r4, #0]
 801450e:	602c      	str	r4, [r5, #0]
 8014510:	e7ec      	b.n	80144ec <_free_r+0x28>
 8014512:	461a      	mov	r2, r3
 8014514:	685b      	ldr	r3, [r3, #4]
 8014516:	b10b      	cbz	r3, 801451c <_free_r+0x58>
 8014518:	42a3      	cmp	r3, r4
 801451a:	d9fa      	bls.n	8014512 <_free_r+0x4e>
 801451c:	6811      	ldr	r1, [r2, #0]
 801451e:	1855      	adds	r5, r2, r1
 8014520:	42a5      	cmp	r5, r4
 8014522:	d10b      	bne.n	801453c <_free_r+0x78>
 8014524:	6824      	ldr	r4, [r4, #0]
 8014526:	4421      	add	r1, r4
 8014528:	1854      	adds	r4, r2, r1
 801452a:	42a3      	cmp	r3, r4
 801452c:	6011      	str	r1, [r2, #0]
 801452e:	d1dd      	bne.n	80144ec <_free_r+0x28>
 8014530:	681c      	ldr	r4, [r3, #0]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	6053      	str	r3, [r2, #4]
 8014536:	4421      	add	r1, r4
 8014538:	6011      	str	r1, [r2, #0]
 801453a:	e7d7      	b.n	80144ec <_free_r+0x28>
 801453c:	d902      	bls.n	8014544 <_free_r+0x80>
 801453e:	230c      	movs	r3, #12
 8014540:	6003      	str	r3, [r0, #0]
 8014542:	e7d3      	b.n	80144ec <_free_r+0x28>
 8014544:	6825      	ldr	r5, [r4, #0]
 8014546:	1961      	adds	r1, r4, r5
 8014548:	428b      	cmp	r3, r1
 801454a:	bf04      	itt	eq
 801454c:	6819      	ldreq	r1, [r3, #0]
 801454e:	685b      	ldreq	r3, [r3, #4]
 8014550:	6063      	str	r3, [r4, #4]
 8014552:	bf04      	itt	eq
 8014554:	1949      	addeq	r1, r1, r5
 8014556:	6021      	streq	r1, [r4, #0]
 8014558:	6054      	str	r4, [r2, #4]
 801455a:	e7c7      	b.n	80144ec <_free_r+0x28>
 801455c:	b003      	add	sp, #12
 801455e:	bd30      	pop	{r4, r5, pc}
 8014560:	200045ec 	.word	0x200045ec

08014564 <_malloc_r>:
 8014564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014566:	1ccd      	adds	r5, r1, #3
 8014568:	f025 0503 	bic.w	r5, r5, #3
 801456c:	3508      	adds	r5, #8
 801456e:	2d0c      	cmp	r5, #12
 8014570:	bf38      	it	cc
 8014572:	250c      	movcc	r5, #12
 8014574:	2d00      	cmp	r5, #0
 8014576:	4606      	mov	r6, r0
 8014578:	db01      	blt.n	801457e <_malloc_r+0x1a>
 801457a:	42a9      	cmp	r1, r5
 801457c:	d903      	bls.n	8014586 <_malloc_r+0x22>
 801457e:	230c      	movs	r3, #12
 8014580:	6033      	str	r3, [r6, #0]
 8014582:	2000      	movs	r0, #0
 8014584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014586:	f000 f947 	bl	8014818 <__malloc_lock>
 801458a:	4921      	ldr	r1, [pc, #132]	; (8014610 <_malloc_r+0xac>)
 801458c:	680a      	ldr	r2, [r1, #0]
 801458e:	4614      	mov	r4, r2
 8014590:	b99c      	cbnz	r4, 80145ba <_malloc_r+0x56>
 8014592:	4f20      	ldr	r7, [pc, #128]	; (8014614 <_malloc_r+0xb0>)
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	b923      	cbnz	r3, 80145a2 <_malloc_r+0x3e>
 8014598:	4621      	mov	r1, r4
 801459a:	4630      	mov	r0, r6
 801459c:	f000 f83c 	bl	8014618 <_sbrk_r>
 80145a0:	6038      	str	r0, [r7, #0]
 80145a2:	4629      	mov	r1, r5
 80145a4:	4630      	mov	r0, r6
 80145a6:	f000 f837 	bl	8014618 <_sbrk_r>
 80145aa:	1c43      	adds	r3, r0, #1
 80145ac:	d123      	bne.n	80145f6 <_malloc_r+0x92>
 80145ae:	230c      	movs	r3, #12
 80145b0:	6033      	str	r3, [r6, #0]
 80145b2:	4630      	mov	r0, r6
 80145b4:	f000 f936 	bl	8014824 <__malloc_unlock>
 80145b8:	e7e3      	b.n	8014582 <_malloc_r+0x1e>
 80145ba:	6823      	ldr	r3, [r4, #0]
 80145bc:	1b5b      	subs	r3, r3, r5
 80145be:	d417      	bmi.n	80145f0 <_malloc_r+0x8c>
 80145c0:	2b0b      	cmp	r3, #11
 80145c2:	d903      	bls.n	80145cc <_malloc_r+0x68>
 80145c4:	6023      	str	r3, [r4, #0]
 80145c6:	441c      	add	r4, r3
 80145c8:	6025      	str	r5, [r4, #0]
 80145ca:	e004      	b.n	80145d6 <_malloc_r+0x72>
 80145cc:	6863      	ldr	r3, [r4, #4]
 80145ce:	42a2      	cmp	r2, r4
 80145d0:	bf0c      	ite	eq
 80145d2:	600b      	streq	r3, [r1, #0]
 80145d4:	6053      	strne	r3, [r2, #4]
 80145d6:	4630      	mov	r0, r6
 80145d8:	f000 f924 	bl	8014824 <__malloc_unlock>
 80145dc:	f104 000b 	add.w	r0, r4, #11
 80145e0:	1d23      	adds	r3, r4, #4
 80145e2:	f020 0007 	bic.w	r0, r0, #7
 80145e6:	1ac2      	subs	r2, r0, r3
 80145e8:	d0cc      	beq.n	8014584 <_malloc_r+0x20>
 80145ea:	1a1b      	subs	r3, r3, r0
 80145ec:	50a3      	str	r3, [r4, r2]
 80145ee:	e7c9      	b.n	8014584 <_malloc_r+0x20>
 80145f0:	4622      	mov	r2, r4
 80145f2:	6864      	ldr	r4, [r4, #4]
 80145f4:	e7cc      	b.n	8014590 <_malloc_r+0x2c>
 80145f6:	1cc4      	adds	r4, r0, #3
 80145f8:	f024 0403 	bic.w	r4, r4, #3
 80145fc:	42a0      	cmp	r0, r4
 80145fe:	d0e3      	beq.n	80145c8 <_malloc_r+0x64>
 8014600:	1a21      	subs	r1, r4, r0
 8014602:	4630      	mov	r0, r6
 8014604:	f000 f808 	bl	8014618 <_sbrk_r>
 8014608:	3001      	adds	r0, #1
 801460a:	d1dd      	bne.n	80145c8 <_malloc_r+0x64>
 801460c:	e7cf      	b.n	80145ae <_malloc_r+0x4a>
 801460e:	bf00      	nop
 8014610:	200045ec 	.word	0x200045ec
 8014614:	200045f0 	.word	0x200045f0

08014618 <_sbrk_r>:
 8014618:	b538      	push	{r3, r4, r5, lr}
 801461a:	4d06      	ldr	r5, [pc, #24]	; (8014634 <_sbrk_r+0x1c>)
 801461c:	2300      	movs	r3, #0
 801461e:	4604      	mov	r4, r0
 8014620:	4608      	mov	r0, r1
 8014622:	602b      	str	r3, [r5, #0]
 8014624:	f7f5 fba0 	bl	8009d68 <_sbrk>
 8014628:	1c43      	adds	r3, r0, #1
 801462a:	d102      	bne.n	8014632 <_sbrk_r+0x1a>
 801462c:	682b      	ldr	r3, [r5, #0]
 801462e:	b103      	cbz	r3, 8014632 <_sbrk_r+0x1a>
 8014630:	6023      	str	r3, [r4, #0]
 8014632:	bd38      	pop	{r3, r4, r5, pc}
 8014634:	2000df24 	.word	0x2000df24

08014638 <_raise_r>:
 8014638:	291f      	cmp	r1, #31
 801463a:	b538      	push	{r3, r4, r5, lr}
 801463c:	4604      	mov	r4, r0
 801463e:	460d      	mov	r5, r1
 8014640:	d904      	bls.n	801464c <_raise_r+0x14>
 8014642:	2316      	movs	r3, #22
 8014644:	6003      	str	r3, [r0, #0]
 8014646:	f04f 30ff 	mov.w	r0, #4294967295
 801464a:	bd38      	pop	{r3, r4, r5, pc}
 801464c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801464e:	b112      	cbz	r2, 8014656 <_raise_r+0x1e>
 8014650:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014654:	b94b      	cbnz	r3, 801466a <_raise_r+0x32>
 8014656:	4620      	mov	r0, r4
 8014658:	f000 f830 	bl	80146bc <_getpid_r>
 801465c:	462a      	mov	r2, r5
 801465e:	4601      	mov	r1, r0
 8014660:	4620      	mov	r0, r4
 8014662:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014666:	f000 b817 	b.w	8014698 <_kill_r>
 801466a:	2b01      	cmp	r3, #1
 801466c:	d00a      	beq.n	8014684 <_raise_r+0x4c>
 801466e:	1c59      	adds	r1, r3, #1
 8014670:	d103      	bne.n	801467a <_raise_r+0x42>
 8014672:	2316      	movs	r3, #22
 8014674:	6003      	str	r3, [r0, #0]
 8014676:	2001      	movs	r0, #1
 8014678:	e7e7      	b.n	801464a <_raise_r+0x12>
 801467a:	2400      	movs	r4, #0
 801467c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014680:	4628      	mov	r0, r5
 8014682:	4798      	blx	r3
 8014684:	2000      	movs	r0, #0
 8014686:	e7e0      	b.n	801464a <_raise_r+0x12>

08014688 <raise>:
 8014688:	4b02      	ldr	r3, [pc, #8]	; (8014694 <raise+0xc>)
 801468a:	4601      	mov	r1, r0
 801468c:	6818      	ldr	r0, [r3, #0]
 801468e:	f7ff bfd3 	b.w	8014638 <_raise_r>
 8014692:	bf00      	nop
 8014694:	200002a4 	.word	0x200002a4

08014698 <_kill_r>:
 8014698:	b538      	push	{r3, r4, r5, lr}
 801469a:	4d07      	ldr	r5, [pc, #28]	; (80146b8 <_kill_r+0x20>)
 801469c:	2300      	movs	r3, #0
 801469e:	4604      	mov	r4, r0
 80146a0:	4608      	mov	r0, r1
 80146a2:	4611      	mov	r1, r2
 80146a4:	602b      	str	r3, [r5, #0]
 80146a6:	f7f5 fad7 	bl	8009c58 <_kill>
 80146aa:	1c43      	adds	r3, r0, #1
 80146ac:	d102      	bne.n	80146b4 <_kill_r+0x1c>
 80146ae:	682b      	ldr	r3, [r5, #0]
 80146b0:	b103      	cbz	r3, 80146b4 <_kill_r+0x1c>
 80146b2:	6023      	str	r3, [r4, #0]
 80146b4:	bd38      	pop	{r3, r4, r5, pc}
 80146b6:	bf00      	nop
 80146b8:	2000df24 	.word	0x2000df24

080146bc <_getpid_r>:
 80146bc:	f7f5 bac4 	b.w	8009c48 <_getpid>

080146c0 <__sread>:
 80146c0:	b510      	push	{r4, lr}
 80146c2:	460c      	mov	r4, r1
 80146c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146c8:	f000 f8b2 	bl	8014830 <_read_r>
 80146cc:	2800      	cmp	r0, #0
 80146ce:	bfab      	itete	ge
 80146d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80146d2:	89a3      	ldrhlt	r3, [r4, #12]
 80146d4:	181b      	addge	r3, r3, r0
 80146d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80146da:	bfac      	ite	ge
 80146dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80146de:	81a3      	strhlt	r3, [r4, #12]
 80146e0:	bd10      	pop	{r4, pc}

080146e2 <__swrite>:
 80146e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146e6:	461f      	mov	r7, r3
 80146e8:	898b      	ldrh	r3, [r1, #12]
 80146ea:	05db      	lsls	r3, r3, #23
 80146ec:	4605      	mov	r5, r0
 80146ee:	460c      	mov	r4, r1
 80146f0:	4616      	mov	r6, r2
 80146f2:	d505      	bpl.n	8014700 <__swrite+0x1e>
 80146f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146f8:	2302      	movs	r3, #2
 80146fa:	2200      	movs	r2, #0
 80146fc:	f000 f868 	bl	80147d0 <_lseek_r>
 8014700:	89a3      	ldrh	r3, [r4, #12]
 8014702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801470a:	81a3      	strh	r3, [r4, #12]
 801470c:	4632      	mov	r2, r6
 801470e:	463b      	mov	r3, r7
 8014710:	4628      	mov	r0, r5
 8014712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014716:	f000 b817 	b.w	8014748 <_write_r>

0801471a <__sseek>:
 801471a:	b510      	push	{r4, lr}
 801471c:	460c      	mov	r4, r1
 801471e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014722:	f000 f855 	bl	80147d0 <_lseek_r>
 8014726:	1c43      	adds	r3, r0, #1
 8014728:	89a3      	ldrh	r3, [r4, #12]
 801472a:	bf15      	itete	ne
 801472c:	6560      	strne	r0, [r4, #84]	; 0x54
 801472e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014736:	81a3      	strheq	r3, [r4, #12]
 8014738:	bf18      	it	ne
 801473a:	81a3      	strhne	r3, [r4, #12]
 801473c:	bd10      	pop	{r4, pc}

0801473e <__sclose>:
 801473e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014742:	f000 b813 	b.w	801476c <_close_r>
	...

08014748 <_write_r>:
 8014748:	b538      	push	{r3, r4, r5, lr}
 801474a:	4d07      	ldr	r5, [pc, #28]	; (8014768 <_write_r+0x20>)
 801474c:	4604      	mov	r4, r0
 801474e:	4608      	mov	r0, r1
 8014750:	4611      	mov	r1, r2
 8014752:	2200      	movs	r2, #0
 8014754:	602a      	str	r2, [r5, #0]
 8014756:	461a      	mov	r2, r3
 8014758:	f7f5 fab5 	bl	8009cc6 <_write>
 801475c:	1c43      	adds	r3, r0, #1
 801475e:	d102      	bne.n	8014766 <_write_r+0x1e>
 8014760:	682b      	ldr	r3, [r5, #0]
 8014762:	b103      	cbz	r3, 8014766 <_write_r+0x1e>
 8014764:	6023      	str	r3, [r4, #0]
 8014766:	bd38      	pop	{r3, r4, r5, pc}
 8014768:	2000df24 	.word	0x2000df24

0801476c <_close_r>:
 801476c:	b538      	push	{r3, r4, r5, lr}
 801476e:	4d06      	ldr	r5, [pc, #24]	; (8014788 <_close_r+0x1c>)
 8014770:	2300      	movs	r3, #0
 8014772:	4604      	mov	r4, r0
 8014774:	4608      	mov	r0, r1
 8014776:	602b      	str	r3, [r5, #0]
 8014778:	f7f5 fac1 	bl	8009cfe <_close>
 801477c:	1c43      	adds	r3, r0, #1
 801477e:	d102      	bne.n	8014786 <_close_r+0x1a>
 8014780:	682b      	ldr	r3, [r5, #0]
 8014782:	b103      	cbz	r3, 8014786 <_close_r+0x1a>
 8014784:	6023      	str	r3, [r4, #0]
 8014786:	bd38      	pop	{r3, r4, r5, pc}
 8014788:	2000df24 	.word	0x2000df24

0801478c <_fstat_r>:
 801478c:	b538      	push	{r3, r4, r5, lr}
 801478e:	4d07      	ldr	r5, [pc, #28]	; (80147ac <_fstat_r+0x20>)
 8014790:	2300      	movs	r3, #0
 8014792:	4604      	mov	r4, r0
 8014794:	4608      	mov	r0, r1
 8014796:	4611      	mov	r1, r2
 8014798:	602b      	str	r3, [r5, #0]
 801479a:	f7f5 fabc 	bl	8009d16 <_fstat>
 801479e:	1c43      	adds	r3, r0, #1
 80147a0:	d102      	bne.n	80147a8 <_fstat_r+0x1c>
 80147a2:	682b      	ldr	r3, [r5, #0]
 80147a4:	b103      	cbz	r3, 80147a8 <_fstat_r+0x1c>
 80147a6:	6023      	str	r3, [r4, #0]
 80147a8:	bd38      	pop	{r3, r4, r5, pc}
 80147aa:	bf00      	nop
 80147ac:	2000df24 	.word	0x2000df24

080147b0 <_isatty_r>:
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	4d06      	ldr	r5, [pc, #24]	; (80147cc <_isatty_r+0x1c>)
 80147b4:	2300      	movs	r3, #0
 80147b6:	4604      	mov	r4, r0
 80147b8:	4608      	mov	r0, r1
 80147ba:	602b      	str	r3, [r5, #0]
 80147bc:	f7f5 fabb 	bl	8009d36 <_isatty>
 80147c0:	1c43      	adds	r3, r0, #1
 80147c2:	d102      	bne.n	80147ca <_isatty_r+0x1a>
 80147c4:	682b      	ldr	r3, [r5, #0]
 80147c6:	b103      	cbz	r3, 80147ca <_isatty_r+0x1a>
 80147c8:	6023      	str	r3, [r4, #0]
 80147ca:	bd38      	pop	{r3, r4, r5, pc}
 80147cc:	2000df24 	.word	0x2000df24

080147d0 <_lseek_r>:
 80147d0:	b538      	push	{r3, r4, r5, lr}
 80147d2:	4d07      	ldr	r5, [pc, #28]	; (80147f0 <_lseek_r+0x20>)
 80147d4:	4604      	mov	r4, r0
 80147d6:	4608      	mov	r0, r1
 80147d8:	4611      	mov	r1, r2
 80147da:	2200      	movs	r2, #0
 80147dc:	602a      	str	r2, [r5, #0]
 80147de:	461a      	mov	r2, r3
 80147e0:	f7f5 fab4 	bl	8009d4c <_lseek>
 80147e4:	1c43      	adds	r3, r0, #1
 80147e6:	d102      	bne.n	80147ee <_lseek_r+0x1e>
 80147e8:	682b      	ldr	r3, [r5, #0]
 80147ea:	b103      	cbz	r3, 80147ee <_lseek_r+0x1e>
 80147ec:	6023      	str	r3, [r4, #0]
 80147ee:	bd38      	pop	{r3, r4, r5, pc}
 80147f0:	2000df24 	.word	0x2000df24

080147f4 <__ascii_mbtowc>:
 80147f4:	b082      	sub	sp, #8
 80147f6:	b901      	cbnz	r1, 80147fa <__ascii_mbtowc+0x6>
 80147f8:	a901      	add	r1, sp, #4
 80147fa:	b142      	cbz	r2, 801480e <__ascii_mbtowc+0x1a>
 80147fc:	b14b      	cbz	r3, 8014812 <__ascii_mbtowc+0x1e>
 80147fe:	7813      	ldrb	r3, [r2, #0]
 8014800:	600b      	str	r3, [r1, #0]
 8014802:	7812      	ldrb	r2, [r2, #0]
 8014804:	1e10      	subs	r0, r2, #0
 8014806:	bf18      	it	ne
 8014808:	2001      	movne	r0, #1
 801480a:	b002      	add	sp, #8
 801480c:	4770      	bx	lr
 801480e:	4610      	mov	r0, r2
 8014810:	e7fb      	b.n	801480a <__ascii_mbtowc+0x16>
 8014812:	f06f 0001 	mvn.w	r0, #1
 8014816:	e7f8      	b.n	801480a <__ascii_mbtowc+0x16>

08014818 <__malloc_lock>:
 8014818:	4801      	ldr	r0, [pc, #4]	; (8014820 <__malloc_lock+0x8>)
 801481a:	f7ff ba56 	b.w	8013cca <__retarget_lock_acquire_recursive>
 801481e:	bf00      	nop
 8014820:	2000df1c 	.word	0x2000df1c

08014824 <__malloc_unlock>:
 8014824:	4801      	ldr	r0, [pc, #4]	; (801482c <__malloc_unlock+0x8>)
 8014826:	f7ff ba51 	b.w	8013ccc <__retarget_lock_release_recursive>
 801482a:	bf00      	nop
 801482c:	2000df1c 	.word	0x2000df1c

08014830 <_read_r>:
 8014830:	b538      	push	{r3, r4, r5, lr}
 8014832:	4d07      	ldr	r5, [pc, #28]	; (8014850 <_read_r+0x20>)
 8014834:	4604      	mov	r4, r0
 8014836:	4608      	mov	r0, r1
 8014838:	4611      	mov	r1, r2
 801483a:	2200      	movs	r2, #0
 801483c:	602a      	str	r2, [r5, #0]
 801483e:	461a      	mov	r2, r3
 8014840:	f7f5 fa24 	bl	8009c8c <_read>
 8014844:	1c43      	adds	r3, r0, #1
 8014846:	d102      	bne.n	801484e <_read_r+0x1e>
 8014848:	682b      	ldr	r3, [r5, #0]
 801484a:	b103      	cbz	r3, 801484e <_read_r+0x1e>
 801484c:	6023      	str	r3, [r4, #0]
 801484e:	bd38      	pop	{r3, r4, r5, pc}
 8014850:	2000df24 	.word	0x2000df24

08014854 <__ascii_wctomb>:
 8014854:	b149      	cbz	r1, 801486a <__ascii_wctomb+0x16>
 8014856:	2aff      	cmp	r2, #255	; 0xff
 8014858:	bf85      	ittet	hi
 801485a:	238a      	movhi	r3, #138	; 0x8a
 801485c:	6003      	strhi	r3, [r0, #0]
 801485e:	700a      	strbls	r2, [r1, #0]
 8014860:	f04f 30ff 	movhi.w	r0, #4294967295
 8014864:	bf98      	it	ls
 8014866:	2001      	movls	r0, #1
 8014868:	4770      	bx	lr
 801486a:	4608      	mov	r0, r1
 801486c:	4770      	bx	lr
	...

08014870 <asin>:
 8014870:	b538      	push	{r3, r4, r5, lr}
 8014872:	ed2d 8b02 	vpush	{d8}
 8014876:	ec55 4b10 	vmov	r4, r5, d0
 801487a:	f000 f869 	bl	8014950 <__ieee754_asin>
 801487e:	4b16      	ldr	r3, [pc, #88]	; (80148d8 <asin+0x68>)
 8014880:	eeb0 8a40 	vmov.f32	s16, s0
 8014884:	eef0 8a60 	vmov.f32	s17, s1
 8014888:	f993 3000 	ldrsb.w	r3, [r3]
 801488c:	3301      	adds	r3, #1
 801488e:	d01c      	beq.n	80148ca <asin+0x5a>
 8014890:	4622      	mov	r2, r4
 8014892:	462b      	mov	r3, r5
 8014894:	4620      	mov	r0, r4
 8014896:	4629      	mov	r1, r5
 8014898:	f7ec f948 	bl	8000b2c <__aeabi_dcmpun>
 801489c:	b9a8      	cbnz	r0, 80148ca <asin+0x5a>
 801489e:	ec45 4b10 	vmov	d0, r4, r5
 80148a2:	f000 fd89 	bl	80153b8 <fabs>
 80148a6:	4b0d      	ldr	r3, [pc, #52]	; (80148dc <asin+0x6c>)
 80148a8:	ec51 0b10 	vmov	r0, r1, d0
 80148ac:	2200      	movs	r2, #0
 80148ae:	f7ec f933 	bl	8000b18 <__aeabi_dcmpgt>
 80148b2:	b150      	cbz	r0, 80148ca <asin+0x5a>
 80148b4:	f7fd faf6 	bl	8011ea4 <__errno>
 80148b8:	ecbd 8b02 	vpop	{d8}
 80148bc:	2321      	movs	r3, #33	; 0x21
 80148be:	6003      	str	r3, [r0, #0]
 80148c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148c4:	4806      	ldr	r0, [pc, #24]	; (80148e0 <asin+0x70>)
 80148c6:	f000 bd83 	b.w	80153d0 <nan>
 80148ca:	eeb0 0a48 	vmov.f32	s0, s16
 80148ce:	eef0 0a68 	vmov.f32	s1, s17
 80148d2:	ecbd 8b02 	vpop	{d8}
 80148d6:	bd38      	pop	{r3, r4, r5, pc}
 80148d8:	20000474 	.word	0x20000474
 80148dc:	3ff00000 	.word	0x3ff00000
 80148e0:	08015e13 	.word	0x08015e13

080148e4 <atan2>:
 80148e4:	f000 ba48 	b.w	8014d78 <__ieee754_atan2>

080148e8 <sqrt>:
 80148e8:	b538      	push	{r3, r4, r5, lr}
 80148ea:	ed2d 8b02 	vpush	{d8}
 80148ee:	ec55 4b10 	vmov	r4, r5, d0
 80148f2:	f000 fb0b 	bl	8014f0c <__ieee754_sqrt>
 80148f6:	4b15      	ldr	r3, [pc, #84]	; (801494c <sqrt+0x64>)
 80148f8:	eeb0 8a40 	vmov.f32	s16, s0
 80148fc:	eef0 8a60 	vmov.f32	s17, s1
 8014900:	f993 3000 	ldrsb.w	r3, [r3]
 8014904:	3301      	adds	r3, #1
 8014906:	d019      	beq.n	801493c <sqrt+0x54>
 8014908:	4622      	mov	r2, r4
 801490a:	462b      	mov	r3, r5
 801490c:	4620      	mov	r0, r4
 801490e:	4629      	mov	r1, r5
 8014910:	f7ec f90c 	bl	8000b2c <__aeabi_dcmpun>
 8014914:	b990      	cbnz	r0, 801493c <sqrt+0x54>
 8014916:	2200      	movs	r2, #0
 8014918:	2300      	movs	r3, #0
 801491a:	4620      	mov	r0, r4
 801491c:	4629      	mov	r1, r5
 801491e:	f7ec f8dd 	bl	8000adc <__aeabi_dcmplt>
 8014922:	b158      	cbz	r0, 801493c <sqrt+0x54>
 8014924:	f7fd fabe 	bl	8011ea4 <__errno>
 8014928:	2321      	movs	r3, #33	; 0x21
 801492a:	6003      	str	r3, [r0, #0]
 801492c:	2200      	movs	r2, #0
 801492e:	2300      	movs	r3, #0
 8014930:	4610      	mov	r0, r2
 8014932:	4619      	mov	r1, r3
 8014934:	f7eb ff8a 	bl	800084c <__aeabi_ddiv>
 8014938:	ec41 0b18 	vmov	d8, r0, r1
 801493c:	eeb0 0a48 	vmov.f32	s0, s16
 8014940:	eef0 0a68 	vmov.f32	s1, s17
 8014944:	ecbd 8b02 	vpop	{d8}
 8014948:	bd38      	pop	{r3, r4, r5, pc}
 801494a:	bf00      	nop
 801494c:	20000474 	.word	0x20000474

08014950 <__ieee754_asin>:
 8014950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014954:	ed2d 8b04 	vpush	{d8-d9}
 8014958:	ec55 4b10 	vmov	r4, r5, d0
 801495c:	4bcc      	ldr	r3, [pc, #816]	; (8014c90 <__ieee754_asin+0x340>)
 801495e:	b083      	sub	sp, #12
 8014960:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8014964:	4598      	cmp	r8, r3
 8014966:	9501      	str	r5, [sp, #4]
 8014968:	dd35      	ble.n	80149d6 <__ieee754_asin+0x86>
 801496a:	ee10 3a10 	vmov	r3, s0
 801496e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8014972:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8014976:	ea58 0303 	orrs.w	r3, r8, r3
 801497a:	d117      	bne.n	80149ac <__ieee754_asin+0x5c>
 801497c:	a3aa      	add	r3, pc, #680	; (adr r3, 8014c28 <__ieee754_asin+0x2d8>)
 801497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014982:	ee10 0a10 	vmov	r0, s0
 8014986:	4629      	mov	r1, r5
 8014988:	f7eb fe36 	bl	80005f8 <__aeabi_dmul>
 801498c:	a3a8      	add	r3, pc, #672	; (adr r3, 8014c30 <__ieee754_asin+0x2e0>)
 801498e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014992:	4606      	mov	r6, r0
 8014994:	460f      	mov	r7, r1
 8014996:	4620      	mov	r0, r4
 8014998:	4629      	mov	r1, r5
 801499a:	f7eb fe2d 	bl	80005f8 <__aeabi_dmul>
 801499e:	4602      	mov	r2, r0
 80149a0:	460b      	mov	r3, r1
 80149a2:	4630      	mov	r0, r6
 80149a4:	4639      	mov	r1, r7
 80149a6:	f7eb fc71 	bl	800028c <__adddf3>
 80149aa:	e00b      	b.n	80149c4 <__ieee754_asin+0x74>
 80149ac:	ee10 2a10 	vmov	r2, s0
 80149b0:	462b      	mov	r3, r5
 80149b2:	ee10 0a10 	vmov	r0, s0
 80149b6:	4629      	mov	r1, r5
 80149b8:	f7eb fc66 	bl	8000288 <__aeabi_dsub>
 80149bc:	4602      	mov	r2, r0
 80149be:	460b      	mov	r3, r1
 80149c0:	f7eb ff44 	bl	800084c <__aeabi_ddiv>
 80149c4:	4604      	mov	r4, r0
 80149c6:	460d      	mov	r5, r1
 80149c8:	ec45 4b10 	vmov	d0, r4, r5
 80149cc:	b003      	add	sp, #12
 80149ce:	ecbd 8b04 	vpop	{d8-d9}
 80149d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149d6:	4baf      	ldr	r3, [pc, #700]	; (8014c94 <__ieee754_asin+0x344>)
 80149d8:	4598      	cmp	r8, r3
 80149da:	dc11      	bgt.n	8014a00 <__ieee754_asin+0xb0>
 80149dc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80149e0:	f280 80ae 	bge.w	8014b40 <__ieee754_asin+0x1f0>
 80149e4:	a394      	add	r3, pc, #592	; (adr r3, 8014c38 <__ieee754_asin+0x2e8>)
 80149e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ea:	ee10 0a10 	vmov	r0, s0
 80149ee:	4629      	mov	r1, r5
 80149f0:	f7eb fc4c 	bl	800028c <__adddf3>
 80149f4:	4ba8      	ldr	r3, [pc, #672]	; (8014c98 <__ieee754_asin+0x348>)
 80149f6:	2200      	movs	r2, #0
 80149f8:	f7ec f88e 	bl	8000b18 <__aeabi_dcmpgt>
 80149fc:	2800      	cmp	r0, #0
 80149fe:	d1e3      	bne.n	80149c8 <__ieee754_asin+0x78>
 8014a00:	ec45 4b10 	vmov	d0, r4, r5
 8014a04:	f000 fcd8 	bl	80153b8 <fabs>
 8014a08:	49a3      	ldr	r1, [pc, #652]	; (8014c98 <__ieee754_asin+0x348>)
 8014a0a:	ec53 2b10 	vmov	r2, r3, d0
 8014a0e:	2000      	movs	r0, #0
 8014a10:	f7eb fc3a 	bl	8000288 <__aeabi_dsub>
 8014a14:	4ba1      	ldr	r3, [pc, #644]	; (8014c9c <__ieee754_asin+0x34c>)
 8014a16:	2200      	movs	r2, #0
 8014a18:	f7eb fdee 	bl	80005f8 <__aeabi_dmul>
 8014a1c:	a388      	add	r3, pc, #544	; (adr r3, 8014c40 <__ieee754_asin+0x2f0>)
 8014a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a22:	4604      	mov	r4, r0
 8014a24:	460d      	mov	r5, r1
 8014a26:	f7eb fde7 	bl	80005f8 <__aeabi_dmul>
 8014a2a:	a387      	add	r3, pc, #540	; (adr r3, 8014c48 <__ieee754_asin+0x2f8>)
 8014a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a30:	f7eb fc2c 	bl	800028c <__adddf3>
 8014a34:	4622      	mov	r2, r4
 8014a36:	462b      	mov	r3, r5
 8014a38:	f7eb fdde 	bl	80005f8 <__aeabi_dmul>
 8014a3c:	a384      	add	r3, pc, #528	; (adr r3, 8014c50 <__ieee754_asin+0x300>)
 8014a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a42:	f7eb fc21 	bl	8000288 <__aeabi_dsub>
 8014a46:	4622      	mov	r2, r4
 8014a48:	462b      	mov	r3, r5
 8014a4a:	f7eb fdd5 	bl	80005f8 <__aeabi_dmul>
 8014a4e:	a382      	add	r3, pc, #520	; (adr r3, 8014c58 <__ieee754_asin+0x308>)
 8014a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a54:	f7eb fc1a 	bl	800028c <__adddf3>
 8014a58:	4622      	mov	r2, r4
 8014a5a:	462b      	mov	r3, r5
 8014a5c:	f7eb fdcc 	bl	80005f8 <__aeabi_dmul>
 8014a60:	a37f      	add	r3, pc, #508	; (adr r3, 8014c60 <__ieee754_asin+0x310>)
 8014a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a66:	f7eb fc0f 	bl	8000288 <__aeabi_dsub>
 8014a6a:	4622      	mov	r2, r4
 8014a6c:	462b      	mov	r3, r5
 8014a6e:	f7eb fdc3 	bl	80005f8 <__aeabi_dmul>
 8014a72:	a37d      	add	r3, pc, #500	; (adr r3, 8014c68 <__ieee754_asin+0x318>)
 8014a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a78:	f7eb fc08 	bl	800028c <__adddf3>
 8014a7c:	4622      	mov	r2, r4
 8014a7e:	462b      	mov	r3, r5
 8014a80:	f7eb fdba 	bl	80005f8 <__aeabi_dmul>
 8014a84:	a37a      	add	r3, pc, #488	; (adr r3, 8014c70 <__ieee754_asin+0x320>)
 8014a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8a:	ec41 0b18 	vmov	d8, r0, r1
 8014a8e:	4620      	mov	r0, r4
 8014a90:	4629      	mov	r1, r5
 8014a92:	f7eb fdb1 	bl	80005f8 <__aeabi_dmul>
 8014a96:	a378      	add	r3, pc, #480	; (adr r3, 8014c78 <__ieee754_asin+0x328>)
 8014a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9c:	f7eb fbf4 	bl	8000288 <__aeabi_dsub>
 8014aa0:	4622      	mov	r2, r4
 8014aa2:	462b      	mov	r3, r5
 8014aa4:	f7eb fda8 	bl	80005f8 <__aeabi_dmul>
 8014aa8:	a375      	add	r3, pc, #468	; (adr r3, 8014c80 <__ieee754_asin+0x330>)
 8014aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aae:	f7eb fbed 	bl	800028c <__adddf3>
 8014ab2:	4622      	mov	r2, r4
 8014ab4:	462b      	mov	r3, r5
 8014ab6:	f7eb fd9f 	bl	80005f8 <__aeabi_dmul>
 8014aba:	a373      	add	r3, pc, #460	; (adr r3, 8014c88 <__ieee754_asin+0x338>)
 8014abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ac0:	f7eb fbe2 	bl	8000288 <__aeabi_dsub>
 8014ac4:	4622      	mov	r2, r4
 8014ac6:	462b      	mov	r3, r5
 8014ac8:	f7eb fd96 	bl	80005f8 <__aeabi_dmul>
 8014acc:	4b72      	ldr	r3, [pc, #456]	; (8014c98 <__ieee754_asin+0x348>)
 8014ace:	2200      	movs	r2, #0
 8014ad0:	f7eb fbdc 	bl	800028c <__adddf3>
 8014ad4:	ec45 4b10 	vmov	d0, r4, r5
 8014ad8:	4606      	mov	r6, r0
 8014ada:	460f      	mov	r7, r1
 8014adc:	f000 fa16 	bl	8014f0c <__ieee754_sqrt>
 8014ae0:	4b6f      	ldr	r3, [pc, #444]	; (8014ca0 <__ieee754_asin+0x350>)
 8014ae2:	4598      	cmp	r8, r3
 8014ae4:	ec5b ab10 	vmov	sl, fp, d0
 8014ae8:	f340 80dc 	ble.w	8014ca4 <__ieee754_asin+0x354>
 8014aec:	4632      	mov	r2, r6
 8014aee:	463b      	mov	r3, r7
 8014af0:	ec51 0b18 	vmov	r0, r1, d8
 8014af4:	f7eb feaa 	bl	800084c <__aeabi_ddiv>
 8014af8:	4652      	mov	r2, sl
 8014afa:	465b      	mov	r3, fp
 8014afc:	f7eb fd7c 	bl	80005f8 <__aeabi_dmul>
 8014b00:	4652      	mov	r2, sl
 8014b02:	465b      	mov	r3, fp
 8014b04:	f7eb fbc2 	bl	800028c <__adddf3>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	f7eb fbbe 	bl	800028c <__adddf3>
 8014b10:	a347      	add	r3, pc, #284	; (adr r3, 8014c30 <__ieee754_asin+0x2e0>)
 8014b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b16:	f7eb fbb7 	bl	8000288 <__aeabi_dsub>
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	460b      	mov	r3, r1
 8014b1e:	a142      	add	r1, pc, #264	; (adr r1, 8014c28 <__ieee754_asin+0x2d8>)
 8014b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014b24:	f7eb fbb0 	bl	8000288 <__aeabi_dsub>
 8014b28:	9b01      	ldr	r3, [sp, #4]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	bfdc      	itt	le
 8014b2e:	4602      	movle	r2, r0
 8014b30:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8014b34:	4604      	mov	r4, r0
 8014b36:	460d      	mov	r5, r1
 8014b38:	bfdc      	itt	le
 8014b3a:	4614      	movle	r4, r2
 8014b3c:	461d      	movle	r5, r3
 8014b3e:	e743      	b.n	80149c8 <__ieee754_asin+0x78>
 8014b40:	ee10 2a10 	vmov	r2, s0
 8014b44:	ee10 0a10 	vmov	r0, s0
 8014b48:	462b      	mov	r3, r5
 8014b4a:	4629      	mov	r1, r5
 8014b4c:	f7eb fd54 	bl	80005f8 <__aeabi_dmul>
 8014b50:	a33b      	add	r3, pc, #236	; (adr r3, 8014c40 <__ieee754_asin+0x2f0>)
 8014b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b56:	4606      	mov	r6, r0
 8014b58:	460f      	mov	r7, r1
 8014b5a:	f7eb fd4d 	bl	80005f8 <__aeabi_dmul>
 8014b5e:	a33a      	add	r3, pc, #232	; (adr r3, 8014c48 <__ieee754_asin+0x2f8>)
 8014b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b64:	f7eb fb92 	bl	800028c <__adddf3>
 8014b68:	4632      	mov	r2, r6
 8014b6a:	463b      	mov	r3, r7
 8014b6c:	f7eb fd44 	bl	80005f8 <__aeabi_dmul>
 8014b70:	a337      	add	r3, pc, #220	; (adr r3, 8014c50 <__ieee754_asin+0x300>)
 8014b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b76:	f7eb fb87 	bl	8000288 <__aeabi_dsub>
 8014b7a:	4632      	mov	r2, r6
 8014b7c:	463b      	mov	r3, r7
 8014b7e:	f7eb fd3b 	bl	80005f8 <__aeabi_dmul>
 8014b82:	a335      	add	r3, pc, #212	; (adr r3, 8014c58 <__ieee754_asin+0x308>)
 8014b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b88:	f7eb fb80 	bl	800028c <__adddf3>
 8014b8c:	4632      	mov	r2, r6
 8014b8e:	463b      	mov	r3, r7
 8014b90:	f7eb fd32 	bl	80005f8 <__aeabi_dmul>
 8014b94:	a332      	add	r3, pc, #200	; (adr r3, 8014c60 <__ieee754_asin+0x310>)
 8014b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b9a:	f7eb fb75 	bl	8000288 <__aeabi_dsub>
 8014b9e:	4632      	mov	r2, r6
 8014ba0:	463b      	mov	r3, r7
 8014ba2:	f7eb fd29 	bl	80005f8 <__aeabi_dmul>
 8014ba6:	a330      	add	r3, pc, #192	; (adr r3, 8014c68 <__ieee754_asin+0x318>)
 8014ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bac:	f7eb fb6e 	bl	800028c <__adddf3>
 8014bb0:	4632      	mov	r2, r6
 8014bb2:	463b      	mov	r3, r7
 8014bb4:	f7eb fd20 	bl	80005f8 <__aeabi_dmul>
 8014bb8:	a32d      	add	r3, pc, #180	; (adr r3, 8014c70 <__ieee754_asin+0x320>)
 8014bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bbe:	4680      	mov	r8, r0
 8014bc0:	4689      	mov	r9, r1
 8014bc2:	4630      	mov	r0, r6
 8014bc4:	4639      	mov	r1, r7
 8014bc6:	f7eb fd17 	bl	80005f8 <__aeabi_dmul>
 8014bca:	a32b      	add	r3, pc, #172	; (adr r3, 8014c78 <__ieee754_asin+0x328>)
 8014bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd0:	f7eb fb5a 	bl	8000288 <__aeabi_dsub>
 8014bd4:	4632      	mov	r2, r6
 8014bd6:	463b      	mov	r3, r7
 8014bd8:	f7eb fd0e 	bl	80005f8 <__aeabi_dmul>
 8014bdc:	a328      	add	r3, pc, #160	; (adr r3, 8014c80 <__ieee754_asin+0x330>)
 8014bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be2:	f7eb fb53 	bl	800028c <__adddf3>
 8014be6:	4632      	mov	r2, r6
 8014be8:	463b      	mov	r3, r7
 8014bea:	f7eb fd05 	bl	80005f8 <__aeabi_dmul>
 8014bee:	a326      	add	r3, pc, #152	; (adr r3, 8014c88 <__ieee754_asin+0x338>)
 8014bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf4:	f7eb fb48 	bl	8000288 <__aeabi_dsub>
 8014bf8:	4632      	mov	r2, r6
 8014bfa:	463b      	mov	r3, r7
 8014bfc:	f7eb fcfc 	bl	80005f8 <__aeabi_dmul>
 8014c00:	4b25      	ldr	r3, [pc, #148]	; (8014c98 <__ieee754_asin+0x348>)
 8014c02:	2200      	movs	r2, #0
 8014c04:	f7eb fb42 	bl	800028c <__adddf3>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	460b      	mov	r3, r1
 8014c0c:	4640      	mov	r0, r8
 8014c0e:	4649      	mov	r1, r9
 8014c10:	f7eb fe1c 	bl	800084c <__aeabi_ddiv>
 8014c14:	4622      	mov	r2, r4
 8014c16:	462b      	mov	r3, r5
 8014c18:	f7eb fcee 	bl	80005f8 <__aeabi_dmul>
 8014c1c:	4602      	mov	r2, r0
 8014c1e:	460b      	mov	r3, r1
 8014c20:	4620      	mov	r0, r4
 8014c22:	4629      	mov	r1, r5
 8014c24:	e6bf      	b.n	80149a6 <__ieee754_asin+0x56>
 8014c26:	bf00      	nop
 8014c28:	54442d18 	.word	0x54442d18
 8014c2c:	3ff921fb 	.word	0x3ff921fb
 8014c30:	33145c07 	.word	0x33145c07
 8014c34:	3c91a626 	.word	0x3c91a626
 8014c38:	8800759c 	.word	0x8800759c
 8014c3c:	7e37e43c 	.word	0x7e37e43c
 8014c40:	0dfdf709 	.word	0x0dfdf709
 8014c44:	3f023de1 	.word	0x3f023de1
 8014c48:	7501b288 	.word	0x7501b288
 8014c4c:	3f49efe0 	.word	0x3f49efe0
 8014c50:	b5688f3b 	.word	0xb5688f3b
 8014c54:	3fa48228 	.word	0x3fa48228
 8014c58:	0e884455 	.word	0x0e884455
 8014c5c:	3fc9c155 	.word	0x3fc9c155
 8014c60:	03eb6f7d 	.word	0x03eb6f7d
 8014c64:	3fd4d612 	.word	0x3fd4d612
 8014c68:	55555555 	.word	0x55555555
 8014c6c:	3fc55555 	.word	0x3fc55555
 8014c70:	b12e9282 	.word	0xb12e9282
 8014c74:	3fb3b8c5 	.word	0x3fb3b8c5
 8014c78:	1b8d0159 	.word	0x1b8d0159
 8014c7c:	3fe6066c 	.word	0x3fe6066c
 8014c80:	9c598ac8 	.word	0x9c598ac8
 8014c84:	40002ae5 	.word	0x40002ae5
 8014c88:	1c8a2d4b 	.word	0x1c8a2d4b
 8014c8c:	40033a27 	.word	0x40033a27
 8014c90:	3fefffff 	.word	0x3fefffff
 8014c94:	3fdfffff 	.word	0x3fdfffff
 8014c98:	3ff00000 	.word	0x3ff00000
 8014c9c:	3fe00000 	.word	0x3fe00000
 8014ca0:	3fef3332 	.word	0x3fef3332
 8014ca4:	ee10 2a10 	vmov	r2, s0
 8014ca8:	ee10 0a10 	vmov	r0, s0
 8014cac:	465b      	mov	r3, fp
 8014cae:	4659      	mov	r1, fp
 8014cb0:	f7eb faec 	bl	800028c <__adddf3>
 8014cb4:	4632      	mov	r2, r6
 8014cb6:	463b      	mov	r3, r7
 8014cb8:	ec41 0b19 	vmov	d9, r0, r1
 8014cbc:	ec51 0b18 	vmov	r0, r1, d8
 8014cc0:	f7eb fdc4 	bl	800084c <__aeabi_ddiv>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	460b      	mov	r3, r1
 8014cc8:	ec51 0b19 	vmov	r0, r1, d9
 8014ccc:	f7eb fc94 	bl	80005f8 <__aeabi_dmul>
 8014cd0:	f04f 0800 	mov.w	r8, #0
 8014cd4:	4606      	mov	r6, r0
 8014cd6:	460f      	mov	r7, r1
 8014cd8:	4642      	mov	r2, r8
 8014cda:	465b      	mov	r3, fp
 8014cdc:	4640      	mov	r0, r8
 8014cde:	4659      	mov	r1, fp
 8014ce0:	f7eb fc8a 	bl	80005f8 <__aeabi_dmul>
 8014ce4:	4602      	mov	r2, r0
 8014ce6:	460b      	mov	r3, r1
 8014ce8:	4620      	mov	r0, r4
 8014cea:	4629      	mov	r1, r5
 8014cec:	f7eb facc 	bl	8000288 <__aeabi_dsub>
 8014cf0:	4642      	mov	r2, r8
 8014cf2:	4604      	mov	r4, r0
 8014cf4:	460d      	mov	r5, r1
 8014cf6:	465b      	mov	r3, fp
 8014cf8:	4650      	mov	r0, sl
 8014cfa:	4659      	mov	r1, fp
 8014cfc:	f7eb fac6 	bl	800028c <__adddf3>
 8014d00:	4602      	mov	r2, r0
 8014d02:	460b      	mov	r3, r1
 8014d04:	4620      	mov	r0, r4
 8014d06:	4629      	mov	r1, r5
 8014d08:	f7eb fda0 	bl	800084c <__aeabi_ddiv>
 8014d0c:	4602      	mov	r2, r0
 8014d0e:	460b      	mov	r3, r1
 8014d10:	f7eb fabc 	bl	800028c <__adddf3>
 8014d14:	4602      	mov	r2, r0
 8014d16:	460b      	mov	r3, r1
 8014d18:	a113      	add	r1, pc, #76	; (adr r1, 8014d68 <__ieee754_asin+0x418>)
 8014d1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d1e:	f7eb fab3 	bl	8000288 <__aeabi_dsub>
 8014d22:	4602      	mov	r2, r0
 8014d24:	460b      	mov	r3, r1
 8014d26:	4630      	mov	r0, r6
 8014d28:	4639      	mov	r1, r7
 8014d2a:	f7eb faad 	bl	8000288 <__aeabi_dsub>
 8014d2e:	4642      	mov	r2, r8
 8014d30:	4604      	mov	r4, r0
 8014d32:	460d      	mov	r5, r1
 8014d34:	465b      	mov	r3, fp
 8014d36:	4640      	mov	r0, r8
 8014d38:	4659      	mov	r1, fp
 8014d3a:	f7eb faa7 	bl	800028c <__adddf3>
 8014d3e:	4602      	mov	r2, r0
 8014d40:	460b      	mov	r3, r1
 8014d42:	a10b      	add	r1, pc, #44	; (adr r1, 8014d70 <__ieee754_asin+0x420>)
 8014d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d48:	f7eb fa9e 	bl	8000288 <__aeabi_dsub>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	460b      	mov	r3, r1
 8014d50:	4620      	mov	r0, r4
 8014d52:	4629      	mov	r1, r5
 8014d54:	f7eb fa98 	bl	8000288 <__aeabi_dsub>
 8014d58:	4602      	mov	r2, r0
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	a104      	add	r1, pc, #16	; (adr r1, 8014d70 <__ieee754_asin+0x420>)
 8014d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d62:	e6df      	b.n	8014b24 <__ieee754_asin+0x1d4>
 8014d64:	f3af 8000 	nop.w
 8014d68:	33145c07 	.word	0x33145c07
 8014d6c:	3c91a626 	.word	0x3c91a626
 8014d70:	54442d18 	.word	0x54442d18
 8014d74:	3fe921fb 	.word	0x3fe921fb

08014d78 <__ieee754_atan2>:
 8014d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014d7c:	ec57 6b11 	vmov	r6, r7, d1
 8014d80:	4273      	negs	r3, r6
 8014d82:	f8df e184 	ldr.w	lr, [pc, #388]	; 8014f08 <__ieee754_atan2+0x190>
 8014d86:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8014d8a:	4333      	orrs	r3, r6
 8014d8c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014d90:	4573      	cmp	r3, lr
 8014d92:	ec51 0b10 	vmov	r0, r1, d0
 8014d96:	ee11 8a10 	vmov	r8, s2
 8014d9a:	d80a      	bhi.n	8014db2 <__ieee754_atan2+0x3a>
 8014d9c:	4244      	negs	r4, r0
 8014d9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014da2:	4304      	orrs	r4, r0
 8014da4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014da8:	4574      	cmp	r4, lr
 8014daa:	ee10 9a10 	vmov	r9, s0
 8014dae:	468c      	mov	ip, r1
 8014db0:	d907      	bls.n	8014dc2 <__ieee754_atan2+0x4a>
 8014db2:	4632      	mov	r2, r6
 8014db4:	463b      	mov	r3, r7
 8014db6:	f7eb fa69 	bl	800028c <__adddf3>
 8014dba:	ec41 0b10 	vmov	d0, r0, r1
 8014dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014dc2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8014dc6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014dca:	4334      	orrs	r4, r6
 8014dcc:	d103      	bne.n	8014dd6 <__ieee754_atan2+0x5e>
 8014dce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dd2:	f000 b951 	b.w	8015078 <atan>
 8014dd6:	17bc      	asrs	r4, r7, #30
 8014dd8:	f004 0402 	and.w	r4, r4, #2
 8014ddc:	ea53 0909 	orrs.w	r9, r3, r9
 8014de0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014de4:	d107      	bne.n	8014df6 <__ieee754_atan2+0x7e>
 8014de6:	2c02      	cmp	r4, #2
 8014de8:	d060      	beq.n	8014eac <__ieee754_atan2+0x134>
 8014dea:	2c03      	cmp	r4, #3
 8014dec:	d1e5      	bne.n	8014dba <__ieee754_atan2+0x42>
 8014dee:	a142      	add	r1, pc, #264	; (adr r1, 8014ef8 <__ieee754_atan2+0x180>)
 8014df0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014df4:	e7e1      	b.n	8014dba <__ieee754_atan2+0x42>
 8014df6:	ea52 0808 	orrs.w	r8, r2, r8
 8014dfa:	d106      	bne.n	8014e0a <__ieee754_atan2+0x92>
 8014dfc:	f1bc 0f00 	cmp.w	ip, #0
 8014e00:	da5f      	bge.n	8014ec2 <__ieee754_atan2+0x14a>
 8014e02:	a13f      	add	r1, pc, #252	; (adr r1, 8014f00 <__ieee754_atan2+0x188>)
 8014e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e08:	e7d7      	b.n	8014dba <__ieee754_atan2+0x42>
 8014e0a:	4572      	cmp	r2, lr
 8014e0c:	d10f      	bne.n	8014e2e <__ieee754_atan2+0xb6>
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	f104 34ff 	add.w	r4, r4, #4294967295
 8014e14:	d107      	bne.n	8014e26 <__ieee754_atan2+0xae>
 8014e16:	2c02      	cmp	r4, #2
 8014e18:	d84c      	bhi.n	8014eb4 <__ieee754_atan2+0x13c>
 8014e1a:	4b35      	ldr	r3, [pc, #212]	; (8014ef0 <__ieee754_atan2+0x178>)
 8014e1c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8014e20:	e9d4 0100 	ldrd	r0, r1, [r4]
 8014e24:	e7c9      	b.n	8014dba <__ieee754_atan2+0x42>
 8014e26:	2c02      	cmp	r4, #2
 8014e28:	d848      	bhi.n	8014ebc <__ieee754_atan2+0x144>
 8014e2a:	4b32      	ldr	r3, [pc, #200]	; (8014ef4 <__ieee754_atan2+0x17c>)
 8014e2c:	e7f6      	b.n	8014e1c <__ieee754_atan2+0xa4>
 8014e2e:	4573      	cmp	r3, lr
 8014e30:	d0e4      	beq.n	8014dfc <__ieee754_atan2+0x84>
 8014e32:	1a9b      	subs	r3, r3, r2
 8014e34:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8014e38:	ea4f 5223 	mov.w	r2, r3, asr #20
 8014e3c:	da1e      	bge.n	8014e7c <__ieee754_atan2+0x104>
 8014e3e:	2f00      	cmp	r7, #0
 8014e40:	da01      	bge.n	8014e46 <__ieee754_atan2+0xce>
 8014e42:	323c      	adds	r2, #60	; 0x3c
 8014e44:	db1e      	blt.n	8014e84 <__ieee754_atan2+0x10c>
 8014e46:	4632      	mov	r2, r6
 8014e48:	463b      	mov	r3, r7
 8014e4a:	f7eb fcff 	bl	800084c <__aeabi_ddiv>
 8014e4e:	ec41 0b10 	vmov	d0, r0, r1
 8014e52:	f000 fab1 	bl	80153b8 <fabs>
 8014e56:	f000 f90f 	bl	8015078 <atan>
 8014e5a:	ec51 0b10 	vmov	r0, r1, d0
 8014e5e:	2c01      	cmp	r4, #1
 8014e60:	d013      	beq.n	8014e8a <__ieee754_atan2+0x112>
 8014e62:	2c02      	cmp	r4, #2
 8014e64:	d015      	beq.n	8014e92 <__ieee754_atan2+0x11a>
 8014e66:	2c00      	cmp	r4, #0
 8014e68:	d0a7      	beq.n	8014dba <__ieee754_atan2+0x42>
 8014e6a:	a319      	add	r3, pc, #100	; (adr r3, 8014ed0 <__ieee754_atan2+0x158>)
 8014e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e70:	f7eb fa0a 	bl	8000288 <__aeabi_dsub>
 8014e74:	a318      	add	r3, pc, #96	; (adr r3, 8014ed8 <__ieee754_atan2+0x160>)
 8014e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7a:	e014      	b.n	8014ea6 <__ieee754_atan2+0x12e>
 8014e7c:	a118      	add	r1, pc, #96	; (adr r1, 8014ee0 <__ieee754_atan2+0x168>)
 8014e7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e82:	e7ec      	b.n	8014e5e <__ieee754_atan2+0xe6>
 8014e84:	2000      	movs	r0, #0
 8014e86:	2100      	movs	r1, #0
 8014e88:	e7e9      	b.n	8014e5e <__ieee754_atan2+0xe6>
 8014e8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e8e:	4619      	mov	r1, r3
 8014e90:	e793      	b.n	8014dba <__ieee754_atan2+0x42>
 8014e92:	a30f      	add	r3, pc, #60	; (adr r3, 8014ed0 <__ieee754_atan2+0x158>)
 8014e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e98:	f7eb f9f6 	bl	8000288 <__aeabi_dsub>
 8014e9c:	4602      	mov	r2, r0
 8014e9e:	460b      	mov	r3, r1
 8014ea0:	a10d      	add	r1, pc, #52	; (adr r1, 8014ed8 <__ieee754_atan2+0x160>)
 8014ea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ea6:	f7eb f9ef 	bl	8000288 <__aeabi_dsub>
 8014eaa:	e786      	b.n	8014dba <__ieee754_atan2+0x42>
 8014eac:	a10a      	add	r1, pc, #40	; (adr r1, 8014ed8 <__ieee754_atan2+0x160>)
 8014eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014eb2:	e782      	b.n	8014dba <__ieee754_atan2+0x42>
 8014eb4:	a10c      	add	r1, pc, #48	; (adr r1, 8014ee8 <__ieee754_atan2+0x170>)
 8014eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014eba:	e77e      	b.n	8014dba <__ieee754_atan2+0x42>
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	2100      	movs	r1, #0
 8014ec0:	e77b      	b.n	8014dba <__ieee754_atan2+0x42>
 8014ec2:	a107      	add	r1, pc, #28	; (adr r1, 8014ee0 <__ieee754_atan2+0x168>)
 8014ec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ec8:	e777      	b.n	8014dba <__ieee754_atan2+0x42>
 8014eca:	bf00      	nop
 8014ecc:	f3af 8000 	nop.w
 8014ed0:	33145c07 	.word	0x33145c07
 8014ed4:	3ca1a626 	.word	0x3ca1a626
 8014ed8:	54442d18 	.word	0x54442d18
 8014edc:	400921fb 	.word	0x400921fb
 8014ee0:	54442d18 	.word	0x54442d18
 8014ee4:	3ff921fb 	.word	0x3ff921fb
 8014ee8:	54442d18 	.word	0x54442d18
 8014eec:	3fe921fb 	.word	0x3fe921fb
 8014ef0:	080161c0 	.word	0x080161c0
 8014ef4:	080161d8 	.word	0x080161d8
 8014ef8:	54442d18 	.word	0x54442d18
 8014efc:	c00921fb 	.word	0xc00921fb
 8014f00:	54442d18 	.word	0x54442d18
 8014f04:	bff921fb 	.word	0xbff921fb
 8014f08:	7ff00000 	.word	0x7ff00000

08014f0c <__ieee754_sqrt>:
 8014f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f10:	ec55 4b10 	vmov	r4, r5, d0
 8014f14:	4e56      	ldr	r6, [pc, #344]	; (8015070 <__ieee754_sqrt+0x164>)
 8014f16:	43ae      	bics	r6, r5
 8014f18:	ee10 0a10 	vmov	r0, s0
 8014f1c:	ee10 3a10 	vmov	r3, s0
 8014f20:	4629      	mov	r1, r5
 8014f22:	462a      	mov	r2, r5
 8014f24:	d110      	bne.n	8014f48 <__ieee754_sqrt+0x3c>
 8014f26:	ee10 2a10 	vmov	r2, s0
 8014f2a:	462b      	mov	r3, r5
 8014f2c:	f7eb fb64 	bl	80005f8 <__aeabi_dmul>
 8014f30:	4602      	mov	r2, r0
 8014f32:	460b      	mov	r3, r1
 8014f34:	4620      	mov	r0, r4
 8014f36:	4629      	mov	r1, r5
 8014f38:	f7eb f9a8 	bl	800028c <__adddf3>
 8014f3c:	4604      	mov	r4, r0
 8014f3e:	460d      	mov	r5, r1
 8014f40:	ec45 4b10 	vmov	d0, r4, r5
 8014f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f48:	2d00      	cmp	r5, #0
 8014f4a:	dc10      	bgt.n	8014f6e <__ieee754_sqrt+0x62>
 8014f4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014f50:	4330      	orrs	r0, r6
 8014f52:	d0f5      	beq.n	8014f40 <__ieee754_sqrt+0x34>
 8014f54:	b15d      	cbz	r5, 8014f6e <__ieee754_sqrt+0x62>
 8014f56:	ee10 2a10 	vmov	r2, s0
 8014f5a:	462b      	mov	r3, r5
 8014f5c:	ee10 0a10 	vmov	r0, s0
 8014f60:	f7eb f992 	bl	8000288 <__aeabi_dsub>
 8014f64:	4602      	mov	r2, r0
 8014f66:	460b      	mov	r3, r1
 8014f68:	f7eb fc70 	bl	800084c <__aeabi_ddiv>
 8014f6c:	e7e6      	b.n	8014f3c <__ieee754_sqrt+0x30>
 8014f6e:	1509      	asrs	r1, r1, #20
 8014f70:	d076      	beq.n	8015060 <__ieee754_sqrt+0x154>
 8014f72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014f76:	07ce      	lsls	r6, r1, #31
 8014f78:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8014f7c:	bf5e      	ittt	pl
 8014f7e:	0fda      	lsrpl	r2, r3, #31
 8014f80:	005b      	lslpl	r3, r3, #1
 8014f82:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8014f86:	0fda      	lsrs	r2, r3, #31
 8014f88:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8014f8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8014f90:	2000      	movs	r0, #0
 8014f92:	106d      	asrs	r5, r5, #1
 8014f94:	005b      	lsls	r3, r3, #1
 8014f96:	f04f 0e16 	mov.w	lr, #22
 8014f9a:	4684      	mov	ip, r0
 8014f9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014fa0:	eb0c 0401 	add.w	r4, ip, r1
 8014fa4:	4294      	cmp	r4, r2
 8014fa6:	bfde      	ittt	le
 8014fa8:	1b12      	suble	r2, r2, r4
 8014faa:	eb04 0c01 	addle.w	ip, r4, r1
 8014fae:	1840      	addle	r0, r0, r1
 8014fb0:	0052      	lsls	r2, r2, #1
 8014fb2:	f1be 0e01 	subs.w	lr, lr, #1
 8014fb6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8014fba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014fbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8014fc2:	d1ed      	bne.n	8014fa0 <__ieee754_sqrt+0x94>
 8014fc4:	4671      	mov	r1, lr
 8014fc6:	2720      	movs	r7, #32
 8014fc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014fcc:	4562      	cmp	r2, ip
 8014fce:	eb04 060e 	add.w	r6, r4, lr
 8014fd2:	dc02      	bgt.n	8014fda <__ieee754_sqrt+0xce>
 8014fd4:	d113      	bne.n	8014ffe <__ieee754_sqrt+0xf2>
 8014fd6:	429e      	cmp	r6, r3
 8014fd8:	d811      	bhi.n	8014ffe <__ieee754_sqrt+0xf2>
 8014fda:	2e00      	cmp	r6, #0
 8014fdc:	eb06 0e04 	add.w	lr, r6, r4
 8014fe0:	da43      	bge.n	801506a <__ieee754_sqrt+0x15e>
 8014fe2:	f1be 0f00 	cmp.w	lr, #0
 8014fe6:	db40      	blt.n	801506a <__ieee754_sqrt+0x15e>
 8014fe8:	f10c 0801 	add.w	r8, ip, #1
 8014fec:	eba2 020c 	sub.w	r2, r2, ip
 8014ff0:	429e      	cmp	r6, r3
 8014ff2:	bf88      	it	hi
 8014ff4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014ff8:	1b9b      	subs	r3, r3, r6
 8014ffa:	4421      	add	r1, r4
 8014ffc:	46c4      	mov	ip, r8
 8014ffe:	0052      	lsls	r2, r2, #1
 8015000:	3f01      	subs	r7, #1
 8015002:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8015006:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801500a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801500e:	d1dd      	bne.n	8014fcc <__ieee754_sqrt+0xc0>
 8015010:	4313      	orrs	r3, r2
 8015012:	d006      	beq.n	8015022 <__ieee754_sqrt+0x116>
 8015014:	1c4c      	adds	r4, r1, #1
 8015016:	bf13      	iteet	ne
 8015018:	3101      	addne	r1, #1
 801501a:	3001      	addeq	r0, #1
 801501c:	4639      	moveq	r1, r7
 801501e:	f021 0101 	bicne.w	r1, r1, #1
 8015022:	1043      	asrs	r3, r0, #1
 8015024:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8015028:	0849      	lsrs	r1, r1, #1
 801502a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801502e:	07c2      	lsls	r2, r0, #31
 8015030:	bf48      	it	mi
 8015032:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8015036:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801503a:	460c      	mov	r4, r1
 801503c:	463d      	mov	r5, r7
 801503e:	e77f      	b.n	8014f40 <__ieee754_sqrt+0x34>
 8015040:	0ada      	lsrs	r2, r3, #11
 8015042:	3815      	subs	r0, #21
 8015044:	055b      	lsls	r3, r3, #21
 8015046:	2a00      	cmp	r2, #0
 8015048:	d0fa      	beq.n	8015040 <__ieee754_sqrt+0x134>
 801504a:	02d7      	lsls	r7, r2, #11
 801504c:	d50a      	bpl.n	8015064 <__ieee754_sqrt+0x158>
 801504e:	f1c1 0420 	rsb	r4, r1, #32
 8015052:	fa23 f404 	lsr.w	r4, r3, r4
 8015056:	1e4d      	subs	r5, r1, #1
 8015058:	408b      	lsls	r3, r1
 801505a:	4322      	orrs	r2, r4
 801505c:	1b41      	subs	r1, r0, r5
 801505e:	e788      	b.n	8014f72 <__ieee754_sqrt+0x66>
 8015060:	4608      	mov	r0, r1
 8015062:	e7f0      	b.n	8015046 <__ieee754_sqrt+0x13a>
 8015064:	0052      	lsls	r2, r2, #1
 8015066:	3101      	adds	r1, #1
 8015068:	e7ef      	b.n	801504a <__ieee754_sqrt+0x13e>
 801506a:	46e0      	mov	r8, ip
 801506c:	e7be      	b.n	8014fec <__ieee754_sqrt+0xe0>
 801506e:	bf00      	nop
 8015070:	7ff00000 	.word	0x7ff00000
 8015074:	00000000 	.word	0x00000000

08015078 <atan>:
 8015078:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801507c:	ec55 4b10 	vmov	r4, r5, d0
 8015080:	4bc3      	ldr	r3, [pc, #780]	; (8015390 <atan+0x318>)
 8015082:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015086:	429e      	cmp	r6, r3
 8015088:	46ab      	mov	fp, r5
 801508a:	dd18      	ble.n	80150be <atan+0x46>
 801508c:	4bc1      	ldr	r3, [pc, #772]	; (8015394 <atan+0x31c>)
 801508e:	429e      	cmp	r6, r3
 8015090:	dc01      	bgt.n	8015096 <atan+0x1e>
 8015092:	d109      	bne.n	80150a8 <atan+0x30>
 8015094:	b144      	cbz	r4, 80150a8 <atan+0x30>
 8015096:	4622      	mov	r2, r4
 8015098:	462b      	mov	r3, r5
 801509a:	4620      	mov	r0, r4
 801509c:	4629      	mov	r1, r5
 801509e:	f7eb f8f5 	bl	800028c <__adddf3>
 80150a2:	4604      	mov	r4, r0
 80150a4:	460d      	mov	r5, r1
 80150a6:	e006      	b.n	80150b6 <atan+0x3e>
 80150a8:	f1bb 0f00 	cmp.w	fp, #0
 80150ac:	f300 8131 	bgt.w	8015312 <atan+0x29a>
 80150b0:	a59b      	add	r5, pc, #620	; (adr r5, 8015320 <atan+0x2a8>)
 80150b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80150b6:	ec45 4b10 	vmov	d0, r4, r5
 80150ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150be:	4bb6      	ldr	r3, [pc, #728]	; (8015398 <atan+0x320>)
 80150c0:	429e      	cmp	r6, r3
 80150c2:	dc14      	bgt.n	80150ee <atan+0x76>
 80150c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80150c8:	429e      	cmp	r6, r3
 80150ca:	dc0d      	bgt.n	80150e8 <atan+0x70>
 80150cc:	a396      	add	r3, pc, #600	; (adr r3, 8015328 <atan+0x2b0>)
 80150ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150d2:	ee10 0a10 	vmov	r0, s0
 80150d6:	4629      	mov	r1, r5
 80150d8:	f7eb f8d8 	bl	800028c <__adddf3>
 80150dc:	4baf      	ldr	r3, [pc, #700]	; (801539c <atan+0x324>)
 80150de:	2200      	movs	r2, #0
 80150e0:	f7eb fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 80150e4:	2800      	cmp	r0, #0
 80150e6:	d1e6      	bne.n	80150b6 <atan+0x3e>
 80150e8:	f04f 3aff 	mov.w	sl, #4294967295
 80150ec:	e02b      	b.n	8015146 <atan+0xce>
 80150ee:	f000 f963 	bl	80153b8 <fabs>
 80150f2:	4bab      	ldr	r3, [pc, #684]	; (80153a0 <atan+0x328>)
 80150f4:	429e      	cmp	r6, r3
 80150f6:	ec55 4b10 	vmov	r4, r5, d0
 80150fa:	f300 80bf 	bgt.w	801527c <atan+0x204>
 80150fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8015102:	429e      	cmp	r6, r3
 8015104:	f300 80a0 	bgt.w	8015248 <atan+0x1d0>
 8015108:	ee10 2a10 	vmov	r2, s0
 801510c:	ee10 0a10 	vmov	r0, s0
 8015110:	462b      	mov	r3, r5
 8015112:	4629      	mov	r1, r5
 8015114:	f7eb f8ba 	bl	800028c <__adddf3>
 8015118:	4ba0      	ldr	r3, [pc, #640]	; (801539c <atan+0x324>)
 801511a:	2200      	movs	r2, #0
 801511c:	f7eb f8b4 	bl	8000288 <__aeabi_dsub>
 8015120:	2200      	movs	r2, #0
 8015122:	4606      	mov	r6, r0
 8015124:	460f      	mov	r7, r1
 8015126:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801512a:	4620      	mov	r0, r4
 801512c:	4629      	mov	r1, r5
 801512e:	f7eb f8ad 	bl	800028c <__adddf3>
 8015132:	4602      	mov	r2, r0
 8015134:	460b      	mov	r3, r1
 8015136:	4630      	mov	r0, r6
 8015138:	4639      	mov	r1, r7
 801513a:	f7eb fb87 	bl	800084c <__aeabi_ddiv>
 801513e:	f04f 0a00 	mov.w	sl, #0
 8015142:	4604      	mov	r4, r0
 8015144:	460d      	mov	r5, r1
 8015146:	4622      	mov	r2, r4
 8015148:	462b      	mov	r3, r5
 801514a:	4620      	mov	r0, r4
 801514c:	4629      	mov	r1, r5
 801514e:	f7eb fa53 	bl	80005f8 <__aeabi_dmul>
 8015152:	4602      	mov	r2, r0
 8015154:	460b      	mov	r3, r1
 8015156:	4680      	mov	r8, r0
 8015158:	4689      	mov	r9, r1
 801515a:	f7eb fa4d 	bl	80005f8 <__aeabi_dmul>
 801515e:	a374      	add	r3, pc, #464	; (adr r3, 8015330 <atan+0x2b8>)
 8015160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015164:	4606      	mov	r6, r0
 8015166:	460f      	mov	r7, r1
 8015168:	f7eb fa46 	bl	80005f8 <__aeabi_dmul>
 801516c:	a372      	add	r3, pc, #456	; (adr r3, 8015338 <atan+0x2c0>)
 801516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015172:	f7eb f88b 	bl	800028c <__adddf3>
 8015176:	4632      	mov	r2, r6
 8015178:	463b      	mov	r3, r7
 801517a:	f7eb fa3d 	bl	80005f8 <__aeabi_dmul>
 801517e:	a370      	add	r3, pc, #448	; (adr r3, 8015340 <atan+0x2c8>)
 8015180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015184:	f7eb f882 	bl	800028c <__adddf3>
 8015188:	4632      	mov	r2, r6
 801518a:	463b      	mov	r3, r7
 801518c:	f7eb fa34 	bl	80005f8 <__aeabi_dmul>
 8015190:	a36d      	add	r3, pc, #436	; (adr r3, 8015348 <atan+0x2d0>)
 8015192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015196:	f7eb f879 	bl	800028c <__adddf3>
 801519a:	4632      	mov	r2, r6
 801519c:	463b      	mov	r3, r7
 801519e:	f7eb fa2b 	bl	80005f8 <__aeabi_dmul>
 80151a2:	a36b      	add	r3, pc, #428	; (adr r3, 8015350 <atan+0x2d8>)
 80151a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a8:	f7eb f870 	bl	800028c <__adddf3>
 80151ac:	4632      	mov	r2, r6
 80151ae:	463b      	mov	r3, r7
 80151b0:	f7eb fa22 	bl	80005f8 <__aeabi_dmul>
 80151b4:	a368      	add	r3, pc, #416	; (adr r3, 8015358 <atan+0x2e0>)
 80151b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ba:	f7eb f867 	bl	800028c <__adddf3>
 80151be:	4642      	mov	r2, r8
 80151c0:	464b      	mov	r3, r9
 80151c2:	f7eb fa19 	bl	80005f8 <__aeabi_dmul>
 80151c6:	a366      	add	r3, pc, #408	; (adr r3, 8015360 <atan+0x2e8>)
 80151c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151cc:	4680      	mov	r8, r0
 80151ce:	4689      	mov	r9, r1
 80151d0:	4630      	mov	r0, r6
 80151d2:	4639      	mov	r1, r7
 80151d4:	f7eb fa10 	bl	80005f8 <__aeabi_dmul>
 80151d8:	a363      	add	r3, pc, #396	; (adr r3, 8015368 <atan+0x2f0>)
 80151da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151de:	f7eb f853 	bl	8000288 <__aeabi_dsub>
 80151e2:	4632      	mov	r2, r6
 80151e4:	463b      	mov	r3, r7
 80151e6:	f7eb fa07 	bl	80005f8 <__aeabi_dmul>
 80151ea:	a361      	add	r3, pc, #388	; (adr r3, 8015370 <atan+0x2f8>)
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	f7eb f84a 	bl	8000288 <__aeabi_dsub>
 80151f4:	4632      	mov	r2, r6
 80151f6:	463b      	mov	r3, r7
 80151f8:	f7eb f9fe 	bl	80005f8 <__aeabi_dmul>
 80151fc:	a35e      	add	r3, pc, #376	; (adr r3, 8015378 <atan+0x300>)
 80151fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015202:	f7eb f841 	bl	8000288 <__aeabi_dsub>
 8015206:	4632      	mov	r2, r6
 8015208:	463b      	mov	r3, r7
 801520a:	f7eb f9f5 	bl	80005f8 <__aeabi_dmul>
 801520e:	a35c      	add	r3, pc, #368	; (adr r3, 8015380 <atan+0x308>)
 8015210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015214:	f7eb f838 	bl	8000288 <__aeabi_dsub>
 8015218:	4632      	mov	r2, r6
 801521a:	463b      	mov	r3, r7
 801521c:	f7eb f9ec 	bl	80005f8 <__aeabi_dmul>
 8015220:	4602      	mov	r2, r0
 8015222:	460b      	mov	r3, r1
 8015224:	4640      	mov	r0, r8
 8015226:	4649      	mov	r1, r9
 8015228:	f7eb f830 	bl	800028c <__adddf3>
 801522c:	4622      	mov	r2, r4
 801522e:	462b      	mov	r3, r5
 8015230:	f7eb f9e2 	bl	80005f8 <__aeabi_dmul>
 8015234:	f1ba 3fff 	cmp.w	sl, #4294967295
 8015238:	4602      	mov	r2, r0
 801523a:	460b      	mov	r3, r1
 801523c:	d14b      	bne.n	80152d6 <atan+0x25e>
 801523e:	4620      	mov	r0, r4
 8015240:	4629      	mov	r1, r5
 8015242:	f7eb f821 	bl	8000288 <__aeabi_dsub>
 8015246:	e72c      	b.n	80150a2 <atan+0x2a>
 8015248:	ee10 0a10 	vmov	r0, s0
 801524c:	4b53      	ldr	r3, [pc, #332]	; (801539c <atan+0x324>)
 801524e:	2200      	movs	r2, #0
 8015250:	4629      	mov	r1, r5
 8015252:	f7eb f819 	bl	8000288 <__aeabi_dsub>
 8015256:	4b51      	ldr	r3, [pc, #324]	; (801539c <atan+0x324>)
 8015258:	4606      	mov	r6, r0
 801525a:	460f      	mov	r7, r1
 801525c:	2200      	movs	r2, #0
 801525e:	4620      	mov	r0, r4
 8015260:	4629      	mov	r1, r5
 8015262:	f7eb f813 	bl	800028c <__adddf3>
 8015266:	4602      	mov	r2, r0
 8015268:	460b      	mov	r3, r1
 801526a:	4630      	mov	r0, r6
 801526c:	4639      	mov	r1, r7
 801526e:	f7eb faed 	bl	800084c <__aeabi_ddiv>
 8015272:	f04f 0a01 	mov.w	sl, #1
 8015276:	4604      	mov	r4, r0
 8015278:	460d      	mov	r5, r1
 801527a:	e764      	b.n	8015146 <atan+0xce>
 801527c:	4b49      	ldr	r3, [pc, #292]	; (80153a4 <atan+0x32c>)
 801527e:	429e      	cmp	r6, r3
 8015280:	da1d      	bge.n	80152be <atan+0x246>
 8015282:	ee10 0a10 	vmov	r0, s0
 8015286:	4b48      	ldr	r3, [pc, #288]	; (80153a8 <atan+0x330>)
 8015288:	2200      	movs	r2, #0
 801528a:	4629      	mov	r1, r5
 801528c:	f7ea fffc 	bl	8000288 <__aeabi_dsub>
 8015290:	4b45      	ldr	r3, [pc, #276]	; (80153a8 <atan+0x330>)
 8015292:	4606      	mov	r6, r0
 8015294:	460f      	mov	r7, r1
 8015296:	2200      	movs	r2, #0
 8015298:	4620      	mov	r0, r4
 801529a:	4629      	mov	r1, r5
 801529c:	f7eb f9ac 	bl	80005f8 <__aeabi_dmul>
 80152a0:	4b3e      	ldr	r3, [pc, #248]	; (801539c <atan+0x324>)
 80152a2:	2200      	movs	r2, #0
 80152a4:	f7ea fff2 	bl	800028c <__adddf3>
 80152a8:	4602      	mov	r2, r0
 80152aa:	460b      	mov	r3, r1
 80152ac:	4630      	mov	r0, r6
 80152ae:	4639      	mov	r1, r7
 80152b0:	f7eb facc 	bl	800084c <__aeabi_ddiv>
 80152b4:	f04f 0a02 	mov.w	sl, #2
 80152b8:	4604      	mov	r4, r0
 80152ba:	460d      	mov	r5, r1
 80152bc:	e743      	b.n	8015146 <atan+0xce>
 80152be:	462b      	mov	r3, r5
 80152c0:	ee10 2a10 	vmov	r2, s0
 80152c4:	4939      	ldr	r1, [pc, #228]	; (80153ac <atan+0x334>)
 80152c6:	2000      	movs	r0, #0
 80152c8:	f7eb fac0 	bl	800084c <__aeabi_ddiv>
 80152cc:	f04f 0a03 	mov.w	sl, #3
 80152d0:	4604      	mov	r4, r0
 80152d2:	460d      	mov	r5, r1
 80152d4:	e737      	b.n	8015146 <atan+0xce>
 80152d6:	4b36      	ldr	r3, [pc, #216]	; (80153b0 <atan+0x338>)
 80152d8:	4e36      	ldr	r6, [pc, #216]	; (80153b4 <atan+0x33c>)
 80152da:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80152de:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80152e2:	e9da 2300 	ldrd	r2, r3, [sl]
 80152e6:	f7ea ffcf 	bl	8000288 <__aeabi_dsub>
 80152ea:	4622      	mov	r2, r4
 80152ec:	462b      	mov	r3, r5
 80152ee:	f7ea ffcb 	bl	8000288 <__aeabi_dsub>
 80152f2:	4602      	mov	r2, r0
 80152f4:	460b      	mov	r3, r1
 80152f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80152fa:	f7ea ffc5 	bl	8000288 <__aeabi_dsub>
 80152fe:	f1bb 0f00 	cmp.w	fp, #0
 8015302:	4604      	mov	r4, r0
 8015304:	460d      	mov	r5, r1
 8015306:	f6bf aed6 	bge.w	80150b6 <atan+0x3e>
 801530a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801530e:	461d      	mov	r5, r3
 8015310:	e6d1      	b.n	80150b6 <atan+0x3e>
 8015312:	a51d      	add	r5, pc, #116	; (adr r5, 8015388 <atan+0x310>)
 8015314:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015318:	e6cd      	b.n	80150b6 <atan+0x3e>
 801531a:	bf00      	nop
 801531c:	f3af 8000 	nop.w
 8015320:	54442d18 	.word	0x54442d18
 8015324:	bff921fb 	.word	0xbff921fb
 8015328:	8800759c 	.word	0x8800759c
 801532c:	7e37e43c 	.word	0x7e37e43c
 8015330:	e322da11 	.word	0xe322da11
 8015334:	3f90ad3a 	.word	0x3f90ad3a
 8015338:	24760deb 	.word	0x24760deb
 801533c:	3fa97b4b 	.word	0x3fa97b4b
 8015340:	a0d03d51 	.word	0xa0d03d51
 8015344:	3fb10d66 	.word	0x3fb10d66
 8015348:	c54c206e 	.word	0xc54c206e
 801534c:	3fb745cd 	.word	0x3fb745cd
 8015350:	920083ff 	.word	0x920083ff
 8015354:	3fc24924 	.word	0x3fc24924
 8015358:	5555550d 	.word	0x5555550d
 801535c:	3fd55555 	.word	0x3fd55555
 8015360:	2c6a6c2f 	.word	0x2c6a6c2f
 8015364:	bfa2b444 	.word	0xbfa2b444
 8015368:	52defd9a 	.word	0x52defd9a
 801536c:	3fadde2d 	.word	0x3fadde2d
 8015370:	af749a6d 	.word	0xaf749a6d
 8015374:	3fb3b0f2 	.word	0x3fb3b0f2
 8015378:	fe231671 	.word	0xfe231671
 801537c:	3fbc71c6 	.word	0x3fbc71c6
 8015380:	9998ebc4 	.word	0x9998ebc4
 8015384:	3fc99999 	.word	0x3fc99999
 8015388:	54442d18 	.word	0x54442d18
 801538c:	3ff921fb 	.word	0x3ff921fb
 8015390:	440fffff 	.word	0x440fffff
 8015394:	7ff00000 	.word	0x7ff00000
 8015398:	3fdbffff 	.word	0x3fdbffff
 801539c:	3ff00000 	.word	0x3ff00000
 80153a0:	3ff2ffff 	.word	0x3ff2ffff
 80153a4:	40038000 	.word	0x40038000
 80153a8:	3ff80000 	.word	0x3ff80000
 80153ac:	bff00000 	.word	0xbff00000
 80153b0:	08016210 	.word	0x08016210
 80153b4:	080161f0 	.word	0x080161f0

080153b8 <fabs>:
 80153b8:	ec51 0b10 	vmov	r0, r1, d0
 80153bc:	ee10 2a10 	vmov	r2, s0
 80153c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80153c4:	ec43 2b10 	vmov	d0, r2, r3
 80153c8:	4770      	bx	lr
 80153ca:	0000      	movs	r0, r0
 80153cc:	0000      	movs	r0, r0
	...

080153d0 <nan>:
 80153d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80153d8 <nan+0x8>
 80153d4:	4770      	bx	lr
 80153d6:	bf00      	nop
 80153d8:	00000000 	.word	0x00000000
 80153dc:	7ff80000 	.word	0x7ff80000

080153e0 <_init>:
 80153e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153e2:	bf00      	nop
 80153e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153e6:	bc08      	pop	{r3}
 80153e8:	469e      	mov	lr, r3
 80153ea:	4770      	bx	lr

080153ec <_fini>:
 80153ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153ee:	bf00      	nop
 80153f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153f2:	bc08      	pop	{r3}
 80153f4:	469e      	mov	lr, r3
 80153f6:	4770      	bx	lr
