
Basic_Frame_TypeC_2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000135f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f00  08013788  08013788  00023788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014688  08014688  000304d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014688  08014688  00024688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014690  08014690  000304d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014690  08014690  00024690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014694  08014694  00024694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d8  20000000  08014698  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000304d8  2**0
                  CONTENTS
 10 .bss          0000d884  200004d8  200004d8  000304d8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000dd5c  2000dd5c  000304d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000304d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005443d  00000000  00000000  00030508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009015  00000000  00000000  00084945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002420  00000000  00000000  0008d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002098  00000000  00000000  0008fd80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d9cd  00000000  00000000  00091e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00035370  00000000  00000000  000bf7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e54d2  00000000  00000000  000f4b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  001da027  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a258  00000000  00000000  001da0e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000018a  00000000  00000000  001e4340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004d8 	.word	0x200004d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013770 	.word	0x08013770

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004dc 	.word	0x200004dc
 80001cc:	08013770 	.word	0x08013770

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <madgwick_ahrs_update>:

static volatile float gx, gy, gz, ax, ay, az, mx, my, mz;

//this function takes 60.8us.(168M)
void madgwick_ahrs_update(AhrsSensor_t *sensor, Attitude_t *atti)
{
 8000f40:	b5b0      	push	{r4, r5, r7, lr}
 8000f42:	b0a6      	sub	sp, #152	; 0x98
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float hx, hy;
  float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

  gx = sensor->wx;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <madgwick_ahrs_update+0x90>)
 8000f50:	6013      	str	r3, [r2, #0]
  gy = sensor->wy;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	4a1f      	ldr	r2, [pc, #124]	; (8000fd4 <madgwick_ahrs_update+0x94>)
 8000f58:	6013      	str	r3, [r2, #0]
  gz = sensor->wz;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <madgwick_ahrs_update+0x98>)
 8000f60:	6013      	str	r3, [r2, #0]
  ax = sensor->ax;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <madgwick_ahrs_update+0x9c>)
 8000f68:	6013      	str	r3, [r2, #0]
  ay = sensor->ay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <madgwick_ahrs_update+0xa0>)
 8000f70:	6013      	str	r3, [r2, #0]
  az = sensor->az;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <madgwick_ahrs_update+0xa4>)
 8000f78:	6013      	str	r3, [r2, #0]
  mx = sensor->mx;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <madgwick_ahrs_update+0xa8>)
 8000f80:	6013      	str	r3, [r2, #0]
  my = sensor->my;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	4a19      	ldr	r2, [pc, #100]	; (8000fec <madgwick_ahrs_update+0xac>)
 8000f88:	6013      	str	r3, [r2, #0]
  mz = sensor->mz;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4a18      	ldr	r2, [pc, #96]	; (8000ff0 <madgwick_ahrs_update+0xb0>)
 8000f90:	6013      	str	r3, [r2, #0]

  // Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
  if ((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f))
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <madgwick_ahrs_update+0xa8>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d128      	bne.n	8000ff4 <madgwick_ahrs_update+0xb4>
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <madgwick_ahrs_update+0xac>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	d120      	bne.n	8000ff4 <madgwick_ahrs_update+0xb4>
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <madgwick_ahrs_update+0xb0>)
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	d118      	bne.n	8000ff4 <madgwick_ahrs_update+0xb4>
  {
    madgwick_ahrs_updateIMU(sensor, atti);
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f001 f84d 	bl	8002064 <madgwick_ahrs_updateIMU>
    return;
 8000fca:	f001 b840 	b.w	800204e <madgwick_ahrs_update+0x110e>
 8000fce:	bf00      	nop
 8000fd0:	20000500 	.word	0x20000500
 8000fd4:	20000504 	.word	0x20000504
 8000fd8:	20000508 	.word	0x20000508
 8000fdc:	2000050c 	.word	0x2000050c
 8000fe0:	20000510 	.word	0x20000510
 8000fe4:	20000514 	.word	0x20000514
 8000fe8:	20000518 	.word	0x20000518
 8000fec:	2000051c 	.word	0x2000051c
 8000ff0:	20000520 	.word	0x20000520
  }

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8000ff4:	4bd7      	ldr	r3, [pc, #860]	; (8001354 <madgwick_ahrs_update+0x414>)
 8000ff6:	edd3 7a00 	vldr	s15, [r3]
 8000ffa:	eeb1 7a67 	vneg.f32	s14, s15
 8000ffe:	4bd6      	ldr	r3, [pc, #856]	; (8001358 <madgwick_ahrs_update+0x418>)
 8001000:	edd3 7a00 	vldr	s15, [r3]
 8001004:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001008:	4bd4      	ldr	r3, [pc, #848]	; (800135c <madgwick_ahrs_update+0x41c>)
 800100a:	edd3 6a00 	vldr	s13, [r3]
 800100e:	4bd4      	ldr	r3, [pc, #848]	; (8001360 <madgwick_ahrs_update+0x420>)
 8001010:	edd3 7a00 	vldr	s15, [r3]
 8001014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001018:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101c:	4bd1      	ldr	r3, [pc, #836]	; (8001364 <madgwick_ahrs_update+0x424>)
 800101e:	edd3 6a00 	vldr	s13, [r3]
 8001022:	4bd1      	ldr	r3, [pc, #836]	; (8001368 <madgwick_ahrs_update+0x428>)
 8001024:	edd3 7a00 	vldr	s15, [r3]
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001038:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800103c:	4bcb      	ldr	r3, [pc, #812]	; (800136c <madgwick_ahrs_update+0x42c>)
 800103e:	ed93 7a00 	vldr	s14, [r3]
 8001042:	4bc5      	ldr	r3, [pc, #788]	; (8001358 <madgwick_ahrs_update+0x418>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104c:	4bc3      	ldr	r3, [pc, #780]	; (800135c <madgwick_ahrs_update+0x41c>)
 800104e:	edd3 6a00 	vldr	s13, [r3]
 8001052:	4bc5      	ldr	r3, [pc, #788]	; (8001368 <madgwick_ahrs_update+0x428>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001060:	4bc0      	ldr	r3, [pc, #768]	; (8001364 <madgwick_ahrs_update+0x424>)
 8001062:	edd3 6a00 	vldr	s13, [r3]
 8001066:	4bbe      	ldr	r3, [pc, #760]	; (8001360 <madgwick_ahrs_update+0x420>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001074:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001080:	4bba      	ldr	r3, [pc, #744]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	4bb6      	ldr	r3, [pc, #728]	; (8001360 <madgwick_ahrs_update+0x420>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001090:	4bb0      	ldr	r3, [pc, #704]	; (8001354 <madgwick_ahrs_update+0x414>)
 8001092:	edd3 6a00 	vldr	s13, [r3]
 8001096:	4bb4      	ldr	r3, [pc, #720]	; (8001368 <madgwick_ahrs_update+0x428>)
 8001098:	edd3 7a00 	vldr	s15, [r3]
 800109c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a4:	4baf      	ldr	r3, [pc, #700]	; (8001364 <madgwick_ahrs_update+0x424>)
 80010a6:	edd3 6a00 	vldr	s13, [r3]
 80010aa:	4bab      	ldr	r3, [pc, #684]	; (8001358 <madgwick_ahrs_update+0x418>)
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80010bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010c0:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80010c4:	4ba9      	ldr	r3, [pc, #676]	; (800136c <madgwick_ahrs_update+0x42c>)
 80010c6:	ed93 7a00 	vldr	s14, [r3]
 80010ca:	4ba7      	ldr	r3, [pc, #668]	; (8001368 <madgwick_ahrs_update+0x428>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d4:	4b9f      	ldr	r3, [pc, #636]	; (8001354 <madgwick_ahrs_update+0x414>)
 80010d6:	edd3 6a00 	vldr	s13, [r3]
 80010da:	4ba1      	ldr	r3, [pc, #644]	; (8001360 <madgwick_ahrs_update+0x420>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010e8:	4b9c      	ldr	r3, [pc, #624]	; (800135c <madgwick_ahrs_update+0x41c>)
 80010ea:	edd3 6a00 	vldr	s13, [r3]
 80010ee:	4b9a      	ldr	r3, [pc, #616]	; (8001358 <madgwick_ahrs_update+0x418>)
 80010f0:	edd3 7a00 	vldr	s15, [r3]
 80010f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001104:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 8001108:	4b99      	ldr	r3, [pc, #612]	; (8001370 <madgwick_ahrs_update+0x430>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d110      	bne.n	800113a <madgwick_ahrs_update+0x1fa>
 8001118:	4b96      	ldr	r3, [pc, #600]	; (8001374 <madgwick_ahrs_update+0x434>)
 800111a:	edd3 7a00 	vldr	s15, [r3]
 800111e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	d108      	bne.n	800113a <madgwick_ahrs_update+0x1fa>
 8001128:	4b93      	ldr	r3, [pc, #588]	; (8001378 <madgwick_ahrs_update+0x438>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	f000 8621 	beq.w	8001d7c <madgwick_ahrs_update+0xe3c>
  {

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800113a:	4b8d      	ldr	r3, [pc, #564]	; (8001370 <madgwick_ahrs_update+0x430>)
 800113c:	ed93 7a00 	vldr	s14, [r3]
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <madgwick_ahrs_update+0x430>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800114a:	4b8a      	ldr	r3, [pc, #552]	; (8001374 <madgwick_ahrs_update+0x434>)
 800114c:	edd3 6a00 	vldr	s13, [r3]
 8001150:	4b88      	ldr	r3, [pc, #544]	; (8001374 <madgwick_ahrs_update+0x434>)
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800115a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115e:	4b86      	ldr	r3, [pc, #536]	; (8001378 <madgwick_ahrs_update+0x438>)
 8001160:	edd3 6a00 	vldr	s13, [r3]
 8001164:	4b84      	ldr	r3, [pc, #528]	; (8001378 <madgwick_ahrs_update+0x438>)
 8001166:	edd3 7a00 	vldr	s15, [r3]
 800116a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800116e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001172:	eeb0 0a67 	vmov.f32	s0, s15
 8001176:	f001 fbc3 	bl	8002900 <invSqrt>
 800117a:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
    ax *= recipNorm;
 800117e:	4b7c      	ldr	r3, [pc, #496]	; (8001370 <madgwick_ahrs_update+0x430>)
 8001180:	ed93 7a00 	vldr	s14, [r3]
 8001184:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118c:	4b78      	ldr	r3, [pc, #480]	; (8001370 <madgwick_ahrs_update+0x430>)
 800118e:	edc3 7a00 	vstr	s15, [r3]
    ay *= recipNorm;
 8001192:	4b78      	ldr	r3, [pc, #480]	; (8001374 <madgwick_ahrs_update+0x434>)
 8001194:	ed93 7a00 	vldr	s14, [r3]
 8001198:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800119c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a0:	4b74      	ldr	r3, [pc, #464]	; (8001374 <madgwick_ahrs_update+0x434>)
 80011a2:	edc3 7a00 	vstr	s15, [r3]
    az *= recipNorm;
 80011a6:	4b74      	ldr	r3, [pc, #464]	; (8001378 <madgwick_ahrs_update+0x438>)
 80011a8:	ed93 7a00 	vldr	s14, [r3]
 80011ac:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	4b70      	ldr	r3, [pc, #448]	; (8001378 <madgwick_ahrs_update+0x438>)
 80011b6:	edc3 7a00 	vstr	s15, [r3]

    // Normalise magnetometer measurement
    recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80011ba:	4b70      	ldr	r3, [pc, #448]	; (800137c <madgwick_ahrs_update+0x43c>)
 80011bc:	ed93 7a00 	vldr	s14, [r3]
 80011c0:	4b6e      	ldr	r3, [pc, #440]	; (800137c <madgwick_ahrs_update+0x43c>)
 80011c2:	edd3 7a00 	vldr	s15, [r3]
 80011c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ca:	4b6d      	ldr	r3, [pc, #436]	; (8001380 <madgwick_ahrs_update+0x440>)
 80011cc:	edd3 6a00 	vldr	s13, [r3]
 80011d0:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <madgwick_ahrs_update+0x440>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011de:	4b69      	ldr	r3, [pc, #420]	; (8001384 <madgwick_ahrs_update+0x444>)
 80011e0:	edd3 6a00 	vldr	s13, [r3]
 80011e4:	4b67      	ldr	r3, [pc, #412]	; (8001384 <madgwick_ahrs_update+0x444>)
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f001 fb83 	bl	8002900 <invSqrt>
 80011fa:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
    mx *= recipNorm;
 80011fe:	4b5f      	ldr	r3, [pc, #380]	; (800137c <madgwick_ahrs_update+0x43c>)
 8001200:	ed93 7a00 	vldr	s14, [r3]
 8001204:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120c:	4b5b      	ldr	r3, [pc, #364]	; (800137c <madgwick_ahrs_update+0x43c>)
 800120e:	edc3 7a00 	vstr	s15, [r3]
    my *= recipNorm;
 8001212:	4b5b      	ldr	r3, [pc, #364]	; (8001380 <madgwick_ahrs_update+0x440>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	4b57      	ldr	r3, [pc, #348]	; (8001380 <madgwick_ahrs_update+0x440>)
 8001222:	edc3 7a00 	vstr	s15, [r3]
    mz *= recipNorm;
 8001226:	4b57      	ldr	r3, [pc, #348]	; (8001384 <madgwick_ahrs_update+0x444>)
 8001228:	ed93 7a00 	vldr	s14, [r3]
 800122c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <madgwick_ahrs_update+0x444>)
 8001236:	edc3 7a00 	vstr	s15, [r3]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0mx = 2.0f * q0 * mx;
 800123a:	4b4c      	ldr	r3, [pc, #304]	; (800136c <madgwick_ahrs_update+0x42c>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001244:	4b4d      	ldr	r3, [pc, #308]	; (800137c <madgwick_ahrs_update+0x43c>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800124e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
    _2q0my = 2.0f * q0 * my;
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800125c:	4b48      	ldr	r3, [pc, #288]	; (8001380 <madgwick_ahrs_update+0x440>)
 800125e:	edd3 7a00 	vldr	s15, [r3]
 8001262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001266:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
    _2q0mz = 2.0f * q0 * mz;
 800126a:	4b40      	ldr	r3, [pc, #256]	; (800136c <madgwick_ahrs_update+0x42c>)
 800126c:	edd3 7a00 	vldr	s15, [r3]
 8001270:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001274:	4b43      	ldr	r3, [pc, #268]	; (8001384 <madgwick_ahrs_update+0x444>)
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    _2q1mx = 2.0f * q1 * mx;
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <madgwick_ahrs_update+0x414>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800128c:	4b3b      	ldr	r3, [pc, #236]	; (800137c <madgwick_ahrs_update+0x43c>)
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
    _2q0 = 2.0f * q0;
 800129a:	4b34      	ldr	r3, [pc, #208]	; (800136c <madgwick_ahrs_update+0x42c>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012a4:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
    _2q1 = 2.0f * q1;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <madgwick_ahrs_update+0x414>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012b2:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    _2q2 = 2.0f * q2;
 80012b6:	4b29      	ldr	r3, [pc, #164]	; (800135c <madgwick_ahrs_update+0x41c>)
 80012b8:	edd3 7a00 	vldr	s15, [r3]
 80012bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012c0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
    _2q3 = 2.0f * q3;
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <madgwick_ahrs_update+0x424>)
 80012c6:	edd3 7a00 	vldr	s15, [r3]
 80012ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012ce:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    _2q0q2 = 2.0f * q0 * q2;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <madgwick_ahrs_update+0x42c>)
 80012d4:	edd3 7a00 	vldr	s15, [r3]
 80012d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <madgwick_ahrs_update+0x41c>)
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    _2q2q3 = 2.0f * q2 * q3;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <madgwick_ahrs_update+0x41c>)
 80012ec:	edd3 7a00 	vldr	s15, [r3]
 80012f0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <madgwick_ahrs_update+0x424>)
 80012f6:	edd3 7a00 	vldr	s15, [r3]
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    q0q0 = q0 * q0;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001304:	ed93 7a00 	vldr	s14, [r3]
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <madgwick_ahrs_update+0x42c>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001312:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    q0q1 = q0 * q1;
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <madgwick_ahrs_update+0x414>)
 800131e:	edd3 7a00 	vldr	s15, [r3]
 8001322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001326:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    q0q2 = q0 * q2;
 800132a:	4b10      	ldr	r3, [pc, #64]	; (800136c <madgwick_ahrs_update+0x42c>)
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <madgwick_ahrs_update+0x41c>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    q0q3 = q0 * q3;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <madgwick_ahrs_update+0x42c>)
 8001340:	ed93 7a00 	vldr	s14, [r3]
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <madgwick_ahrs_update+0x424>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
 8001352:	e019      	b.n	8001388 <madgwick_ahrs_update+0x448>
 8001354:	200004f4 	.word	0x200004f4
 8001358:	20000500 	.word	0x20000500
 800135c:	200004f8 	.word	0x200004f8
 8001360:	20000504 	.word	0x20000504
 8001364:	200004fc 	.word	0x200004fc
 8001368:	20000508 	.word	0x20000508
 800136c:	20000004 	.word	0x20000004
 8001370:	2000050c 	.word	0x2000050c
 8001374:	20000510 	.word	0x20000510
 8001378:	20000514 	.word	0x20000514
 800137c:	20000518 	.word	0x20000518
 8001380:	2000051c 	.word	0x2000051c
 8001384:	20000520 	.word	0x20000520
    q1q1 = q1 * q1;
 8001388:	4be5      	ldr	r3, [pc, #916]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 800138a:	ed93 7a00 	vldr	s14, [r3]
 800138e:	4be4      	ldr	r3, [pc, #912]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 8001390:	edd3 7a00 	vldr	s15, [r3]
 8001394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001398:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    q1q2 = q1 * q2;
 800139c:	4be0      	ldr	r3, [pc, #896]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 800139e:	ed93 7a00 	vldr	s14, [r3]
 80013a2:	4be0      	ldr	r3, [pc, #896]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    q1q3 = q1 * q3;
 80013b0:	4bdb      	ldr	r3, [pc, #876]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 80013b2:	ed93 7a00 	vldr	s14, [r3]
 80013b6:	4bdc      	ldr	r3, [pc, #880]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c0:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    q2q2 = q2 * q2;
 80013c4:	4bd7      	ldr	r3, [pc, #860]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013c6:	ed93 7a00 	vldr	s14, [r3]
 80013ca:	4bd6      	ldr	r3, [pc, #856]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    q2q3 = q2 * q3;
 80013d8:	4bd2      	ldr	r3, [pc, #840]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	4bd2      	ldr	r3, [pc, #840]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013e8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    q3q3 = q3 * q3;
 80013ec:	4bce      	ldr	r3, [pc, #824]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	4bcd      	ldr	r3, [pc, #820]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80013f4:	edd3 7a00 	vldr	s15, [r3]
 80013f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    // Reference direction of Earth's magnetic field
    hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001400:	4bca      	ldr	r3, [pc, #808]	; (800172c <madgwick_ahrs_update+0x7ec>)
 8001402:	ed93 7a00 	vldr	s14, [r3]
 8001406:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800140a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800140e:	4bc6      	ldr	r3, [pc, #792]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 8001410:	edd3 6a00 	vldr	s13, [r3]
 8001414:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800141c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001420:	4bc0      	ldr	r3, [pc, #768]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 8001422:	edd3 6a00 	vldr	s13, [r3]
 8001426:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800142a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800142e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001432:	4bbe      	ldr	r3, [pc, #760]	; (800172c <madgwick_ahrs_update+0x7ec>)
 8001434:	edd3 6a00 	vldr	s13, [r3]
 8001438:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800143c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001440:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001444:	4bba      	ldr	r3, [pc, #744]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 8001446:	edd3 6a00 	vldr	s13, [r3]
 800144a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800144e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001452:	4bb4      	ldr	r3, [pc, #720]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800145c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001460:	4bb4      	ldr	r3, [pc, #720]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 8001462:	edd3 6a00 	vldr	s13, [r3]
 8001466:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800146a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800146e:	4bae      	ldr	r3, [pc, #696]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800147c:	4bab      	ldr	r3, [pc, #684]	; (800172c <madgwick_ahrs_update+0x7ec>)
 800147e:	edd3 6a00 	vldr	s13, [r3]
 8001482:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001486:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800148e:	4ba7      	ldr	r3, [pc, #668]	; (800172c <madgwick_ahrs_update+0x7ec>)
 8001490:	edd3 6a00 	vldr	s13, [r3]
 8001494:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001498:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80014a4:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80014a6:	ed93 7a00 	vldr	s14, [r3]
 80014aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80014ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b2:	4b9f      	ldr	r3, [pc, #636]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80014b4:	edd3 6a00 	vldr	s13, [r3]
 80014b8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80014bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014c4:	4b96      	ldr	r3, [pc, #600]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 80014c6:	edd3 6a00 	vldr	s13, [r3]
 80014ca:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80014ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014d6:	4b93      	ldr	r3, [pc, #588]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 80014d8:	edd3 6a00 	vldr	s13, [r3]
 80014dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80014e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014e8:	4b91      	ldr	r3, [pc, #580]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80014ea:	edd3 6a00 	vldr	s13, [r3]
 80014ee:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80014f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014fa:	4b8d      	ldr	r3, [pc, #564]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80014fc:	edd3 6a00 	vldr	s13, [r3]
 8001500:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800150c:	4b89      	ldr	r3, [pc, #548]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 800150e:	edd3 6a00 	vldr	s13, [r3]
 8001512:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001516:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800151a:	4b83      	ldr	r3, [pc, #524]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 800151c:	edd3 7a00 	vldr	s15, [r3]
 8001520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001528:	4b81      	ldr	r3, [pc, #516]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 800152a:	edd3 6a00 	vldr	s13, [r3]
 800152e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001536:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    _2bx = sqrt(hx * hx + hy * hy);
 800153e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001542:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001546:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800154a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	ee17 0a90 	vmov	r0, s15
 8001556:	f7fe fff7 	bl	8000548 <__aeabi_f2d>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	ec43 2b10 	vmov	d0, r2, r3
 8001562:	f011 fb89 	bl	8012c78 <sqrt>
 8001566:	ec53 2b10 	vmov	r2, r3, d0
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f7ff fb1b 	bl	8000ba8 <__aeabi_d2f>
 8001572:	4603      	mov	r3, r0
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
    _2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001576:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800157a:	eeb1 7a67 	vneg.f32	s14, s15
 800157e:	4b69      	ldr	r3, [pc, #420]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001588:	4b65      	ldr	r3, [pc, #404]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 800158a:	edd3 6a00 	vldr	s13, [r3]
 800158e:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001596:	ee37 7a27 	vadd.f32	s14, s14, s15
 800159a:	4b66      	ldr	r3, [pc, #408]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 800159c:	edd3 6a00 	vldr	s13, [r3]
 80015a0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80015a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ac:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80015ae:	edd3 6a00 	vldr	s13, [r3]
 80015b2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 80015c0:	edd3 6a00 	vldr	s13, [r3]
 80015c4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80015c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015d0:	4b57      	ldr	r3, [pc, #348]	; (8001730 <madgwick_ahrs_update+0x7f0>)
 80015d2:	edd3 6a00 	vldr	s13, [r3]
 80015d6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80015da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80015de:	4b52      	ldr	r3, [pc, #328]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015ec:	4b51      	ldr	r3, [pc, #324]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 80015ee:	edd3 6a00 	vldr	s13, [r3]
 80015f2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015fe:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <madgwick_ahrs_update+0x7f4>)
 8001600:	edd3 6a00 	vldr	s13, [r3]
 8001604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    _4bx = 2.0f * _2bx;
 8001614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001618:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800161c:	edc7 7a08 	vstr	s15, [r7, #32]
    _4bz = 2.0f * _2bz;
 8001620:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001624:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001628:	edc7 7a07 	vstr	s15, [r7, #28]

    // Gradient decent algorithm corrective step
    s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800162c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001630:	eeb1 7a67 	vneg.f32	s14, s15
 8001634:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001638:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800163c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001640:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001644:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <madgwick_ahrs_update+0x7f8>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800164e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001652:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001656:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800165a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800165e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001662:	4b36      	ldr	r3, [pc, #216]	; (800173c <madgwick_ahrs_update+0x7fc>)
 8001664:	edd3 7a00 	vldr	s15, [r3]
 8001668:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800166c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001678:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <madgwick_ahrs_update+0x7e4>)
 800167a:	edd3 6a00 	vldr	s13, [r3]
 800167e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001682:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001686:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800168a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800168e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001692:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001696:	ee36 6a67 	vsub.f32	s12, s12, s15
 800169a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800169e:	ee26 6a27 	vmul.f32	s12, s12, s15
 80016a2:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 80016a6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80016aa:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80016ae:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016b2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80016b6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80016ba:	4b1c      	ldr	r3, [pc, #112]	; (800172c <madgwick_ahrs_update+0x7ec>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee76 7a67 	vsub.f32	s15, s12, s15
 80016c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016d0:	eef1 6a67 	vneg.f32	s13, s15
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <madgwick_ahrs_update+0x7e8>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <madgwick_ahrs_update+0x7e0>)
 80016e0:	ed93 6a00 	vldr	s12, [r3]
 80016e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016e8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80016ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80016f0:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80016f4:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80016f8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80016fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001700:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001704:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8001708:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800170c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001710:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001714:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001718:	ee36 6a27 	vadd.f32	s12, s12, s15
 800171c:	e010      	b.n	8001740 <madgwick_ahrs_update+0x800>
 800171e:	bf00      	nop
 8001720:	200004f4 	.word	0x200004f4
 8001724:	200004f8 	.word	0x200004f8
 8001728:	200004fc 	.word	0x200004fc
 800172c:	20000518 	.word	0x20000518
 8001730:	2000051c 	.word	0x2000051c
 8001734:	20000520 	.word	0x20000520
 8001738:	2000050c 	.word	0x2000050c
 800173c:	20000510 	.word	0x20000510
 8001740:	4bf0      	ldr	r3, [pc, #960]	; (8001b04 <madgwick_ahrs_update+0xbc4>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee76 7a67 	vsub.f32	s15, s12, s15
 800174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800174e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001752:	4bed      	ldr	r3, [pc, #948]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001754:	edd3 6a00 	vldr	s13, [r3]
 8001758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800175c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001760:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001764:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001768:	ee36 6a27 	vadd.f32	s12, s12, s15
 800176c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001770:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001774:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001778:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800177c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001780:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001784:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001788:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800178c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001790:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001794:	4bdd      	ldr	r3, [pc, #884]	; (8001b0c <madgwick_ahrs_update+0xbcc>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800179e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a6:	edc7 7a06 	vstr	s15, [r7, #24]
    s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80017aa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80017ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80017b2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80017b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017ba:	4bd5      	ldr	r3, [pc, #852]	; (8001b10 <madgwick_ahrs_update+0xbd0>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80017c4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80017c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017cc:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80017d0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017d4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80017d8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80017dc:	4bcd      	ldr	r3, [pc, #820]	; (8001b14 <madgwick_ahrs_update+0xbd4>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80017e6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80017ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017f2:	4bc9      	ldr	r3, [pc, #804]	; (8001b18 <madgwick_ahrs_update+0xbd8>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80017fc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001800:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001804:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001808:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800180c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001810:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001814:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001818:	ee36 6a67 	vsub.f32	s12, s12, s15
 800181c:	4bbf      	ldr	r3, [pc, #764]	; (8001b1c <madgwick_ahrs_update+0xbdc>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800182a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182e:	4bbc      	ldr	r3, [pc, #752]	; (8001b20 <madgwick_ahrs_update+0xbe0>)
 8001830:	edd3 6a00 	vldr	s13, [r3]
 8001834:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001838:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800183c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001840:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001844:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001848:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800184c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001850:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001854:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001858:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 800185c:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001860:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001864:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001868:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800186c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001870:	4bac      	ldr	r3, [pc, #688]	; (8001b24 <madgwick_ahrs_update+0xbe4>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee76 7a67 	vsub.f32	s15, s12, s15
 800187a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800187e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001882:	4ba1      	ldr	r3, [pc, #644]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001884:	edd3 6a00 	vldr	s13, [r3]
 8001888:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800188c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001890:	4ba5      	ldr	r3, [pc, #660]	; (8001b28 <madgwick_ahrs_update+0xbe8>)
 8001892:	ed93 6a00 	vldr	s12, [r3]
 8001896:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800189a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800189e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80018a2:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 80018a6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80018aa:	ee36 6a67 	vsub.f32	s12, s12, s15
 80018ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018b2:	ee26 6a27 	vmul.f32	s12, s12, s15
 80018b6:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 80018ba:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80018be:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80018c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018c6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018ca:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018ce:	4b8d      	ldr	r3, [pc, #564]	; (8001b04 <madgwick_ahrs_update+0xbc4>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e0:	4b8f      	ldr	r3, [pc, #572]	; (8001b20 <madgwick_ahrs_update+0xbe0>)
 80018e2:	edd3 6a00 	vldr	s13, [r3]
 80018e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80018ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80018ee:	4b8a      	ldr	r3, [pc, #552]	; (8001b18 <madgwick_ahrs_update+0xbd8>)
 80018f0:	ed93 6a00 	vldr	s12, [r3]
 80018f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80018f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80018fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001900:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001904:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001908:	ee36 6a27 	vadd.f32	s12, s12, s15
 800190c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001910:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001914:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001918:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800191c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001920:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001924:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001928:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800192c:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001930:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001934:	4b75      	ldr	r3, [pc, #468]	; (8001b0c <madgwick_ahrs_update+0xbcc>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001946:	edc7 7a05 	vstr	s15, [r7, #20]
    s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800194a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800194e:	eeb1 7a67 	vneg.f32	s14, s15
 8001952:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001956:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800195a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800195e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001962:	4b6b      	ldr	r3, [pc, #428]	; (8001b10 <madgwick_ahrs_update+0xbd0>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800196c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001970:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001974:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001978:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800197c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001980:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <madgwick_ahrs_update+0xbd4>)
 8001982:	edd3 7a00 	vldr	s15, [r3]
 8001986:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800198a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800198e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001992:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80019a0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80019a4:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80019b0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019b8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80019c0:	4b56      	ldr	r3, [pc, #344]	; (8001b1c <madgwick_ahrs_update+0xbdc>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80019ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80019d6:	eef1 6a67 	vneg.f32	s13, s15
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 80019dc:	edd3 7a00 	vldr	s15, [r3]
 80019e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <madgwick_ahrs_update+0xbe8>)
 80019e6:	ed93 6a00 	vldr	s12, [r3]
 80019ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80019ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80019f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80019fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80019fe:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a02:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a06:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a12:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 8001a16:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001a1a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001a1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a22:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a26:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a2a:	4b3e      	ldr	r3, [pc, #248]	; (8001b24 <madgwick_ahrs_update+0xbe4>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a3c:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <madgwick_ahrs_update+0xbd8>)
 8001a3e:	edd3 6a00 	vldr	s13, [r3]
 8001a42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a46:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001a4a:	4b35      	ldr	r3, [pc, #212]	; (8001b20 <madgwick_ahrs_update+0xbe0>)
 8001a4c:	ed93 6a00 	vldr	s12, [r3]
 8001a50:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a54:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a58:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a5c:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8001a60:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a64:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001a68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001a6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001a70:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8001a74:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a78:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001a80:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a84:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <madgwick_ahrs_update+0xbc4>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <madgwick_ahrs_update+0xbe8>)
 8001a9c:	edd3 6a00 	vldr	s13, [r3]
 8001aa0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aa4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001aa8:	4b17      	ldr	r3, [pc, #92]	; (8001b08 <madgwick_ahrs_update+0xbc8>)
 8001aaa:	ed93 6a00 	vldr	s12, [r3]
 8001aae:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ab2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001ab6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001aba:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001abe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001ac2:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001ac6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001aca:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001ace:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001ad2:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001ad6:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ada:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ade:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001ae6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001aea:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <madgwick_ahrs_update+0xbcc>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001af8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	e014      	b.n	8001b2c <madgwick_ahrs_update+0xbec>
 8001b02:	bf00      	nop
 8001b04:	2000051c 	.word	0x2000051c
 8001b08:	200004f8 	.word	0x200004f8
 8001b0c:	20000520 	.word	0x20000520
 8001b10:	2000050c 	.word	0x2000050c
 8001b14:	20000510 	.word	0x20000510
 8001b18:	200004f4 	.word	0x200004f4
 8001b1c:	20000514 	.word	0x20000514
 8001b20:	200004fc 	.word	0x200004fc
 8001b24:	20000518 	.word	0x20000518
 8001b28:	20000004 	.word	0x20000004
 8001b2c:	edc7 7a04 	vstr	s15, [r7, #16]
    s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b30:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001b34:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b38:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b40:	4be8      	ldr	r3, [pc, #928]	; (8001ee4 <madgwick_ahrs_update+0xfa4>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8001b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b52:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b56:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001b5a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001b5e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b62:	4be1      	ldr	r3, [pc, #900]	; (8001ee8 <madgwick_ahrs_update+0xfa8>)
 8001b64:	edd3 7a00 	vldr	s15, [r3]
 8001b68:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001b6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b78:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b7c:	eef1 6a67 	vneg.f32	s13, s15
 8001b80:	4bda      	ldr	r3, [pc, #872]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001b8a:	4bd9      	ldr	r3, [pc, #868]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001b8c:	ed93 6a00 	vldr	s12, [r3]
 8001b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001b94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001b98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001b9c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8001ba0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ba4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001ba8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001bac:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001bb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001bb4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001bb8:	edd7 5a10 	vldr	s11, [r7, #64]	; 0x40
 8001bbc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001bc0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001bc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bc8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001bcc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001bd0:	4bc8      	ldr	r3, [pc, #800]	; (8001ef4 <madgwick_ahrs_update+0xfb4>)
 8001bd2:	edd3 7a00 	vldr	s15, [r3]
 8001bd6:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001be6:	eef1 6a67 	vneg.f32	s13, s15
 8001bea:	4bc3      	ldr	r3, [pc, #780]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001bec:	edd3 7a00 	vldr	s15, [r3]
 8001bf0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bf4:	4bc1      	ldr	r3, [pc, #772]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001bf6:	ed93 6a00 	vldr	s12, [r3]
 8001bfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001bfe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c02:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c06:	ed97 6a11 	vldr	s12, [r7, #68]	; 0x44
 8001c0a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001c0e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001c12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c16:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c1a:	edd7 5a15 	vldr	s11, [r7, #84]	; 0x54
 8001c1e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001c22:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8001c26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c2a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c2e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c32:	4bb3      	ldr	r3, [pc, #716]	; (8001f00 <madgwick_ahrs_update+0xfc0>)
 8001c34:	edd3 7a00 	vldr	s15, [r3]
 8001c38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	4baa      	ldr	r3, [pc, #680]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001c46:	edd3 6a00 	vldr	s13, [r3]
 8001c4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c52:	ed97 6a14 	vldr	s12, [r7, #80]	; 0x50
 8001c56:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001c5a:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001c62:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001c66:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8001c6a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001c6e:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c72:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001c76:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8001c7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001c7e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001c82:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001c86:	4b9f      	ldr	r3, [pc, #636]	; (8001f04 <madgwick_ahrs_update+0xfc4>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c98:	edc7 7a03 	vstr	s15, [r7, #12]
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8001c9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ca0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ca8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ccc:	f000 fe18 	bl	8002900 <invSqrt>
 8001cd0:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
    s0 *= recipNorm;
 8001cd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cd8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce0:	edc7 7a06 	vstr	s15, [r7, #24]
    s1 *= recipNorm;
 8001ce4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ce8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf0:	edc7 7a05 	vstr	s15, [r7, #20]
    s2 *= recipNorm;
 8001cf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cf8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001cfc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d00:	edc7 7a04 	vstr	s15, [r7, #16]
    s3 *= recipNorm;
 8001d04:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d08:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d10:	edc7 7a03 	vstr	s15, [r7, #12]

    // Apply feedback step
    qDot1 -= beta * s0;
 8001d14:	4b7c      	ldr	r3, [pc, #496]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d16:	ed93 7a00 	vldr	s14, [r3]
 8001d1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d22:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    qDot2 -= beta * s1;
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d30:	ed93 7a00 	vldr	s14, [r3]
 8001d34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8001d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d44:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    qDot3 -= beta * s2;
 8001d48:	4b6f      	ldr	r3, [pc, #444]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d4a:	ed93 7a00 	vldr	s14, [r3]
 8001d4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d56:	ed97 7a23 	vldr	s14, [r7, #140]	; 0x8c
 8001d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d5e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    qDot4 -= beta * s3;
 8001d62:	4b69      	ldr	r3, [pc, #420]	; (8001f08 <madgwick_ahrs_update+0xfc8>)
 8001d64:	ed93 7a00 	vldr	s14, [r3]
 8001d68:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d70:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8001d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d78:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * (1.0f / sampleFreq);
 8001d7c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8001d80:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001d84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d92:	4b59      	ldr	r3, [pc, #356]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * (1.0f / sampleFreq);
 8001d98:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8001d9c:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001da0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001da6:	edd3 7a00 	vldr	s15, [r3]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * (1.0f / sampleFreq);
 8001db4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001db8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001dbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc0:	4b4e      	ldr	r3, [pc, #312]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001dcc:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * (1.0f / sampleFreq);
 8001dd0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8001dd4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8001f0c <madgwick_ahrs_update+0xfcc>
 8001dd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ddc:	4b43      	ldr	r3, [pc, #268]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001dde:	edd3 7a00 	vldr	s15, [r3]
 8001de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de6:	4b41      	ldr	r3, [pc, #260]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001de8:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001dec:	4b42      	ldr	r3, [pc, #264]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001df4:	edd3 7a00 	vldr	s15, [r3]
 8001df8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dfc:	4b3c      	ldr	r3, [pc, #240]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001dfe:	edd3 6a00 	vldr	s13, [r3]
 8001e02:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e10:	4b3a      	ldr	r3, [pc, #232]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e12:	edd3 6a00 	vldr	s13, [r3]
 8001e16:	4b39      	ldr	r3, [pc, #228]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e24:	4b31      	ldr	r3, [pc, #196]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e26:	edd3 6a00 	vldr	s13, [r3]
 8001e2a:	4b30      	ldr	r3, [pc, #192]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e38:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3c:	f000 fd60 	bl	8002900 <invSqrt>
 8001e40:	ed87 0a21 	vstr	s0, [r7, #132]	; 0x84
  q0 *= recipNorm;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001e46:	ed93 7a00 	vldr	s14, [r3]
 8001e4a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001e54:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001e5a:	ed93 7a00 	vldr	s14, [r3]
 8001e5e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e66:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001e68:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e6e:	ed93 7a00 	vldr	s14, [r3]
 8001e72:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e7c:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e82:	ed93 7a00 	vldr	s14, [r3]
 8001e86:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001e90:	edc3 7a00 	vstr	s15, [r3]

  atti->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1); // roll     -pi----pi
 8001e94:	4b19      	ldr	r3, [pc, #100]	; (8001efc <madgwick_ahrs_update+0xfbc>)
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e9e:	4b13      	ldr	r3, [pc, #76]	; (8001eec <madgwick_ahrs_update+0xfac>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <madgwick_ahrs_update+0xfb8>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ec0:	ee17 0a90 	vmov	r0, s15
 8001ec4:	f7fe fb40 	bl	8000548 <__aeabi_f2d>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001ed6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <madgwick_ahrs_update+0xfb0>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	e016      	b.n	8001f10 <madgwick_ahrs_update+0xfd0>
 8001ee2:	bf00      	nop
 8001ee4:	2000050c 	.word	0x2000050c
 8001ee8:	20000510 	.word	0x20000510
 8001eec:	200004fc 	.word	0x200004fc
 8001ef0:	200004f4 	.word	0x200004f4
 8001ef4:	20000518 	.word	0x20000518
 8001ef8:	20000004 	.word	0x20000004
 8001efc:	200004f8 	.word	0x200004f8
 8001f00:	2000051c 	.word	0x2000051c
 8001f04:	20000520 	.word	0x20000520
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	3a83126f 	.word	0x3a83126f
 8001f10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f14:	4b4f      	ldr	r3, [pc, #316]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f30:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f34:	ee17 0a90 	vmov	r0, s15
 8001f38:	f7fe fb06 	bl	8000548 <__aeabi_f2d>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	ec43 2b11 	vmov	d1, r2, r3
 8001f44:	ec45 4b10 	vmov	d0, r4, r5
 8001f48:	f010 fe94 	bl	8012c74 <atan2>
 8001f4c:	ec53 2b10 	vmov	r2, r3, d0
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fe28 	bl	8000ba8 <__aeabi_d2f>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	601a      	str	r2, [r3, #0]
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2);                                // pitch    -pi/2----pi/2
 8001f5e:	4b3e      	ldr	r3, [pc, #248]	; (8002058 <madgwick_ahrs_update+0x1118>)
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001f68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <madgwick_ahrs_update+0x111c>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f76:	4b3a      	ldr	r3, [pc, #232]	; (8002060 <madgwick_ahrs_update+0x1120>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f80:	4b34      	ldr	r3, [pc, #208]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8e:	ee17 0a90 	vmov	r0, s15
 8001f92:	f7fe fad9 	bl	8000548 <__aeabi_f2d>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	ec43 2b10 	vmov	d0, r2, r3
 8001f9e:	f010 fe2f 	bl	8012c00 <asin>
 8001fa2:	ec53 2b10 	vmov	r2, r3, d0
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f7fe fdfd 	bl	8000ba8 <__aeabi_d2f>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1);  // yaw      -pi----pi
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <madgwick_ahrs_update+0x1118>)
 8001fb6:	edd3 7a00 	vldr	s15, [r3]
 8001fba:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <madgwick_ahrs_update+0x1120>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001fd2:	4b22      	ldr	r3, [pc, #136]	; (800205c <madgwick_ahrs_update+0x111c>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe0:	ee17 0a90 	vmov	r0, s15
 8001fe4:	f7fe fab0 	bl	8000548 <__aeabi_f2d>
 8001fe8:	4604      	mov	r4, r0
 8001fea:	460d      	mov	r5, r1
 8001fec:	4b19      	ldr	r3, [pc, #100]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8001ff6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <madgwick_ahrs_update+0x1114>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002004:	4b15      	ldr	r3, [pc, #84]	; (800205c <madgwick_ahrs_update+0x111c>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800200e:	4b13      	ldr	r3, [pc, #76]	; (800205c <madgwick_ahrs_update+0x111c>)
 8002010:	edd3 7a00 	vldr	s15, [r3]
 8002014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002020:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002024:	ee17 0a90 	vmov	r0, s15
 8002028:	f7fe fa8e 	bl	8000548 <__aeabi_f2d>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	ec43 2b11 	vmov	d1, r2, r3
 8002034:	ec45 4b10 	vmov	d0, r4, r5
 8002038:	f010 fe1c 	bl	8012c74 <atan2>
 800203c:	ec53 2b10 	vmov	r2, r3, d0
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f7fe fdb0 	bl	8000ba8 <__aeabi_d2f>
 8002048:	4602      	mov	r2, r0
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	609a      	str	r2, [r3, #8]
}
 800204e:	3798      	adds	r7, #152	; 0x98
 8002050:	46bd      	mov	sp, r7
 8002052:	bdb0      	pop	{r4, r5, r7, pc}
 8002054:	200004f8 	.word	0x200004f8
 8002058:	200004f4 	.word	0x200004f4
 800205c:	200004fc 	.word	0x200004fc
 8002060:	20000004 	.word	0x20000004

08002064 <madgwick_ahrs_updateIMU>:

void madgwick_ahrs_updateIMU(AhrsSensor_t *sensor, Attitude_t *atti)
{
 8002064:	b5b0      	push	{r4, r5, r7, lr}
 8002066:	b098      	sub	sp, #96	; 0x60
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  float recipNorm;
  float s0, s1, s2, s3;
  float qDot1, qDot2, qDot3, qDot4;
  float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2, _8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

  gx = sensor->wx;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4acf      	ldr	r2, [pc, #828]	; (80023b0 <madgwick_ahrs_updateIMU+0x34c>)
 8002074:	6013      	str	r3, [r2, #0]
  gy = sensor->wy;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	4ace      	ldr	r2, [pc, #824]	; (80023b4 <madgwick_ahrs_updateIMU+0x350>)
 800207c:	6013      	str	r3, [r2, #0]
  gz = sensor->wz;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4acd      	ldr	r2, [pc, #820]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 8002084:	6013      	str	r3, [r2, #0]
  ax = sensor->ax;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4acc      	ldr	r2, [pc, #816]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 800208c:	6013      	str	r3, [r2, #0]
  ay = sensor->ay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	4acb      	ldr	r2, [pc, #812]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 8002094:	6013      	str	r3, [r2, #0]
  az = sensor->az;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	4aca      	ldr	r2, [pc, #808]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 800209c:	6013      	str	r3, [r2, #0]
  mx = sensor->mx;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	699b      	ldr	r3, [r3, #24]
 80020a2:	4ac9      	ldr	r2, [pc, #804]	; (80023c8 <madgwick_ahrs_updateIMU+0x364>)
 80020a4:	6013      	str	r3, [r2, #0]
  my = sensor->my;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4ac8      	ldr	r2, [pc, #800]	; (80023cc <madgwick_ahrs_updateIMU+0x368>)
 80020ac:	6013      	str	r3, [r2, #0]
  mz = sensor->mz;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4ac7      	ldr	r2, [pc, #796]	; (80023d0 <madgwick_ahrs_updateIMU+0x36c>)
 80020b4:	6013      	str	r3, [r2, #0]

  // Rate of change of quaternion from gyroscope
  qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80020b6:	4bc7      	ldr	r3, [pc, #796]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	eeb1 7a67 	vneg.f32	s14, s15
 80020c0:	4bbb      	ldr	r3, [pc, #748]	; (80023b0 <madgwick_ahrs_updateIMU+0x34c>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ca:	4bc3      	ldr	r3, [pc, #780]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 80020cc:	edd3 6a00 	vldr	s13, [r3]
 80020d0:	4bb8      	ldr	r3, [pc, #736]	; (80023b4 <madgwick_ahrs_updateIMU+0x350>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80020de:	4bbf      	ldr	r3, [pc, #764]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 80020e0:	edd3 6a00 	vldr	s13, [r3]
 80020e4:	4bb4      	ldr	r3, [pc, #720]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 80020e6:	edd3 7a00 	vldr	s15, [r3]
 80020ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020fa:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
  qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80020fe:	4bb8      	ldr	r3, [pc, #736]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 8002100:	ed93 7a00 	vldr	s14, [r3]
 8002104:	4baa      	ldr	r3, [pc, #680]	; (80023b0 <madgwick_ahrs_updateIMU+0x34c>)
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210e:	4bb2      	ldr	r3, [pc, #712]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 8002110:	edd3 6a00 	vldr	s13, [r3]
 8002114:	4ba8      	ldr	r3, [pc, #672]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002122:	4bae      	ldr	r3, [pc, #696]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 8002124:	edd3 6a00 	vldr	s13, [r3]
 8002128:	4ba2      	ldr	r3, [pc, #648]	; (80023b4 <madgwick_ahrs_updateIMU+0x350>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002136:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800213a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800213e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
  qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8002142:	4ba7      	ldr	r3, [pc, #668]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 8002144:	ed93 7a00 	vldr	s14, [r3]
 8002148:	4b9a      	ldr	r3, [pc, #616]	; (80023b4 <madgwick_ahrs_updateIMU+0x350>)
 800214a:	edd3 7a00 	vldr	s15, [r3]
 800214e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002152:	4ba0      	ldr	r3, [pc, #640]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 8002154:	edd3 6a00 	vldr	s13, [r3]
 8002158:	4b97      	ldr	r3, [pc, #604]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 800215a:	edd3 7a00 	vldr	s15, [r3]
 800215e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002162:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002166:	4b9d      	ldr	r3, [pc, #628]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 8002168:	edd3 6a00 	vldr	s13, [r3]
 800216c:	4b90      	ldr	r3, [pc, #576]	; (80023b0 <madgwick_ahrs_updateIMU+0x34c>)
 800216e:	edd3 7a00 	vldr	s15, [r3]
 8002172:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002176:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800217e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002182:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
  qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8002186:	4b96      	ldr	r3, [pc, #600]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	4b8a      	ldr	r3, [pc, #552]	; (80023b8 <madgwick_ahrs_updateIMU+0x354>)
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002196:	4b8f      	ldr	r3, [pc, #572]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	4b85      	ldr	r3, [pc, #532]	; (80023b4 <madgwick_ahrs_updateIMU+0x350>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021aa:	4b8b      	ldr	r3, [pc, #556]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 80021ac:	edd3 6a00 	vldr	s13, [r3]
 80021b0:	4b7f      	ldr	r3, [pc, #508]	; (80023b0 <madgwick_ahrs_updateIMU+0x34c>)
 80021b2:	edd3 7a00 	vldr	s15, [r3]
 80021b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80021c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021c6:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if (!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 80021ca:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 80021cc:	edd3 7a00 	vldr	s15, [r3]
 80021d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	d110      	bne.n	80021fc <madgwick_ahrs_updateIMU+0x198>
 80021da:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d108      	bne.n	80021fc <madgwick_ahrs_updateIMU+0x198>
 80021ea:	4b76      	ldr	r3, [pc, #472]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80021f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f8:	f000 8212 	beq.w	8002620 <madgwick_ahrs_updateIMU+0x5bc>
  {

    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 80021fc:	4b6f      	ldr	r3, [pc, #444]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 800220e:	edd3 6a00 	vldr	s13, [r3]
 8002212:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002220:	4b68      	ldr	r3, [pc, #416]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 8002222:	edd3 6a00 	vldr	s13, [r3]
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	f000 fb62 	bl	8002900 <invSqrt>
 800223c:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    ax *= recipNorm;
 8002240:	4b5e      	ldr	r3, [pc, #376]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 8002242:	ed93 7a00 	vldr	s14, [r3]
 8002246:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	4b5b      	ldr	r3, [pc, #364]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 8002250:	edc3 7a00 	vstr	s15, [r3]
    ay *= recipNorm;
 8002254:	4b5a      	ldr	r3, [pc, #360]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 8002264:	edc3 7a00 	vstr	s15, [r3]
    az *= recipNorm;
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 800226a:	ed93 7a00 	vldr	s14, [r3]
 800226e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <madgwick_ahrs_updateIMU+0x360>)
 8002278:	edc3 7a00 	vstr	s15, [r3]

    // Auxiliary variables to avoid repeated arithmetic
    _2q0 = 2.0f * q0;
 800227c:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002286:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    _2q1 = 2.0f * q1;
 800228a:	4b52      	ldr	r3, [pc, #328]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002294:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    _2q2 = 2.0f * q2;
 8002298:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 800229a:	edd3 7a00 	vldr	s15, [r3]
 800229e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022a2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    _2q3 = 2.0f * q3;
 80022a6:	4b4d      	ldr	r3, [pc, #308]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80022b0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    _4q0 = 4.0f * q0;
 80022b4:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    _4q1 = 4.0f * q1;
 80022c6:	4b43      	ldr	r3, [pc, #268]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    _4q2 = 4.0f * q2;
 80022d8:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80022e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    _8q1 = 8.0f * q1;
 80022ea:	4b3a      	ldr	r3, [pc, #232]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80022f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    _8q2 = 8.0f * q2;
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 80022fe:	edd3 7a00 	vldr	s15, [r3]
 8002302:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8002306:	ee67 7a87 	vmul.f32	s15, s15, s14
 800230a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    q0q0 = q0 * q0;
 800230e:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	4b32      	ldr	r3, [pc, #200]	; (80023e0 <madgwick_ahrs_updateIMU+0x37c>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    q1q1 = q1 * q1;
 8002322:	4b2c      	ldr	r3, [pc, #176]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 8002324:	ed93 7a00 	vldr	s14, [r3]
 8002328:	4b2a      	ldr	r3, [pc, #168]	; (80023d4 <madgwick_ahrs_updateIMU+0x370>)
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002332:	edc7 7a08 	vstr	s15, [r7, #32]
    q2q2 = q2 * q2;
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 8002338:	ed93 7a00 	vldr	s14, [r3]
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <madgwick_ahrs_updateIMU+0x374>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002346:	edc7 7a07 	vstr	s15, [r7, #28]
    q3q3 = q3 * q3;
 800234a:	4b24      	ldr	r3, [pc, #144]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 800234c:	ed93 7a00 	vldr	s14, [r3]
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <madgwick_ahrs_updateIMU+0x378>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Gradient decent algorithm corrective step
    s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800235e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002362:	edd7 7a07 	vldr	s15, [r7, #28]
 8002366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236a:	4b14      	ldr	r3, [pc, #80]	; (80023bc <madgwick_ahrs_updateIMU+0x358>)
 800236c:	edd3 6a00 	vldr	s13, [r3]
 8002370:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002374:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800237c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002380:	edd7 7a08 	vldr	s15, [r7, #32]
 8002384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <madgwick_ahrs_updateIMU+0x35c>)
 800238e:	edd3 6a00 	vldr	s13, [r3]
 8002392:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800239a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239e:	edc7 7a05 	vstr	s15, [r7, #20]
    s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80023a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80023a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ae:	e019      	b.n	80023e4 <madgwick_ahrs_updateIMU+0x380>
 80023b0:	20000500 	.word	0x20000500
 80023b4:	20000504 	.word	0x20000504
 80023b8:	20000508 	.word	0x20000508
 80023bc:	2000050c 	.word	0x2000050c
 80023c0:	20000510 	.word	0x20000510
 80023c4:	20000514 	.word	0x20000514
 80023c8:	20000518 	.word	0x20000518
 80023cc:	2000051c 	.word	0x2000051c
 80023d0:	20000520 	.word	0x20000520
 80023d4:	200004f4 	.word	0x200004f4
 80023d8:	200004f8 	.word	0x200004f8
 80023dc:	200004fc 	.word	0x200004fc
 80023e0:	20000004 	.word	0x20000004
 80023e4:	4be6      	ldr	r3, [pc, #920]	; (8002780 <madgwick_ahrs_updateIMU+0x71c>)
 80023e6:	edd3 6a00 	vldr	s13, [r3]
 80023ea:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80023ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80023fa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80023fe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002402:	4be0      	ldr	r3, [pc, #896]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002410:	4bdd      	ldr	r3, [pc, #884]	; (8002788 <madgwick_ahrs_updateIMU+0x724>)
 8002412:	edd3 6a00 	vldr	s13, [r3]
 8002416:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800241a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800241e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002422:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002426:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800242e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002432:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800243a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800243e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002446:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244a:	4bd0      	ldr	r3, [pc, #832]	; (800278c <madgwick_ahrs_updateIMU+0x728>)
 800244c:	edd3 6a00 	vldr	s13, [r3]
 8002450:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	edc7 7a04 	vstr	s15, [r7, #16]
    s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 8002460:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002464:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002468:	ee27 7a87 	vmul.f32	s14, s15, s14
 800246c:	4bc8      	ldr	r3, [pc, #800]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002476:	4bc2      	ldr	r3, [pc, #776]	; (8002780 <madgwick_ahrs_updateIMU+0x71c>)
 8002478:	edd3 6a00 	vldr	s13, [r3]
 800247c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002480:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002488:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800248c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002490:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002494:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002498:	4bbb      	ldr	r3, [pc, #748]	; (8002788 <madgwick_ahrs_updateIMU+0x724>)
 800249a:	edd3 6a00 	vldr	s13, [r3]
 800249e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80024a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024b2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024c2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80024c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024d2:	4bae      	ldr	r3, [pc, #696]	; (800278c <madgwick_ahrs_updateIMU+0x728>)
 80024d4:	edd3 6a00 	vldr	s13, [r3]
 80024d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e4:	edc7 7a03 	vstr	s15, [r7, #12]
    s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 80024e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024ec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024f4:	4ba7      	ldr	r3, [pc, #668]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 80024f6:	edd3 7a00 	vldr	s15, [r3]
 80024fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024fe:	4ba0      	ldr	r3, [pc, #640]	; (8002780 <madgwick_ahrs_updateIMU+0x71c>)
 8002500:	edd3 6a00 	vldr	s13, [r3]
 8002504:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800250c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002510:	edd7 7a07 	vldr	s15, [r7, #28]
 8002514:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002518:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800251c:	4b9d      	ldr	r3, [pc, #628]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 800251e:	edd3 7a00 	vldr	s15, [r3]
 8002522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002526:	ee37 7a27 	vadd.f32	s14, s14, s15
 800252a:	4b97      	ldr	r3, [pc, #604]	; (8002788 <madgwick_ahrs_updateIMU+0x724>)
 800252c:	edd3 6a00 	vldr	s13, [r3]
 8002530:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	edc7 7a02 	vstr	s15, [r7, #8]
    recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 8002540:	edd7 7a05 	vldr	s15, [r7, #20]
 8002544:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002548:	edd7 7a04 	vldr	s15, [r7, #16]
 800254c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002550:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002554:	edd7 7a03 	vldr	s15, [r7, #12]
 8002558:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800255c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002560:	edd7 7a02 	vldr	s15, [r7, #8]
 8002564:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002568:	ee77 7a27 	vadd.f32	s15, s14, s15
 800256c:	eeb0 0a67 	vmov.f32	s0, s15
 8002570:	f000 f9c6 	bl	8002900 <invSqrt>
 8002574:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
    s0 *= recipNorm;
 8002578:	ed97 7a05 	vldr	s14, [r7, #20]
 800257c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	edc7 7a05 	vstr	s15, [r7, #20]
    s1 *= recipNorm;
 8002588:	ed97 7a04 	vldr	s14, [r7, #16]
 800258c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002594:	edc7 7a04 	vstr	s15, [r7, #16]
    s2 *= recipNorm;
 8002598:	ed97 7a03 	vldr	s14, [r7, #12]
 800259c:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a4:	edc7 7a03 	vstr	s15, [r7, #12]
    s3 *= recipNorm;
 80025a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80025ac:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b4:	edc7 7a02 	vstr	s15, [r7, #8]

    // Apply feedback step
    qDot1 -= beta * s0;
 80025b8:	4b77      	ldr	r3, [pc, #476]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 80025ba:	ed93 7a00 	vldr	s14, [r3]
 80025be:	edd7 7a05 	vldr	s15, [r7, #20]
 80025c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80025ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ce:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    qDot2 -= beta * s1;
 80025d2:	4b71      	ldr	r3, [pc, #452]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 80025d4:	ed93 7a00 	vldr	s14, [r3]
 80025d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80025dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025e0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80025e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    qDot3 -= beta * s2;
 80025ec:	4b6a      	ldr	r3, [pc, #424]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80025f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80025fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002602:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    qDot4 -= beta * s3;
 8002606:	4b64      	ldr	r3, [pc, #400]	; (8002798 <madgwick_ahrs_updateIMU+0x734>)
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002614:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
  }

  // Integrate rate of change of quaternion to yield quaternion
  q0 += qDot1 * (1.0f / sampleFreq);
 8002620:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002624:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800279c <madgwick_ahrs_updateIMU+0x738>
 8002628:	ee27 7a87 	vmul.f32	s14, s15, s14
 800262c:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 800262e:	edd3 7a00 	vldr	s15, [r3]
 8002632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002636:	4b5a      	ldr	r3, [pc, #360]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 8002638:	edc3 7a00 	vstr	s15, [r3]
  q1 += qDot2 * (1.0f / sampleFreq);
 800263c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002640:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800279c <madgwick_ahrs_updateIMU+0x738>
 8002644:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002648:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 800264a:	edd3 7a00 	vldr	s15, [r3]
 800264e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002652:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 8002654:	edc3 7a00 	vstr	s15, [r3]
  q2 += qDot3 * (1.0f / sampleFreq);
 8002658:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800265c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800279c <madgwick_ahrs_updateIMU+0x738>
 8002660:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002664:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 8002666:	edd3 7a00 	vldr	s15, [r3]
 800266a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266e:	4b48      	ldr	r3, [pc, #288]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 8002670:	edc3 7a00 	vstr	s15, [r3]
  q3 += qDot4 * (1.0f / sampleFreq);
 8002674:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002678:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800279c <madgwick_ahrs_updateIMU+0x738>
 800267c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002680:	4b44      	ldr	r3, [pc, #272]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268a:	4b42      	ldr	r3, [pc, #264]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 800268c:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002690:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	4b42      	ldr	r3, [pc, #264]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 8002698:	edd3 7a00 	vldr	s15, [r3]
 800269c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026a0:	4b38      	ldr	r3, [pc, #224]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 80026a2:	edd3 6a00 	vldr	s13, [r3]
 80026a6:	4b37      	ldr	r3, [pc, #220]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026b4:	4b36      	ldr	r3, [pc, #216]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 80026b6:	edd3 6a00 	vldr	s13, [r3]
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 80026bc:	edd3 7a00 	vldr	s15, [r3]
 80026c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 80026ca:	edd3 6a00 	vldr	s13, [r3]
 80026ce:	4b31      	ldr	r3, [pc, #196]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 80026d0:	edd3 7a00 	vldr	s15, [r3]
 80026d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026dc:	eeb0 0a67 	vmov.f32	s0, s15
 80026e0:	f000 f90e 	bl	8002900 <invSqrt>
 80026e4:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
  q0 *= recipNorm;
 80026e8:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 80026f8:	edc3 7a00 	vstr	s15, [r3]
  q1 *= recipNorm;
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 80026fe:	ed93 7a00 	vldr	s14, [r3]
 8002702:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 800270c:	edc3 7a00 	vstr	s15, [r3]
  q2 *= recipNorm;
 8002710:	4b1f      	ldr	r3, [pc, #124]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 8002712:	ed93 7a00 	vldr	s14, [r3]
 8002716:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800271a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271e:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 8002720:	edc3 7a00 	vstr	s15, [r3]
  q3 *= recipNorm;
 8002724:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800272e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 8002734:	edc3 7a00 	vstr	s15, [r3]

  atti->roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2 * q2 + 1); // roll     -pi----pi
 8002738:	4b15      	ldr	r3, [pc, #84]	; (8002790 <madgwick_ahrs_updateIMU+0x72c>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <madgwick_ahrs_updateIMU+0x730>)
 8002744:	edd3 7a00 	vldr	s15, [r3]
 8002748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800274c:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <madgwick_ahrs_updateIMU+0x73c>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002764:	ee17 0a90 	vmov	r0, s15
 8002768:	f7fd feee 	bl	8000548 <__aeabi_f2d>
 800276c:	4604      	mov	r4, r0
 800276e:	460d      	mov	r5, r1
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <madgwick_ahrs_updateIMU+0x720>)
 8002772:	edd3 7a00 	vldr	s15, [r3]
 8002776:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800277a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800277e:	e011      	b.n	80027a4 <madgwick_ahrs_updateIMU+0x740>
 8002780:	2000050c 	.word	0x2000050c
 8002784:	200004f4 	.word	0x200004f4
 8002788:	20000510 	.word	0x20000510
 800278c:	20000514 	.word	0x20000514
 8002790:	200004f8 	.word	0x200004f8
 8002794:	200004fc 	.word	0x200004fc
 8002798:	20000000 	.word	0x20000000
 800279c:	3a83126f 	.word	0x3a83126f
 80027a0:	20000004 	.word	0x20000004
 80027a4:	4b52      	ldr	r3, [pc, #328]	; (80028f0 <madgwick_ahrs_updateIMU+0x88c>)
 80027a6:	edd3 7a00 	vldr	s15, [r3]
 80027aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 80027b0:	edd3 7a00 	vldr	s15, [r3]
 80027b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80027b8:	4b4e      	ldr	r3, [pc, #312]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 80027ba:	edd3 7a00 	vldr	s15, [r3]
 80027be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80027ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027ce:	ee17 0a90 	vmov	r0, s15
 80027d2:	f7fd feb9 	bl	8000548 <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	ec43 2b11 	vmov	d1, r2, r3
 80027de:	ec45 4b10 	vmov	d0, r4, r5
 80027e2:	f010 fa47 	bl	8012c74 <atan2>
 80027e6:	ec53 2b10 	vmov	r2, r3, d0
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	f7fe f9db 	bl	8000ba8 <__aeabi_d2f>
 80027f2:	4602      	mov	r2, r0
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	601a      	str	r2, [r3, #0]
  atti->pitch = asin(-2 * q1 * q3 + 2 * q0 * q2);                                // pitch    -pi/2----pi/2
 80027f8:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <madgwick_ahrs_updateIMU+0x88c>)
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002802:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002806:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 8002808:	edd3 7a00 	vldr	s15, [r3]
 800280c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002810:	4b3a      	ldr	r3, [pc, #232]	; (80028fc <madgwick_ahrs_updateIMU+0x898>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002828:	ee17 0a90 	vmov	r0, s15
 800282c:	f7fd fe8c 	bl	8000548 <__aeabi_f2d>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	ec43 2b10 	vmov	d0, r2, r3
 8002838:	f010 f9e2 	bl	8012c00 <asin>
 800283c:	ec53 2b10 	vmov	r2, r3, d0
 8002840:	4610      	mov	r0, r2
 8002842:	4619      	mov	r1, r3
 8002844:	f7fe f9b0 	bl	8000ba8 <__aeabi_d2f>
 8002848:	4602      	mov	r2, r0
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	605a      	str	r2, [r3, #4]
  atti->yaw = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2 * q2 - 2 * q3 * q3 + 1);  // yaw      -pi----pi
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <madgwick_ahrs_updateIMU+0x88c>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 800285a:	edd3 7a00 	vldr	s15, [r3]
 800285e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <madgwick_ahrs_updateIMU+0x898>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800286c:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800287a:	ee17 0a90 	vmov	r0, s15
 800287e:	f7fd fe63 	bl	8000548 <__aeabi_f2d>
 8002882:	4604      	mov	r4, r0
 8002884:	460d      	mov	r5, r1
 8002886:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002890:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002894:	4b17      	ldr	r3, [pc, #92]	; (80028f4 <madgwick_ahrs_updateIMU+0x890>)
 8002896:	edd3 7a00 	vldr	s15, [r3]
 800289a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800289e:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 80028a0:	edd3 7a00 	vldr	s15, [r3]
 80028a4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <madgwick_ahrs_updateIMU+0x894>)
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028be:	ee17 0a90 	vmov	r0, s15
 80028c2:	f7fd fe41 	bl	8000548 <__aeabi_f2d>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	ec43 2b11 	vmov	d1, r2, r3
 80028ce:	ec45 4b10 	vmov	d0, r4, r5
 80028d2:	f010 f9cf 	bl	8012c74 <atan2>
 80028d6:	ec53 2b10 	vmov	r2, r3, d0
 80028da:	4610      	mov	r0, r2
 80028dc:	4619      	mov	r1, r3
 80028de:	f7fe f963 	bl	8000ba8 <__aeabi_d2f>
 80028e2:	4602      	mov	r2, r0
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	609a      	str	r2, [r3, #8]
}
 80028e8:	bf00      	nop
 80028ea:	3760      	adds	r7, #96	; 0x60
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bdb0      	pop	{r4, r5, r7, pc}
 80028f0:	200004f4 	.word	0x200004f4
 80028f4:	200004f8 	.word	0x200004f8
 80028f8:	200004fc 	.word	0x200004fc
 80028fc:	20000004 	.word	0x20000004

08002900 <invSqrt>:
               sizeof(long) must be 4 bytes.
  * @param[in] input:x
  * @retval    1/Sqrt(x)
  */
float invSqrt(float x)
{
 8002900:	b480      	push	{r7}
 8002902:	b087      	sub	sp, #28
 8002904:	af00      	add	r7, sp, #0
 8002906:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800290a:	edd7 7a01 	vldr	s15, [r7, #4]
 800290e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002916:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	613b      	str	r3, [r7, #16]
  long i = *(long *)&y;
 800291e:	f107 0310 	add.w	r3, r7, #16
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	105a      	asrs	r2, r3, #1
 800292a:	4b12      	ldr	r3, [pc, #72]	; (8002974 <invSqrt+0x74>)
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  y = *(float *)&i;
 8002930:	f107 030c 	add.w	r3, r7, #12
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 8002938:	ed97 7a04 	vldr	s14, [r7, #16]
 800293c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002940:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002944:	edd7 7a04 	vldr	s15, [r7, #16]
 8002948:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294c:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002954:	edd7 7a04 	vldr	s15, [r7, #16]
 8002958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295c:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	ee07 3a90 	vmov	s15, r3
}
 8002966:	eeb0 0a67 	vmov.f32	s0, s15
 800296a:	371c      	adds	r7, #28
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	5f3759df 	.word	0x5f3759df

08002978 <Get_CRC8_Check_Sum>:
0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35,
};


unsigned char Get_CRC8_Check_Sum(unsigned char *pchMessage,unsigned int dwLength,unsigned char ucCRC8)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	4613      	mov	r3, r2
 8002984:	71fb      	strb	r3, [r7, #7]
	unsigned char ucIndex;
	while (dwLength--)
 8002986:	e00a      	b.n	800299e <Get_CRC8_Check_Sum+0x26>
	{
		ucIndex = ucCRC8^(*pchMessage++);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60fa      	str	r2, [r7, #12]
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4053      	eors	r3, r2
 8002994:	75fb      	strb	r3, [r7, #23]
		ucCRC8 = CRC8_TAB[ucIndex];
 8002996:	7dfb      	ldrb	r3, [r7, #23]
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <Get_CRC8_Check_Sum+0x40>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	71fb      	strb	r3, [r7, #7]
	while (dwLength--)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1e5a      	subs	r2, r3, #1
 80029a2:	60ba      	str	r2, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ef      	bne.n	8002988 <Get_CRC8_Check_Sum+0x10>
	}
	return(ucCRC8);
 80029a8:	79fb      	ldrb	r3, [r7, #7]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	080138fc 	.word	0x080138fc

080029bc <Verify_CRC8_Check_Sum>:
** Descriptions: CRC8 Verify function
** Input: Data to Verify,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
unsigned int Verify_CRC8_Check_Sum(unsigned char *pchMessage, unsigned int dwLength)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
	unsigned char ucExpected = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
	if ((pchMessage == 0) || (dwLength <= 2)) return 0;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <Verify_CRC8_Check_Sum+0x1a>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d801      	bhi.n	80029da <Verify_CRC8_Check_Sum+0x1e>
 80029d6:	2300      	movs	r3, #0
 80029d8:	e013      	b.n	8002a02 <Verify_CRC8_Check_Sum+0x46>
		ucExpected = Get_CRC8_Check_Sum (pchMessage, dwLength-1, CRC8_INIT);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	4619      	mov	r1, r3
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffc8 	bl	8002978 <Get_CRC8_Check_Sum>
 80029e8:	4603      	mov	r3, r0
 80029ea:	73fb      	strb	r3, [r7, #15]
	return ( ucExpected == pchMessage[dwLength-1] );
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	4413      	add	r3, r2
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	7bfa      	ldrb	r2, [r7, #15]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	bf0c      	ite	eq
 80029fc:	2301      	moveq	r3, #1
 80029fe:	2300      	movne	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <queueM_init>:
#include "string.h"

/* Since we have multiple can comm works in the future , there is necessity that apply
 * FIFO Queue management of our CAN2 data pool. */
/***************************** CAN COMM QUEUE ************************************/
void queueM_init(QueueManage_t *qm){
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	qm->head = 0;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	801a      	strh	r2, [r3, #0]
	qm->tail = 0;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	805a      	strh	r2, [r3, #2]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <enqueueCanMessage>:
  * @brief     can comms enqueue
  * @param[in] header: can type header
  * @param[in] data: the data would be transmitted
  * @retval    None
  */
void enqueueCanMessage(CAN_TxHeaderTypeDef* header, CanMessage_t *canQueue, QueueManage_t *qm, uint8_t *data){
 8002a2c:	b5b0      	push	{r4, r5, r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
    if ((qm->tail + 1) % QUEUE_SIZE == qm->head)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <enqueueCanMessage+0x9c>)
 8002a44:	fb83 1302 	smull	r1, r3, r3, r2
 8002a48:	1199      	asrs	r1, r3, #6
 8002a4a:	17d3      	asrs	r3, r2, #31
 8002a4c:	1acb      	subs	r3, r1, r3
 8002a4e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d02d      	beq.n	8002abe <enqueueCanMessage+0x92>
    {
        /* Queue is full, cannot enqueue message */
        return;
    }
    /* follow fifo rules */
    canQueue[qm->tail].header = *header;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a68:	015b      	lsls	r3, r3, #5
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	441a      	add	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4614      	mov	r4, r2
 8002a72:	461d      	mov	r5, r3
 8002a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a7c:	e884 0003 	stmia.w	r4, {r0, r1}
    memcpy(canQueue[qm->tail].data, data, 8);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a86:	015b      	lsls	r3, r3, #5
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3318      	adds	r3, #24
 8002a8e:	2208      	movs	r2, #8
 8002a90:	6839      	ldr	r1, [r7, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f00d fc0a 	bl	80102ac <memcpy>
    /* tail ++ */
    qm->tail = (qm->tail + 1) % QUEUE_SIZE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <enqueueCanMessage+0x9c>)
 8002aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8002aa6:	1191      	asrs	r1, r2, #6
 8002aa8:	17da      	asrs	r2, r3, #31
 8002aaa:	1a8a      	subs	r2, r1, r2
 8002aac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ab0:	fb01 f202 	mul.w	r2, r1, r2
 8002ab4:	1a9a      	subs	r2, r3, r2
 8002ab6:	b212      	sxth	r2, r2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	805a      	strh	r2, [r3, #2]
 8002abc:	e000      	b.n	8002ac0 <enqueueCanMessage+0x94>
        return;
 8002abe:	bf00      	nop
}
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	10624dd3 	.word	0x10624dd3

08002acc <sendNextCanMessage>:
/**
  * @brief     can comm send data from queue
  * @param[in] header: can type header
  * @retval    None
  */
void sendNextCanMessage(CAN_HandleTypeDef* hcan, CanMessage_t *canQueue, QueueManage_t *qm){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
    if (qm->head == qm->tail)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d02b      	beq.n	8002b40 <sendNextCanMessage+0x74>
    {
        /* Queue is empty, nothing to send */
        return;
    }
    uint32_t mailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(hcan, &(canQueue[qm->head].header), canQueue[qm->head].data, &mailbox);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aee:	015b      	lsls	r3, r3, #5
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	4413      	add	r3, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002afc:	015b      	lsls	r3, r3, #5
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	4413      	add	r3, r2
 8002b02:	f103 0218 	add.w	r2, r3, #24
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f007 fef8 	bl	800a900 <HAL_CAN_AddTxMessage>
 8002b10:	4603      	mov	r3, r0
 8002b12:	75fb      	strb	r3, [r7, #23]
    if (status == HAL_OK)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d113      	bne.n	8002b42 <sendNextCanMessage+0x76>
    {
        /* Message has been added to the mailbox successfully, remove it from the queue */
    	qm->head = (qm->head + 1) % QUEUE_SIZE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b20:	3301      	adds	r3, #1
 8002b22:	4a09      	ldr	r2, [pc, #36]	; (8002b48 <sendNextCanMessage+0x7c>)
 8002b24:	fb82 1203 	smull	r1, r2, r2, r3
 8002b28:	1191      	asrs	r1, r2, #6
 8002b2a:	17da      	asrs	r2, r3, #31
 8002b2c:	1a8a      	subs	r2, r1, r2
 8002b2e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b32:	fb01 f202 	mul.w	r2, r1, r2
 8002b36:	1a9a      	subs	r2, r3, r2
 8002b38:	b212      	sxth	r2, r2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	801a      	strh	r2, [r3, #0]
 8002b3e:	e000      	b.n	8002b42 <sendNextCanMessage+0x76>
        return;
 8002b40:	bf00      	nop
    }
}
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	10624dd3 	.word	0x10624dd3

08002b4c <ff_param_init>:
/**
  * @brief    feed forward control init
  * @param[in] ff: pointer to feed forward control struct
  * @param[in] kf: ff_gain value
  */
void ff_param_init(FeedForward_t *ff, float kf){
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	ed87 0a00 	vstr	s0, [r7]
	ff->ff_gain = kf;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	601a      	str	r2, [r3, #0]
	ff->last_input = 0;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	605a      	str	r2, [r3, #4]
	ff->output = 0;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <feedforward>:
  * @retval    feedforwad prediction value
  *
  * Understanding: Gff(S) = 1 / (Gc_fb(s))
  *
  */
float feedforward(FeedForward_t *ff, float input){
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	ed87 0a00 	vstr	s0, [r7]
	ff->output = (input - ff->last_input) * ff->ff_gain + input;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b8c:	ed97 7a00 	vldr	s14, [r7]
 8002b90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b9e:	edd7 7a00 	vldr	s15, [r7]
 8002ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	edc3 7a02 	vstr	s15, [r3, #8]
	ff->last_input = input;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
	return ff->output;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	ee07 3a90 	vmov	s15, r3
}
 8002bba:	eeb0 0a67 	vmov.f32	s0, s15
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <pid_param_init>:

/**
  * @brief  pid parameters initialization
  * @retval None
  */
void pid_param_init(PID_t *pid, int32_t max_out, float max_i_out, float max_err, float kp, float ki, float kd){
 8002bc8:	b480      	push	{r7}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	61f8      	str	r0, [r7, #28]
 8002bd0:	61b9      	str	r1, [r7, #24]
 8002bd2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002bd6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002bda:	ed87 1a03 	vstr	s2, [r7, #12]
 8002bde:	edc7 1a02 	vstr	s3, [r7, #8]
 8002be2:	ed87 2a01 	vstr	s4, [r7, #4]
	pid->kp = kp;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	609a      	str	r2, [r3, #8]

	pid->max_out = max_out;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	pid->max_i_out = max_i_out;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
	pid->max_err = max_err;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	631a      	str	r2, [r3, #48]	; 0x30

	pid->err = 0;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
	pid->last_err = 0;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
	pid->llast_err = 0;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	f04f 0200 	mov.w	r2, #0
 8002c2a:	61da      	str	r2, [r3, #28]

	pid->total_out = 0;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	639a      	str	r2, [r3, #56]	; 0x38

}
 8002c34:	bf00      	nop
 8002c36:	3724      	adds	r7, #36	; 0x24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <pid_calculate>:
  * @param[in] get: measure feedback value
  * @param[in] set: target value
  * @retval    pid calculate output
  */
float pid_calculate(PID_t *pid, float cur_val, float target_val)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c4c:	edc7 0a01 	vstr	s1, [r7, #4]
  float dt = 1.0f; //sampling time
 8002c50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c54:	617b      	str	r3, [r7, #20]
  pid->cur_val = cur_val;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
  pid->target_val = target_val;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]
  pid->last_err = pid->err;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	695a      	ldr	r2, [r3, #20]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	619a      	str	r2, [r3, #24]
  pid->err = target_val - cur_val;
 8002c6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	edc3 7a05 	vstr	s15, [r3, #20]
  if ((pid->max_err != 0) && (fabs(pid->err) > pid->max_err))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c82:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	d00f      	beq.n	8002cac <pid_calculate+0x6c>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c92:	eeb0 7ae7 	vabs.f32	s14, s15
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	dd02      	ble.n	8002cac <pid_calculate+0x6c>
    return 0;
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	e05a      	b.n	8002d62 <pid_calculate+0x122>

  pid->pout = pid->kp * pid->err;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	ed93 7a00 	vldr	s14, [r3]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	edc3 7a08 	vstr	s15, [r3, #32]
  pid->iout += pid->ki * pid->err *dt;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	edd3 6a01 	vldr	s13, [r3, #4]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  pid->dout = pid->kd * (pid->err - pid->last_err) / dt;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	edd3 6a05 	vldr	s13, [r3, #20]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	edd3 7a06 	vldr	s15, [r3, #24]
 8002cfc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002d04:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  abs_limit(&(pid->iout), pid->max_i_out);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 f933 	bl	8002f8e <abs_limit>
  pid->total_out = pid->pout + pid->iout + pid->dout;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	ed93 7a08 	vldr	s14, [r3, #32]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
  abs_limit(&(pid->total_out), pid->max_out);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002d54:	eeb0 0a67 	vmov.f32	s0, s15
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 f918 	bl	8002f8e <abs_limit>

  return pid->total_out;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	ee07 3a90 	vmov	s15, r3
}
 8002d66:	eeb0 0a67 	vmov.f32	s0, s15
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <pid_single_loop_control>:
}
/**
  * @brief  Single-loop pid controller
  * @retval None
  */
float pid_single_loop_control(float target_val, PID_t *pid, float cur_val){
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	ed87 0a03 	vstr	s0, [r7, #12]
 8002d7a:	60b8      	str	r0, [r7, #8]
 8002d7c:	edc7 0a01 	vstr	s1, [r7, #4]
	return pid_calculate(pid, cur_val, target_val);
 8002d80:	edd7 0a03 	vldr	s1, [r7, #12]
 8002d84:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d88:	68b8      	ldr	r0, [r7, #8]
 8002d8a:	f7ff ff59 	bl	8002c40 <pid_calculate>
 8002d8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8002d92:	eeb0 0a67 	vmov.f32	s0, s15
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <pid_dual_loop_control>:
/**
  * @brief  Dual-loop pid controller
  * @Note 	Dual control provide more force and greater torque
  * @retval None
  */
float pid_dual_loop_control(float f_tar_val, PID_t *f_pid, PID_t *s_pid, float f_cur_val, float s_cur_val){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002da6:	6138      	str	r0, [r7, #16]
 8002da8:	60f9      	str	r1, [r7, #12]
 8002daa:	edc7 0a02 	vstr	s1, [r7, #8]
 8002dae:	ed87 1a01 	vstr	s2, [r7, #4]
	float f_out=0;
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
	f_out = pid_calculate(f_pid, f_cur_val, f_tar_val);
 8002db8:	edd7 0a05 	vldr	s1, [r7, #20]
 8002dbc:	ed97 0a02 	vldr	s0, [r7, #8]
 8002dc0:	6938      	ldr	r0, [r7, #16]
 8002dc2:	f7ff ff3d 	bl	8002c40 <pid_calculate>
 8002dc6:	ed87 0a07 	vstr	s0, [r7, #28]
	return pid_calculate(s_pid, s_cur_val, f_out);
 8002dca:	edd7 0a07 	vldr	s1, [r7, #28]
 8002dce:	ed97 0a01 	vldr	s0, [r7, #4]
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f7ff ff34 	bl	8002c40 <pid_calculate>
 8002dd8:	eef0 7a40 	vmov.f32	s15, s0
}
 8002ddc:	eeb0 0a67 	vmov.f32	s0, s15
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ramp_init>:
 ***************************************************************************/

#include "ramp.h"

void ramp_init(ramp_t *ramp, int32_t scale)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
  ramp->count = 0;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
  ramp->scale = scale;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	605a      	str	r2, [r3, #4]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <ramp_calculate>:

float ramp_calculate(ramp_t *ramp)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if (ramp->scale <= 0)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	dc02      	bgt.n	8002e1e <ramp_calculate+0x16>
    return 0;
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	e01f      	b.n	8002e5e <ramp_calculate+0x56>

  if (ramp->count++ >= ramp->scale)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1c59      	adds	r1, r3, #1
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6011      	str	r1, [r2, #0]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6852      	ldr	r2, [r2, #4]
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	db03      	blt.n	8002e38 <ramp_calculate+0x30>
    ramp->count = ramp->scale;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	601a      	str	r2, [r3, #0]

  ramp->out = ramp->count / ((float)ramp->scale);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	ee07 3a90 	vmov	s15, r3
 8002e4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	edc3 7a02 	vstr	s15, [r3, #8]
  return ramp->out;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	ee07 3a90 	vmov	s15, r3
}
 8002e62:	eeb0 0a67 	vmov.f32	s0, s15
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <kalmanCreate>:
  *         T_R: Measurement noise covariance
  *
  * @retval none
  */
void kalmanCreate(kalman_filter_t *p,float T_Q,float T_R)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e7c:	edc7 0a01 	vstr	s1, [r7, #4]
    p->X_last = (float)0;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f04f 0200 	mov.w	r2, #0
 8002e86:	601a      	str	r2, [r3, #0]
    p->P_last = 0;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	615a      	str	r2, [r3, #20]
    p->Q = T_Q;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	621a      	str	r2, [r3, #32]
    p->R = T_R;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
    p->A = 1;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ea2:	61da      	str	r2, [r3, #28]
    p->H = 1;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002eaa:	629a      	str	r2, [r3, #40]	; 0x28
    p->X_mid = p->X_last;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]
}
 8002eb4:	bf00      	nop
 8002eb6:	3714      	adds	r7, #20
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <KalmanFilter>:
  * @param  p:  filter
  *         dat: Data to be filtered
  * @retval Filtered data
  */
float KalmanFilter(kalman_filter_t* p,float dat)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	ed87 0a00 	vstr	s0, [r7]
    p->X_mid =p->A*p->X_last;                     //x(k|k-1) = AX(k-1|k-1)+BU(k)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	edc3 7a01 	vstr	s15, [r3, #4]
    p->P_mid = p->A*p->P_last+p->Q;               //p(k|k-1) = Ap(k-1|k-1)A'+Q
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	ed93 7a07 	vldr	s14, [r3, #28]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	edd3 7a05 	vldr	s15, [r3, #20]
 8002eee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	edc3 7a03 	vstr	s15, [r3, #12]
    p->kg = p->P_mid/(p->P_mid+p->R);             //kg(k) = p(k|k-1)H'/(Hp(k|k-1)'+R)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	edc3 7a06 	vstr	s15, [r3, #24]
    p->X_now = p->X_mid+p->kg*(dat-p->X_mid);     //x(k|k) = X(k|k-1)+kg(k)(Z(k)-HX(k|k-1))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	edd3 6a06 	vldr	s13, [r3, #24]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f34:	ed97 6a00 	vldr	s12, [r7]
 8002f38:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	edc3 7a02 	vstr	s15, [r3, #8]
    p->P_now = (1-p->kg)*p->P_mid;                //p(k|k) = (I-kg(k)H)P(k|k-1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002f50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edc3 7a04 	vstr	s15, [r3, #16]
    p->P_last = p->P_now;                         //state update
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	615a      	str	r2, [r3, #20]
    p->X_last = p->X_now;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	601a      	str	r2, [r3, #0]
    return p->X_now;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	ee07 3a90 	vmov	s15, r3
}
 8002f80:	eeb0 0a67 	vmov.f32	s0, s15
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <abs_limit>:
/**
  * @brief  absolute limitation
  * @retval None
  */
void abs_limit(float *a, float ABS_MAX)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	ed87 0a00 	vstr	s0, [r7]
  if (*a > ABS_MAX)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	ed97 7a00 	vldr	s14, [r7]
 8002fa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fac:	d502      	bpl.n	8002fb4 <abs_limit+0x26>
    *a = ABS_MAX;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	601a      	str	r2, [r3, #0]
  if (*a < -ABS_MAX)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	ed93 7a00 	vldr	s14, [r3]
 8002fba:	edd7 7a00 	vldr	s15, [r7]
 8002fbe:	eef1 7a67 	vneg.f32	s15, s15
 8002fc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fca:	d400      	bmi.n	8002fce <abs_limit+0x40>
    *a = -ABS_MAX;
}
 8002fcc:	e006      	b.n	8002fdc <abs_limit+0x4e>
    *a = -ABS_MAX;
 8002fce:	edd7 7a00 	vldr	s15, [r7]
 8002fd2:	eef1 7a67 	vneg.f32	s15, s15
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	edc3 7a00 	vstr	s15, [r3]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <in_out_map>:

/**
  * @brief  map the angle vals for motor angular and radians.
  * @retval mapped radians
  */
float in_out_map(float input, float in_min, float in_max, float out_min, float out_max){
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	ed87 0a05 	vstr	s0, [r7, #20]
 8002ff2:	edc7 0a04 	vstr	s1, [r7, #16]
 8002ff6:	ed87 1a03 	vstr	s2, [r7, #12]
 8002ffa:	edc7 1a02 	vstr	s3, [r7, #8]
 8002ffe:	ed87 2a01 	vstr	s4, [r7, #4]
    return (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8003002:	ed97 7a05 	vldr	s14, [r7, #20]
 8003006:	edd7 7a04 	vldr	s15, [r7, #16]
 800300a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800300e:	edd7 6a01 	vldr	s13, [r7, #4]
 8003012:	edd7 7a02 	vldr	s15, [r7, #8]
 8003016:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800301a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800301e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003022:	edd7 7a04 	vldr	s15, [r7, #16]
 8003026:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003032:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003036:	eeb0 0a67 	vmov.f32	s0, s15
 800303a:	371c      	adds	r7, #28
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <init_folp_filter>:
* @func groups    : filters
* @brief          : Some filters for data process and normailzation
* @created time	  : Jul, 2023
* @author         : Haoran
******************************************************************************/
void init_folp_filter(first_order_low_pass_t *folp, float a){
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	ed87 0a00 	vstr	s0, [r7]
	folp->a = a;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	60da      	str	r2, [r3, #12]
	folp->cur_data = 0;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
	folp->last_output_data = 0;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f04f 0200 	mov.w	r2, #0
 8003064:	609a      	str	r2, [r3, #8]
	folp->output_data = 0;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	605a      	str	r2, [r3, #4]
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <first_order_low_pass_filter>:
  * 			hyperparameter: a[0,1] -> smaller : stability up, sensitivity down (used when data is slightly oscillating)
  * 								 	  larger  : stability down, sensitivity up (used when data rapidly changes)
  * @attention significant phase lags. Good suppression of periodic disturbances tho.
  * @retval    output
  */
float first_order_low_pass_filter(first_order_low_pass_t *folp, float data){
 800307c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
 8003086:	ed87 0a00 	vstr	s0, [r7]
	folp->cur_data = data;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	601a      	str	r2, [r3, #0]
	/* apply equation */
	folp->output_data = folp->a * folp->cur_data + (1.0-folp->a)*folp->last_output_data;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	ed93 7a03 	vldr	s14, [r3, #12]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	edd3 7a00 	vldr	s15, [r3]
 800309c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a0:	ee17 0a90 	vmov	r0, s15
 80030a4:	f7fd fa50 	bl	8000548 <__aeabi_f2d>
 80030a8:	4604      	mov	r4, r0
 80030aa:	460d      	mov	r5, r1
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7fd fa49 	bl	8000548 <__aeabi_f2d>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	f04f 0000 	mov.w	r0, #0
 80030be:	4917      	ldr	r1, [pc, #92]	; (800311c <first_order_low_pass_filter+0xa0>)
 80030c0:	f7fd f8e2 	bl	8000288 <__aeabi_dsub>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4690      	mov	r8, r2
 80030ca:	4699      	mov	r9, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd fa39 	bl	8000548 <__aeabi_f2d>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4640      	mov	r0, r8
 80030dc:	4649      	mov	r1, r9
 80030de:	f7fd fa8b 	bl	80005f8 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4620      	mov	r0, r4
 80030e8:	4629      	mov	r1, r5
 80030ea:	f7fd f8cf 	bl	800028c <__adddf3>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	f7fd fd57 	bl	8000ba8 <__aeabi_d2f>
 80030fa:	4602      	mov	r2, r0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	605a      	str	r2, [r3, #4]
	folp->last_output_data = folp->output_data;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	609a      	str	r2, [r3, #8]
	return folp->output_data;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	ee07 3a90 	vmov	s15, r3
}
 8003110:	eeb0 0a67 	vmov.f32	s0, s15
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800311c:	3ff00000 	.word	0x3ff00000

08003120 <init_ewma_filter>:
  */
float first_order_comp_filter(float a,  float lowPF, float highPF){
	return (a*lowPF + (1.0-a)*highPF);
}

void init_ewma_filter(ewma_filter_t *ewma, float a){
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	ed87 0a00 	vstr	s0, [r7]
	ewma->a = a;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	609a      	str	r2, [r3, #8]
	ewma->output_data = 0;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
	ewma->last_output_data = 0;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	605a      	str	r2, [r3, #4]
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <ewma_filter>:
  * @param[in] main ewna struct
  * @param[in] current value to be filtered
  * @Note	   output = alpha * reading + (1 - alpha) * lastOutput, seems better than mean sliding filter
  * @retval    output
  */
float ewma_filter(ewma_filter_t *ewma, float cur_data) {
 8003150:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
 800315a:	ed87 0a00 	vstr	s0, [r7]
	ewma->output_data = ewma->a * cur_data + (1.0 - ewma->a)*ewma->last_output_data;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	ed93 7a02 	vldr	s14, [r3, #8]
 8003164:	edd7 7a00 	vldr	s15, [r7]
 8003168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316c:	ee17 0a90 	vmov	r0, s15
 8003170:	f7fd f9ea 	bl	8000548 <__aeabi_f2d>
 8003174:	4604      	mov	r4, r0
 8003176:	460d      	mov	r5, r1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd f9e3 	bl	8000548 <__aeabi_f2d>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	f04f 0000 	mov.w	r0, #0
 800318a:	4917      	ldr	r1, [pc, #92]	; (80031e8 <ewma_filter+0x98>)
 800318c:	f7fd f87c 	bl	8000288 <__aeabi_dsub>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4690      	mov	r8, r2
 8003196:	4699      	mov	r9, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f9d3 	bl	8000548 <__aeabi_f2d>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4640      	mov	r0, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	f7fd fa25 	bl	80005f8 <__aeabi_dmul>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4620      	mov	r0, r4
 80031b4:	4629      	mov	r1, r5
 80031b6:	f7fd f869 	bl	800028c <__adddf3>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7fd fcf1 	bl	8000ba8 <__aeabi_d2f>
 80031c6:	4602      	mov	r2, r0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
	ewma->last_output_data = ewma->output_data;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	605a      	str	r2, [r3, #4]
    return ewma->output_data;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	ee07 3a90 	vmov	s15, r3
}
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031e8:	3ff00000 	.word	0x3ff00000

080031ec <init_swm_filter>:


void init_swm_filter(sliding_mean_filter_t *filter, size_t window_size){
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
    /* window size should not be greater than max window size */
	filter->window_size = (window_size <= MAX_WINDOW_SIZE) ? window_size : MAX_WINDOW_SIZE;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80031fc:	bf28      	it	cs
 80031fe:	f44f 7396 	movcs.w	r3, #300	; 0x12c
 8003202:	461a      	mov	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    filter->current_index = 0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
    filter->sum = 0.0f;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	601a      	str	r2, [r3, #0]
    memset(filter->window, 0, filter->window_size * sizeof(float));
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f8d3 34b0 	ldr.w	r3, [r3, #1200]	; 0x4b0
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	461a      	mov	r2, r3
 800322a:	2100      	movs	r1, #0
 800322c:	f00d f84c 	bl	80102c8 <memset>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <Chassis_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* Task execution time (per loop): 1ms */
void Chassis_Task_Func(void const * argument)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* task LD indicator */
  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8003240:	2201      	movs	r2, #1
 8003242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003246:	480d      	ldr	r0, [pc, #52]	; (800327c <Chassis_Task_Func+0x44>)
 8003248:	f008 fe42 	bl	800bed0 <HAL_GPIO_WritePin>

  /* init chassis task */
  chasiss_task_init(&chassis); // For remote debug, set act mode as GIMBAL_CENTER
 800324c:	480c      	ldr	r0, [pc, #48]	; (8003280 <Chassis_Task_Func+0x48>)
 800324e:	f000 f81b 	bl	8003288 <chasiss_task_init>
  	  	  	  	  	  	  	   //					set mode as DEBUG_MODE

  /* set task exec period */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 1ms
 8003252:	2301      	movs	r3, #1
 8003254:	60fb      	str	r3, [r7, #12]

  /* init the task ticks */
  xLastWakeTime = xTaskGetTickCount();
 8003256:	f00c f863 	bl	800f320 <xTaskGetTickCount>
 800325a:	4603      	mov	r3, r0
 800325c:	60bb      	str	r3, [r7, #8]

  for(;;)
  {
	  /* main chassis task function */
	  chassis_rc_mode_selection(&chassis, &rc);
 800325e:	4909      	ldr	r1, [pc, #36]	; (8003284 <Chassis_Task_Func+0x4c>)
 8003260:	4807      	ldr	r0, [pc, #28]	; (8003280 <Chassis_Task_Func+0x48>)
 8003262:	f000 fda5 	bl	8003db0 <chassis_rc_mode_selection>
	  chassis_exec_act_mode(&chassis);
 8003266:	4806      	ldr	r0, [pc, #24]	; (8003280 <Chassis_Task_Func+0x48>)
 8003268:	f000 fbbe 	bl	80039e8 <chassis_exec_act_mode>

	  /* delay until wake time */
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800326c:	f107 0308 	add.w	r3, r7, #8
 8003270:	68f9      	ldr	r1, [r7, #12]
 8003272:	4618      	mov	r0, r3
 8003274:	f00b fe98 	bl	800efa8 <vTaskDelayUntil>
	  chassis_rc_mode_selection(&chassis, &rc);
 8003278:	e7f1      	b.n	800325e <Chassis_Task_Func+0x26>
 800327a:	bf00      	nop
 800327c:	40021c00 	.word	0x40021c00
 8003280:	2000d474 	.word	0x2000d474
 8003284:	2000d6b0 	.word	0x2000d6b0

08003288 <chasiss_task_init>:

/*
 * @brief     the initialization process of the chassis task,
 * @param[in] chassis: main chassis handler
 * */
void chasiss_task_init(Chassis_t* chassis_hdlr){
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
	  /* set pid parameters for chassis motors */
	  for(int i=0;i<max_wheel_num;i++){
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	e020      	b.n	80032d8 <chasiss_task_init+0x50>
		  motor_init(i, max_out_wheel,  max_I_out_wheel, max_err_wheel, kp_wheel, ki_wheel, kd_wheel,
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	b2db      	uxtb	r3, r3
 800329a:	ed9f 5a23 	vldr	s10, [pc, #140]	; 8003328 <chasiss_task_init+0xa0>
 800329e:	eddf 4a22 	vldr	s9, [pc, #136]	; 8003328 <chasiss_task_init+0xa0>
 80032a2:	ed9f 4a21 	vldr	s8, [pc, #132]	; 8003328 <chasiss_task_init+0xa0>
 80032a6:	eddf 3a20 	vldr	s7, [pc, #128]	; 8003328 <chasiss_task_init+0xa0>
 80032aa:	ed9f 3a1f 	vldr	s6, [pc, #124]	; 8003328 <chasiss_task_init+0xa0>
 80032ae:	eddf 2a1e 	vldr	s5, [pc, #120]	; 8003328 <chasiss_task_init+0xa0>
 80032b2:	2200      	movs	r2, #0
 80032b4:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8003328 <chasiss_task_init+0xa0>
 80032b8:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8003328 <chasiss_task_init+0xa0>
 80032bc:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 80032c0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800332c <chasiss_task_init+0xa4>
 80032c4:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8003328 <chasiss_task_init+0xa0>
 80032c8:	f241 3188 	movw	r1, #5000	; 0x1388
 80032cc:	4618      	mov	r0, r3
 80032ce:	f003 fcb1 	bl	8006c34 <motor_init>
	  for(int i=0;i<max_wheel_num;i++){
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b03      	cmp	r3, #3
 80032dc:	dddb      	ble.n	8003296 <chasiss_task_init+0xe>
		  							 0, 0, 0, 0, 0, 0,//no second loop
		  							 0);//spd ff gain
	  }
	  pid_param_init(&(chassis_hdlr->f_pid), 8000, 500, 5000, 550, 0.01, 10); // chassis twist pid init
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	3320      	adds	r3, #32
 80032e2:	eeb2 2a04 	vmov.f32	s4, #36	; 0x41200000  10.0
 80032e6:	eddf 1a12 	vldr	s3, [pc, #72]	; 8003330 <chasiss_task_init+0xa8>
 80032ea:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8003334 <chasiss_task_init+0xac>
 80032ee:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800332c <chasiss_task_init+0xa4>
 80032f2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8003338 <chasiss_task_init+0xb0>
 80032f6:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fc64 	bl	8002bc8 <pid_param_init>
	  /* set initial chassis mode to idle mode or debug mode */
	  chassis_set_mode(chassis_hdlr, IDLE_MODE);
 8003300:	2104      	movs	r1, #4
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fcf0 	bl	8003ce8 <chassis_set_mode>
	  chassis_set_act_mode(chassis_hdlr, INDPET_MODE);// act mode only works when debuging with rc
 8003308:	2103      	movs	r1, #3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fcfc 	bl	8003d08 <chassis_set_act_mode>
	  chassis_hdlr->chassis_gear_mode = AUTO_GEAR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	  /* reset data */
	  chassis_reset_data(chassis_hdlr);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f80f 	bl	800333c <chassis_reset_data>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	00000000 	.word	0x00000000
 800332c:	459c4000 	.word	0x459c4000
 8003330:	3c23d70a 	.word	0x3c23d70a
 8003334:	44098000 	.word	0x44098000
 8003338:	43fa0000 	.word	0x43fa0000

0800333c <chassis_reset_data>:
/*
 * @brief 	  reset all data in the chassis main struct
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_reset_data(Chassis_t *chassis_hdlr){
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	/* init both coordinates */
	chassis_hdlr->vx = 0;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
	chassis_hdlr->vy = 0;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	605a      	str	r2, [r3, #4]
	chassis_hdlr->wz = 0;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	609a      	str	r2, [r3, #8]
	chassis_hdlr->max_vx = chassis_l1_x_speed;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1f      	ldr	r2, [pc, #124]	; (80033dc <chassis_reset_data+0xa0>)
 8003360:	60da      	str	r2, [r3, #12]
	chassis_hdlr->max_vy = chassis_l1_y_speed;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <chassis_reset_data+0xa4>)
 8003366:	611a      	str	r2, [r3, #16]
	chassis_hdlr->max_wz = chassis_l1_w_speed;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <chassis_reset_data+0xa8>)
 800336c:	615a      	str	r2, [r3, #20]

	chassis_hdlr->gimbal_axis.vx = 0;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	665a      	str	r2, [r3, #100]	; 0x64
	chassis_hdlr->gimbal_axis.vy = 0;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	669a      	str	r2, [r3, #104]	; 0x68
	chassis_hdlr->gimbal_axis.wz = 0;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f04f 0200 	mov.w	r2, #0
 8003384:	66da      	str	r2, [r3, #108]	; 0x6c
	chassis_hdlr->gimbal_yaw_rel_angle = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
	chassis_hdlr->gimbal_yaw_abs_angle = 0;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	61da      	str	r2, [r3, #28]

	memset(&(chassis_hdlr->gimbal_axis), 0, sizeof(Gimbal_Axis_t));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3364      	adds	r3, #100	; 0x64
 800339a:	220c      	movs	r2, #12
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f00c ff92 	bl	80102c8 <memset>
	memset(&(chassis_hdlr->ref_power_stat), 0, sizeof(ChassisPowerStat_t));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3374      	adds	r3, #116	; 0x74
 80033a8:	220c      	movs	r2, #12
 80033aa:	2100      	movs	r1, #0
 80033ac:	4618      	mov	r0, r3
 80033ae:	f00c ff8b 	bl	80102c8 <memset>

	/* reset mecanum wheel speed */

	for(int i=0;i<4;i++)
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e009      	b.n	80033cc <chassis_reset_data+0x90>
		chassis_hdlr->mec_spd[i] = 0;
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	332c      	adds	r3, #44	; 0x2c
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4413      	add	r3, r2
 80033c2:	2200      	movs	r2, #0
 80033c4:	809a      	strh	r2, [r3, #4]
	for(int i=0;i<4;i++)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	3301      	adds	r3, #1
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	ddf2      	ble.n	80033b8 <chassis_reset_data+0x7c>
}
 80033d2:	bf00      	nop
 80033d4:	bf00      	nop
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	43960000 	.word	0x43960000
 80033e0:	44160000 	.word	0x44160000
 80033e4:	43af0000 	.word	0x43af0000

080033e8 <mecanum_wheel_calc_speed>:
/*
 * @brief 	  Inversely calculate the mecanum wheel speed
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void mecanum_wheel_calc_speed(Chassis_t *chassis_hdlr){
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	 *	v3  =  [-vx, -vy,  wz] * (rx + ry) * gear_ratio
	 * 	v4  =  [ vx, -vy,  wz] * (rx + ry) * gear_ratio
	 *
	 * */
	/* X type installation */
	chassis_hdlr->mec_spd[wheel_id1] = (int16_t)(  chassis_hdlr->vx + chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	ed93 7a00 	vldr	s14, [r3]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	ee17 0a90 	vmov	r0, s15
 8003404:	f7fd f8a0 	bl	8000548 <__aeabi_f2d>
 8003408:	4604      	mov	r4, r0
 800340a:	460d      	mov	r5, r1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003412:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80035dc <mecanum_wheel_calc_speed+0x1f4>
 8003416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800341a:	ee17 0a90 	vmov	r0, s15
 800341e:	f7fd f893 	bl	8000548 <__aeabi_f2d>
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	4b6e      	ldr	r3, [pc, #440]	; (80035e0 <mecanum_wheel_calc_speed+0x1f8>)
 8003428:	f7fd f8e6 	bl	80005f8 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4620      	mov	r0, r4
 8003432:	4629      	mov	r1, r5
 8003434:	f7fc ff2a 	bl	800028c <__adddf3>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f7fd fb8a 	bl	8000b58 <__aeabi_d2iz>
 8003444:	4603      	mov	r3, r0
 8003446:	b21b      	sxth	r3, r3
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003450:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800345c:	ee17 3a90 	vmov	r3, s15
 8003460:	b21a      	sxth	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	chassis_hdlr->mec_spd[wheel_id2] = (int16_t)(- chassis_hdlr->vx + chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	ed93 7a01 	vldr	s14, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	edd3 7a00 	vldr	s15, [r3]
 8003474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003478:	ee17 0a90 	vmov	r0, s15
 800347c:	f7fd f864 	bl	8000548 <__aeabi_f2d>
 8003480:	4604      	mov	r4, r0
 8003482:	460d      	mov	r5, r1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	edd3 7a02 	vldr	s15, [r3, #8]
 800348a:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80035dc <mecanum_wheel_calc_speed+0x1f4>
 800348e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003492:	ee17 0a90 	vmov	r0, s15
 8003496:	f7fd f857 	bl	8000548 <__aeabi_f2d>
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	4b50      	ldr	r3, [pc, #320]	; (80035e0 <mecanum_wheel_calc_speed+0x1f8>)
 80034a0:	f7fd f8aa 	bl	80005f8 <__aeabi_dmul>
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4620      	mov	r0, r4
 80034aa:	4629      	mov	r1, r5
 80034ac:	f7fc feee 	bl	800028c <__adddf3>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4610      	mov	r0, r2
 80034b6:	4619      	mov	r1, r3
 80034b8:	f7fd fb4e 	bl	8000b58 <__aeabi_d2iz>
 80034bc:	4603      	mov	r3, r0
 80034be:	b21b      	sxth	r3, r3
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034c8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80034cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034d4:	ee17 3a90 	vmov	r3, s15
 80034d8:	b21a      	sxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	chassis_hdlr->mec_spd[wheel_id3] = (int16_t)(- chassis_hdlr->vx - chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	eeb1 7a67 	vneg.f32	s14, s15
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80034f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f4:	ee17 0a90 	vmov	r0, s15
 80034f8:	f7fd f826 	bl	8000548 <__aeabi_f2d>
 80034fc:	4604      	mov	r4, r0
 80034fe:	460d      	mov	r5, r1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	edd3 7a02 	vldr	s15, [r3, #8]
 8003506:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80035dc <mecanum_wheel_calc_speed+0x1f4>
 800350a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350e:	ee17 0a90 	vmov	r0, s15
 8003512:	f7fd f819 	bl	8000548 <__aeabi_f2d>
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <mecanum_wheel_calc_speed+0x1f8>)
 800351c:	f7fd f86c 	bl	80005f8 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4620      	mov	r0, r4
 8003526:	4629      	mov	r1, r5
 8003528:	f7fc feb0 	bl	800028c <__adddf3>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	f7fd fb10 	bl	8000b58 <__aeabi_d2iz>
 8003538:	4603      	mov	r3, r0
 800353a:	b21b      	sxth	r3, r3
 800353c:	ee07 3a90 	vmov	s15, r3
 8003540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003544:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003550:	ee17 3a90 	vmov	r3, s15
 8003554:	b21a      	sxth	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	chassis_hdlr->mec_spd[wheel_id4] = (int16_t)(  chassis_hdlr->vx - chassis_hdlr->vy + chassis_hdlr->wz * (CHASSIS_WHEEL_X_LENGTH + CHASSIS_WHEEL_Y_LENGTH)*0.5) * CHASSIS_MOTOR_DEC_RATIO;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	ed93 7a00 	vldr	s14, [r3]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	edd3 7a01 	vldr	s15, [r3, #4]
 8003568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800356c:	ee17 0a90 	vmov	r0, s15
 8003570:	f7fc ffea 	bl	8000548 <__aeabi_f2d>
 8003574:	4604      	mov	r4, r0
 8003576:	460d      	mov	r5, r1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	edd3 7a02 	vldr	s15, [r3, #8]
 800357e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80035dc <mecanum_wheel_calc_speed+0x1f4>
 8003582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003586:	ee17 0a90 	vmov	r0, s15
 800358a:	f7fc ffdd 	bl	8000548 <__aeabi_f2d>
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <mecanum_wheel_calc_speed+0x1f8>)
 8003594:	f7fd f830 	bl	80005f8 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4620      	mov	r0, r4
 800359e:	4629      	mov	r1, r5
 80035a0:	f7fc fe74 	bl	800028c <__adddf3>
 80035a4:	4602      	mov	r2, r0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4610      	mov	r0, r2
 80035aa:	4619      	mov	r1, r3
 80035ac:	f7fd fad4 	bl	8000b58 <__aeabi_d2iz>
 80035b0:	4603      	mov	r3, r0
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	ee07 3a90 	vmov	s15, r3
 80035b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035bc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80035c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035c8:	ee17 3a90 	vmov	r3, s15
 80035cc:	b21a      	sxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	/* may apply super super capacity gain here */
	/* may apply level up gain and power limit here when we have referee system feedback */
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bdb0      	pop	{r4, r5, r7, pc}
 80035dc:	3f4ccccd 	.word	0x3f4ccccd
 80035e0:	3fe00000 	.word	0x3fe00000

080035e4 <chassis_execute>:
/*
 * @brief 	  Inversely calculate the mecanum wheel speed
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_execute(Chassis_t *chassis_hdlr){
 80035e4:	b590      	push	{r4, r7, lr}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
	mecanum_wheel_calc_speed(chassis_hdlr);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff fefb 	bl	80033e8 <mecanum_wheel_calc_speed>
	/* Chassis Power Management Starts Here */
//	chassis_power_limit_referee(chassis_hdlr);
	chassis_power_limit_local(chassis_hdlr, chassis_l1_power);
#endif
	/* max +-16834 */
	for(int i=0;i<4;i++){
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e028      	b.n	800364a <chassis_execute+0x66>
		VAL_LIMIT(chassis_hdlr->mec_spd[i], -CHASSIS_MAX_SPEED,CHASSIS_MAX_SPEED);
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	332c      	adds	r3, #44	; 0x2c
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	4413      	add	r3, r2
 8003602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003606:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <chassis_execute+0xa0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	da08      	bge.n	800361e <chassis_execute+0x3a>
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	332c      	adds	r3, #44	; 0x2c
 8003612:	005b      	lsls	r3, r3, #1
 8003614:	4413      	add	r3, r2
 8003616:	f64b 623e 	movw	r2, #48702	; 0xbe3e
 800361a:	809a      	strh	r2, [r3, #4]
 800361c:	e012      	b.n	8003644 <chassis_execute+0x60>
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	332c      	adds	r3, #44	; 0x2c
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	4413      	add	r3, r2
 8003628:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800362c:	f244 12c1 	movw	r2, #16833	; 0x41c1
 8003630:	4293      	cmp	r3, r2
 8003632:	dd07      	ble.n	8003644 <chassis_execute+0x60>
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	332c      	adds	r3, #44	; 0x2c
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	4413      	add	r3, r2
 800363e:	f244 12c2 	movw	r2, #16834	; 0x41c2
 8003642:	809a      	strh	r2, [r3, #4]
	for(int i=0;i<4;i++){
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b03      	cmp	r3, #3
 800364e:	ddd3      	ble.n	80035f8 <chassis_execute+0x14>
	}
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8003656:	4618      	mov	r0, r3
						  chassis_hdlr->mec_spd[wheel_id2],
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 800365e:	4619      	mov	r1, r3
						  chassis_hdlr->mec_spd[wheel_id3],
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 8003666:	461a      	mov	r2, r3
						  chassis_hdlr->mec_spd[wheel_id4],
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
	set_motor_can_current(chassis_hdlr->mec_spd[wheel_id1],
 800366e:	461c      	mov	r4, r3
 8003670:	2300      	movs	r3, #0
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	4623      	mov	r3, r4
 8003676:	f003 fc6f 	bl	8006f58 <set_motor_can_current>
						  SINGLE_LOOP_PID_CONTROL);
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bd90      	pop	{r4, r7, pc}
 8003682:	bf00      	nop
 8003684:	ffffbe3f 	.word	0xffffbe3f

08003688 <chassis_update_gimbal_coord>:
/*
 * @brief 	  Update chassis gimbal axis data through rc
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_update_gimbal_coord(Chassis_t *chassis_hdlr, RemoteControl_t *rc_hdlr){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003698:	2b00      	cmp	r3, #0
 800369a:	d11e      	bne.n	80036da <chassis_update_gimbal_coord+0x52>
		/* controller data is not required to be filtered */
		chassis_hdlr->gimbal_axis.vx = rc_hdlr->ctrl.ch3; // apply vx data here
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80036a2:	ee07 3a90 	vmov	s15, r3
 80036a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		chassis_hdlr->gimbal_axis.vy = rc_hdlr->ctrl.ch2; // apply vy data here
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		chassis_hdlr->gimbal_axis.wz = rc_hdlr->ctrl.ch0; // apply wz data here
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
				if(chassis_hdlr->gimbal_axis.wz > chassis_hdlr->max_vy)
					chassis_hdlr->gimbal_axis.wz = chassis_hdlr->max_vy;
			}
		}
	}
}
 80036d8:	e155      	b.n	8003986 <chassis_update_gimbal_coord+0x2fe>
	else if(rc_hdlr->control_mode == PC_MODE){
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	f040 8150 	bne.w	8003986 <chassis_update_gimbal_coord+0x2fe>
		if(rc_hdlr->pc.key.W.status == PRESSED && rc_hdlr->pc.key.S.status == PRESSED)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d109      	bne.n	8003704 <chassis_update_gimbal_coord+0x7c>
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d104      	bne.n	8003704 <chassis_update_gimbal_coord+0x7c>
			chassis_hdlr->gimbal_axis.vx = 0;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	665a      	str	r2, [r3, #100]	; 0x64
 8003702:	e012      	b.n	800372a <chassis_update_gimbal_coord+0xa2>
		else if(rc_hdlr->pc.key.W.status != PRESSED && rc_hdlr->pc.key.S.status != PRESSED){
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b03      	cmp	r3, #3
 800370c:	d00d      	beq.n	800372a <chassis_update_gimbal_coord+0xa2>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003714:	2b03      	cmp	r3, #3
 8003716:	d008      	beq.n	800372a <chassis_update_gimbal_coord+0xa2>
			chassis_brake(&chassis_hdlr->gimbal_axis.vx, 1.0f, 2.0f);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3364      	adds	r3, #100	; 0x64
 800371c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003720:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003724:	4618      	mov	r0, r3
 8003726:	f000 faff 	bl	8003d28 <chassis_brake>
		if(rc_hdlr->pc.key.W.status == PRESSED && rc_hdlr->pc.key.S.status != PRESSED){// check holding
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003730:	2b03      	cmp	r3, #3
 8003732:	d11d      	bne.n	8003770 <chassis_update_gimbal_coord+0xe8>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800373a:	2b03      	cmp	r3, #3
 800373c:	d018      	beq.n	8003770 <chassis_update_gimbal_coord+0xe8>
			chassis_hdlr->gimbal_axis.vx += 0.5f; // apply ramp-like mode to engage chassis
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8003744:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003748:	ee77 7a87 	vadd.f32	s15, s15, s14
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			if(chassis_hdlr->gimbal_axis.vx > chassis_hdlr->max_vx)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	edd3 7a03 	vldr	s15, [r3, #12]
 800375e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003766:	dd03      	ble.n	8003770 <chassis_update_gimbal_coord+0xe8>
				chassis_hdlr->gimbal_axis.vx = chassis_hdlr->max_vx;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	665a      	str	r2, [r3, #100]	; 0x64
		if(rc_hdlr->pc.key.S.status == PRESSED && rc_hdlr->pc.key.W.status != PRESSED){// check holding
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003776:	2b03      	cmp	r3, #3
 8003778:	d123      	bne.n	80037c2 <chassis_update_gimbal_coord+0x13a>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b03      	cmp	r3, #3
 8003782:	d01e      	beq.n	80037c2 <chassis_update_gimbal_coord+0x13a>
			chassis_hdlr->gimbal_axis.vx -= 0.5f; // apply ramp-like mode to engage chassis
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800378a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800378e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			if(chassis_hdlr->gimbal_axis.vx < -chassis_hdlr->max_vx)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80037a4:	eef1 7a67 	vneg.f32	s15, s15
 80037a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b0:	d507      	bpl.n	80037c2 <chassis_update_gimbal_coord+0x13a>
				chassis_hdlr->gimbal_axis.vx = -chassis_hdlr->max_vx;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80037b8:	eef1 7a67 	vneg.f32	s15, s15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
		if(rc_hdlr->pc.key.A.status == PRESSED && rc_hdlr->pc.key.D.status == PRESSED)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d109      	bne.n	80037e0 <chassis_update_gimbal_coord+0x158>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d104      	bne.n	80037e0 <chassis_update_gimbal_coord+0x158>
			chassis_hdlr->gimbal_axis.vy = 0;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	669a      	str	r2, [r3, #104]	; 0x68
 80037de:	e012      	b.n	8003806 <chassis_update_gimbal_coord+0x17e>
		else if(rc_hdlr->pc.key.A.status != PRESSED && rc_hdlr->pc.key.D.status != PRESSED){
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d00d      	beq.n	8003806 <chassis_update_gimbal_coord+0x17e>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d008      	beq.n	8003806 <chassis_update_gimbal_coord+0x17e>
			chassis_brake(&chassis_hdlr->gimbal_axis.vy, 1.0f, 2.0f);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3368      	adds	r3, #104	; 0x68
 80037f8:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80037fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fa91 	bl	8003d28 <chassis_brake>
		if(rc_hdlr->pc.key.A.status == PRESSED && rc_hdlr->pc.key.D.status != PRESSED){// check holding
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800380c:	2b03      	cmp	r3, #3
 800380e:	d123      	bne.n	8003858 <chassis_update_gimbal_coord+0x1d0>
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003816:	2b03      	cmp	r3, #3
 8003818:	d01e      	beq.n	8003858 <chassis_update_gimbal_coord+0x1d0>
			chassis_hdlr->gimbal_axis.vy -= 0.5f;// apply ramp-like mode to engage chassis
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003820:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003824:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			if(chassis_hdlr->gimbal_axis.vy < -chassis_hdlr->max_vy)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	edd3 7a04 	vldr	s15, [r3, #16]
 800383a:	eef1 7a67 	vneg.f32	s15, s15
 800383e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003846:	d507      	bpl.n	8003858 <chassis_update_gimbal_coord+0x1d0>
				chassis_hdlr->gimbal_axis.vy = -chassis_hdlr->max_vy;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	edd3 7a04 	vldr	s15, [r3, #16]
 800384e:	eef1 7a67 	vneg.f32	s15, s15
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
		if(rc_hdlr->pc.key.D.status == PRESSED && rc_hdlr->pc.key.A.status != PRESSED){// check holding
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800385e:	2b03      	cmp	r3, #3
 8003860:	d11d      	bne.n	800389e <chassis_update_gimbal_coord+0x216>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003868:	2b03      	cmp	r3, #3
 800386a:	d018      	beq.n	800389e <chassis_update_gimbal_coord+0x216>
			chassis_hdlr->gimbal_axis.vy += 0.5f;// apply ramp-like mode to engage chassis
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003872:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003876:	ee77 7a87 	vadd.f32	s15, s15, s14
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			if(chassis_hdlr->gimbal_axis.vy > chassis_hdlr->max_vy)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	edd3 7a04 	vldr	s15, [r3, #16]
 800388c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003894:	dd03      	ble.n	800389e <chassis_update_gimbal_coord+0x216>
				chassis_hdlr->gimbal_axis.vy = chassis_hdlr->max_vy;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	669a      	str	r2, [r3, #104]	; 0x68
		if(chassis_hdlr->chassis_act_mode == GIMBAL_FOLLOW){
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d16e      	bne.n	8003986 <chassis_update_gimbal_coord+0x2fe>
			if(rc_hdlr->pc.key.Q.status == PRESSED && rc_hdlr->pc.key.E.status == PRESSED)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d109      	bne.n	80038c6 <chassis_update_gimbal_coord+0x23e>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d104      	bne.n	80038c6 <chassis_update_gimbal_coord+0x23e>
				chassis_hdlr->gimbal_axis.wz = 0;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80038c4:	e012      	b.n	80038ec <chassis_update_gimbal_coord+0x264>
			else if(rc_hdlr->pc.key.Q.status != PRESSED && rc_hdlr->pc.key.E.status != PRESSED){
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80038cc:	2b03      	cmp	r3, #3
 80038ce:	d00d      	beq.n	80038ec <chassis_update_gimbal_coord+0x264>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d008      	beq.n	80038ec <chassis_update_gimbal_coord+0x264>
				chassis_brake(&chassis_hdlr->gimbal_axis.wz, 1.0f, 2.0f);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	336c      	adds	r3, #108	; 0x6c
 80038de:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80038e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fa1e 	bl	8003d28 <chassis_brake>
			if(rc_hdlr->pc.key.Q.status == PRESSED && rc_hdlr->pc.key.E.status != PRESSED){// check holding
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80038f2:	2b03      	cmp	r3, #3
 80038f4:	d123      	bne.n	800393e <chassis_update_gimbal_coord+0x2b6>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d01e      	beq.n	800393e <chassis_update_gimbal_coord+0x2b6>
				chassis_hdlr->gimbal_axis.wz -= 0.5f;// apply ramp-like mode to engage chassis
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003906:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800390a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
				if(chassis_hdlr->gimbal_axis.wz < -chassis_hdlr->max_wz)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003920:	eef1 7a67 	vneg.f32	s15, s15
 8003924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392c:	d507      	bpl.n	800393e <chassis_update_gimbal_coord+0x2b6>
					chassis_hdlr->gimbal_axis.wz = -chassis_hdlr->max_wz;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	edd3 7a05 	vldr	s15, [r3, #20]
 8003934:	eef1 7a67 	vneg.f32	s15, s15
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			if(rc_hdlr->pc.key.E.status == PRESSED && rc_hdlr->pc.key.Q.status != PRESSED){// check holding
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8003944:	2b03      	cmp	r3, #3
 8003946:	d11e      	bne.n	8003986 <chassis_update_gimbal_coord+0x2fe>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800394e:	2b03      	cmp	r3, #3
 8003950:	d019      	beq.n	8003986 <chassis_update_gimbal_coord+0x2fe>
				chassis_hdlr->gimbal_axis.wz += 0.5f;// apply ramp-like mode to engage chassis
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8003958:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800395c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
				if(chassis_hdlr->gimbal_axis.wz > chassis_hdlr->max_vy)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003972:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397a:	dc00      	bgt.n	800397e <chassis_update_gimbal_coord+0x2f6>
}
 800397c:	e003      	b.n	8003986 <chassis_update_gimbal_coord+0x2fe>
					chassis_hdlr->gimbal_axis.wz = chassis_hdlr->max_vy;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
	...

08003990 <chassis_update_chassis_coord>:
/*
 * @brief 	  Update chassis ground data through rc
 * @param[in] chassis_hdlr:chassis main struct
 * @retval    None
 */
void chassis_update_chassis_coord(Chassis_t *chassis_hdlr, RemoteControl_t *rc_hdlr){
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
	/*chassis coordinates only for debugging purpose, thus no pc control processing*/
	chassis_hdlr->vx = rc.ctrl.ch3; // apply vx data here
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <chassis_update_chassis_coord+0x54>)
 800399c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	edc3 7a00 	vstr	s15, [r3]
	chassis_hdlr->vy = rc.ctrl.ch2; // apply vy data here
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <chassis_update_chassis_coord+0x54>)
 80039b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	edc3 7a01 	vstr	s15, [r3, #4]
	chassis_hdlr->wz = rc.ctrl.ch0;
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <chassis_update_chassis_coord+0x54>)
 80039c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039c8:	ee07 3a90 	vmov	s15, r3
 80039cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000d6b0 	.word	0x2000d6b0

080039e8 <chassis_exec_act_mode>:
 *			follow gimbal center| move_along gimbal coordinate |
 *			self-spinning while follow the gimbal coordinate | independent(ground coordinate)
 */
//FIXME: Didn't consider the acceleration. Acceleration can help us better explicit the buffer energy.
//		 But with more critical strict on power management.
void chassis_exec_act_mode(Chassis_t *chassis_hdlr){
 80039e8:	b580      	push	{r7, lr}
 80039ea:	ed2d 8b02 	vpush	{d8}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
	}
	else
		chassis_gyro_flag = 1;//start the timer counter interrupt
#endif

	if(chassis_hdlr->chassis_mode == IDLE_MODE){
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d10c      	bne.n	8003a18 <chassis_exec_act_mode+0x30>
		chassis_hdlr->vx = 0;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	601a      	str	r2, [r3, #0]
		chassis_hdlr->vy = 0;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	605a      	str	r2, [r3, #4]
		chassis_hdlr->wz = 0;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
 8003a16:	e0d8      	b.n	8003bca <chassis_exec_act_mode+0x1e2>
		}
	else if(chassis_hdlr->chassis_act_mode == GIMBAL_CENTER){ // gyro mode
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d11c      	bne.n	8003a5c <chassis_exec_act_mode+0x74>
		/* The front of chassis always chases gimbal yaw's ecd center (aka Twist mode) */
		chassis_hdlr->vx = chassis_hdlr->gimbal_axis.vx;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	601a      	str	r2, [r3, #0]
		chassis_hdlr->vy = chassis_hdlr->gimbal_axis.vy;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	605a      	str	r2, [r3, #4]
		chassis_hdlr->wz = -pid_single_loop_control(0, &(chassis_hdlr->f_pid), chassis_hdlr->gimbal_yaw_rel_angle);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f103 0220 	add.w	r2, r3, #32
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a3e:	eef0 0a67 	vmov.f32	s1, s15
 8003a42:	4610      	mov	r0, r2
 8003a44:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8003cdc <chassis_exec_act_mode+0x2f4>
 8003a48:	f7ff f992 	bl	8002d70 <pid_single_loop_control>
 8003a4c:	eef0 7a40 	vmov.f32	s15, s0
 8003a50:	eef1 7a67 	vneg.f32	s15, s15
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	edc3 7a02 	vstr	s15, [r3, #8]
 8003a5a:	e0b6      	b.n	8003bca <chassis_exec_act_mode+0x1e2>
	}
	else if(chassis_hdlr->chassis_act_mode == GIMBAL_FOLLOW){ // encoder mode
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d155      	bne.n	8003b12 <chassis_exec_act_mode+0x12a>
		/* The chassis always move along gimbal's coord/axis , but not chasing yaw's center */
		chassis_hdlr->vx = chassis_hdlr->gimbal_axis.vx * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle) - chassis_hdlr->gimbal_axis.vy * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	ed93 8a19 	vldr	s16, [r3, #100]	; 0x64
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a72:	eeb0 0a67 	vmov.f32	s0, s15
 8003a76:	f00c fb7f 	bl	8010178 <arm_cos_f32>
 8003a7a:	eef0 7a40 	vmov.f32	s15, s0
 8003a7e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	edd3 8a1a 	vldr	s17, [r3, #104]	; 0x68
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a92:	f00c fb23 	bl	80100dc <arm_sin_f32>
 8003a96:	eef0 7a40 	vmov.f32	s15, s0
 8003a9a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003a9e:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	edc3 7a00 	vstr	s15, [r3]
		chassis_hdlr->vy = chassis_hdlr->gimbal_axis.vx * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle) + chassis_hdlr->gimbal_axis.vy * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	ed93 8a19 	vldr	s16, [r3, #100]	; 0x64
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ab4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab8:	f00c fb10 	bl	80100dc <arm_sin_f32>
 8003abc:	eef0 7a40 	vmov.f32	s15, s0
 8003ac0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	edd3 8a1a 	vldr	s17, [r3, #104]	; 0x68
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	edd3 7a06 	vldr	s15, [r3, #24]
 8003ad0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad4:	f00c fb50 	bl	8010178 <arm_cos_f32>
 8003ad8:	eef0 7a40 	vmov.f32	s15, s0
 8003adc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003ae0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	edc3 7a01 	vstr	s15, [r3, #4]
		if(rc.control_mode == CTRLER_MODE)
 8003aea:	4b7d      	ldr	r3, [pc, #500]	; (8003ce0 <chassis_exec_act_mode+0x2f8>)
 8003aec:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <chassis_exec_act_mode+0x116>
			chassis_hdlr->wz = 0;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	e065      	b.n	8003bca <chassis_exec_act_mode+0x1e2>
		else if(rc.control_mode == PC_MODE)
 8003afe:	4b78      	ldr	r3, [pc, #480]	; (8003ce0 <chassis_exec_act_mode+0x2f8>)
 8003b00:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d160      	bne.n	8003bca <chassis_exec_act_mode+0x1e2>
			chassis_hdlr->wz = chassis_hdlr->gimbal_axis.wz;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	e05b      	b.n	8003bca <chassis_exec_act_mode+0x1e2>
	}
	else if(chassis_hdlr->chassis_act_mode == SELF_GYRO){ // gyro or encoder mode
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d145      	bne.n	8003ba8 <chassis_exec_act_mode+0x1c0>
		/* The chassis always move along gimbal's coord/axis , meanwhile spinning the chassis with a fixed speed */
		chassis_hdlr->vx = chassis_hdlr->gimbal_axis.vx * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle) - chassis_hdlr->gimbal_axis.vy * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	ed93 8a19 	vldr	s16, [r3, #100]	; 0x64
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b28:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2c:	f00c fb24 	bl	8010178 <arm_cos_f32>
 8003b30:	eef0 7a40 	vmov.f32	s15, s0
 8003b34:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	edd3 8a1a 	vldr	s17, [r3, #104]	; 0x68
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b44:	eeb0 0a67 	vmov.f32	s0, s15
 8003b48:	f00c fac8 	bl	80100dc <arm_sin_f32>
 8003b4c:	eef0 7a40 	vmov.f32	s15, s0
 8003b50:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003b54:	ee78 7a67 	vsub.f32	s15, s16, s15
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	edc3 7a00 	vstr	s15, [r3]
		chassis_hdlr->vy = chassis_hdlr->gimbal_axis.vx * arm_sin_f32(chassis_hdlr->gimbal_yaw_rel_angle) + chassis_hdlr->gimbal_axis.vy * arm_cos_f32(chassis_hdlr->gimbal_yaw_rel_angle);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	ed93 8a19 	vldr	s16, [r3, #100]	; 0x64
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6e:	f00c fab5 	bl	80100dc <arm_sin_f32>
 8003b72:	eef0 7a40 	vmov.f32	s15, s0
 8003b76:	ee28 8a27 	vmul.f32	s16, s16, s15
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	edd3 8a1a 	vldr	s17, [r3, #104]	; 0x68
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b86:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8a:	f00c faf5 	bl	8010178 <arm_cos_f32>
 8003b8e:	eef0 7a40 	vmov.f32	s15, s0
 8003b92:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003b96:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	edc3 7a01 	vstr	s15, [r3, #4]
		/* for robots with slipring */
#ifdef WITH_SLIPRING
		//FIXME apply differential rotary control or use Q&E to change direction
		chassis_hdlr->wz =  CHASSIS_ECD_CONST_OMEGA * 3.5f;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a50      	ldr	r2, [pc, #320]	; (8003ce4 <chassis_exec_act_mode+0x2fc>)
 8003ba4:	609a      	str	r2, [r3, #8]
 8003ba6:	e010      	b.n	8003bca <chassis_exec_act_mode+0x1e2>
			chassis_hdlr->wz =  -CHASSIS_ECD_CONST_OMEGA * 2.0f;
		else
			chassis_gyro_counter = 0;
#endif
	}
	else if(chassis_hdlr->chassis_act_mode == INDPET_MODE){ // encoder mode
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d10b      	bne.n	8003bca <chassis_exec_act_mode+0x1e2>
		/* The chassis follow the ground axis
		 * Also can be used as sentry's chassis cmd
		 *  */
		chassis_hdlr->vx = chassis_hdlr->vx;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	601a      	str	r2, [r3, #0]
		chassis_hdlr->vy = chassis_hdlr->vy;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	605a      	str	r2, [r3, #4]
		chassis_hdlr->wz = chassis_hdlr->wz;//CHASSIS_SLEF_GYRO_ANG_VEL * 1.0f;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	609a      	str	r2, [r3, #8]
	}

	/* set limit axis speed */
	VAL_LIMIT(chassis_hdlr->vx, -chassis_hdlr->max_vx, chassis_hdlr->max_vx);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	ed93 7a00 	vldr	s14, [r3]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bd6:	eef1 7a67 	vneg.f32	s15, s15
 8003bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	d808      	bhi.n	8003bf6 <chassis_exec_act_mode+0x20e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003bea:	eef1 7a67 	vneg.f32	s15, s15
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	edc3 7a00 	vstr	s15, [r3]
 8003bf4:	e00e      	b.n	8003c14 <chassis_exec_act_mode+0x22c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	ed93 7a00 	vldr	s14, [r3]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0a:	db03      	blt.n	8003c14 <chassis_exec_act_mode+0x22c>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68da      	ldr	r2, [r3, #12]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	601a      	str	r2, [r3, #0]
	VAL_LIMIT(chassis_hdlr->vy, -chassis_hdlr->max_vy, chassis_hdlr->max_vy);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c20:	eef1 7a67 	vneg.f32	s15, s15
 8003c24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2c:	d808      	bhi.n	8003c40 <chassis_exec_act_mode+0x258>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c34:	eef1 7a67 	vneg.f32	s15, s15
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	edc3 7a01 	vstr	s15, [r3, #4]
 8003c3e:	e00e      	b.n	8003c5e <chassis_exec_act_mode+0x276>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	edd3 7a04 	vldr	s15, [r3, #16]
 8003c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c54:	db03      	blt.n	8003c5e <chassis_exec_act_mode+0x276>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691a      	ldr	r2, [r3, #16]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	605a      	str	r2, [r3, #4]
	VAL_LIMIT(chassis_hdlr->wz, -chassis_hdlr->max_wz, chassis_hdlr->max_wz);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c6a:	eef1 7a67 	vneg.f32	s15, s15
 8003c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c76:	d808      	bhi.n	8003c8a <chassis_exec_act_mode+0x2a2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c7e:	eef1 7a67 	vneg.f32	s15, s15
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	edc3 7a02 	vstr	s15, [r3, #8]
 8003c88:	e00e      	b.n	8003ca8 <chassis_exec_act_mode+0x2c0>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	edd3 7a05 	vldr	s15, [r3, #20]
 8003c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c9e:	db03      	blt.n	8003ca8 <chassis_exec_act_mode+0x2c0>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	609a      	str	r2, [r3, #8]

	if(fabs(chassis_hdlr->wz) < 30.0f)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	edd3 7a02 	vldr	s15, [r3, #8]
 8003cae:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cbe:	d503      	bpl.n	8003cc8 <chassis_exec_act_mode+0x2e0>
		/* PID dead zone risk management */
		chassis_hdlr->wz = 0;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]

	/* execute the cmd */
	chassis_execute(chassis_hdlr);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7ff fc8b 	bl	80035e4 <chassis_execute>

}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	ecbd 8b02 	vpop	{d8}
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	00000000 	.word	0x00000000
 8003ce0:	2000d6b0 	.word	0x2000d6b0
 8003ce4:	43d20000 	.word	0x43d20000

08003ce8 <chassis_set_mode>:

/*
 * @brief set chassis mode
 *			patrol | detected armor | Auto_Poilt | IDLE(no action) | Debug(remote control)
 */
void chassis_set_mode(Chassis_t *chassis_hdlr, BoardMode_t mode){
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	70fb      	strb	r3, [r7, #3]
	chassis_hdlr->chassis_mode = mode;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	78fa      	ldrb	r2, [r7, #3]
 8003cf8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <chassis_set_act_mode>:
/*
 * @brief set chassis action mode
 *			follow gimbal center| move_along gimbal coordinate |
 *			self-spinning while follow the gimbal coordinate | independent(ground coordinate)
 */
void chassis_set_act_mode(Chassis_t *chassis_hdlr, BoardActMode_t mode){
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
	chassis_hdlr->chassis_act_mode = mode;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <chassis_brake>:
/*
 * @brief brake the chassis slowly to avoid instant power overlimt
 */
void chassis_brake(float *vel, float ramp_step, float stop_threshold){
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d34:	edc7 0a01 	vstr	s1, [r7, #4]
	if(*vel > 0)// both release -> brake
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	edd3 7a00 	vldr	s15, [r3]
 8003d3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d46:	dd0a      	ble.n	8003d5e <chassis_brake+0x36>
		*vel -= ramp_step;//brake need to be quicker
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	ed93 7a00 	vldr	s14, [r3]
 8003d4e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	edc3 7a00 	vstr	s15, [r3]
 8003d5c:	e011      	b.n	8003d82 <chassis_brake+0x5a>
	else if(*vel < 0)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6c:	d509      	bpl.n	8003d82 <chassis_brake+0x5a>
		*vel += ramp_step;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	ed93 7a00 	vldr	s14, [r3]
 8003d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	edc3 7a00 	vstr	s15, [r3]
	if(fabs(*vel) < stop_threshold)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	edd3 7a00 	vldr	s15, [r3]
 8003d88:	eef0 7ae7 	vabs.f32	s15, s15
 8003d8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003d90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d98:	dc00      	bgt.n	8003d9c <chassis_brake+0x74>
		*vel = 0;
}
 8003d9a:	e003      	b.n	8003da4 <chassis_brake+0x7c>
		*vel = 0;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <chassis_rc_mode_selection>:
/*
 * @brief     mode selection based on remote controller
 * @param[in] chassis: main chassis handler
 * @param[in] rc: main remote controller handler
 * */
static void chassis_rc_mode_selection(Chassis_t* chassis_hdlr, RemoteControl_t *rc_hdlr){
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
	BoardMode_t    board_mode = IDLE_MODE;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	73fb      	strb	r3, [r7, #15]
	BoardActMode_t act_mode   = INDPET_MODE;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	73bb      	strb	r3, [r7, #14]

	/* controller end mode selection */
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d139      	bne.n	8003e40 <chassis_rc_mode_selection+0x90>
		if(rc_hdlr->ctrl.s1 == SW_MID){
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	7a1b      	ldrb	r3, [r3, #8]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d102      	bne.n	8003dda <chassis_rc_mode_selection+0x2a>
			/* if s1 down, then just shut down everything */
			board_mode = IDLE_MODE;
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	73fb      	strb	r3, [r7, #15]
 8003dd8:	e0ac      	b.n	8003f34 <chassis_rc_mode_selection+0x184>
		}
		else{
			/* else just set up to patrol mode */
			board_mode = PATROL_MODE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
			if(rc_hdlr->ctrl.s1 == SW_UP){
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	7a1b      	ldrb	r3, [r3, #8]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d110      	bne.n	8003e08 <chassis_rc_mode_selection+0x58>
				/* chassis follow gimbal center while follow yaw axis */
				act_mode = GIMBAL_CENTER;
 8003de6:	2300      	movs	r3, #0
 8003de8:	73bb      	strb	r3, [r7, #14]
	#ifdef MODE_DEBUG
				/* LD indicator, For debug purposes only */
	#endif
				if(rc_hdlr->ctrl.s1 == SW_UP && rc_hdlr->ctrl.s2 == SW_DOWN){
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	7a1b      	ldrb	r3, [r3, #8]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d105      	bne.n	8003dfe <chassis_rc_mode_selection+0x4e>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	7a5b      	ldrb	r3, [r3, #9]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d101      	bne.n	8003dfe <chassis_rc_mode_selection+0x4e>
					/* spinning chassis while follow yaw axis */
					act_mode = SELF_GYRO;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	73bb      	strb	r3, [r7, #14]
	#ifdef MODE_DEBUG
					/* LD indicator, For debug purposes only */
	#endif
				}
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003dfe:	6839      	ldr	r1, [r7, #0]
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff fc41 	bl	8003688 <chassis_update_gimbal_coord>
 8003e06:	e095      	b.n	8003f34 <chassis_rc_mode_selection+0x184>
			}
			else if(rc_hdlr->ctrl.s1 == SW_DOWN){
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	7a1b      	ldrb	r3, [r3, #8]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	f040 8091 	bne.w	8003f34 <chassis_rc_mode_selection+0x184>
				/* chassis only follow yaw axis */
				act_mode = GIMBAL_FOLLOW;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73bb      	strb	r3, [r7, #14]
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003e16:	6839      	ldr	r1, [r7, #0]
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff fc35 	bl	8003688 <chassis_update_gimbal_coord>
					if(rc_hdlr->ctrl.s1 == SW_DOWN && rc_hdlr->ctrl.s2 == SW_DOWN){
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	7a1b      	ldrb	r3, [r3, #8]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	f040 8086 	bne.w	8003f34 <chassis_rc_mode_selection+0x184>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	7a5b      	ldrb	r3, [r3, #9]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	f040 8081 	bne.w	8003f34 <chassis_rc_mode_selection+0x184>
						/* independent mode */
						act_mode = INDPET_MODE;
 8003e32:	2303      	movs	r3, #3
 8003e34:	73bb      	strb	r3, [r7, #14]
#ifdef MODE_DEBUG
					/* LD indicator, For debug purposes only */
#endif
						/* update ground axis */
						chassis_update_chassis_coord(chassis_hdlr, rc_hdlr);
 8003e36:	6839      	ldr	r1, [r7, #0]
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fda9 	bl	8003990 <chassis_update_chassis_coord>
 8003e3e:	e079      	b.n	8003f34 <chassis_rc_mode_selection+0x184>
	 * |			 |--------------------------------------------------------   | - Gyro mode
	 * |	         |  	-1        |  	   -1         |	SELF_GYRO	     | __|
	 * -----------------------------------------------------------------------
	 * */
	/* pc end mode selection */
	else if(rc_hdlr->control_mode == PC_MODE){
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d174      	bne.n	8003f34 <chassis_rc_mode_selection+0x184>
		if(rc_hdlr->pc.key.key_buffer & KEY_BOARD_G){
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <chassis_rc_mode_selection+0xae>
				/* if s1 down, then just shut down everything */
				board_mode = IDLE_MODE;
 8003e58:	2304      	movs	r3, #4
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	e06a      	b.n	8003f34 <chassis_rc_mode_selection+0x184>
			}
		else{
			/* else just set up to patrol mode */
			board_mode = PATROL_MODE;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	73fb      	strb	r3, [r7, #15]
			/* update keys state */
//			if(rc_hdlr->pc.key.key_buffer & KEY_BOARD_CTRL)
			if(rc_get_key_status(&rc_hdlr->pc.key.Ctrl) == RELEASED_TO_PRESS)// check rising edge
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	3354      	adds	r3, #84	; 0x54
 8003e66:	4618      	mov	r0, r3
 8003e68:	f002 fa86 	bl	8006378 <rc_get_key_status>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d108      	bne.n	8003e84 <chassis_rc_mode_selection+0xd4>
				chassis_pc_mode_toggle = -chassis_pc_mode_toggle;
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <chassis_rc_mode_selection+0x1a0>)
 8003e74:	f993 3000 	ldrsb.w	r3, [r3]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	425b      	negs	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	b25a      	sxtb	r2, r3
 8003e80:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <chassis_rc_mode_selection+0x1a0>)
 8003e82:	701a      	strb	r2, [r3, #0]
			if(rc_get_key_status(&rc_hdlr->pc.key.F) == RELEASED_TO_PRESS) // check rising edge
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	3357      	adds	r3, #87	; 0x57
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f002 fa75 	bl	8006378 <rc_get_key_status>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d108      	bne.n	8003ea6 <chassis_rc_mode_selection+0xf6>
				chassis_pc_submode_toggle = -chassis_pc_submode_toggle;
 8003e94:	4b2f      	ldr	r3, [pc, #188]	; (8003f54 <chassis_rc_mode_selection+0x1a4>)
 8003e96:	f993 3000 	ldrsb.w	r3, [r3]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	425b      	negs	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	b25a      	sxtb	r2, r3
 8003ea2:	4b2c      	ldr	r3, [pc, #176]	; (8003f54 <chassis_rc_mode_selection+0x1a4>)
 8003ea4:	701a      	strb	r2, [r3, #0]

			/* mode decide */
			if(chassis_pc_mode_toggle == -1 && chassis_pc_submode_toggle == 1){
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <chassis_rc_mode_selection+0x1a0>)
 8003ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d10b      	bne.n	8003eca <chassis_rc_mode_selection+0x11a>
 8003eb2:	4b28      	ldr	r3, [pc, #160]	; (8003f54 <chassis_rc_mode_selection+0x1a4>)
 8003eb4:	f993 3000 	ldrsb.w	r3, [r3]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d106      	bne.n	8003eca <chassis_rc_mode_selection+0x11a>
				/* chassis follow gimbal center while follow yaw axis */
				act_mode = GIMBAL_CENTER;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	73bb      	strb	r3, [r7, #14]
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fbe0 	bl	8003688 <chassis_update_gimbal_coord>
 8003ec8:	e034      	b.n	8003f34 <chassis_rc_mode_selection+0x184>
#ifdef MODE_DEBUG
		/* LD indicator, For debug purposes only */
#endif
			}

			else if(chassis_pc_mode_toggle == -1 && chassis_pc_submode_toggle == -1){
 8003eca:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <chassis_rc_mode_selection+0x1a0>)
 8003ecc:	f993 3000 	ldrsb.w	r3, [r3]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d10c      	bne.n	8003ef0 <chassis_rc_mode_selection+0x140>
 8003ed6:	4b1f      	ldr	r3, [pc, #124]	; (8003f54 <chassis_rc_mode_selection+0x1a4>)
 8003ed8:	f993 3000 	ldrsb.w	r3, [r3]
 8003edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ee0:	d106      	bne.n	8003ef0 <chassis_rc_mode_selection+0x140>
				/* spinning chassis while follow yaw axis */
				act_mode = SELF_GYRO;
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	73bb      	strb	r3, [r7, #14]
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7ff fbcd 	bl	8003688 <chassis_update_gimbal_coord>
 8003eee:	e021      	b.n	8003f34 <chassis_rc_mode_selection+0x184>
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
			}

			else if(chassis_pc_mode_toggle == 1 && chassis_pc_submode_toggle == -1){
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <chassis_rc_mode_selection+0x1a0>)
 8003ef2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d10c      	bne.n	8003f14 <chassis_rc_mode_selection+0x164>
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <chassis_rc_mode_selection+0x1a4>)
 8003efc:	f993 3000 	ldrsb.w	r3, [r3]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d106      	bne.n	8003f14 <chassis_rc_mode_selection+0x164>
				/* chassis only follow yaw axis */
				act_mode = GIMBAL_FOLLOW;
 8003f06:	2301      	movs	r3, #1
 8003f08:	73bb      	strb	r3, [r7, #14]
				/* update gimbal axis */
				chassis_update_gimbal_coord(chassis_hdlr, rc_hdlr);
 8003f0a:	6839      	ldr	r1, [r7, #0]
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff fbbb 	bl	8003688 <chassis_update_gimbal_coord>
 8003f12:	e00f      	b.n	8003f34 <chassis_rc_mode_selection+0x184>
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
			}
			else if(chassis_pc_mode_toggle == 1 && chassis_pc_submode_toggle == 1){
 8003f14:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <chassis_rc_mode_selection+0x1a0>)
 8003f16:	f993 3000 	ldrsb.w	r3, [r3]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d10a      	bne.n	8003f34 <chassis_rc_mode_selection+0x184>
 8003f1e:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <chassis_rc_mode_selection+0x1a4>)
 8003f20:	f993 3000 	ldrsb.w	r3, [r3]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d105      	bne.n	8003f34 <chassis_rc_mode_selection+0x184>
				/* independent mode */
				act_mode = INDPET_MODE;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	73bb      	strb	r3, [r7, #14]
				/* update ground axis */
				chassis_update_chassis_coord(chassis_hdlr, rc_hdlr);
 8003f2c:	6839      	ldr	r1, [r7, #0]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7ff fd2e 	bl	8003990 <chassis_update_chassis_coord>
			}
		}// else patrol mode
	}//pc mode

	/* set modes */
	chassis_set_mode(chassis_hdlr, board_mode);
 8003f34:	7bfb      	ldrb	r3, [r7, #15]
 8003f36:	4619      	mov	r1, r3
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7ff fed5 	bl	8003ce8 <chassis_set_mode>
	chassis_set_act_mode(chassis_hdlr, act_mode);// act mode only works when debuging with rc
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	4619      	mov	r1, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fee0 	bl	8003d08 <chassis_set_act_mode>
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	20000008 	.word	0x20000008
 8003f54:	20000009 	.word	0x20000009

08003f58 <Gimbal_Task_Function>:
	static uint8_t dynamic_offset_center_flag = 0;
#endif

/* With encoder mode, task execution time (per loop): 1ms */
void Gimbal_Task_Function(void const * argument)
{
 8003f58:	b5b0      	push	{r4, r5, r7, lr}
 8003f5a:	ed2d 8b02 	vpush	{d8}
 8003f5e:	b088      	sub	sp, #32
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

    /* USER CODE BEGIN Gimbal_Task_Function */
	/* gimbal task LD indicator */
	HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8003f64:	2201      	movs	r2, #1
 8003f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f6a:	48b5      	ldr	r0, [pc, #724]	; (8004240 <Gimbal_Task_Function+0x2e8>)
 8003f6c:	f007 ffb0 	bl	800bed0 <HAL_GPIO_WritePin>

	/* init gimbal task */
	gimbal_task_init(&gimbal);
 8003f70:	48b4      	ldr	r0, [pc, #720]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003f72:	f000 f9b5 	bl	80042e0 <gimbal_task_init>
	/* define after-detection delay var here */
//	int16_t gimbal_control_counter=0;

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 1ms
 8003f76:	2301      	movs	r3, #1
 8003f78:	61bb      	str	r3, [r7, #24]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8003f7a:	f00b f9d1 	bl	800f320 <xTaskGetTickCount>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	60fb      	str	r3, [r7, #12]

#ifndef GIMBAL_MOTOR_DEBUG //for only test temp closed loop control
	for(;;){

	  /* mode selection */
	  gimbal_rc_mode_selection(&gimbal, &rc);
 8003f82:	49b1      	ldr	r1, [pc, #708]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 8003f84:	48af      	ldr	r0, [pc, #700]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003f86:	f000 fd8f 	bl	8004aa8 <gimbal_rc_mode_selection>

	  /* make sure offset already be set to the gyro */
	  if(imu_init_flag == 1)
 8003f8a:	4bb0      	ldr	r3, [pc, #704]	; (800424c <Gimbal_Task_Function+0x2f4>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d103      	bne.n	8003f9a <Gimbal_Task_Function+0x42>
		 /* update gyroscope angle */
		 gimbal_gyro_update_abs_angle(&gimbal);
 8003f92:	48ac      	ldr	r0, [pc, #688]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003f94:	f000 fb20 	bl	80045d8 <gimbal_gyro_update_abs_angle>
 8003f98:	e008      	b.n	8003fac <Gimbal_Task_Function+0x54>
	  else if(gimbal.gimbal_motor_mode == GYRO_MODE)
 8003f9a:	4baa      	ldr	r3, [pc, #680]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003f9c:	f893 3ab0 	ldrb.w	r3, [r3, #2736]	; 0xab0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d103      	bne.n	8003fac <Gimbal_Task_Function+0x54>
		  /* imu not ready -> deactivate gyro mode*/
		  gimbal.gimbal_act_mode = IDLE_MODE;
 8003fa4:	4ba7      	ldr	r3, [pc, #668]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003fa6:	2204      	movs	r2, #4
 8003fa8:	f883 2ab1 	strb.w	r2, [r3, #2737]	; 0xab1

	  /************************************* MODE SELECTION START *************************************/
	  if(gimbal.gimbal_mode == IDLE_MODE){
 8003fac:	4ba5      	ldr	r3, [pc, #660]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003fae:	f893 3ab2 	ldrb.w	r3, [r3, #2738]	; 0xab2
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d139      	bne.n	800402a <Gimbal_Task_Function+0xd2>
		  /* use ramp function to approximate zeros */
		  gimbal_get_ecd_fb_data(&gimbal,
 8003fb6:	4aa6      	ldr	r2, [pc, #664]	; (8004250 <Gimbal_Task_Function+0x2f8>)
 8003fb8:	49a6      	ldr	r1, [pc, #664]	; (8004254 <Gimbal_Task_Function+0x2fc>)
 8003fba:	48a2      	ldr	r0, [pc, #648]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003fbc:	f000 fb46 	bl	800464c <gimbal_get_ecd_fb_data>
		  						   &(motor_data[yaw_id].motor_feedback),
		  						   &(motor_data[pitch_id].motor_feedback));
		  float temp_idle_yaw = gimbal.yaw_cur_rel_angle + (0-gimbal.yaw_cur_rel_angle)*ramp_calculate(&gimbal.yaw_ramp);
 8003fc0:	4ba0      	ldr	r3, [pc, #640]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003fc2:	ed93 8a06 	vldr	s16, [r3, #24]
 8003fc6:	4b9f      	ldr	r3, [pc, #636]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003fc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fcc:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8004258 <Gimbal_Task_Function+0x300>
 8003fd0:	ee77 8a67 	vsub.f32	s17, s14, s15
 8003fd4:	48a1      	ldr	r0, [pc, #644]	; (800425c <Gimbal_Task_Function+0x304>)
 8003fd6:	f7fe ff17 	bl	8002e08 <ramp_calculate>
 8003fda:	eef0 7a40 	vmov.f32	s15, s0
 8003fde:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003fe2:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003fe6:	edc7 7a05 	vstr	s15, [r7, #20]
		  float temp_idle_pitch = gimbal.pitch_cur_rel_angle + (0-gimbal.pitch_cur_rel_angle)*ramp_calculate(&gimbal.pitch_ramp);
 8003fea:	4b96      	ldr	r3, [pc, #600]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003fec:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 8003ff0:	4b94      	ldr	r3, [pc, #592]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8003ff2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003ff6:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8004258 <Gimbal_Task_Function+0x300>
 8003ffa:	ee77 8a67 	vsub.f32	s17, s14, s15
 8003ffe:	4898      	ldr	r0, [pc, #608]	; (8004260 <Gimbal_Task_Function+0x308>)
 8004000:	f7fe ff02 	bl	8002e08 <ramp_calculate>
 8004004:	eef0 7a40 	vmov.f32	s15, s0
 8004008:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800400c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8004010:	edc7 7a04 	vstr	s15, [r7, #16]
		  /* reset everything */
		  gimbal_set_limited_angle(&gimbal, temp_idle_yaw, temp_idle_pitch);
 8004014:	edd7 0a04 	vldr	s1, [r7, #16]
 8004018:	ed97 0a05 	vldr	s0, [r7, #20]
 800401c:	4889      	ldr	r0, [pc, #548]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800401e:	f000 fbd3 	bl	80047c8 <gimbal_set_limited_angle>
		  /* turn off dynamic center offset */
		  dynamic_offset_center_flag = 0;
 8004022:	4b90      	ldr	r3, [pc, #576]	; (8004264 <Gimbal_Task_Function+0x30c>)
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e0f6      	b.n	8004218 <Gimbal_Task_Function+0x2c0>
	  }
	  else{
		  /* reset ramp counter for next use */
		  gimbal.pitch_ramp.count = 0;
 800402a:	4b86      	ldr	r3, [pc, #536]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800402c:	2200      	movs	r2, #0
 800402e:	679a      	str	r2, [r3, #120]	; 0x78
		  gimbal.yaw_ramp.count = 0;
 8004030:	4b84      	ldr	r3, [pc, #528]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004032:	2200      	movs	r2, #0
 8004034:	665a      	str	r2, [r3, #100]	; 0x64

		 if(dynamic_offset_center_flag == 0){
 8004036:	4b8b      	ldr	r3, [pc, #556]	; (8004264 <Gimbal_Task_Function+0x30c>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d123      	bne.n	8004086 <Gimbal_Task_Function+0x12e>
			for(int j=0;j<2;j++){
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
 8004042:	e01a      	b.n	800407a <Gimbal_Task_Function+0x122>
				* 			  the original center error;
				* Second loop: continues the same operation, while the original
				* 			   center error introduced last time can be corrected.
				* */
				//FIXME: This can be removed by precisely adjusting PID parameters of motor
				gimbal_update_rc_rel_angle(&gimbal, &rc);//update current center value
 8004044:	4980      	ldr	r1, [pc, #512]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 8004046:	487f      	ldr	r0, [pc, #508]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004048:	f000 fc1a 	bl	8004880 <gimbal_update_rc_rel_angle>
				gimbal.yaw_ecd_center = gimbal.yaw_ecd_fb.rx_angle;//reset center value
 800404c:	4b7d      	ldr	r3, [pc, #500]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800404e:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8004052:	4b7c      	ldr	r3, [pc, #496]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004054:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
				gimbal.yaw_cur_rel_angle = 0;//reset current rel angle to 0
 8004058:	4b7a      	ldr	r3, [pc, #488]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800405a:	f04f 0200 	mov.w	r2, #0
 800405e:	619a      	str	r2, [r3, #24]
				gimbal.pitch_ecd_center = gimbal.pitch_ecd_fb.rx_angle;//reset center value
 8004060:	4b78      	ldr	r3, [pc, #480]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004062:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8004066:	4b77      	ldr	r3, [pc, #476]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004068:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
				gimbal.pitch_cur_rel_angle = 0;//reset current rel angle to 0
 800406c:	4b75      	ldr	r3, [pc, #468]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	629a      	str	r2, [r3, #40]	; 0x28
			for(int j=0;j<2;j++){
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	3301      	adds	r3, #1
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b01      	cmp	r3, #1
 800407e:	dde1      	ble.n	8004044 <Gimbal_Task_Function+0xec>
			}
			dynamic_offset_center_flag = 1;
 8004080:	4b78      	ldr	r3, [pc, #480]	; (8004264 <Gimbal_Task_Function+0x30c>)
 8004082:	2201      	movs	r2, #1
 8004084:	701a      	strb	r2, [r3, #0]
		 }

		 memcpy(&temp_pack, &uc_rx_pack, sizeof(UC_Recv_Pack_t));
 8004086:	4a78      	ldr	r2, [pc, #480]	; (8004268 <Gimbal_Task_Function+0x310>)
 8004088:	4b78      	ldr	r3, [pc, #480]	; (800426c <Gimbal_Task_Function+0x314>)
 800408a:	4614      	mov	r4, r2
 800408c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800408e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		 /* if operator wants to activate auto-aim AND the camera has detected the object */
		 if(gimbal.gimbal_mode == AUTO_AIM_MODE && temp_pack.target_num > -1){
 8004092:	4b6c      	ldr	r3, [pc, #432]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004094:	f893 3ab2 	ldrb.w	r3, [r3, #2738]	; 0xab2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d117      	bne.n	80040cc <Gimbal_Task_Function+0x174>
 800409c:	4b72      	ldr	r3, [pc, #456]	; (8004268 <Gimbal_Task_Function+0x310>)
 800409e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	db12      	blt.n	80040cc <Gimbal_Task_Function+0x174>
			 /* copy parsed auto aim pack */
//			 memcpy(&temp_pack, &vision_pack, sizeof(CommVision_t));

			 /* activate auto aiming */
			 gimbal_update_autoaim_rel_angle(&gimbal, &rc, &temp_pack);
 80040a6:	4a70      	ldr	r2, [pc, #448]	; (8004268 <Gimbal_Task_Function+0x310>)
 80040a8:	4967      	ldr	r1, [pc, #412]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 80040aa:	4866      	ldr	r0, [pc, #408]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040ac:	f000 fd7c 	bl	8004ba8 <gimbal_update_autoaim_rel_angle>
			 /* set limited target angle */
			 gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 80040b0:	4b64      	ldr	r3, [pc, #400]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040b2:	edd3 7a04 	vldr	s15, [r3, #16]
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80040bc:	eef0 0a47 	vmov.f32	s1, s14
 80040c0:	eeb0 0a67 	vmov.f32	s0, s15
 80040c4:	485f      	ldr	r0, [pc, #380]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040c6:	f000 fb7f 	bl	80047c8 <gimbal_set_limited_angle>
 80040ca:	e0a5      	b.n	8004218 <Gimbal_Task_Function+0x2c0>
		 }

		 /* artificial targeting */
		 else if(gimbal.gimbal_act_mode == GIMBAL_FOLLOW || \
 80040cc:	4b5d      	ldr	r3, [pc, #372]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040ce:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d004      	beq.n	80040e0 <Gimbal_Task_Function+0x188>
			gimbal.gimbal_act_mode == INDPET_MODE){
 80040d6:	4b5b      	ldr	r3, [pc, #364]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040d8:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
		 else if(gimbal.gimbal_act_mode == GIMBAL_FOLLOW || \
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d111      	bne.n	8004104 <Gimbal_Task_Function+0x1ac>
			/* update gimbal rel angle */
			gimbal_update_rc_rel_angle(&gimbal, &rc);
 80040e0:	4959      	ldr	r1, [pc, #356]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 80040e2:	4858      	ldr	r0, [pc, #352]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040e4:	f000 fbcc 	bl	8004880 <gimbal_update_rc_rel_angle>
			/* set limited target angle */
			gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 80040e8:	4b56      	ldr	r3, [pc, #344]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80040ee:	4b55      	ldr	r3, [pc, #340]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040f0:	ed93 7a08 	vldr	s14, [r3, #32]
 80040f4:	eef0 0a47 	vmov.f32	s1, s14
 80040f8:	eeb0 0a67 	vmov.f32	s0, s15
 80040fc:	4851      	ldr	r0, [pc, #324]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80040fe:	f000 fb63 	bl	80047c8 <gimbal_set_limited_angle>
 8004102:	e089      	b.n	8004218 <Gimbal_Task_Function+0x2c0>

//			printf("%f,%f\r\n", gimbal.pitch_tar_angle, gimbal.pitch_cur_rel_angle);
		 }

		 else if(gimbal.gimbal_act_mode == GIMBAL_CENTER){
 8004104:	4b4f      	ldr	r3, [pc, #316]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004106:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d111      	bne.n	8004132 <Gimbal_Task_Function+0x1da>
			/* update gimbal rel angle */
			gimbal_update_rc_rel_angle(&gimbal, &rc);
 800410e:	494e      	ldr	r1, [pc, #312]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 8004110:	484c      	ldr	r0, [pc, #304]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004112:	f000 fbb5 	bl	8004880 <gimbal_update_rc_rel_angle>
			/* set limited target angle */
			gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 8004116:	4b4b      	ldr	r3, [pc, #300]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004118:	edd3 7a04 	vldr	s15, [r3, #16]
 800411c:	4b49      	ldr	r3, [pc, #292]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800411e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004122:	eef0 0a47 	vmov.f32	s1, s14
 8004126:	eeb0 0a67 	vmov.f32	s0, s15
 800412a:	4846      	ldr	r0, [pc, #280]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800412c:	f000 fb4c 	bl	80047c8 <gimbal_set_limited_angle>
 8004130:	e072      	b.n	8004218 <Gimbal_Task_Function+0x2c0>
		 }

		 else if(gimbal.gimbal_act_mode == SELF_GYRO){
 8004132:	4b44      	ldr	r3, [pc, #272]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004134:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 8004138:	2b02      	cmp	r3, #2
 800413a:	d16d      	bne.n	8004218 <Gimbal_Task_Function+0x2c0>
			if(gimbal.gimbal_motor_mode == GYRO_MODE){
 800413c:	4b41      	ldr	r3, [pc, #260]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800413e:	f893 3ab0 	ldrb.w	r3, [r3, #2736]	; 0xab0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d111      	bne.n	800416a <Gimbal_Task_Function+0x212>
				/* update gimbal rel ecd angle for pitch */
				gimbal_update_rc_rel_angle(&gimbal, &rc);
 8004146:	4940      	ldr	r1, [pc, #256]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 8004148:	483e      	ldr	r0, [pc, #248]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800414a:	f000 fb99 	bl	8004880 <gimbal_update_rc_rel_angle>
				/* set limited target angle */
				gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 800414e:	4b3d      	ldr	r3, [pc, #244]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004150:	edd3 7a04 	vldr	s15, [r3, #16]
 8004154:	4b3b      	ldr	r3, [pc, #236]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004156:	ed93 7a08 	vldr	s14, [r3, #32]
 800415a:	eef0 0a47 	vmov.f32	s1, s14
 800415e:	eeb0 0a67 	vmov.f32	s0, s15
 8004162:	4838      	ldr	r0, [pc, #224]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004164:	f000 fb30 	bl	80047c8 <gimbal_set_limited_angle>
 8004168:	e056      	b.n	8004218 <Gimbal_Task_Function+0x2c0>
			}
			/* Dummy version of self gyro based on encoder */
			else if(gimbal.gimbal_motor_mode == ENCODE_MODE){
 800416a:	4b36      	ldr	r3, [pc, #216]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800416c:	f893 3ab0 	ldrb.w	r3, [r3, #2736]	; 0xab0
 8004170:	2b01      	cmp	r3, #1
 8004172:	d151      	bne.n	8004218 <Gimbal_Task_Function+0x2c0>
					gimbal_update_rc_rel_angle(&gimbal, &rc);
 8004174:	4934      	ldr	r1, [pc, #208]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 8004176:	4833      	ldr	r0, [pc, #204]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004178:	f000 fb82 	bl	8004880 <gimbal_update_rc_rel_angle>
					if(abs(rc.ctrl.ch0)<= 5){
 800417c:	4b32      	ldr	r3, [pc, #200]	; (8004248 <Gimbal_Task_Function+0x2f0>)
 800417e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004182:	2b00      	cmp	r3, #0
 8004184:	bfb8      	it	lt
 8004186:	425b      	neglt	r3, r3
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b05      	cmp	r3, #5
 800418c:	d837      	bhi.n	80041fe <Gimbal_Task_Function+0x2a6>
						/* Assume we have the angular velocity of the chassis */
						gimbal.axis.wz = ( CHASSIS_ECD_CONST_OMEGA * 0.4) / 0.05;//CHASSIS_ANG_VEL* chassis_radius/gimbal_radius(meter)
 800418e:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004190:	4a37      	ldr	r2, [pc, #220]	; (8004270 <Gimbal_Task_Function+0x318>)
 8004192:	645a      	str	r2, [r3, #68]	; 0x44
						/* rpm = 1/60 * rps = 1/60 * 2*pi rad/s */
						gimbal_set_limited_angle(&gimbal, gimbal.yaw_cur_rel_angle - (gimbal.axis.wz*2*PI/60)*0.00057,//keep tracking rpm
 8004194:	4b2b      	ldr	r3, [pc, #172]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f9d5 	bl	8000548 <__aeabi_f2d>
 800419e:	4604      	mov	r4, r0
 80041a0:	460d      	mov	r5, r1
 80041a2:	4b28      	ldr	r3, [pc, #160]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80041a4:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041ac:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8004274 <Gimbal_Task_Function+0x31c>
 80041b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80041b4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8004278 <Gimbal_Task_Function+0x320>
 80041b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80041bc:	ee16 0a90 	vmov	r0, s13
 80041c0:	f7fc f9c2 	bl	8000548 <__aeabi_f2d>
 80041c4:	a31c      	add	r3, pc, #112	; (adr r3, 8004238 <Gimbal_Task_Function+0x2e0>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fc fa15 	bl	80005f8 <__aeabi_dmul>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f857 	bl	8000288 <__aeabi_dsub>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc fce1 	bl	8000ba8 <__aeabi_d2f>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b16      	ldr	r3, [pc, #88]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80041ea:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80041ee:	eef0 0a67 	vmov.f32	s1, s15
 80041f2:	ee00 2a10 	vmov	s0, r2
 80041f6:	4813      	ldr	r0, [pc, #76]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 80041f8:	f000 fae6 	bl	80047c8 <gimbal_set_limited_angle>
 80041fc:	e00c      	b.n	8004218 <Gimbal_Task_Function+0x2c0>
														gimbal.pitch_cur_rel_angle);
					}
					else{
						/* set limited target angle */
						gimbal_set_limited_angle(&gimbal, gimbal.yaw_tar_angle, gimbal.pitch_tar_angle);
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004200:	edd3 7a04 	vldr	s15, [r3, #16]
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004206:	ed93 7a08 	vldr	s14, [r3, #32]
 800420a:	eef0 0a47 	vmov.f32	s1, s14
 800420e:	eeb0 0a67 	vmov.f32	s0, s15
 8004212:	480c      	ldr	r0, [pc, #48]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004214:	f000 fad8 	bl	80047c8 <gimbal_set_limited_angle>

		}
	}//None IDLE MODE else

	 /* set motor voltage through cascade pid controller */
	 gimbal_cmd_exec(&gimbal, DUAL_LOOP_PID_CONTROL);
 8004218:	2101      	movs	r1, #1
 800421a:	480a      	ldr	r0, [pc, #40]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 800421c:	f000 fd92 	bl	8004d44 <gimbal_cmd_exec>

	 /* update rel angle and send to chassis */
	 gimbal_update_comm_info(&gimbal, &gimbal_angle_message.message);
 8004220:	4916      	ldr	r1, [pc, #88]	; (800427c <Gimbal_Task_Function+0x324>)
 8004222:	4808      	ldr	r0, [pc, #32]	; (8004244 <Gimbal_Task_Function+0x2ec>)
 8004224:	f000 fb08 	bl	8004838 <gimbal_update_comm_info>

	 /* delay until wake time */
	 vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004228:	f107 030c 	add.w	r3, r7, #12
 800422c:	69b9      	ldr	r1, [r7, #24]
 800422e:	4618      	mov	r0, r3
 8004230:	f00a feba 	bl	800efa8 <vTaskDelayUntil>
	  gimbal_rc_mode_selection(&gimbal, &rc);
 8004234:	e6a5      	b.n	8003f82 <Gimbal_Task_Function+0x2a>
 8004236:	bf00      	nop
 8004238:	adea8976 	.word	0xadea8976
 800423c:	3f42ad81 	.word	0x3f42ad81
 8004240:	40021c00 	.word	0x40021c00
 8004244:	200047c0 	.word	0x200047c0
 8004248:	2000d6b0 	.word	0x2000d6b0
 800424c:	20000525 	.word	0x20000525
 8004250:	200055e4 	.word	0x200055e4
 8004254:	20005550 	.word	0x20005550
 8004258:	00000000 	.word	0x00000000
 800425c:	20004824 	.word	0x20004824
 8004260:	20004838 	.word	0x20004838
 8004264:	20000524 	.word	0x20000524
 8004268:	2000d62c 	.word	0x2000d62c
 800426c:	2000d7b0 	.word	0x2000d7b0
 8004270:	44700000 	.word	0x44700000
 8004274:	40490fdb 	.word	0x40490fdb
 8004278:	42700000 	.word	0x42700000
 800427c:	20000088 	.word	0x20000088

08004280 <gimbal_set_mode>:
 * @brief     set the gimbal board work mode:
 * 				patrol | detected armor | Auto_Poilt | IDLE(no action) | Debug(remote control)
 * @param[in] gimbal: main gimbal handler
 * @param[in] mode: Board work mode
 * */
void gimbal_set_mode(Gimbal_t *gbal, BoardMode_t mode){
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	460b      	mov	r3, r1
 800428a:	70fb      	strb	r3, [r7, #3]
	gbal->gimbal_mode = mode;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	78fa      	ldrb	r2, [r7, #3]
 8004290:	f883 2ab2 	strb.w	r2, [r3, #2738]	; 0xab2
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <gimbal_set_act_mode>:
 * @brief     determime the mode for gimbal actions:
 * 				follow gimbal (master) | follow chassis (slave) or independent
 * @param[in] gimbal: main gimbal handler
 * @param[in] mode: act mode
 * */
void gimbal_set_act_mode(Gimbal_t *gbal, BoardActMode_t mode){
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
	gbal->gimbal_act_mode = mode;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	f883 2ab1 	strb.w	r2, [r3, #2737]	; 0xab1
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <gimbal_set_motor_mode>:
/*
 * @brief 	  set motor mode: gyro | encoder
 * @param[in] gimbal: main gimbal handler
 * @param[in] mode: motor mode
 * */
void gimbal_set_motor_mode(Gimbal_t *gbal, GimbalMotorMode_t mode){
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	460b      	mov	r3, r1
 80042ca:	70fb      	strb	r3, [r7, #3]
	gbal->gimbal_motor_mode = mode;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	78fa      	ldrb	r2, [r7, #3]
 80042d0:	f883 2ab0 	strb.w	r2, [r3, #2736]	; 0xab0
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <gimbal_task_init>:

/*
 * @brief     the initialization process of the gimbal task,
 * @param[in] gimbal: main gimbal handler
 * */
void gimbal_task_init(Gimbal_t *gbal){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
	/* reset rc data */
	rc.ctrl.ch0 = 0;
 80042e8:	4b32      	ldr	r3, [pc, #200]	; (80043b4 <gimbal_task_init+0xd4>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	801a      	strh	r2, [r3, #0]
	rc.ctrl.ch1 = 0;
 80042ee:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <gimbal_task_init+0xd4>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	805a      	strh	r2, [r3, #2]
	rc.ctrl.ch2 = 0;
 80042f4:	4b2f      	ldr	r3, [pc, #188]	; (80043b4 <gimbal_task_init+0xd4>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	809a      	strh	r2, [r3, #4]
	rc.ctrl.ch3 = 0;
 80042fa:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <gimbal_task_init+0xd4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	80da      	strh	r2, [r3, #6]
	rc.ctrl.s1 = SW_MID;
 8004300:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <gimbal_task_init+0xd4>)
 8004302:	2203      	movs	r2, #3
 8004304:	721a      	strb	r2, [r3, #8]
	rc.ctrl.s2 = SW_MID;
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <gimbal_task_init+0xd4>)
 8004308:	2203      	movs	r2, #3
 800430a:	725a      	strb	r2, [r3, #9]

	/* Waiting for imu to be set normal temp */
	osDelay(GIMBAL_INIT_TIME_MS);
 800430c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004310:	f00a fb21 	bl	800e956 <osDelay>

	/* init motor pid */
	// angular pid based on radian(-pi, pi), speed pid based on rpm(-15000, 15000)
	motor_init(yaw_id, max_out_angle_yaw,  max_I_out_angle_yaw, max_err_angle_yaw, kp_angle_yaw, ki_angle_yaw, kd_angle_yaw,
 8004314:	ed9f 5a28 	vldr	s10, [pc, #160]	; 80043b8 <gimbal_task_init+0xd8>
 8004318:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
 800431c:	ed9f 4a27 	vldr	s8, [pc, #156]	; 80043bc <gimbal_task_init+0xdc>
 8004320:	eddf 3a27 	vldr	s7, [pc, #156]	; 80043c0 <gimbal_task_init+0xe0>
 8004324:	ed9f 3a27 	vldr	s6, [pc, #156]	; 80043c4 <gimbal_task_init+0xe4>
 8004328:	eddf 2a27 	vldr	s5, [pc, #156]	; 80043c8 <gimbal_task_init+0xe8>
 800432c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8004330:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80043b8 <gimbal_task_init+0xd8>
 8004334:	eddf 1a21 	vldr	s3, [pc, #132]	; 80043bc <gimbal_task_init+0xdc>
 8004338:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80043cc <gimbal_task_init+0xec>
 800433c:	eddf 0a24 	vldr	s1, [pc, #144]	; 80043d0 <gimbal_task_init+0xf0>
 8004340:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80043b8 <gimbal_task_init+0xd8>
 8004344:	f241 3188 	movw	r1, #5000	; 0x1388
 8004348:	2004      	movs	r0, #4
 800434a:	f002 fc73 	bl	8006c34 <motor_init>
					   max_out_spd_yaw, max_I_out_spd_yaw, max_err_spd_yaw, kp_spd_yaw, ki_spd_yaw, kd_spd_yaw,
					   kf_spd_yaw);//spd ff gain
	motor_init(pitch_id, max_out_angle_pitch,  max_I_out_angle_pitch, max_err_angle_pitch, kp_angle_pitch, ki_angle_pitch, kd_angle_pitch,
 800434e:	ed9f 5a1a 	vldr	s10, [pc, #104]	; 80043b8 <gimbal_task_init+0xd8>
 8004352:	eddf 4a1a 	vldr	s9, [pc, #104]	; 80043bc <gimbal_task_init+0xdc>
 8004356:	ed9f 4a1f 	vldr	s8, [pc, #124]	; 80043d4 <gimbal_task_init+0xf4>
 800435a:	eddf 3a1f 	vldr	s7, [pc, #124]	; 80043d8 <gimbal_task_init+0xf8>
 800435e:	ed9f 3a19 	vldr	s6, [pc, #100]	; 80043c4 <gimbal_task_init+0xe4>
 8004362:	eddf 2a19 	vldr	s5, [pc, #100]	; 80043c8 <gimbal_task_init+0xe8>
 8004366:	f643 2298 	movw	r2, #15000	; 0x3a98
 800436a:	ed9f 2a13 	vldr	s4, [pc, #76]	; 80043b8 <gimbal_task_init+0xd8>
 800436e:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80043dc <gimbal_task_init+0xfc>
 8004372:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80043e0 <gimbal_task_init+0x100>
 8004376:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80043e4 <gimbal_task_init+0x104>
 800437a:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80043b8 <gimbal_task_init+0xd8>
 800437e:	f241 3188 	movw	r1, #5000	; 0x1388
 8004382:	2005      	movs	r0, #5
 8004384:	f002 fc56 	bl	8006c34 <motor_init>
					     max_out_spd_pitch, max_I_out_spd_pitch, max_err_spd_pitch, kp_spd_pitch, ki_spd_pitch, kd_spd_pitch,
					     kf_spd_pitch);//spd ff gain

	/* set init gimbal mode */
	gimbal_set_mode(gbal, PATROL_MODE);     // patrol mode
 8004388:	2100      	movs	r1, #0
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff ff78 	bl	8004280 <gimbal_set_mode>
	gimbal_set_act_mode(gbal, INDPET_MODE); // indepedent mode
 8004390:	2103      	movs	r1, #3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff ff84 	bl	80042a0 <gimbal_set_act_mode>
	gimbal_set_motor_mode(gbal, ENCODE_MODE);
 8004398:	2101      	movs	r1, #1
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff ff90 	bl	80042c0 <gimbal_set_motor_mode>

	/* reset gimbal data */
	gimbal_reset_data(gbal);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f825 	bl	80043f0 <gimbal_reset_data>

	/* set comm packs init target number */
	gimbal_angle_message.message.vision.target_num = 0;
 80043a6:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <gimbal_task_init+0x108>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	615a      	str	r2, [r3, #20]
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	2000d6b0 	.word	0x2000d6b0
 80043b8:	00000000 	.word	0x00000000
 80043bc:	3dcccccd 	.word	0x3dcccccd
 80043c0:	42700000 	.word	0x42700000
 80043c4:	459c4000 	.word	0x459c4000
 80043c8:	453b8000 	.word	0x453b8000
 80043cc:	44098000 	.word	0x44098000
 80043d0:	43fa0000 	.word	0x43fa0000
 80043d4:	3e4ccccd 	.word	0x3e4ccccd
 80043d8:	43660000 	.word	0x43660000
 80043dc:	3d4ccccd 	.word	0x3d4ccccd
 80043e0:	44188000 	.word	0x44188000
 80043e4:	42c80000 	.word	0x42c80000
 80043e8:	20000084 	.word	0x20000084
 80043ec:	00000000 	.word	0x00000000

080043f0 <gimbal_reset_data>:

/*
 * @brief     Reset all data internal gimbal struct
 * @param[in] gimbal: main gimbal handler
 * */
void gimbal_reset_data(Gimbal_t *gbal){
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
	gbal->yaw_ang_rate = 0.0f;			//not used
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
	gbal->pitch_ang_rate = 0.0f;        //not used
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	605a      	str	r2, [r3, #4]
	gbal->yaw_speed_rate = 0.0f;		//not used
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	609a      	str	r2, [r3, #8]
	gbal->pitch_speed_rate = 0.0f;		//not used
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	60da      	str	r2, [r3, #12]

	gbal->yaw_cur_abs_angle = 0.0f;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	615a      	str	r2, [r3, #20]
	gbal->yaw_prev_angle = 0.0f;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	61da      	str	r2, [r3, #28]
	gbal->pitch_cur_abs_angle = 0.0f;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f04f 0200 	mov.w	r2, #0
 800442e:	625a      	str	r2, [r3, #36]	; 0x24

	gbal->yaw_cur_rel_angle = 0.0f;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f04f 0200 	mov.w	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
	gbal->pitch_cur_rel_angle = 0.0f;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	629a      	str	r2, [r3, #40]	; 0x28

	gbal->yaw_turns_count = 0;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	gbal->yaw_ecd_center = YAW_ECD_CENTER;					//center position of the yaw motor - encoder
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f44f 721b 	mov.w	r2, #620	; 0x26c
 800444e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	gbal->pitch_ecd_center = PITCH_ECD_CENTER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f640 52ac 	movw	r2, #3500	; 0xdac
 8004458:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	gbal->gyro_offset_slope = -1.84228e-10;
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	a347      	add	r3, pc, #284	; (adr r3, 800457c <gimbal_reset_data+0x18c>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	gbal->gyro_offset_count = 0;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	639a      	str	r2, [r3, #56]	; 0x38
	gbal->euler_angle.timestamp = dwt_getCnt_us();
 800446e:	f002 fb3b 	bl	8006ae8 <dwt_getCnt_us>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	gbal->yaw_tar_angle = 0.0f;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
	gbal->pitch_tar_angle = 0.0f;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	621a      	str	r2, [r3, #32]
	gbal->yaw_tar_spd = 0.0f;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	gbal->pitch_tar_spd = 0.0f;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	gbal->axis.vx = 0;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	63da      	str	r2, [r3, #60]	; 0x3c
	gbal->axis.vy = 0;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f04f 0200 	mov.w	r2, #0
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
	gbal->axis.wz = 0;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	645a      	str	r2, [r3, #68]	; 0x44

	init_folp_filter(&gbal->folp_f, 0.95f);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f603 2374 	addw	r3, r3, #2676	; 0xa74
 80044b8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8004570 <gimbal_reset_data+0x180>
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fdc1 	bl	8003044 <init_folp_filter>

	init_ewma_filter(&gbal->ewma_f_x, 0.50f);//0.65 for older client
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	33cc      	adds	r3, #204	; 0xcc
 80044c6:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fe fe28 	bl	8003120 <init_ewma_filter>
	init_ewma_filter(&gbal->ewma_f_y, 0.50f);//0.6 for older client
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	33d8      	adds	r3, #216	; 0xd8
 80044d4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe fe21 	bl	8003120 <init_ewma_filter>
	init_ewma_filter(&gbal->ewma_f_aim_yaw, 0.95f);//0.65 for older client
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f603 235c 	addw	r3, r3, #2652	; 0xa5c
 80044e4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8004570 <gimbal_reset_data+0x180>
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe fe19 	bl	8003120 <init_ewma_filter>
	init_ewma_filter(&gbal->ewma_f_aim_pitch, 0.95f);//0.6 for older client
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f603 2368 	addw	r3, r3, #2664	; 0xa68
 80044f4:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8004570 <gimbal_reset_data+0x180>
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fe fe11 	bl	8003120 <init_ewma_filter>

	init_swm_filter(&gbal->swm_f_x, 50);// window size 50
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	33e4      	adds	r3, #228	; 0xe4
 8004502:	2132      	movs	r1, #50	; 0x32
 8004504:	4618      	mov	r0, r3
 8004506:	f7fe fe71 	bl	80031ec <init_swm_filter>
	init_swm_filter(&gbal->swm_f_y, 50);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 63b4 	add.w	r3, r3, #1440	; 0x5a0
 8004510:	2132      	movs	r1, #50	; 0x32
 8004512:	4618      	mov	r0, r3
 8004514:	f7fe fe6a 	bl	80031ec <init_swm_filter>

	memset(&(gbal->ahrs_sensor), 0, sizeof(AhrsSensor_t));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	338c      	adds	r3, #140	; 0x8c
 800451c:	2230      	movs	r2, #48	; 0x30
 800451e:	2100      	movs	r1, #0
 8004520:	4618      	mov	r0, r3
 8004522:	f00b fed1 	bl	80102c8 <memset>
	memset(&(gbal->euler_angle), 0, sizeof(Attitude_t));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	33bc      	adds	r3, #188	; 0xbc
 800452a:	2210      	movs	r2, #16
 800452c:	2100      	movs	r1, #0
 800452e:	4618      	mov	r0, r3
 8004530:	f00b feca 	bl	80102c8 <memset>
	memset(&(gbal->yaw_ecd_fb), 0, sizeof(Motor_Feedback_Data_t));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3352      	adds	r3, #82	; 0x52
 8004538:	2208      	movs	r2, #8
 800453a:	2100      	movs	r1, #0
 800453c:	4618      	mov	r0, r3
 800453e:	f00b fec3 	bl	80102c8 <memset>
	memset(&(gbal->pitch_ecd_fb), 0, sizeof(Motor_Feedback_Data_t));
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	335a      	adds	r3, #90	; 0x5a
 8004546:	2208      	movs	r2, #8
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f00b febc 	bl	80102c8 <memset>

	kalmanCreate(&(gbal->kalman_f), 0.0005, 0.02);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f603 2384 	addw	r3, r3, #2692	; 0xa84
 8004556:	eddf 0a07 	vldr	s1, [pc, #28]	; 8004574 <gimbal_reset_data+0x184>
 800455a:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8004578 <gimbal_reset_data+0x188>
 800455e:	4618      	mov	r0, r3
 8004560:	f7fe fc86 	bl	8002e70 <kalmanCreate>
}
 8004564:	bf00      	nop
 8004566:	3708      	adds	r7, #8
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	f3af 8000 	nop.w
 8004570:	3f733333 	.word	0x3f733333
 8004574:	3ca3d70a 	.word	0x3ca3d70a
 8004578:	3a03126f 	.word	0x3a03126f
 800457c:	4de6c37d 	.word	0x4de6c37d
 8004580:	bde951f2 	.word	0xbde951f2

08004584 <gimbal_get_raw_mpu_data>:
/******************  MODE SELECTION FUNCTIONS BELOW ********************/
void gimbal_get_raw_mpu_data(Gimbal_t *gbal, IMU_t *imu_hldr){
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
	memcpy(&(gbal->ahrs_sensor), &(imu_hldr->ahrs_sensor), sizeof(AhrsSensor_t));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	3348      	adds	r3, #72	; 0x48
 8004598:	2230      	movs	r2, #48	; 0x30
 800459a:	4619      	mov	r1, r3
 800459c:	f00b fe86 	bl	80102ac <memcpy>
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <gimbal_get_euler_angle>:
/*
 * @brief     Copy the gyroscope data from imu and calculate quaternion
 * 			  and euler's angle through attitude-breakdown algorithms.
 * @param[in] gimbal: main gimbal handler
 * */
void gimbal_get_euler_angle(Gimbal_t *gbal){
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
	gimbal_get_raw_mpu_data(gbal, &imu); // copy data to avoid mem leaks
 80045b0:	4908      	ldr	r1, [pc, #32]	; (80045d4 <gimbal_get_euler_angle+0x2c>)
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ffe6 	bl	8004584 <gimbal_get_raw_mpu_data>
//	atti_math_calc(&gbal->ahrs_sensor, &gbal->euler_angle); //complementary filter parsed angle
//	mahony_ahrs_update(&(gbal->ahrs_sensor), &(gbal->euler_angle));	//mahony algo
	madgwick_ahrs_update(&(gbal->ahrs_sensor), &(gbal->euler_angle));  //madgwick algo
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	33bc      	adds	r3, #188	; 0xbc
 80045c2:	4619      	mov	r1, r3
 80045c4:	4610      	mov	r0, r2
 80045c6:	f7fc fcbb 	bl	8000f40 <madgwick_ahrs_update>
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20004670 	.word	0x20004670

080045d8 <gimbal_gyro_update_abs_angle>:
/*
 * @brief     Copy the gyroscope data from imu and calculate quaternion
 * 			  and euler's absolute angle through attitude-breakdown algorithms.
 * @param[in] gbal: main gimbal handler
 * */
void gimbal_gyro_update_abs_angle(Gimbal_t *gbal){
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	 /* get timestamp */
	 uint32_t DWTcnt = dwt_getCnt_us();// systemclock_core 168MHz ->usec
 80045e0:	f002 fa82 	bl	8006ae8 <dwt_getCnt_us>
 80045e4:	60f8      	str	r0, [r7, #12]
	 uint32_t delta_t = DWTcnt - gbal->euler_angle.timestamp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	60bb      	str	r3, [r7, #8]
	 if(delta_t < 3000){
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d802      	bhi.n	8004602 <gimbal_gyro_update_abs_angle+0x2a>
         delta_t = 3000;//random setting, avoid overflow
 80045fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004600:	60bb      	str	r3, [r7, #8]
     /* Cumulative number of compensation counts */
//     gbal->gyro_offset_count += 1;
	 }
	 gimbal_get_euler_angle(gbal);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f7ff ffd0 	bl	80045a8 <gimbal_get_euler_angle>
	 /* filter the yaw angle data to handle shift */
//	 gbal->euler_angle.yaw = first_order_low_pass_filter(&(gbal->folp_f), gbal->euler_angle.yaw);
	 gbal->euler_angle.yaw = KalmanFilter(&(gbal->kalman_f), gbal->euler_angle.yaw);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f603 2284 	addw	r2, r3, #2692	; 0xa84
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8004614:	eeb0 0a67 	vmov.f32	s0, s15
 8004618:	4610      	mov	r0, r2
 800461a:	f7fe fc51 	bl	8002ec0 <KalmanFilter>
 800461e:	eef0 7a40 	vmov.f32	s15, s0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4

	 /* apply an integral linear offset for yaw angle */
	 gbal->yaw_cur_abs_angle = gbal->euler_angle.yaw; //- delta_t *gbal->gyro_offset_slope*gbal->gyro_offset_count;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	615a      	str	r2, [r3, #20]
	 gbal->euler_angle.timestamp = DWTcnt;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

	 /* update the turns */
//	 gimbal_update_turns(gbal, PI);
	 /* apply first order filter to pitch angle */
//	 gbal->euler_angle.pitch = first_order_low_pass_filter(&(gbal->folp_f), gbal->euler_angle.pitch);
	 gbal->pitch_cur_abs_angle = gbal->euler_angle.pitch;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	625a      	str	r2, [r3, #36]	; 0x24

	 /* update angular velocity */
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <gimbal_get_ecd_fb_data>:
/*
 * @brief     update the relevant encoder angle
 * @param[in] gbal: main gimbal handler
 * */
void gimbal_get_ecd_fb_data(Gimbal_t *gbal, Motor_Feedback_Data_t *yaw_motor_fb, Motor_Feedback_Data_t *pitch_motor_fb){
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
	memcpy(&(gbal->yaw_ecd_fb), yaw_motor_fb, sizeof(Motor_Feedback_Data_t));
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	3352      	adds	r3, #82	; 0x52
 800465c:	2208      	movs	r2, #8
 800465e:	68b9      	ldr	r1, [r7, #8]
 8004660:	4618      	mov	r0, r3
 8004662:	f00b fe23 	bl	80102ac <memcpy>
	gbal->yaw_ecd_fb.rx_angle = gimbal_get_ecd_rel_angle(gbal->yaw_ecd_fb.rx_angle, gbal->yaw_ecd_center);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 8004672:	4619      	mov	r1, r3
 8004674:	4610      	mov	r0, r2
 8004676:	f000 f822 	bl	80046be <gimbal_get_ecd_rel_angle>
 800467a:	4603      	mov	r3, r0
 800467c:	461a      	mov	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	memcpy(&(gbal->pitch_ecd_fb), pitch_motor_fb, sizeof(Motor_Feedback_Data_t));
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	335a      	adds	r3, #90	; 0x5a
 8004688:	2208      	movs	r2, #8
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4618      	mov	r0, r3
 800468e:	f00b fe0d 	bl	80102ac <memcpy>
	gbal->pitch_ecd_fb.rx_angle = gimbal_get_ecd_rel_angle(gbal->pitch_ecd_fb.rx_angle, gbal->pitch_ecd_center);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 f80c 	bl	80046be <gimbal_get_ecd_rel_angle>
 80046a6:	4603      	mov	r3, r0
 80046a8:	461a      	mov	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	gimbal_update_ecd_rel_angle(gbal);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f849 	bl	8004748 <gimbal_update_ecd_rel_angle>
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <gimbal_get_ecd_rel_angle>:
 * @brief     Get relative angle of gimbal motors.
 * @param[in] raw_ecd: abs yaw ecd angle from feedback
 * @param[in] center_offset: the center offset of ecd mode
 * */
int16_t gimbal_get_ecd_rel_angle(int16_t raw_ecd, int16_t center_offset)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	460a      	mov	r2, r1
 80046c8:	80fb      	strh	r3, [r7, #6]
 80046ca:	4613      	mov	r3, r2
 80046cc:	80bb      	strh	r3, [r7, #4]
  /* declare a 16-bit signed integer tmp to store the relative angle */
  int16_t tmp = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	81fb      	strh	r3, [r7, #14]

  /*  check if the center offset is in the upper half of the ecd range (4096-8191) */
  if (center_offset >= 4096){
 80046d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046da:	db16      	blt.n	800470a <gimbal_get_ecd_rel_angle+0x4c>
    /*  check if the raw ecd value is in the same half circle as the center offset */
    if (raw_ecd > center_offset - 4096)
 80046dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80046e0:	f6a3 72ff 	subw	r2, r3, #4095	; 0xfff
 80046e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dc05      	bgt.n	80046f8 <gimbal_get_ecd_rel_angle+0x3a>
      /*  the raw ecd value is in the same half circle as the center offset
          so, simply subtract the center offset from the raw ecd to get the relative angle */
      tmp = raw_ecd - center_offset;
 80046ec:	88fa      	ldrh	r2, [r7, #6]
 80046ee:	88bb      	ldrh	r3, [r7, #4]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	81fb      	strh	r3, [r7, #14]
 80046f6:	e01e      	b.n	8004736 <gimbal_get_ecd_rel_angle+0x78>
    else
      /*  the raw ecd value is in the different half circle from the center offset
          subtract the center offset from the raw ecd plus 8192 to get the relative angle */
      tmp = raw_ecd + 8192 - center_offset;
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	88bb      	ldrh	r3, [r7, #4]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	b29b      	uxth	r3, r3
 8004700:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8004704:	b29b      	uxth	r3, r3
 8004706:	81fb      	strh	r3, [r7, #14]
 8004708:	e015      	b.n	8004736 <gimbal_get_ecd_rel_angle+0x78>
  }
  /*  check if the center offset is in the lower half of the ecd range (0-4095) */
  else{
    /*  check if the raw ecd value is in the different half circle from the center offset */
    if (raw_ecd > center_offset + 4096)
 800470a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800470e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	429a      	cmp	r2, r3
 8004718:	dd08      	ble.n	800472c <gimbal_get_ecd_rel_angle+0x6e>
      /*  the raw ecd value is in the different half circle from the center offset
          subtract the center offset and 8192 from the raw ecd to get the relative angle */
      tmp = raw_ecd - 8192 - center_offset;
 800471a:	88fa      	ldrh	r2, [r7, #6]
 800471c:	88bb      	ldrh	r3, [r7, #4]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	b29b      	uxth	r3, r3
 8004722:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8004726:	b29b      	uxth	r3, r3
 8004728:	81fb      	strh	r3, [r7, #14]
 800472a:	e004      	b.n	8004736 <gimbal_get_ecd_rel_angle+0x78>
    else
      /*  the raw ecd value is in the same half circle as the center offset
          so, simply subtract the center offset from the raw ecd to get the relative angle */
      tmp = raw_ecd - center_offset;
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	88bb      	ldrh	r3, [r7, #4]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	b29b      	uxth	r3, r3
 8004734:	81fb      	strh	r3, [r7, #14]
  }
  return tmp;
 8004736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <gimbal_update_ecd_rel_angle>:
/*
 * @brief     Update gimbal motor relative and mapped angle using encoder
 * @param[in] gbal: main gimbal handler
 * */
void gimbal_update_ecd_rel_angle(Gimbal_t *gbal){
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	gbal->yaw_cur_rel_angle = in_out_map(gbal->yaw_ecd_fb.rx_angle,-4095,4096,-PI,PI);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800475e:	ed9f 2a16 	vldr	s4, [pc, #88]	; 80047b8 <gimbal_update_ecd_rel_angle+0x70>
 8004762:	eddf 1a16 	vldr	s3, [pc, #88]	; 80047bc <gimbal_update_ecd_rel_angle+0x74>
 8004766:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80047c0 <gimbal_update_ecd_rel_angle+0x78>
 800476a:	eddf 0a16 	vldr	s1, [pc, #88]	; 80047c4 <gimbal_update_ecd_rel_angle+0x7c>
 800476e:	eeb0 0a67 	vmov.f32	s0, s15
 8004772:	f7fe fc39 	bl	8002fe8 <in_out_map>
 8004776:	eef0 7a40 	vmov.f32	s15, s0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	edc3 7a06 	vstr	s15, [r3, #24]
	gbal->pitch_cur_rel_angle = in_out_map(gbal->pitch_ecd_fb.rx_angle,-4095,4096,-PI,PI);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800478e:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 80047b8 <gimbal_update_ecd_rel_angle+0x70>
 8004792:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80047bc <gimbal_update_ecd_rel_angle+0x74>
 8004796:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80047c0 <gimbal_update_ecd_rel_angle+0x78>
 800479a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80047c4 <gimbal_update_ecd_rel_angle+0x7c>
 800479e:	eeb0 0a67 	vmov.f32	s0, s15
 80047a2:	f7fe fc21 	bl	8002fe8 <in_out_map>
 80047a6:	eef0 7a40 	vmov.f32	s15, s0
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40490fdb 	.word	0x40490fdb
 80047bc:	c0490fdb 	.word	0xc0490fdb
 80047c0:	45800000 	.word	0x45800000
 80047c4:	c57ff000 	.word	0xc57ff000

080047c8 <gimbal_set_limited_angle>:
/*
 * @brief     set the target angle with limited range
 * @param[in] gbal: main gimbal handler
 * @param[in] target yaw and pitch relative angle(-pi, pi)
 */
void gimbal_set_limited_angle(Gimbal_t *gbal, float yaw_target_angle, float pitch_target_angle){
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80047d4:	edc7 0a01 	vstr	s1, [r7, #4]
	gbal->yaw_tar_angle = yaw_target_angle;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	611a      	str	r2, [r3, #16]
	gbal->pitch_tar_angle = pitch_target_angle;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	621a      	str	r2, [r3, #32]
	/* only set limit for yaw where is no slipring */
//	VAL_LIMIT(gbal->yaw_tar_angle,
//				   -PI,
//				    PI);
	/* set the limit for pitch */
	VAL_LIMIT(gbal->pitch_tar_angle,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80047ea:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004828 <gimbal_set_limited_angle+0x60>
 80047ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f6:	d803      	bhi.n	8004800 <gimbal_set_limited_angle+0x38>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a0c      	ldr	r2, [pc, #48]	; (800482c <gimbal_set_limited_angle+0x64>)
 80047fc:	621a      	str	r2, [r3, #32]
				   -PITCH_GYRO_DELTA,
					PITCH_GYRO_DELTA);
}
 80047fe:	e00d      	b.n	800481c <gimbal_set_limited_angle+0x54>
	VAL_LIMIT(gbal->pitch_tar_angle,
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	edd3 7a08 	vldr	s15, [r3, #32]
 8004806:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004830 <gimbal_set_limited_angle+0x68>
 800480a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	da00      	bge.n	8004816 <gimbal_set_limited_angle+0x4e>
}
 8004814:	e002      	b.n	800481c <gimbal_set_limited_angle+0x54>
	VAL_LIMIT(gbal->pitch_tar_angle,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a06      	ldr	r2, [pc, #24]	; (8004834 <gimbal_set_limited_angle+0x6c>)
 800481a:	621a      	str	r2, [r3, #32]
}
 800481c:	bf00      	nop
 800481e:	3714      	adds	r7, #20
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	bf060a95 	.word	0xbf060a95
 800482c:	bf060a95 	.word	0xbf060a95
 8004830:	3f060a95 	.word	0x3f060a95
 8004834:	3f060a95 	.word	0x3f060a95

08004838 <gimbal_update_comm_info>:
    VAL_LIMIT(gbal->yaw_tar_spd, -5000, 5000);
}

#ifndef GIMBAL_MOTOR_DEBUG
/******************************** For Comms Below ********************************/
static void gimbal_update_comm_info(Gimbal_t *gbal, CommMessageUnion_t *cmu){
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	float temp_angle = YAW_POSITIVE_DIR * gbal->yaw_cur_rel_angle * YAW_GEAR_RATIO;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	60fb      	str	r3, [r7, #12]
	cmu->comm_ga.angle_data[0] = -temp_angle;//the direction of this are inverse.
 8004848:	edd7 7a03 	vldr	s15, [r7, #12]
 800484c:	eef1 7a67 	vneg.f32	s15, s15
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	edc3 7a00 	vstr	s15, [r3]
	cmu->comm_ga.angle_data[1] = gbal->yaw_cur_abs_angle;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	605a      	str	r2, [r3, #4]
	cmu->comm_ga.angle_data[2] = 0;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	609a      	str	r2, [r3, #8]
	cmu->comm_ga.angle_data[3] = 0;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	60da      	str	r2, [r3, #12]
	cmu->comm_ga.send_flag = 1;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	2201      	movs	r2, #1
 8004872:	741a      	strb	r2, [r3, #16]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <gimbal_update_rc_rel_angle>:

static void gimbal_update_rc_rel_angle(Gimbal_t *gbal, RemoteControl_t *rc_hdlr){
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
	float cur_yaw_target = 0.0;
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
	float cur_pitch_target = 0.0;
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
	float delta_yaw= 0.0;
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]
	float delta_pitch = 0.0;
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
	//FIXME: not memcpy, may overwrite previous data, only test
	/* get the latest delta angle of pitch and yaw motor */
	if(rc_hdlr->control_mode == CTRLER_MODE){
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d12a      	bne.n	8004902 <gimbal_update_rc_rel_angle+0x82>
		//TODO fine tune the precision of the controller
		delta_yaw = in_out_map(rc_hdlr->ctrl.ch0, -CHANNEL_OFFSET_MAX_ABS_VAL, CHANNEL_OFFSET_MAX_ABS_VAL,
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048b2:	ee07 3a90 	vmov	s15, r3
 80048b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048ba:	ed9f 2a6d 	vldr	s4, [pc, #436]	; 8004a70 <gimbal_update_rc_rel_angle+0x1f0>
 80048be:	eddf 1a6d 	vldr	s3, [pc, #436]	; 8004a74 <gimbal_update_rc_rel_angle+0x1f4>
 80048c2:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 8004a78 <gimbal_update_rc_rel_angle+0x1f8>
 80048c6:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8004a7c <gimbal_update_rc_rel_angle+0x1fc>
 80048ca:	eeb0 0a67 	vmov.f32	s0, s15
 80048ce:	f7fe fb8b 	bl	8002fe8 <in_out_map>
 80048d2:	ed87 0a03 	vstr	s0, [r7, #12]
										-0.5*0.16667*PI, 0.5*0.16667*PI);//(-15d, 15d)
		delta_pitch = in_out_map(rc_hdlr->ctrl.ch1, -CHANNEL_OFFSET_MAX_ABS_VAL, CHANNEL_OFFSET_MAX_ABS_VAL,
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80048e4:	ed9f 2a66 	vldr	s4, [pc, #408]	; 8004a80 <gimbal_update_rc_rel_angle+0x200>
 80048e8:	eddf 1a66 	vldr	s3, [pc, #408]	; 8004a84 <gimbal_update_rc_rel_angle+0x204>
 80048ec:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8004a78 <gimbal_update_rc_rel_angle+0x1f8>
 80048f0:	eddf 0a62 	vldr	s1, [pc, #392]	; 8004a7c <gimbal_update_rc_rel_angle+0x1fc>
 80048f4:	eeb0 0a67 	vmov.f32	s0, s15
 80048f8:	f7fe fb76 	bl	8002fe8 <in_out_map>
 80048fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004900:	e05e      	b.n	80049c0 <gimbal_update_rc_rel_angle+0x140>
										-0.39*0.16667*PI, 0.391*0.16667*PI);//(-12d, 12d)
	}
	else if(rc_hdlr->control_mode == PC_MODE){
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004908:	2b01      	cmp	r3, #1
 800490a:	d159      	bne.n	80049c0 <gimbal_update_rc_rel_angle+0x140>
		//TODO fine tune the precision of the mouse
		/* expotional filter applied here */
		rc_hdlr->pc.mouse.x = ewma_filter(&gbal->ewma_f_x, rc_hdlr->pc.mouse.x);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f103 02cc 	add.w	r2, r3, #204	; 0xcc
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004920:	eeb0 0a67 	vmov.f32	s0, s15
 8004924:	4610      	mov	r0, r2
 8004926:	f7fe fc13 	bl	8003150 <ewma_filter>
 800492a:	eef0 7a40 	vmov.f32	s15, s0
 800492e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004932:	ee17 3a90 	vmov	r3, s15
 8004936:	b21a      	sxth	r2, r3
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	819a      	strh	r2, [r3, #12]
//		rc_hdlr->pc.mouse.x = sliding_window_mean_filter(&gbal->swm_f_x, rc_hdlr->pc.mouse.x);
		delta_yaw = in_out_map(rc_hdlr->pc.mouse.x, -MOUSE_MAX_SPEED_VALUE, MOUSE_MAX_SPEED_VALUE,
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800494a:	ed9f 2a4f 	vldr	s4, [pc, #316]	; 8004a88 <gimbal_update_rc_rel_angle+0x208>
 800494e:	eddf 1a4f 	vldr	s3, [pc, #316]	; 8004a8c <gimbal_update_rc_rel_angle+0x20c>
 8004952:	ed9f 1a4f 	vldr	s2, [pc, #316]	; 8004a90 <gimbal_update_rc_rel_angle+0x210>
 8004956:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8004a94 <gimbal_update_rc_rel_angle+0x214>
 800495a:	eeb0 0a67 	vmov.f32	s0, s15
 800495e:	f7fe fb43 	bl	8002fe8 <in_out_map>
 8004962:	ed87 0a03 	vstr	s0, [r7, #12]
												-30*PI, 30*PI);// 1000 -> 2*pi, old value +-30*PI
		rc_hdlr->pc.mouse.y = ewma_filter(&gbal->ewma_f_y, rc_hdlr->pc.mouse.y);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800497a:	eeb0 0a67 	vmov.f32	s0, s15
 800497e:	4610      	mov	r0, r2
 8004980:	f7fe fbe6 	bl	8003150 <ewma_filter>
 8004984:	eef0 7a40 	vmov.f32	s15, s0
 8004988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800498c:	ee17 3a90 	vmov	r3, s15
 8004990:	b21a      	sxth	r2, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	81da      	strh	r2, [r3, #14]
//		rc_hdlr->pc.mouse.y = sliding_window_mean_filter(&gbal->swm_f_y, rc_hdlr->pc.mouse.y);
		delta_pitch = in_out_map(rc_hdlr->pc.mouse.y, -MOUSE_MAX_SPEED_VALUE, MOUSE_MAX_SPEED_VALUE,
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a4:	ed9f 2a38 	vldr	s4, [pc, #224]	; 8004a88 <gimbal_update_rc_rel_angle+0x208>
 80049a8:	eddf 1a38 	vldr	s3, [pc, #224]	; 8004a8c <gimbal_update_rc_rel_angle+0x20c>
 80049ac:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8004a90 <gimbal_update_rc_rel_angle+0x210>
 80049b0:	eddf 0a38 	vldr	s1, [pc, #224]	; 8004a94 <gimbal_update_rc_rel_angle+0x214>
 80049b4:	eeb0 0a67 	vmov.f32	s0, s15
 80049b8:	f7fe fb16 	bl	8002fe8 <in_out_map>
 80049bc:	ed87 0a02 	vstr	s0, [r7, #8]
												-30*PI, 30*PI);// 1000 -> 2*pi, old value +-30*PI
	}
	/* get the latest angle position of pitch and yaw motor */
	gimbal_get_ecd_fb_data(&gimbal,
 80049c0:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <gimbal_update_rc_rel_angle+0x218>)
 80049c2:	4936      	ldr	r1, [pc, #216]	; (8004a9c <gimbal_update_rc_rel_angle+0x21c>)
 80049c4:	4836      	ldr	r0, [pc, #216]	; (8004aa0 <gimbal_update_rc_rel_angle+0x220>)
 80049c6:	f7ff fe41 	bl	800464c <gimbal_get_ecd_fb_data>
						   &(motor_data[yaw_id].motor_feedback),
						   &(motor_data[pitch_id].motor_feedback));
	/* NOTE: Even if the target was beyond pi, the motor still tracked the same dir bc of spd loop and phase delay,
	 * and right about next time, the feedback of motor would be changed from pi to -pi(or inverse), which will
	 * also update the target into right scale of angle */
	if(gbal->gimbal_motor_mode == GYRO_MODE){
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 3ab0 	ldrb.w	r3, [r3, #2736]	; 0xab0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d112      	bne.n	80049fa <gimbal_update_rc_rel_angle+0x17a>
		cur_yaw_target = gbal->yaw_cur_abs_angle - delta_yaw; // only yaw use abs values
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	ed93 7a05 	vldr	s14, [r3, #20]
 80049da:	edd7 7a03 	vldr	s15, [r7, #12]
 80049de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e2:	edc7 7a05 	vstr	s15, [r7, #20]
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80049ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80049f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f4:	edc7 7a04 	vstr	s15, [r7, #16]
 80049f8:	e011      	b.n	8004a1e <gimbal_update_rc_rel_angle+0x19e>
	}
	else{
		cur_yaw_target = gbal->yaw_cur_rel_angle - delta_yaw;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8004a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a08:	edc7 7a05 	vstr	s15, [r7, #20]
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004a12:	ed97 7a02 	vldr	s14, [r7, #8]
 8004a16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a1a:	edc7 7a04 	vstr	s15, [r7, #16]
	}
	/* avoid small noise to spin the yaw */
	if(fabs(delta_yaw)>= 0.5*DEGREE2RAD)
 8004a1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a22:	eef0 7ae7 	vabs.f32	s15, s15
 8004a26:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004aa4 <gimbal_update_rc_rel_angle+0x224>
 8004a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	db02      	blt.n	8004a3a <gimbal_update_rc_rel_angle+0x1ba>
		gbal->yaw_tar_angle = cur_yaw_target;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	611a      	str	r2, [r3, #16]
	if(fabs(delta_pitch)>= 0.5*DEGREE2RAD)
 8004a3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a3e:	eef0 7ae7 	vabs.f32	s15, s15
 8004a42:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004aa4 <gimbal_update_rc_rel_angle+0x224>
 8004a46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	db02      	blt.n	8004a56 <gimbal_update_rc_rel_angle+0x1d6>
		gbal->pitch_tar_angle = cur_pitch_target;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	621a      	str	r2, [r3, #32]
	/* independent mode don't allow set yaw angle */
	if(gbal->gimbal_act_mode == INDPET_MODE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d103      	bne.n	8004a68 <gimbal_update_rc_rel_angle+0x1e8>
		gbal->yaw_tar_angle = 0;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f04f 0200 	mov.w	r2, #0
 8004a66:	611a      	str	r2, [r3, #16]
}
 8004a68:	bf00      	nop
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	3e860b42 	.word	0x3e860b42
 8004a74:	be860b42 	.word	0xbe860b42
 8004a78:	44250000 	.word	0x44250000
 8004a7c:	c4250000 	.word	0xc4250000
 8004a80:	3e51a510 	.word	0x3e51a510
 8004a84:	be511bcd 	.word	0xbe511bcd
 8004a88:	42bc7edd 	.word	0x42bc7edd
 8004a8c:	c2bc7edd 	.word	0xc2bc7edd
 8004a90:	46ea6000 	.word	0x46ea6000
 8004a94:	c6ea6000 	.word	0xc6ea6000
 8004a98:	200055e4 	.word	0x200055e4
 8004a9c:	20005550 	.word	0x20005550
 8004aa0:	200047c0 	.word	0x200047c0
 8004aa4:	3c0efa39 	.word	0x3c0efa39

08004aa8 <gimbal_rc_mode_selection>:
/*
 * @brief     mode selection based on remote controller
 * @param[in] chassis: main chassis handler
 * @param[in] rc: main remote controller handler
 * */
static void gimbal_rc_mode_selection(Gimbal_t* gbal, RemoteControl_t *rc_hdlr){
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
	BoardMode_t    board_mode = IDLE_MODE;
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	73fb      	strb	r3, [r7, #15]
	BoardActMode_t act_mode   = INDPET_MODE;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	73bb      	strb	r3, [r7, #14]
	GimbalMotorMode_t motor_mode = ENCODE_MODE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	737b      	strb	r3, [r7, #13]
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d132      	bne.n	8004b2e <gimbal_rc_mode_selection+0x86>
		if(rc_hdlr->ctrl.s1 == SW_MID){
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	7a1b      	ldrb	r3, [r3, #8]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d102      	bne.n	8004ad6 <gimbal_rc_mode_selection+0x2e>
			/* if s1 down, then just shut down everything */
			board_mode = IDLE_MODE;
 8004ad0:	2304      	movs	r3, #4
 8004ad2:	73fb      	strb	r3, [r7, #15]
 8004ad4:	e053      	b.n	8004b7e <gimbal_rc_mode_selection+0xd6>
		}
		else{
			/* else just set up to patrol mode */
			board_mode = PATROL_MODE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
			if(rc_hdlr->ctrl.s1 == SW_UP){
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	7a1b      	ldrb	r3, [r3, #8]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d110      	bne.n	8004b04 <gimbal_rc_mode_selection+0x5c>
				/* chassis follow gimbal center while follow yaw axis */
				act_mode = GIMBAL_CENTER;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73bb      	strb	r3, [r7, #14]
				motor_mode = GYRO_MODE;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	737b      	strb	r3, [r7, #13]
#ifdef MODE_DEBUG
				/* LD indicator, For debug purposes only */
#endif
				if(rc_hdlr->ctrl.s1 == SW_UP && rc_hdlr->ctrl.s2 == SW_DOWN){
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	7a1b      	ldrb	r3, [r3, #8]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d145      	bne.n	8004b7e <gimbal_rc_mode_selection+0xd6>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	7a5b      	ldrb	r3, [r3, #9]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d141      	bne.n	8004b7e <gimbal_rc_mode_selection+0xd6>
					/* spinning chassis while follow yaw axis */
					act_mode = SELF_GYRO;
 8004afa:	2302      	movs	r3, #2
 8004afc:	73bb      	strb	r3, [r7, #14]
					motor_mode = GYRO_MODE;//ENCODE_MODE
 8004afe:	2300      	movs	r3, #0
 8004b00:	737b      	strb	r3, [r7, #13]
 8004b02:	e03c      	b.n	8004b7e <gimbal_rc_mode_selection+0xd6>
#ifdef MODE_DEBUG
					/* LD indicator, For debug purposes only */
#endif
				}
			}
			else if(rc_hdlr->ctrl.s1 == SW_DOWN){
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	7a1b      	ldrb	r3, [r3, #8]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d138      	bne.n	8004b7e <gimbal_rc_mode_selection+0xd6>
				/* chassis only follow yaw axis */
				act_mode = GIMBAL_FOLLOW;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	73bb      	strb	r3, [r7, #14]
				motor_mode = ENCODE_MODE;
 8004b10:	2301      	movs	r3, #1
 8004b12:	737b      	strb	r3, [r7, #13]
#ifdef MODE_DEBUG
				/* LD indicator, For debug purposes only */
#endif
				if(rc_hdlr->ctrl.s1 == SW_DOWN && rc_hdlr->ctrl.s2 == SW_DOWN){
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	7a1b      	ldrb	r3, [r3, #8]
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d130      	bne.n	8004b7e <gimbal_rc_mode_selection+0xd6>
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	7a5b      	ldrb	r3, [r3, #9]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d12c      	bne.n	8004b7e <gimbal_rc_mode_selection+0xd6>
					/* independent mode */
					act_mode = INDPET_MODE;
 8004b24:	2303      	movs	r3, #3
 8004b26:	73bb      	strb	r3, [r7, #14]
					motor_mode = ENCODE_MODE;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	737b      	strb	r3, [r7, #13]
 8004b2c:	e027      	b.n	8004b7e <gimbal_rc_mode_selection+0xd6>
			}
		}
	}

	/* pc mode selection */
	else if(rc_hdlr->control_mode == PC_MODE){
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d122      	bne.n	8004b7e <gimbal_rc_mode_selection+0xd6>
		/* from comm rc pack to obtain mode */
		board_mode = gbal->gimbal_mode;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 3ab2 	ldrb.w	r3, [r3, #2738]	; 0xab2
 8004b3e:	73fb      	strb	r3, [r7, #15]
		act_mode = gbal->gimbal_act_mode;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 8004b46:	73bb      	strb	r3, [r7, #14]

		/* update motor mode */
		if(rc_hdlr->pc.mouse.right_click.status == PRESSED)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	7ddb      	ldrb	r3, [r3, #23]
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d102      	bne.n	8004b56 <gimbal_rc_mode_selection+0xae>
			board_mode = AUTO_AIM_MODE;
 8004b50:	2302      	movs	r3, #2
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	e002      	b.n	8004b5c <gimbal_rc_mode_selection+0xb4>
		else
			uc_rx_pack_init(&temp_pack);
 8004b56:	4813      	ldr	r0, [pc, #76]	; (8004ba4 <gimbal_rc_mode_selection+0xfc>)
 8004b58:	f003 fa7a 	bl	8008050 <uc_rx_pack_init>

		if(act_mode == GIMBAL_FOLLOW){
 8004b5c:	7bbb      	ldrb	r3, [r7, #14]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d102      	bne.n	8004b68 <gimbal_rc_mode_selection+0xc0>
			motor_mode = ENCODE_MODE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	737b      	strb	r3, [r7, #13]
 8004b66:	e00a      	b.n	8004b7e <gimbal_rc_mode_selection+0xd6>
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
		}
		else if(act_mode == GIMBAL_CENTER){
 8004b68:	7bbb      	ldrb	r3, [r7, #14]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d102      	bne.n	8004b74 <gimbal_rc_mode_selection+0xcc>
			motor_mode = GYRO_MODE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	737b      	strb	r3, [r7, #13]
 8004b72:	e004      	b.n	8004b7e <gimbal_rc_mode_selection+0xd6>
#ifdef MODE_DEBUG
			/* LD indicator, For debug purposes only */
#endif
		}
		else if(act_mode == SELF_GYRO){
 8004b74:	7bbb      	ldrb	r3, [r7, #14]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d101      	bne.n	8004b7e <gimbal_rc_mode_selection+0xd6>
			motor_mode = GYRO_MODE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	737b      	strb	r3, [r7, #13]
#endif
		}
	}

	/* set modes */
	gimbal_set_mode(gbal, board_mode);
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fb7c 	bl	8004280 <gimbal_set_mode>
	gimbal_set_act_mode(gbal, act_mode);// act mode only works when debuging with rc
 8004b88:	7bbb      	ldrb	r3, [r7, #14]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f7ff fb87 	bl	80042a0 <gimbal_set_act_mode>
	gimbal_set_motor_mode(gbal, motor_mode);
 8004b92:	7b7b      	ldrb	r3, [r7, #13]
 8004b94:	4619      	mov	r1, r3
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fb92 	bl	80042c0 <gimbal_set_motor_mode>
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	2000d62c 	.word	0x2000d62c

08004ba8 <gimbal_update_autoaim_rel_angle>:

/******************************** For Comms Above **************************************/
/******************************** For Auto Aiming Below ********************************/
static void gimbal_update_autoaim_rel_angle(Gimbal_t *gbal, RemoteControl_t *rc_hdlr, UC_Recv_Pack_t *pack){
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
	float cur_yaw_target = 0.0;
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
	float cur_pitch_target = 0.0;
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]
	float delta_yaw= 0.0;
 8004bc0:	f04f 0300 	mov.w	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
	float delta_pitch = 0.0;
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	613b      	str	r3, [r7, #16]

	if(rc_hdlr->control_mode == PC_MODE){
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d141      	bne.n	8004c5a <gimbal_update_autoaim_rel_angle+0xb2>
		/* filter applied here, TODO may add kalman filter here, depends on data input */
		pack->delta_yaw = ewma_filter(&gbal->ewma_f_aim_yaw, pack->delta_yaw);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f603 225c 	addw	r2, r3, #2652	; 0xa5c
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	edd3 7a01 	vldr	s15, [r3, #4]
 8004be2:	eeb0 0a67 	vmov.f32	s0, s15
 8004be6:	4610      	mov	r0, r2
 8004be8:	f7fe fab2 	bl	8003150 <ewma_filter>
 8004bec:	eef0 7a40 	vmov.f32	s15, s0
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	edc3 7a01 	vstr	s15, [r3, #4]
//		pack->yaw_data = sliding_window_mean_filter(&gbal->swm_f_aim_yaw, pack->yaw_data);
		delta_yaw = in_out_map(pack->delta_yaw, -180.0, 180.0, -PI,PI);// 1000 -> 2*pi, old value +-30*PI
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bfc:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8004d28 <gimbal_update_autoaim_rel_angle+0x180>
 8004c00:	eddf 1a4a 	vldr	s3, [pc, #296]	; 8004d2c <gimbal_update_autoaim_rel_angle+0x184>
 8004c04:	ed9f 1a4a 	vldr	s2, [pc, #296]	; 8004d30 <gimbal_update_autoaim_rel_angle+0x188>
 8004c08:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8004d34 <gimbal_update_autoaim_rel_angle+0x18c>
 8004c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8004c10:	f7fe f9ea 	bl	8002fe8 <in_out_map>
 8004c14:	ed87 0a05 	vstr	s0, [r7, #20]
		pack->delta_pitch = ewma_filter(&gbal->ewma_f_aim_pitch, pack->delta_pitch);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f603 2268 	addw	r2, r3, #2664	; 0xa68
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c24:	eeb0 0a67 	vmov.f32	s0, s15
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f7fe fa91 	bl	8003150 <ewma_filter>
 8004c2e:	eef0 7a40 	vmov.f32	s15, s0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	edc3 7a02 	vstr	s15, [r3, #8]
//		pack->pitch_data = sliding_window_mean_filter(&gbal->swm_f_aim_pitch, pack->yaw_data);
		delta_pitch = in_out_map(pack->delta_pitch, -180.0, 180.0, -PI,PI);// 1000 -> 2*pi, old value +-30*PI
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c3e:	ed9f 2a3a 	vldr	s4, [pc, #232]	; 8004d28 <gimbal_update_autoaim_rel_angle+0x180>
 8004c42:	eddf 1a3a 	vldr	s3, [pc, #232]	; 8004d2c <gimbal_update_autoaim_rel_angle+0x184>
 8004c46:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8004d30 <gimbal_update_autoaim_rel_angle+0x188>
 8004c4a:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8004d34 <gimbal_update_autoaim_rel_angle+0x18c>
 8004c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c52:	f7fe f9c9 	bl	8002fe8 <in_out_map>
 8004c56:	ed87 0a04 	vstr	s0, [r7, #16]
	}
	/* get the latest angle position of pitch and yaw motor */
	gimbal_get_ecd_fb_data(&gimbal,
 8004c5a:	4a37      	ldr	r2, [pc, #220]	; (8004d38 <gimbal_update_autoaim_rel_angle+0x190>)
 8004c5c:	4937      	ldr	r1, [pc, #220]	; (8004d3c <gimbal_update_autoaim_rel_angle+0x194>)
 8004c5e:	4838      	ldr	r0, [pc, #224]	; (8004d40 <gimbal_update_autoaim_rel_angle+0x198>)
 8004c60:	f7ff fcf4 	bl	800464c <gimbal_get_ecd_fb_data>
						   &(motor_data[yaw_id].motor_feedback),
						   &(motor_data[pitch_id].motor_feedback));
	/* NOTE: Even if the target was beyond pi, the motor still tracked the same dir bc of spd loop and phase delay,
	 * and right about next time, the feedback of motor would be changed from pi to -pi(or inverse), which will
	 * also update the target into right scale of angle */
	if(gbal->gimbal_motor_mode == GYRO_MODE){
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f893 3ab0 	ldrb.w	r3, [r3, #2736]	; 0xab0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d112      	bne.n	8004c94 <gimbal_update_autoaim_rel_angle+0xec>
		cur_yaw_target = gbal->yaw_cur_abs_angle - delta_yaw; // only yaw use abs values
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c74:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c7c:	edc7 7a07 	vstr	s15, [r7, #28]
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004c86:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c8e:	edc7 7a06 	vstr	s15, [r7, #24]
 8004c92:	e011      	b.n	8004cb8 <gimbal_update_autoaim_rel_angle+0x110>
	}
	else{
		cur_yaw_target = gbal->yaw_cur_rel_angle - delta_yaw;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	ed93 7a06 	vldr	s14, [r3, #24]
 8004c9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca2:	edc7 7a07 	vstr	s15, [r7, #28]
		cur_pitch_target = gbal->pitch_cur_rel_angle + delta_pitch;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004cac:	ed97 7a04 	vldr	s14, [r7, #16]
 8004cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb4:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	/* avoid small noise to spin the yaw */
	if(fabs(delta_yaw)>= 0.3*DEGREE2RAD)
 8004cb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004cbc:	eef0 7ae7 	vabs.f32	s15, s15
 8004cc0:	ee17 0a90 	vmov	r0, s15
 8004cc4:	f7fb fc40 	bl	8000548 <__aeabi_f2d>
 8004cc8:	a315      	add	r3, pc, #84	; (adr r3, 8004d20 <gimbal_update_autoaim_rel_angle+0x178>)
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f7fb ff19 	bl	8000b04 <__aeabi_dcmpge>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <gimbal_update_autoaim_rel_angle+0x136>
		gbal->yaw_tar_angle = cur_yaw_target;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	611a      	str	r2, [r3, #16]
	if(fabs(delta_pitch)>= 0.3*DEGREE2RAD)
 8004cde:	edd7 7a04 	vldr	s15, [r7, #16]
 8004ce2:	eef0 7ae7 	vabs.f32	s15, s15
 8004ce6:	ee17 0a90 	vmov	r0, s15
 8004cea:	f7fb fc2d 	bl	8000548 <__aeabi_f2d>
 8004cee:	a30c      	add	r3, pc, #48	; (adr r3, 8004d20 <gimbal_update_autoaim_rel_angle+0x178>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb ff06 	bl	8000b04 <__aeabi_dcmpge>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <gimbal_update_autoaim_rel_angle+0x15c>
		gbal->pitch_tar_angle = cur_pitch_target;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	621a      	str	r2, [r3, #32]
	/* independent mode don't allow set yaw angle */
	if(gbal->gimbal_act_mode == INDPET_MODE)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 8004d0a:	2b03      	cmp	r3, #3
 8004d0c:	d103      	bne.n	8004d16 <gimbal_update_autoaim_rel_angle+0x16e>
		gbal->yaw_tar_angle = 0;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	611a      	str	r2, [r3, #16]
}
 8004d16:	bf00      	nop
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	59999999 	.word	0x59999999
 8004d24:	3f757255 	.word	0x3f757255
 8004d28:	40490fdb 	.word	0x40490fdb
 8004d2c:	c0490fdb 	.word	0xc0490fdb
 8004d30:	43340000 	.word	0x43340000
 8004d34:	c3340000 	.word	0xc3340000
 8004d38:	200055e4 	.word	0x200055e4
 8004d3c:	20005550 	.word	0x20005550
 8004d40:	200047c0 	.word	0x200047c0

08004d44 <gimbal_cmd_exec>:
 * @brief     Execute the cmd set by previous gimbal function. Usually the last called func.
 * @param[in] gbal: main gimbal handler
 * @param[in] mode: DUAL_LOOP_PID_CONTROL/SINGLE_LOOP_PID_CONTROL/GIMBAL_STOP
 * retval 	  None
 */
void gimbal_cmd_exec(Gimbal_t *gbal, uint8_t mode){
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
	if(mode == DUAL_LOOP_PID_CONTROL)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d112      	bne.n	8004d7c <gimbal_cmd_exec+0x38>
	 /* set motor voltage through cascade pid controller */
		  set_motor_can_volt(gimbal.yaw_tar_angle,
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <gimbal_cmd_exec+0xd0>)
 8004d58:	edd3 7a04 	vldr	s15, [r3, #16]
 8004d5c:	4b2d      	ldr	r3, [pc, #180]	; (8004e14 <gimbal_cmd_exec+0xd0>)
 8004d5e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	4b2b      	ldr	r3, [pc, #172]	; (8004e14 <gimbal_cmd_exec+0xd0>)
 8004d66:	f893 3ab0 	ldrb.w	r3, [r3, #2736]	; 0xab0
 8004d6a:	2100      	movs	r1, #0
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	eef0 0a47 	vmov.f32	s1, s14
 8004d72:	eeb0 0a67 	vmov.f32	s0, s15
 8004d76:	f001 ffbb 	bl	8006cf0 <set_motor_can_volt>
	}
	else{
		motor_data[pitch_id].tx_data = 0;
		motor_data[yaw_id].tx_data = 0;
	}
}
 8004d7a:	e047      	b.n	8004e0c <gimbal_cmd_exec+0xc8>
	else if(mode == SINGLE_LOOP_PID_CONTROL){ // only spd control
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d13c      	bne.n	8004dfc <gimbal_cmd_exec+0xb8>
		motor_data[pitch_id].tx_data = pid_single_loop_control(gbal->pitch_tar_spd,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8004d88:	ee07 3a90 	vmov	s15, r3
 8004d8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
														motor_data[pitch_id].motor_feedback.rx_rpm);
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <gimbal_cmd_exec+0xd4>)
 8004d92:	f9b3 336e 	ldrsh.w	r3, [r3, #878]	; 0x36e
		motor_data[pitch_id].tx_data = pid_single_loop_control(gbal->pitch_tar_spd,
 8004d96:	ee07 3a10 	vmov	s14, r3
 8004d9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d9e:	eef0 0a47 	vmov.f32	s1, s14
 8004da2:	481e      	ldr	r0, [pc, #120]	; (8004e1c <gimbal_cmd_exec+0xd8>)
 8004da4:	eeb0 0a67 	vmov.f32	s0, s15
 8004da8:	f7fd ffe2 	bl	8002d70 <pid_single_loop_control>
 8004dac:	eef0 7a40 	vmov.f32	s15, s0
 8004db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004db4:	ee17 2a90 	vmov	r2, s15
 8004db8:	4b17      	ldr	r3, [pc, #92]	; (8004e18 <gimbal_cmd_exec+0xd4>)
 8004dba:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
		motor_data[yaw_id].tx_data = pid_single_loop_control(gbal->yaw_tar_spd,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8004dc4:	ee07 3a90 	vmov	s15, r3
 8004dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
														motor_data[yaw_id].motor_feedback.rx_rpm);
 8004dcc:	4b12      	ldr	r3, [pc, #72]	; (8004e18 <gimbal_cmd_exec+0xd4>)
 8004dce:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
		motor_data[yaw_id].tx_data = pid_single_loop_control(gbal->yaw_tar_spd,
 8004dd2:	ee07 3a10 	vmov	s14, r3
 8004dd6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004dda:	eef0 0a47 	vmov.f32	s1, s14
 8004dde:	4810      	ldr	r0, [pc, #64]	; (8004e20 <gimbal_cmd_exec+0xdc>)
 8004de0:	eeb0 0a67 	vmov.f32	s0, s15
 8004de4:	f7fd ffc4 	bl	8002d70 <pid_single_loop_control>
 8004de8:	eef0 7a40 	vmov.f32	s15, s0
 8004dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004df0:	ee17 2a90 	vmov	r2, s15
 8004df4:	4b08      	ldr	r3, [pc, #32]	; (8004e18 <gimbal_cmd_exec+0xd4>)
 8004df6:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
}
 8004dfa:	e007      	b.n	8004e0c <gimbal_cmd_exec+0xc8>
		motor_data[pitch_id].tx_data = 0;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <gimbal_cmd_exec+0xd4>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
		motor_data[yaw_id].tx_data = 0;
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <gimbal_cmd_exec+0xd4>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
}
 8004e0c:	bf00      	nop
 8004e0e:	3708      	adds	r7, #8
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	200047c0 	.word	0x200047c0
 8004e18:	20005278 	.word	0x20005278
 8004e1c:	2000559c 	.word	0x2000559c
 8004e20:	20005508 	.word	0x20005508
 8004e24:	00000000 	.word	0x00000000

08004e28 <Shoot_Task_Func>:
int16_t shoot_counter= 0;
extern TIM_HandleTypeDef htim1;

//FIXME: Once we have referee system, we can limit the motor power
void Shoot_Task_Func(void const * argument)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  shoot_task_init(&shoot);
 8004e30:	484f      	ldr	r0, [pc, #316]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e32:	f000 f8a7 	bl	8004f84 <shoot_task_init>

  /* set task exec period */
  TickType_t xLastWakeTime;
  const TickType_t xFrequency = pdMS_TO_TICKS(10); // task exec period 10ms
 8004e36:	230a      	movs	r3, #10
 8004e38:	60fb      	str	r3, [r7, #12]

  /* init the task ticks */
  xLastWakeTime = xTaskGetTickCount();
 8004e3a:	f00a fa71 	bl	800f320 <xTaskGetTickCount>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	60bb      	str	r3, [r7, #8]
  for(;;)
  {

	  //FIXME: rc debug needed
//	  if(gimbal.gimbal_mode == DEBUG_MODE)
	  shoot_mode_rc_selection(&shoot, &rc);
 8004e42:	494c      	ldr	r1, [pc, #304]	; (8004f74 <Shoot_Task_Func+0x14c>)
 8004e44:	484a      	ldr	r0, [pc, #296]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e46:	f000 fb6d 	bl	8005524 <shoot_mode_rc_selection>

	  /* select lid status */
	  shoot_lid_status_selection(&shoot, &rc);
 8004e4a:	494a      	ldr	r1, [pc, #296]	; (8004f74 <Shoot_Task_Func+0x14c>)
 8004e4c:	4848      	ldr	r0, [pc, #288]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e4e:	f000 fbb6 	bl	80055be <shoot_lid_status_selection>

	  /* get feedback of the magazine motor */
	  shoot_mag_get_rel_angle(&shoot);
 8004e52:	4847      	ldr	r0, [pc, #284]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e54:	f000 fabc 	bl	80053d0 <shoot_mag_get_rel_angle>

	  /* check the magazine status */
	  shoot_detect_mag_status(&shoot);
 8004e58:	4845      	ldr	r0, [pc, #276]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e5a:	f000 fbbd 	bl	80055d8 <shoot_detect_mag_status>
	  /********** sentry only begins **********/
//	  if(comm_pack.vision.fire_cmd == 1)
//	  {
	  /********** sentry only ends ***********/
	  	 /* determine if open lid */
	  	 if(shoot.lid_status == OPEN){//if sentry, delete this function
 8004e5e:	4b44      	ldr	r3, [pc, #272]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d103      	bne.n	8004e70 <Shoot_Task_Func+0x48>
	  		set_servo_value(SERVO_PWM_OPEN_LID);
 8004e68:	2050      	movs	r0, #80	; 0x50
 8004e6a:	f000 f9c9 	bl	8005200 <set_servo_value>
 8004e6e:	e007      	b.n	8004e80 <Shoot_Task_Func+0x58>
	  	 }
	  	 else if(shoot.lid_status == CLOSE){
 8004e70:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e72:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d102      	bne.n	8004e80 <Shoot_Task_Func+0x58>
	  	 	set_servo_value(SERVO_PWM_CLOSE_LID);
 8004e7a:	20f5      	movs	r0, #245	; 0xf5
 8004e7c:	f000 f9c0 	bl	8005200 <set_servo_value>
	  	 }

	  	 /* formal shoot task functions begins */
	  	 if(shoot.shoot_act_mode == SHOOT_CEASE){
 8004e80:	4b3b      	ldr	r3, [pc, #236]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e82:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d106      	bne.n	8004e98 <Shoot_Task_Func+0x70>
	  		shoot.mag_turns_counter = 0;//clear magazine turns
 8004e8a:	4b39      	ldr	r3, [pc, #228]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	615a      	str	r2, [r3, #20]
	  		shoot_stop(&shoot);
 8004e90:	4837      	ldr	r0, [pc, #220]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e92:	f000 f9c7 	bl	8005224 <shoot_stop>
 8004e96:	e05a      	b.n	8004f4e <Shoot_Task_Func+0x126>
//	  		buzzer_stop();
	  	 }
	  	 else if(shoot.shoot_act_mode == SHOOT_RESERVE){
 8004e98:	4b35      	ldr	r3, [pc, #212]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004e9a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d125      	bne.n	8004eee <Shoot_Task_Func+0xc6>
			  /* reserve the magazine motor for a while */
			  //FIXME: didn't consider if the reserve spin also stuck
			  shoot_reserve_flag = 1;
 8004ea2:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <Shoot_Task_Func+0x150>)
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
			  while(shoot_reserve_counter<20){//20*100ms = 2s
 8004ea8:	e016      	b.n	8004ed8 <Shoot_Task_Func+0xb0>
				  set_mag_motor_angle(&shoot, shoot.mag_cur_angle - 0.3*PI);
 8004eaa:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004eac:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eb0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8004f7c <Shoot_Task_Func+0x154>
 8004eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eb8:	eeb0 0a67 	vmov.f32	s0, s15
 8004ebc:	482c      	ldr	r0, [pc, #176]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004ebe:	f000 f973 	bl	80051a8 <set_mag_motor_angle>
#ifndef USE_CAN_FRIC
				  set_fric_motor_speed(&shoot, LEVEL_ONE_PWM);
#else
				  set_fric_motor_current(&shoot, LEVEL_ONE_CAN_SPD);
 8004ec2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004ec6:	482a      	ldr	r0, [pc, #168]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004ec8:	f000 f989 	bl	80051de <set_fric_motor_current>
#endif
				  shoot_execute(&shoot);
 8004ecc:	4828      	ldr	r0, [pc, #160]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004ece:	f000 fa09 	bl	80052e4 <shoot_execute>
				  osDelay(1);//release mcu
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	f009 fd3f 	bl	800e956 <osDelay>
			  while(shoot_reserve_counter<20){//20*100ms = 2s
 8004ed8:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <Shoot_Task_Func+0x158>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b13      	cmp	r3, #19
 8004ede:	d9e4      	bls.n	8004eaa <Shoot_Task_Func+0x82>
			  }
			  /* reset timer13 flag and counter */
			  shoot_reserve_flag = 0;
 8004ee0:	4b25      	ldr	r3, [pc, #148]	; (8004f78 <Shoot_Task_Func+0x150>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
			  shoot_reserve_counter = 0;
 8004ee6:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <Shoot_Task_Func+0x158>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	701a      	strb	r2, [r3, #0]
 8004eec:	e02f      	b.n	8004f4e <Shoot_Task_Func+0x126>
		  }
	  	  else if(shoot.shoot_act_mode == SHOOT_ONCE){
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004ef0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <Shoot_Task_Func+0xe6>
	  		 /* need referee system to determine shooting spd */
	  		  set_mag_motor_angle(&shoot, 0.3*PI);
 8004ef8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8004f7c <Shoot_Task_Func+0x154>
 8004efc:	481c      	ldr	r0, [pc, #112]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004efe:	f000 f953 	bl	80051a8 <set_mag_motor_angle>
#ifndef USE_CAN_FRIC
	  		  set_fric_motor_speed(&shoot, LEVEL_ONE_PWM);
#else
	  		  set_fric_motor_current(&shoot, LEVEL_ONE_CAN_SPD);
 8004f02:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004f06:	481a      	ldr	r0, [pc, #104]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004f08:	f000 f969 	bl	80051de <set_fric_motor_current>
 8004f0c:	e01f      	b.n	8004f4e <Shoot_Task_Func+0x126>
#endif
		  }
		  else if(shoot.shoot_act_mode == SHOOT_CONT){
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004f10:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d11a      	bne.n	8004f4e <Shoot_Task_Func+0x126>
			  if(rc.pc.mouse.right_click.status == PRESSED){
				  /* auto aimming engage */
			  }
			  /* FIXME need referee system to determine shooting spd */
			  set_mag_motor_angle(&shoot, shoot.mag_cur_angle + SHOOT_CONT_MAG_SPEED);//keep spinning
 8004f18:	4b15      	ldr	r3, [pc, #84]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb fb13 	bl	8000548 <__aeabi_f2d>
 8004f22:	a311      	add	r3, pc, #68	; (adr r3, 8004f68 <Shoot_Task_Func+0x140>)
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	f7fb f9b0 	bl	800028c <__adddf3>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fb fe38 	bl	8000ba8 <__aeabi_d2f>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	ee00 3a10 	vmov	s0, r3
 8004f3e:	480c      	ldr	r0, [pc, #48]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004f40:	f000 f932 	bl	80051a8 <set_mag_motor_angle>
#ifndef USE_CAN_FRIC
			  set_fric_motor_speed(&shoot, LEVEL_ONE_PWM);
#else
	  		  set_fric_motor_current(&shoot, LEVEL_ONE_CAN_SPD);
 8004f44:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004f48:	4809      	ldr	r0, [pc, #36]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004f4a:	f000 f948 	bl	80051de <set_fric_motor_current>
//		  /* shooting delay, considering if keep shoot*/
//		  shoot_stop(&shoot);
//	  }
	  /********** sentry only ends ***********/

	  shoot_execute(&shoot);
 8004f4e:	4808      	ldr	r0, [pc, #32]	; (8004f70 <Shoot_Task_Func+0x148>)
 8004f50:	f000 f9c8 	bl	80052e4 <shoot_execute>

	  /* delay until wake time */
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004f54:	f107 0308 	add.w	r3, r7, #8
 8004f58:	68f9      	ldr	r1, [r7, #12]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f00a f824 	bl	800efa8 <vTaskDelayUntil>
	  shoot_mode_rc_selection(&shoot, &rc);
 8004f60:	e76f      	b.n	8004e42 <Shoot_Task_Func+0x1a>
 8004f62:	bf00      	nop
 8004f64:	f3af 8000 	nop.w
 8004f68:	90000000 	.word	0x90000000
 8004f6c:	400197c9 	.word	0x400197c9
 8004f70:	2000d63c 	.word	0x2000d63c
 8004f74:	2000d6b0 	.word	0x2000d6b0
 8004f78:	200007dc 	.word	0x200007dc
 8004f7c:	3f71463a 	.word	0x3f71463a
 8004f80:	200007dd 	.word	0x200007dd

08004f84 <shoot_task_init>:
/**
  * @brief     shoot task initialization
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_task_init(Shoot_t *sht){
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	/* init pid of magazine motor */
	// Note this is only for 2006, the pid params need to fine tune with the actual payload
	motor_init(mag_2006_id, max_out_angle_mag_2006,  max_I_out_angle_mag_2006, max_err_angle_mag_2006, //angular loop
 8004f8c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004f90:	eddf 4a25 	vldr	s9, [pc, #148]	; 8005028 <shoot_task_init+0xa4>
 8004f94:	ed9f 4a25 	vldr	s8, [pc, #148]	; 800502c <shoot_task_init+0xa8>
 8004f98:	eef0 3a08 	vmov.f32	s7, #8	; 0x40400000  3.0
 8004f9c:	ed9f 3a24 	vldr	s6, [pc, #144]	; 8005030 <shoot_task_init+0xac>
 8004fa0:	eddf 2a24 	vldr	s5, [pc, #144]	; 8005034 <shoot_task_init+0xb0>
 8004fa4:	f242 720f 	movw	r2, #9999	; 0x270f
 8004fa8:	ed9f 2a1f 	vldr	s4, [pc, #124]	; 8005028 <shoot_task_init+0xa4>
 8004fac:	eddf 1a1e 	vldr	s3, [pc, #120]	; 8005028 <shoot_task_init+0xa4>
 8004fb0:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8005038 <shoot_task_init+0xb4>
 8004fb4:	eddf 0a21 	vldr	s1, [pc, #132]	; 800503c <shoot_task_init+0xb8>
 8004fb8:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005028 <shoot_task_init+0xa4>
 8004fbc:	f241 3188 	movw	r1, #5000	; 0x1388
 8004fc0:	2006      	movs	r0, #6
 8004fc2:	f001 fe37 	bl	8006c34 <motor_init>
//							max_out_spd_mag_3508, max_I_out_spd_mag_3508, max_err_spd_mag_3508, //spd loop
//								kp_spd_mag_3508, ki_spd_mag_3508, kd_spd_mag_3508,
//							kf_spd_mag_3508);//spd ff gain

	/* init friction motors */
	shoot_firc_init(&shoot);
 8004fc6:	481e      	ldr	r0, [pc, #120]	; (8005040 <shoot_task_init+0xbc>)
 8004fc8:	f000 f842 	bl	8005050 <shoot_firc_init>
#ifndef USE_CAN_FRIC
	ramp_init(&shoot.fric_left_ramp, (LEVEL_ONE_PWM-MIN_PWM_ON_TIME));
	ramp_init(&shoot.fric_right_ramp, (LEVEL_ONE_PWM-MIN_PWM_ON_TIME));
#else
	ramp_init(&shoot.fric_left_ramp, FRIC_CAN_RAMP_DELAY);
 8004fcc:	2114      	movs	r1, #20
 8004fce:	481d      	ldr	r0, [pc, #116]	; (8005044 <shoot_task_init+0xc0>)
 8004fd0:	f7fd ff09 	bl	8002de6 <ramp_init>
	ramp_init(&shoot.fric_right_ramp, FRIC_CAN_RAMP_DELAY);
 8004fd4:	2114      	movs	r1, #20
 8004fd6:	481c      	ldr	r0, [pc, #112]	; (8005048 <shoot_task_init+0xc4>)
 8004fd8:	f7fd ff05 	bl	8002de6 <ramp_init>
#endif

	/* init servo motor */
	shoot_servo_init();
 8004fdc:	f000 f8b6 	bl	800514c <shoot_servo_init>

	/* init parameters */
	shoot_params_init(sht);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f87f 	bl	80050e4 <shoot_params_init>

	/* reset feedback value */
	memset(&(sht->mag_fb), 0, sizeof(Motor_Feedback_Data_t));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3330      	adds	r3, #48	; 0x30
 8004fea:	2208      	movs	r2, #8
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f00b f96a 	bl	80102c8 <memset>
	memset(&(sht->left_fric_fb), 0, sizeof(Motor_Feedback_Data_t));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3338      	adds	r3, #56	; 0x38
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f00b f963 	bl	80102c8 <memset>
	memset(&(sht->right_fric_fb), 0, sizeof(Motor_Feedback_Data_t));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3340      	adds	r3, #64	; 0x40
 8005006:	2208      	movs	r2, #8
 8005008:	2100      	movs	r1, #0
 800500a:	4618      	mov	r0, r3
 800500c:	f00b f95c 	bl	80102c8 <memset>

	/* set shoot mode */
	set_shoot_mode(sht, SHOOT_CEASE);
 8005010:	2103      	movs	r1, #3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8a8 	bl	8005168 <set_shoot_mode>

	/* set comm packs init target number */
	vision_message.message.vision.target_num = 0;
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <shoot_task_init+0xc8>)
 800501a:	2200      	movs	r2, #0
 800501c:	615a      	str	r2, [r3, #20]
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	00000000 	.word	0x00000000
 800502c:	3c23d70a 	.word	0x3c23d70a
 8005030:	459c4000 	.word	0x459c4000
 8005034:	43fa0000 	.word	0x43fa0000
 8005038:	447a0000 	.word	0x447a0000
 800503c:	426ec2d4 	.word	0x426ec2d4
 8005040:	2000d63c 	.word	0x2000d63c
 8005044:	2000d684 	.word	0x2000d684
 8005048:	2000d698 	.word	0x2000d698
 800504c:	2000028c 	.word	0x2000028c

08005050 <shoot_firc_init>:
/**
  * @brief     friction wheel motor init, depends on motors type
  * @param[in] None
  * @retval    None
  */
void shoot_firc_init(Shoot_t *sht){
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MIN_PWM_ON_TIME);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, MIN_PWM_ON_TIME);
	osDelay(3000);
#else
	/* the pid params need to fine tune with the actual payload */
	motor_init(fric_left_id, max_out_spd_fric,  max_I_out_spd_fric, max_err_spd_fric, kp_spd_fric, ki_spd_fric, kd_spd_fric,
 8005058:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 80050d8 <shoot_firc_init+0x88>
 800505c:	eddf 4a1e 	vldr	s9, [pc, #120]	; 80050d8 <shoot_firc_init+0x88>
 8005060:	ed9f 4a1d 	vldr	s8, [pc, #116]	; 80050d8 <shoot_firc_init+0x88>
 8005064:	eddf 3a1c 	vldr	s7, [pc, #112]	; 80050d8 <shoot_firc_init+0x88>
 8005068:	ed9f 3a1b 	vldr	s6, [pc, #108]	; 80050d8 <shoot_firc_init+0x88>
 800506c:	eddf 2a1a 	vldr	s5, [pc, #104]	; 80050d8 <shoot_firc_init+0x88>
 8005070:	2200      	movs	r2, #0
 8005072:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 8005076:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 800507a:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 800507e:	eddf 0a17 	vldr	s1, [pc, #92]	; 80050dc <shoot_firc_init+0x8c>
 8005082:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80050e0 <shoot_firc_init+0x90>
 8005086:	f242 7110 	movw	r1, #10000	; 0x2710
 800508a:	2000      	movs	r0, #0
 800508c:	f001 fdd2 	bl	8006c34 <motor_init>
							 0, 0, 0, 0, 0, 0,//no second loop
							 0);//spd ff gain
	motor_init(fric_right_id, max_out_spd_fric,  max_I_out_spd_fric, max_err_spd_fric, kp_spd_fric, ki_spd_fric, kd_spd_fric,
 8005090:	ed9f 5a11 	vldr	s10, [pc, #68]	; 80050d8 <shoot_firc_init+0x88>
 8005094:	eddf 4a10 	vldr	s9, [pc, #64]	; 80050d8 <shoot_firc_init+0x88>
 8005098:	ed9f 4a0f 	vldr	s8, [pc, #60]	; 80050d8 <shoot_firc_init+0x88>
 800509c:	eddf 3a0e 	vldr	s7, [pc, #56]	; 80050d8 <shoot_firc_init+0x88>
 80050a0:	ed9f 3a0d 	vldr	s6, [pc, #52]	; 80050d8 <shoot_firc_init+0x88>
 80050a4:	eddf 2a0c 	vldr	s5, [pc, #48]	; 80050d8 <shoot_firc_init+0x88>
 80050a8:	2200      	movs	r2, #0
 80050aa:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 80050ae:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80050b2:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 80050b6:	eddf 0a09 	vldr	s1, [pc, #36]	; 80050dc <shoot_firc_init+0x8c>
 80050ba:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80050e0 <shoot_firc_init+0x90>
 80050be:	f242 7110 	movw	r1, #10000	; 0x2710
 80050c2:	2001      	movs	r0, #1
 80050c4:	f001 fdb6 	bl	8006c34 <motor_init>
							 0, 0, 0, 0, 0, 0,//no second loop
							 0);//spd ff gain
	set_fric_motor_current(sht, 0);
 80050c8:	2100      	movs	r1, #0
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f887 	bl	80051de <set_fric_motor_current>
#endif
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	00000000 	.word	0x00000000
 80050dc:	459c4000 	.word	0x459c4000
 80050e0:	43fa0000 	.word	0x43fa0000

080050e4 <shoot_params_init>:

void shoot_params_init(Shoot_t *sht){
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	sht->mag_cur_angle = 0;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
	sht->mag_tar_angle = 0;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f04f 0200 	mov.w	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
	sht->mag_pre_ecd_angle = 0;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f04f 0200 	mov.w	r2, #0
 8005102:	60da      	str	r2, [r3, #12]
	sht->mag_tar_spd   = 0;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
#ifndef USE_CAN_FRIC
	sht->fric_tar_spd = MIN_PWM_ON_TIME;
#else
	sht->fric_can_tar_spd = 0;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	625a      	str	r2, [r3, #36]	; 0x24
#endif
	sht->mag_turns_counter = 0;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	615a      	str	r2, [r3, #20]
	sht->mag_center_offset = 0;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	821a      	strh	r2, [r3, #16]
	sht->prev_angle_reset = 1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	769a      	strb	r2, [r3, #26]
	sht->fric_engage_flag = 0;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sht->fric_left_cur_spd = 0;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	841a      	strh	r2, [r3, #32]
	sht->fric_right_cur_spd = 0;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	845a      	strh	r2, [r3, #34]	; 0x22
	sht->fric_counter = 0;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800513e:	bf00      	nop
 8005140:	370c      	adds	r7, #12
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
	...

0800514c <shoot_servo_init>:

void shoot_servo_init(void){
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
	/* Start PWM */
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8005150:	2104      	movs	r1, #4
 8005152:	4804      	ldr	r0, [pc, #16]	; (8005164 <shoot_servo_init+0x18>)
 8005154:	f008 f880 	bl	800d258 <HAL_TIM_PWM_Start>

	/* adjust to zero degree */
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, SERVO_PWM_STOP_LID);
 8005158:	4b02      	ldr	r3, [pc, #8]	; (8005164 <shoot_servo_init+0x18>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2232      	movs	r2, #50	; 0x32
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005160:	bf00      	nop
 8005162:	bd80      	pop	{r7, pc}
 8005164:	2000d994 	.word	0x2000d994

08005168 <set_shoot_mode>:
  * @brief     set the shoot action mode
  * @param[in] main struct of shoot task
  * @param[in] mode: shoot act mode
  * @retval    None
  */
void set_shoot_mode(Shoot_t *sht, ShootActMode_t mode){
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	70fb      	strb	r3, [r7, #3]
	sht->shoot_act_mode = mode;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <set_lid_status>:

void set_lid_status(Shoot_t *sht, ShootLidStatus_t status){
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	70fb      	strb	r3, [r7, #3]
	sht->lid_status = status;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	78fa      	ldrb	r2, [r7, #3]
 8005198:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <set_mag_motor_angle>:
void set_mag_motor_speed(Shoot_t *sht, float spd){
	sht->mag_tar_spd = spd;
}


void set_mag_motor_angle(Shoot_t *sht, float tar_angle){//-pi, pi
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	ed87 0a00 	vstr	s0, [r7]
	if(sht->shoot_act_mode == SHOOT_ONCE){
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <set_mag_motor_angle+0x1e>
		/* for once, the input target is a rel angle of current shaft */
		sht->mag_tar_angle = tar_angle;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	605a      	str	r2, [r3, #4]
	else{
		/* for burst shooting, just set the input target */
		sht->mag_tar_angle = tar_angle; // (-pi, pi)
		sht->mag_turns_counter = 0;
	}
}
 80051c4:	e005      	b.n	80051d2 <set_mag_motor_angle+0x2a>
		sht->mag_tar_angle = tar_angle; // (-pi, pi)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	605a      	str	r2, [r3, #4]
		sht->mag_turns_counter = 0;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	615a      	str	r2, [r3, #20]
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <set_fric_motor_current>:

void set_fric_motor_speed(Shoot_t *sht, int16_t spd){
	sht->fric_tar_spd = spd;
}

void set_fric_motor_current(Shoot_t *sht, int16_t spd){
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
 80051e6:	460b      	mov	r3, r1
 80051e8:	807b      	strh	r3, [r7, #2]
	sht->fric_can_tar_spd = spd;
 80051ea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <set_servo_value>:

void set_servo_value(uint16_t pwm_value){
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwm_value);
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <set_servo_value+0x20>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	88fa      	ldrh	r2, [r7, #6]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	2000d994 	.word	0x2000d994

08005224 <shoot_stop>:
/**
  * @brief     shoot cease fire
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_stop(Shoot_t *sht){
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]

	/* stop magazine motor first */
	set_mag_motor_angle(sht, 0);
 800522c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8005274 <shoot_stop+0x50>
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f7ff ffb9 	bl	80051a8 <set_mag_motor_angle>
	sht->mag_cur_angle = 0;//ensure the err is 0
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	609a      	str	r2, [r3, #8]
	sht->fric_right_ramp.count = 0;
	sht->fric_engage_flag = 0;
	sht->fric_left_cur_spd = 0;
	sht->fric_right_cur_spd = 0;
#else
	set_fric_motor_current(sht, 0);
 800523e:	2100      	movs	r1, #0
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f7ff ffcc 	bl	80051de <set_fric_motor_current>
	sht->fric_engage_flag = 0;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	sht->fric_left_ramp.count = 0;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	649a      	str	r2, [r3, #72]	; 0x48
	sht->fric_right_ramp.count = 0;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	65da      	str	r2, [r3, #92]	; 0x5c
	sht->fric_left_cur_spd = 0;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	841a      	strh	r2, [r3, #32]
	sht->fric_right_cur_spd = 0;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	845a      	strh	r2, [r3, #34]	; 0x22
	sht->fric_counter = 0;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
}
 800526c:	bf00      	nop
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	00000000 	.word	0x00000000

08005278 <shoot_fric_can_engagement>:
  * @brief     friction engage functions, for can-based motor
  * @param[in] shoot main struct
  * @param[in] target can torque current -> rpm / speed
  * @retval    None
  */
void shoot_fric_can_engagement(Shoot_t *sht, uint16_t target_can){
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af02      	add	r7, sp, #8
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	460b      	mov	r3, r1
 8005282:	807b      	strh	r3, [r7, #2]
	/* obtain motor feedback for determining the current rpm */
	shoot_fric_get_feedback(sht);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f877 	bl	8005378 <shoot_fric_get_feedback>
	sht->fric_left_cur_spd = sht->left_fric_fb.rx_rpm;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8005290:	b29a      	uxth	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	841a      	strh	r2, [r3, #32]
	sht->fric_right_cur_spd = sht->right_fric_fb.rx_rpm;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	845a      	strh	r2, [r3, #34]	; 0x22

	if(sht->fric_engage_flag == 0){
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d108      	bne.n	80052be <shoot_fric_can_engagement+0x46>
		/* engage fric wheel using ramp funcion */
//		  sht->fric_can_tar_spd  = ramp_calculate(&shoot.fric_left_ramp)  * target_can;
//		  sht->fric_can_tar_spd  = ramp_calculate(&shoot.fric_right_ramp) * target_can;
		/* engage fric wheel without ramp funcion */
		  sht->fric_can_tar_spd = target_can;
 80052ac:	887a      	ldrh	r2, [r7, #2]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	625a      	str	r2, [r3, #36]	; 0x24
		  sht->fric_counter++; // delay counter, when counter reaches given value then engage mag
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80052bc:	e002      	b.n	80052c4 <shoot_fric_can_engagement+0x4c>
		  	  	  	  	  	   // delay time = fric_counter * ABStaskdelay
		}
	else{
		sht->fric_can_tar_spd = target_can;
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	/* update send value of CAN */
	set_motor_can_current(-sht->fric_can_tar_spd, // left  fric
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	4258      	negs	r0, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	2200      	movs	r2, #0
 80052d6:	f001 fe3f 	bl	8006f58 <set_motor_can_current>
						  sht->fric_can_tar_spd,// right fric
						  0,
						  0,
						  SINGLE_LOOP_PID_CONTROL);

}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <shoot_execute>:
  * @brief     shoot main execute function
  * 			call this to engage fire process
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_execute(Shoot_t *sht){
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	6078      	str	r0, [r7, #4]
	}
    else
    	shoot_fric_pwm_engagement(sht, sht->fric_tar_spd);
#else
	/* try single loop first, not considering single shoot using angle loop */
	if(sht->shoot_act_mode == SHOOT_CEASE || sht->shoot_act_mode == SHOOT_RESERVE){
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d004      	beq.n	8005300 <shoot_execute+0x1c>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d10b      	bne.n	8005318 <shoot_execute+0x34>
		set_motor_can_current(sht->fric_can_tar_spd, // left  fric
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a58      	ldr	r0, [r3, #36]	; 0x24
							  -sht->fric_can_tar_spd,// right fric
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		set_motor_can_current(sht->fric_can_tar_spd, // left  fric
 8005308:	4259      	negs	r1, r3
 800530a:	2300      	movs	r3, #0
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	2300      	movs	r3, #0
 8005310:	2200      	movs	r2, #0
 8005312:	f001 fe21 	bl	8006f58 <set_motor_can_current>
 8005316:	e013      	b.n	8005340 <shoot_execute+0x5c>
							  0,
							  0,
							  SINGLE_LOOP_PID_CONTROL);
	}else{
		shoot_fric_can_engagement(sht, sht->fric_can_tar_spd);//
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	b29b      	uxth	r3, r3
 800531e:	4619      	mov	r1, r3
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff ffa9 	bl	8005278 <shoot_fric_can_engagement>
		if(sht->fric_engage_flag == 0 && sht->fric_counter >=FRIC_CAN_RAMP_DELAY){
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d107      	bne.n	8005340 <shoot_execute+0x5c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	2b13      	cmp	r3, #19
 8005336:	d903      	bls.n	8005340 <shoot_execute+0x5c>
//			osDelay(500);
			sht->fric_engage_flag = 1;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
	}
#endif
	/* activate magazine later */
	if(sht->shoot_act_mode == SHOOT_CEASE || sht->shoot_act_mode == SHOOT_RESERVE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005346:	2b03      	cmp	r3, #3
 8005348:	d004      	beq.n	8005354 <shoot_execute+0x70>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005350:	2b02      	cmp	r3, #2
 8005352:	d103      	bne.n	800535c <shoot_execute+0x78>
		shoot_mag_dual_loop_control(&shoot);
 8005354:	4807      	ldr	r0, [pc, #28]	; (8005374 <shoot_execute+0x90>)
 8005356:	f000 f8b7 	bl	80054c8 <shoot_mag_dual_loop_control>
	else if(sht->fric_engage_flag == 1) // frictions are engaged
		shoot_mag_dual_loop_control(&shoot);
}
 800535a:	e007      	b.n	800536c <shoot_execute+0x88>
	else if(sht->fric_engage_flag == 1) // frictions are engaged
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005362:	2b01      	cmp	r3, #1
 8005364:	d102      	bne.n	800536c <shoot_execute+0x88>
		shoot_mag_dual_loop_control(&shoot);
 8005366:	4803      	ldr	r0, [pc, #12]	; (8005374 <shoot_execute+0x90>)
 8005368:	f000 f8ae 	bl	80054c8 <shoot_mag_dual_loop_control>
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	2000d63c 	.word	0x2000d63c

08005378 <shoot_fric_get_feedback>:
/**
  * @brief     shoot mode selection based on
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_fric_get_feedback(Shoot_t *sht){
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
	memcpy(&(sht->left_fric_fb), &motor_data[fric_left_id].motor_feedback, sizeof(Motor_Feedback_Data_t));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3338      	adds	r3, #56	; 0x38
 8005384:	2208      	movs	r2, #8
 8005386:	4907      	ldr	r1, [pc, #28]	; (80053a4 <shoot_fric_get_feedback+0x2c>)
 8005388:	4618      	mov	r0, r3
 800538a:	f00a ff8f 	bl	80102ac <memcpy>
	memcpy(&(sht->right_fric_fb), &motor_data[fric_right_id].motor_feedback, sizeof(Motor_Feedback_Data_t));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3340      	adds	r3, #64	; 0x40
 8005392:	2208      	movs	r2, #8
 8005394:	4904      	ldr	r1, [pc, #16]	; (80053a8 <shoot_fric_get_feedback+0x30>)
 8005396:	4618      	mov	r0, r3
 8005398:	f00a ff88 	bl	80102ac <memcpy>

}
 800539c:	bf00      	nop
 800539e:	3708      	adds	r7, #8
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20005300 	.word	0x20005300
 80053a8:	20005394 	.word	0x20005394

080053ac <shoot_mag_get_feedback>:
/**
  * @brief     shoot mode selection based on
  * @param[in] shoot main struct
  * @retval    None
  */
void shoot_mag_get_feedback(Shoot_t *sht){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	memcpy(&(sht->mag_fb), &motor_data[mag_2006_id].motor_feedback, sizeof(Motor_Feedback_Data_t));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	3330      	adds	r3, #48	; 0x30
 80053b8:	2208      	movs	r2, #8
 80053ba:	4904      	ldr	r1, [pc, #16]	; (80053cc <shoot_mag_get_feedback+0x20>)
 80053bc:	4618      	mov	r0, r3
 80053be:	f00a ff75 	bl	80102ac <memcpy>
}
 80053c2:	bf00      	nop
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20005678 	.word	0x20005678

080053d0 <shoot_mag_get_rel_angle>:

void shoot_mag_get_rel_angle(Shoot_t *sht){
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
	/* get latest feedback of mag motor */
	shoot_mag_get_feedback(sht);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ffe7 	bl	80053ac <shoot_mag_get_feedback>
	/* update truns */
	shoot_mag_update_turns(sht, sht->mag_fb.rx_angle, sht->mag_pre_ecd_angle);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80053ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053ee:	ee17 3a90 	vmov	r3, s15
 80053f2:	b21b      	sxth	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f83c 	bl	8005474 <shoot_mag_update_turns>
	/* calca current mag angle, range is roughly (0, 2pi)*/
	sht->mag_cur_angle = (sht->mag_turns_counter*2*PI / SHOOT_MAG_GEAR_RATIO) + // the angle the turns has been done
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800540a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800546c <shoot_mag_get_rel_angle+0x9c>
 800540e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005412:	eef3 6a03 	vmov.f32	s13, #51	; 0x41980000  19.0
 8005416:	ee87 7aa6 	vdiv.f32	s14, s15, s13
						 (sht->mag_fb.rx_angle/8192*(2*PI)/SHOOT_MAG_GEAR_RATIO);// the current rx angle
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	da02      	bge.n	800542a <shoot_mag_get_rel_angle+0x5a>
 8005424:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 8005428:	331f      	adds	r3, #31
 800542a:	135b      	asrs	r3, r3, #13
 800542c:	b21b      	sxth	r3, r3
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005436:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8005470 <shoot_mag_get_rel_angle+0xa0>
 800543a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800543e:	eeb3 6a03 	vmov.f32	s12, #51	; 0x41980000  19.0
 8005442:	eec6 7a86 	vdiv.f32	s15, s13, s12
	sht->mag_cur_angle = (sht->mag_turns_counter*2*PI / SHOOT_MAG_GEAR_RATIO) + // the angle the turns has been done
 8005446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	edc3 7a02 	vstr	s15, [r3, #8]
	/* mapped from encoder value to (-pi, pi) */
	sht->mag_pre_ecd_angle = sht->mag_fb.rx_angle;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8005456:	ee07 3a90 	vmov	s15, r3
 800545a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	edc3 7a03 	vstr	s15, [r3, #12]
	/* update turns */
}
 8005464:	bf00      	nop
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40490fdb 	.word	0x40490fdb
 8005470:	40c90fdb 	.word	0x40c90fdb

08005474 <shoot_mag_update_turns>:
 * @brief     Get latest turns of magazine motor from previous ecd angle.
 * @param[in] raw_ecd: abs yaw ecd angle from feedback
 * @param[in] prev_ecd: the center offset of ecd mode
 * */
int16_t shoot_mag_update_turns(Shoot_t *sht, int16_t raw_ecd, int16_t prev_ecd)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	460b      	mov	r3, r1
 800547e:	807b      	strh	r3, [r7, #2]
 8005480:	4613      	mov	r3, r2
 8005482:	803b      	strh	r3, [r7, #0]
	//FiXME: this 4096 value actually depends on sampling time of the fedback
	//		 we now assume that the motor would not spin beyond half a cycle between
	//	     two samples.(depends on the rpm and task ticks, use uart to output)
    if (raw_ecd - prev_ecd < -4096)//fine tuning here
 8005484:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005488:	f9b7 3000 	ldrsh.w	r3, [r7]
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8005492:	da05      	bge.n	80054a0 <shoot_mag_update_turns+0x2c>
    	sht->mag_turns_counter++;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	615a      	str	r2, [r3, #20]
 800549e:	e00c      	b.n	80054ba <shoot_mag_update_turns+0x46>
    else if (raw_ecd - prev_ecd > 4096)
 80054a0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80054a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	dd04      	ble.n	80054ba <shoot_mag_update_turns+0x46>
        sht->mag_turns_counter--;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	695b      	ldr	r3, [r3, #20]
 80054b4:	1e5a      	subs	r2, r3, #1
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	615a      	str	r2, [r3, #20]
    return 0;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <shoot_mag_dual_loop_control>:
/*
 * @brief     angle/spd dual control of magazine motor
 * @param[in] main shoot struct
 * @param[in] prev_ecd: the center offset of ecd mode
 * */
void shoot_mag_dual_loop_control(Shoot_t *sht){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
	/* This is only for 2006 motor, used for infantry and sentry */
	motor_data[mag_2006_id].tx_data = pid_dual_loop_control(sht->mag_tar_angle,
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	ed93 7a02 	vldr	s14, [r3, #8]
												 &(motor_data[mag_2006_id].motor_info.f_pid),
												 &(motor_data[mag_2006_id].motor_info.s_pid),
												 sht->mag_cur_angle,
												 sht->mag_fb.rx_rpm);//pid without ff
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
	motor_data[mag_2006_id].tx_data = pid_dual_loop_control(sht->mag_tar_angle,
 80054e2:	ee06 3a90 	vmov	s13, r3
 80054e6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80054ea:	eeb0 1a66 	vmov.f32	s2, s13
 80054ee:	eef0 0a47 	vmov.f32	s1, s14
 80054f2:	4909      	ldr	r1, [pc, #36]	; (8005518 <shoot_mag_dual_loop_control+0x50>)
 80054f4:	4809      	ldr	r0, [pc, #36]	; (800551c <shoot_mag_dual_loop_control+0x54>)
 80054f6:	eeb0 0a67 	vmov.f32	s0, s15
 80054fa:	f7fd fc4f 	bl	8002d9c <pid_dual_loop_control>
 80054fe:	eef0 7a40 	vmov.f32	s15, s0
 8005502:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005506:	ee17 2a90 	vmov	r2, s15
 800550a:	4b05      	ldr	r3, [pc, #20]	; (8005520 <shoot_mag_dual_loop_control+0x58>)
 800550c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
//	motor_data[mag_3508_id].tx_data = pid_dual_loop_control(sht->mag_tar_angle,
//												 &(motor_data[mag_3508_id].motor_info.f_pid),
//												 &(motor_data[mag_3508_id].motor_info.s_pid),
//												 sht->mag_cur_angle,
//												 sht->mag_fb.rx_rpm);
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20005630 	.word	0x20005630
 800551c:	200055f4 	.word	0x200055f4
 8005520:	20005278 	.word	0x20005278

08005524 <shoot_mode_rc_selection>:
  * @brief     shoot mode selection based on input rc switch
  * @param[in] shoot main struct
  * @param[in] rc main struct
  * @retval    None
  */
static void shoot_mode_rc_selection(Shoot_t *sht, RemoteControl_t *rc){
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
	ShootActMode_t mode;
	if(rc->control_mode == CTRLER_MODE){
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11a      	bne.n	800556e <shoot_mode_rc_selection+0x4a>
		/* always judge cease fire first */
		if(rc->ctrl.s2 == SW_MID || rc->ctrl.s1 == SW_MID || rc->ctrl.s2 == SW_DOWN)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	7a5b      	ldrb	r3, [r3, #9]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d007      	beq.n	8005550 <shoot_mode_rc_selection+0x2c>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	7a1b      	ldrb	r3, [r3, #8]
 8005544:	2b03      	cmp	r3, #3
 8005546:	d003      	beq.n	8005550 <shoot_mode_rc_selection+0x2c>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	7a5b      	ldrb	r3, [r3, #9]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d102      	bne.n	8005556 <shoot_mode_rc_selection+0x32>
			mode = SHOOT_CEASE;
 8005550:	2303      	movs	r3, #3
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e005      	b.n	8005562 <shoot_mode_rc_selection+0x3e>
		else{
			if(rc->ctrl.s2 == SW_UP){
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	7a5b      	ldrb	r3, [r3, #9]
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <shoot_mode_rc_selection+0x3e>
				mode = SHOOT_CONT;//SHOOT_CONT;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
			}
		}
		set_shoot_mode(sht, mode);
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff fdfe 	bl	8005168 <set_shoot_mode>
			}

		}
		set_shoot_mode(sht, mode);
	}
}
 800556c:	e023      	b.n	80055b6 <shoot_mode_rc_selection+0x92>
	else if(rc->control_mode == PC_MODE){
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005574:	2b01      	cmp	r3, #1
 8005576:	d11e      	bne.n	80055b6 <shoot_mode_rc_selection+0x92>
		if(rc->pc.mouse.left_click.status == RELEASED){
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	7d1b      	ldrb	r3, [r3, #20]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <shoot_mode_rc_selection+0x68>
			mode = SHOOT_CEASE;
 8005580:	2303      	movs	r3, #3
 8005582:	73fb      	strb	r3, [r7, #15]
			rc->pc.mouse.left_click.pre_status = RELEASED;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	2200      	movs	r2, #0
 8005588:	755a      	strb	r2, [r3, #21]
 800558a:	e00f      	b.n	80055ac <shoot_mode_rc_selection+0x88>
			if(rc->pc.mouse.left_click.status == PRESSED){
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	7d1b      	ldrb	r3, [r3, #20]
 8005590:	2b03      	cmp	r3, #3
 8005592:	d105      	bne.n	80055a0 <shoot_mode_rc_selection+0x7c>
				mode = SHOOT_CONT;//SHOOT_CONT;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
				rc->pc.mouse.left_click.pre_status = PRESSED;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2203      	movs	r2, #3
 800559c:	755a      	strb	r2, [r3, #21]
 800559e:	e005      	b.n	80055ac <shoot_mode_rc_selection+0x88>
			else if(rc->pc.mouse.left_click.status == RELEASED_TO_PRESS){//check rising edge
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	7d1b      	ldrb	r3, [r3, #20]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <shoot_mode_rc_selection+0x88>
				mode = SHOOT_ONCE;//SHOOT_CONT;
 80055a8:	2300      	movs	r3, #0
 80055aa:	73fb      	strb	r3, [r7, #15]
		set_shoot_mode(sht, mode);
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff fdd9 	bl	8005168 <set_shoot_mode>
}
 80055b6:	bf00      	nop
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <shoot_lid_status_selection>:
  * @brief     determine if we need to open/close lid
  * @param[in] shoot main struct
  * @param[in] rc main struct
  * @retval    None
  */
static void shoot_lid_status_selection(Shoot_t *sht, RemoteControl_t *rc){
 80055be:	b580      	push	{r7, lr}
 80055c0:	b082      	sub	sp, #8
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
	/* since we don't have enough button on controller, just set stop */
	set_lid_status(sht, STOP);
 80055c8:	2100      	movs	r1, #0
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fddc 	bl	8005188 <set_lid_status>
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <shoot_detect_mag_status>:
  * @brief     check if we need to reserve the mag motor
  * @param[in] shoot main struct
  * @param[in] rc main struct
  * @retval    None
  */
void shoot_detect_mag_status(Shoot_t *sht){
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	if(sht->shoot_act_mode != SHOOT_CEASE){
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d02a      	beq.n	8005640 <shoot_detect_mag_status+0x68>
		/* check if the magazine motor stuck */
		if(abs(sht->mag_fb.rx_rpm)<=10)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	bfb8      	it	lt
 80055f4:	425b      	neglt	r3, r3
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	2b0a      	cmp	r3, #10
 80055fa:	d803      	bhi.n	8005604 <shoot_detect_mag_status+0x2c>
			/* engage check process */
			shoot_check_flag = 1;
 80055fc:	4b12      	ldr	r3, [pc, #72]	; (8005648 <shoot_detect_mag_status+0x70>)
 80055fe:	2201      	movs	r2, #1
 8005600:	701a      	strb	r2, [r3, #0]
 8005602:	e005      	b.n	8005610 <shoot_detect_mag_status+0x38>
		else{
			/* if not, clear flag and counter*/
			shoot_check_flag = 0;
 8005604:	4b10      	ldr	r3, [pc, #64]	; (8005648 <shoot_detect_mag_status+0x70>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
			shoot_check_counter = 0;
 800560a:	4b10      	ldr	r3, [pc, #64]	; (800564c <shoot_detect_mag_status+0x74>)
 800560c:	2200      	movs	r2, #0
 800560e:	801a      	strh	r2, [r3, #0]
		}

		/* if the flag has been set and count more than 1s */
		//FIXME: Need to test the actual check duration
		if(shoot_check_flag != 1 || (shoot_check_flag == 1 && shoot_check_counter < 10) )
 8005610:	4b0d      	ldr	r3, [pc, #52]	; (8005648 <shoot_detect_mag_status+0x70>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d112      	bne.n	800563e <shoot_detect_mag_status+0x66>
 8005618:	4b0b      	ldr	r3, [pc, #44]	; (8005648 <shoot_detect_mag_status+0x70>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d103      	bne.n	8005628 <shoot_detect_mag_status+0x50>
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <shoot_detect_mag_status+0x74>)
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	2b09      	cmp	r3, #9
 8005626:	d90a      	bls.n	800563e <shoot_detect_mag_status+0x66>
			return;// motor process normally or check time less than 2s
		else{//shoot_check_counter >= 20
			/* set auto reserve process */
			set_shoot_mode(sht, SHOOT_RESERVE);
 8005628:	2102      	movs	r1, #2
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7ff fd9c 	bl	8005168 <set_shoot_mode>
			/* clear flags and counter */
			shoot_check_flag = 0;
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <shoot_detect_mag_status+0x70>)
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]
			shoot_check_counter = 0;
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <shoot_detect_mag_status+0x74>)
 8005638:	2200      	movs	r2, #0
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e000      	b.n	8005640 <shoot_detect_mag_status+0x68>
			return;// motor process normally or check time less than 2s
 800563e:	bf00      	nop
		}
	}
}
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	200007de 	.word	0x200007de
 800564c:	200007e0 	.word	0x200007e0

08005650 <Comm_Task_Func>:
* @brief Function implementing the Comm_Task thread. Set for the comm task bw upper and lower boards
* @param argument: Not used
* @retval None
*/
void Comm_Task_Func(void const * argument)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	while(1){
		if(USART_COMM == 1){
			usart_comm_process();
		}
		else{
			if(board_status == CHASSIS_BOARD)
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <Comm_Task_Func+0x28>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d103      	bne.n	8005668 <Comm_Task_Func+0x18>
				can_comm_process(&chassis_comm);
 8005660:	4806      	ldr	r0, [pc, #24]	; (800567c <Comm_Task_Func+0x2c>)
 8005662:	f000 f89d 	bl	80057a0 <can_comm_process>
 8005666:	e7f7      	b.n	8005658 <Comm_Task_Func+0x8>
			else if(board_status == GIMBAL_BOARD)
 8005668:	4b03      	ldr	r3, [pc, #12]	; (8005678 <Comm_Task_Func+0x28>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f3      	bne.n	8005658 <Comm_Task_Func+0x8>
				can_comm_process(&gimbal_comm);
 8005670:	4803      	ldr	r0, [pc, #12]	; (8005680 <Comm_Task_Func+0x30>)
 8005672:	f000 f895 	bl	80057a0 <can_comm_process>
		if(USART_COMM == 1){
 8005676:	e7ef      	b.n	8005658 <Comm_Task_Func+0x8>
 8005678:	20004718 	.word	0x20004718
 800567c:	20004760 	.word	0x20004760
 8005680:	2000571c 	.word	0x2000571c

08005684 <can_comm_subscribe_process>:
/**
* @brief CAN commnication message subscription
* @param None
* @retval None
*/
void can_comm_subscribe_process(void){
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
	if(board_status == CHASSIS_BOARD){
 8005688:	4b19      	ldr	r3, [pc, #100]	; (80056f0 <can_comm_subscribe_process+0x6c>)
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d114      	bne.n	80056ba <can_comm_subscribe_process+0x36>
		comm_subscribe(&chassis_comm.sub_list, COMM_REMOTE_CONTROL, Transmitter);
 8005690:	2201      	movs	r2, #1
 8005692:	2102      	movs	r1, #2
 8005694:	4817      	ldr	r0, [pc, #92]	; (80056f4 <can_comm_subscribe_process+0x70>)
 8005696:	f002 fde9 	bl	800826c <comm_subscribe>
		comm_subscribe(&chassis_comm.sub_list, COMM_PC_CONTROL, Transmitter);
 800569a:	2201      	movs	r2, #1
 800569c:	2104      	movs	r1, #4
 800569e:	4815      	ldr	r0, [pc, #84]	; (80056f4 <can_comm_subscribe_process+0x70>)
 80056a0:	f002 fde4 	bl	800826c <comm_subscribe>
		comm_subscribe(&chassis_comm.sub_list, COMM_EXT_PC_CONTROL, Transmitter);
 80056a4:	2201      	movs	r2, #1
 80056a6:	2120      	movs	r1, #32
 80056a8:	4812      	ldr	r0, [pc, #72]	; (80056f4 <can_comm_subscribe_process+0x70>)
 80056aa:	f002 fddf 	bl	800826c <comm_subscribe>
		comm_subscribe(&chassis_comm.sub_list, COMM_GIMBAL_ANGLE, Receiver);
 80056ae:	2200      	movs	r2, #0
 80056b0:	2101      	movs	r1, #1
 80056b2:	4810      	ldr	r0, [pc, #64]	; (80056f4 <can_comm_subscribe_process+0x70>)
 80056b4:	f002 fdda 	bl	800826c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_GIMBAL_ANGLE, Transmitter);
		comm_subscribe(&gimbal_comm.sub_list, COMM_REMOTE_CONTROL, Receiver);
		comm_subscribe(&gimbal_comm.sub_list, COMM_PC_CONTROL, Receiver);
		comm_subscribe(&gimbal_comm.sub_list, COMM_EXT_PC_CONTROL, Receiver);
	}
}
 80056b8:	e017      	b.n	80056ea <can_comm_subscribe_process+0x66>
	else if(board_status == GIMBAL_BOARD){
 80056ba:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <can_comm_subscribe_process+0x6c>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d113      	bne.n	80056ea <can_comm_subscribe_process+0x66>
		comm_subscribe(&gimbal_comm.sub_list, COMM_GIMBAL_ANGLE, Transmitter);
 80056c2:	2201      	movs	r2, #1
 80056c4:	2101      	movs	r1, #1
 80056c6:	480c      	ldr	r0, [pc, #48]	; (80056f8 <can_comm_subscribe_process+0x74>)
 80056c8:	f002 fdd0 	bl	800826c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_REMOTE_CONTROL, Receiver);
 80056cc:	2200      	movs	r2, #0
 80056ce:	2102      	movs	r1, #2
 80056d0:	4809      	ldr	r0, [pc, #36]	; (80056f8 <can_comm_subscribe_process+0x74>)
 80056d2:	f002 fdcb 	bl	800826c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_PC_CONTROL, Receiver);
 80056d6:	2200      	movs	r2, #0
 80056d8:	2104      	movs	r1, #4
 80056da:	4807      	ldr	r0, [pc, #28]	; (80056f8 <can_comm_subscribe_process+0x74>)
 80056dc:	f002 fdc6 	bl	800826c <comm_subscribe>
		comm_subscribe(&gimbal_comm.sub_list, COMM_EXT_PC_CONTROL, Receiver);
 80056e0:	2200      	movs	r2, #0
 80056e2:	2120      	movs	r1, #32
 80056e4:	4804      	ldr	r0, [pc, #16]	; (80056f8 <can_comm_subscribe_process+0x74>)
 80056e6:	f002 fdc1 	bl	800826c <comm_subscribe>
}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20004718 	.word	0x20004718
 80056f4:	200047b4 	.word	0x200047b4
 80056f8:	20005770 	.word	0x20005770

080056fc <can_comm_reset_config>:
/**
* @brief CAN commnication struct initialization
* @param None
* @retval None
*/
void can_comm_reset_config(BoardComm_t *comm){
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	comm->comm_mode = CAN_COMM_MODE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
	comm->can_comm.comm_id = IDLE_COMM_ID;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005710:	605a      	str	r2, [r3, #4]
	/* init rx buffer */

	for(int i = 0; i < TOTAL_COMM_ID; i++) {
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e025      	b.n	8005764 <can_comm_reset_config+0x68>
		if(i<4)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b03      	cmp	r3, #3
 800571c:	dc06      	bgt.n	800572c <can_comm_reset_config+0x30>
			comm->can_comm.tx_data[i] = 0;
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3304      	adds	r3, #4
 8005724:	005b      	lsls	r3, r3, #1
 8005726:	4413      	add	r3, r2
 8005728:	2200      	movs	r2, #0
 800572a:	809a      	strh	r2, [r3, #4]
		comm->can_comm.rx_data[i][0] = 0;
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3302      	adds	r3, #2
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	2200      	movs	r2, #0
 8005738:	809a      	strh	r2, [r3, #4]
		comm->can_comm.rx_data[i][1] = 0;
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	2200      	movs	r2, #0
 8005744:	82da      	strh	r2, [r3, #22]
		comm->can_comm.rx_data[i][2] = 0;
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	2200      	movs	r2, #0
 8005750:	831a      	strh	r2, [r3, #24]
		comm->can_comm.rx_data[i][3] = 0;
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4413      	add	r3, r2
 800575a:	2200      	movs	r2, #0
 800575c:	835a      	strh	r2, [r3, #26]
	for(int i = 0; i < TOTAL_COMM_ID; i++) {
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	3301      	adds	r3, #1
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2b06      	cmp	r3, #6
 8005768:	ddd6      	ble.n	8005718 <can_comm_reset_config+0x1c>
	}
    comm->can_comm.can_send_comm_data = can_send_comm_data;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a09      	ldr	r2, [pc, #36]	; (8005794 <can_comm_reset_config+0x98>)
 800576e:	64da      	str	r2, [r3, #76]	; 0x4c
    comm->can_comm.can_recv_comm_data = can_recv_comm_data;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a09      	ldr	r2, [pc, #36]	; (8005798 <can_comm_reset_config+0x9c>)
 8005774:	651a      	str	r2, [r3, #80]	; 0x50

    /* init subscription list */
    memset(&comm->sub_list, 0, sizeof(CommMessageSublist_t));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	3354      	adds	r3, #84	; 0x54
 800577a:	2204      	movs	r2, #4
 800577c:	2100      	movs	r1, #0
 800577e:	4618      	mov	r0, r3
 8005780:	f00a fda2 	bl	80102c8 <memset>
	/* init fifo queue */
	queueM_init(&canqm);
 8005784:	4805      	ldr	r0, [pc, #20]	; (800579c <can_comm_reset_config+0xa0>)
 8005786:	f7fd f940 	bl	8002a0a <queueM_init>
}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	08005ac5 	.word	0x08005ac5
 8005798:	08005b89 	.word	0x08005b89
 800579c:	2000d504 	.word	0x2000d504

080057a0 <can_comm_process>:
* @brief CAN communication process
* @param None
* @retval None
*/
/* Task exec time: 5ms */
void can_comm_process(BoardComm_t *comm){
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(5); // 200hz make sure this task quicker than rc app
 80057a8:	2305      	movs	r3, #5
 80057aa:	60fb      	str	r3, [r7, #12]

	/* reset the comm struct configure */
	can_comm_reset_config(comm);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f7ff ffa5 	bl	80056fc <can_comm_reset_config>
	/* subscribe the message before starting comms */
	can_comm_subscribe_process();
 80057b2:	f7ff ff67 	bl	8005684 <can_comm_subscribe_process>

	/* init the task ticks */
    xLastWakeTime = xTaskGetTickCount();
 80057b6:	f009 fdb3 	bl	800f320 <xTaskGetTickCount>
 80057ba:	4603      	mov	r3, r0
 80057bc:	60bb      	str	r3, [r7, #8]

	for(;;){

		/* recv data */
		comm->can_comm.can_recv_comm_data(&hcan2, 8, comm->can_comm.rx_data);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	3214      	adds	r2, #20
 80057c6:	2108      	movs	r1, #8
 80057c8:	4883      	ldr	r0, [pc, #524]	; (80059d8 <can_comm_process+0x238>)
 80057ca:	4798      	blx	r3
		/* process data */
		if(isSubscribed(&comm->sub_list, COMM_GIMBAL_ANGLE) == SUB_SUCCESS){
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3354      	adds	r3, #84	; 0x54
 80057d0:	2101      	movs	r1, #1
 80057d2:	4618      	mov	r0, r3
 80057d4:	f002 fdf4 	bl	80083c0 <isSubscribed>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d138      	bne.n	8005850 <can_comm_process+0xb0>
			switch(gimbal_angle_message.role){
 80057de:	4b7f      	ldr	r3, [pc, #508]	; (80059dc <can_comm_process+0x23c>)
 80057e0:	785b      	ldrb	r3, [r3, #1]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01b      	beq.n	800581e <can_comm_process+0x7e>
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d137      	bne.n	800585a <can_comm_process+0xba>
			 	 /* need to scale and re-scale angle data in both side */
				case Transmitter:
					if(gimbal_angle_message.message.comm_ga.send_flag == 1){
 80057ea:	4b7c      	ldr	r3, [pc, #496]	; (80059dc <can_comm_process+0x23c>)
 80057ec:	7d1b      	ldrb	r3, [r3, #20]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d130      	bne.n	8005854 <can_comm_process+0xb4>
						process_tx_data_ftoi16(gimbal_angle_message.message.comm_ga.angle_data, comm->can_comm.tx_data, 4, ANGLE_COMM_SCALE_FACTOR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	330c      	adds	r3, #12
 80057f6:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80059e0 <can_comm_process+0x240>
 80057fa:	2204      	movs	r2, #4
 80057fc:	4619      	mov	r1, r3
 80057fe:	4879      	ldr	r0, [pc, #484]	; (80059e4 <can_comm_process+0x244>)
 8005800:	f000 f902 	bl	8005a08 <process_tx_data_ftoi16>
						comm->can_comm.can_send_comm_data(&hcan2, comm->can_comm.tx_data, ANGLE_COMM_ID);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	f102 010c 	add.w	r1, r2, #12
 800580e:	f240 3201 	movw	r2, #769	; 0x301
 8005812:	4871      	ldr	r0, [pc, #452]	; (80059d8 <can_comm_process+0x238>)
 8005814:	4798      	blx	r3
						gimbal_angle_message.message.comm_ga.send_flag = 0;//reset flag to avoid message flooding
 8005816:	4b71      	ldr	r3, [pc, #452]	; (80059dc <can_comm_process+0x23c>)
 8005818:	2200      	movs	r2, #0
 800581a:	751a      	strb	r2, [r3, #20]
					}
					break;
 800581c:	e01a      	b.n	8005854 <can_comm_process+0xb4>
				case Receiver:
					if(can_comm_rx[ANGLE_IDX].comm_id == ANGLE_COMM_ID){
 800581e:	4b72      	ldr	r3, [pc, #456]	; (80059e8 <can_comm_process+0x248>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f240 3201 	movw	r2, #769	; 0x301
 8005826:	4293      	cmp	r3, r2
 8005828:	d116      	bne.n	8005858 <can_comm_process+0xb8>
						process_rx_data_i16tof(comm, gimbal_angle_message.message.comm_ga.angle_data, ANGLE_COMM_SCALE_FACTOR, ANGLE_IDX);
 800582a:	2201      	movs	r2, #1
 800582c:	ed9f 0a6c 	vldr	s0, [pc, #432]	; 80059e0 <can_comm_process+0x240>
 8005830:	496c      	ldr	r1, [pc, #432]	; (80059e4 <can_comm_process+0x244>)
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f915 	bl	8005a62 <process_rx_data_i16tof>
						chassis.gimbal_yaw_rel_angle = gimbal_angle_message.message.comm_ga.angle_data[0];//can_rx_scale_buffer[ANGLE_IDX][0];
 8005838:	4b68      	ldr	r3, [pc, #416]	; (80059dc <can_comm_process+0x23c>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a6b      	ldr	r2, [pc, #428]	; (80059ec <can_comm_process+0x24c>)
 800583e:	6193      	str	r3, [r2, #24]
						chassis.gimbal_yaw_abs_angle = gimbal_angle_message.message.comm_ga.angle_data[1];//can_rx_scale_buffer[ANGLE_IDX][1];
 8005840:	4b66      	ldr	r3, [pc, #408]	; (80059dc <can_comm_process+0x23c>)
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4a69      	ldr	r2, [pc, #420]	; (80059ec <can_comm_process+0x24c>)
 8005846:	61d3      	str	r3, [r2, #28]
						can_comm_rx[ANGLE_IDX].comm_id = 0;//reset id to avoid message flooding
 8005848:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <can_comm_process+0x248>)
 800584a:	2200      	movs	r2, #0
 800584c:	60da      	str	r2, [r3, #12]
					}
					break;
 800584e:	e003      	b.n	8005858 <can_comm_process+0xb8>
			}
		}
 8005850:	bf00      	nop
 8005852:	e002      	b.n	800585a <can_comm_process+0xba>
					break;
 8005854:	bf00      	nop
 8005856:	e000      	b.n	800585a <can_comm_process+0xba>
					break;
 8005858:	bf00      	nop
		if(isSubscribed(&comm->sub_list, COMM_REMOTE_CONTROL) == SUB_SUCCESS){
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3354      	adds	r3, #84	; 0x54
 800585e:	2102      	movs	r1, #2
 8005860:	4618      	mov	r0, r3
 8005862:	f002 fdad 	bl	80083c0 <isSubscribed>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d15c      	bne.n	8005926 <can_comm_process+0x186>
			switch(rc_message.role){
 800586c:	4b60      	ldr	r3, [pc, #384]	; (80059f0 <can_comm_process+0x250>)
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d019      	beq.n	80058a8 <can_comm_process+0x108>
 8005874:	2b01      	cmp	r3, #1
 8005876:	d15b      	bne.n	8005930 <can_comm_process+0x190>
				case Transmitter:
					if(rc_message.message.comm_rc.send_flag == 1){
 8005878:	4b5d      	ldr	r3, [pc, #372]	; (80059f0 <can_comm_process+0x250>)
 800587a:	7b1b      	ldrb	r3, [r3, #12]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d154      	bne.n	800592a <can_comm_process+0x18a>
						memcpy(comm->can_comm.tx_data, &(rc_message.message.comm_rc.rc_data), sizeof(rc_message.message.comm_rc.rc_data));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	330c      	adds	r3, #12
 8005884:	2208      	movs	r2, #8
 8005886:	495b      	ldr	r1, [pc, #364]	; (80059f4 <can_comm_process+0x254>)
 8005888:	4618      	mov	r0, r3
 800588a:	f00a fd0f 	bl	80102ac <memcpy>
						comm->can_comm.can_send_comm_data(&hcan2, comm->can_comm.tx_data, RC_COMM_ID);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	f102 010c 	add.w	r1, r2, #12
 8005898:	f240 3202 	movw	r2, #770	; 0x302
 800589c:	484e      	ldr	r0, [pc, #312]	; (80059d8 <can_comm_process+0x238>)
 800589e:	4798      	blx	r3
						rc_message.message.comm_rc.send_flag = 0;//reset flag to avoid message flooding
 80058a0:	4b53      	ldr	r3, [pc, #332]	; (80059f0 <can_comm_process+0x250>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	731a      	strb	r2, [r3, #12]
					}
					break;
 80058a6:	e040      	b.n	800592a <can_comm_process+0x18a>
				case Receiver:
					if(can_comm_rx[RC_IDX].comm_id == RC_COMM_ID){
 80058a8:	4b4f      	ldr	r3, [pc, #316]	; (80059e8 <can_comm_process+0x248>)
 80058aa:	699b      	ldr	r3, [r3, #24]
 80058ac:	f240 3202 	movw	r2, #770	; 0x302
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d13c      	bne.n	800592e <can_comm_process+0x18e>
						rc.ctrl.s1  = comm->can_comm.rx_data[RC_IDX][2];
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4b4e      	ldr	r3, [pc, #312]	; (80059f8 <can_comm_process+0x258>)
 80058be:	721a      	strb	r2, [r3, #8]
						rc.ctrl.s2  = comm->can_comm.rx_data[RC_IDX][3];
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	4b4b      	ldr	r3, [pc, #300]	; (80059f8 <can_comm_process+0x258>)
 80058ca:	725a      	strb	r2, [r3, #9]
						if(rc.ctrl.s1 == SW_MID && rc.ctrl.s2 == SW_DOWN){
 80058cc:	4b4a      	ldr	r3, [pc, #296]	; (80059f8 <can_comm_process+0x258>)
 80058ce:	7a1b      	ldrb	r3, [r3, #8]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d116      	bne.n	8005902 <can_comm_process+0x162>
 80058d4:	4b48      	ldr	r3, [pc, #288]	; (80059f8 <can_comm_process+0x258>)
 80058d6:	7a5b      	ldrb	r3, [r3, #9]
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d112      	bne.n	8005902 <can_comm_process+0x162>
							rc.control_mode = PC_MODE;
 80058dc:	4b46      	ldr	r3, [pc, #280]	; (80059f8 <can_comm_process+0x258>)
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
							/* update gimbal mode */
							//FIXME: if have multiple gimbals, we need to change this.
							gimbal.gimbal_mode = comm->can_comm.rx_data[RC_IDX][0];
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	4b43      	ldr	r3, [pc, #268]	; (80059fc <can_comm_process+0x25c>)
 80058ee:	f883 2ab2 	strb.w	r2, [r3, #2738]	; 0xab2
							gimbal.gimbal_act_mode = comm->can_comm.rx_data[RC_IDX][1];
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	4b40      	ldr	r3, [pc, #256]	; (80059fc <can_comm_process+0x25c>)
 80058fc:	f883 2ab1 	strb.w	r2, [r3, #2737]	; 0xab1
 8005900:	e00d      	b.n	800591e <can_comm_process+0x17e>
						}
						else{
							rc.control_mode = CTRLER_MODE;
 8005902:	4b3d      	ldr	r3, [pc, #244]	; (80059f8 <can_comm_process+0x258>)
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
							/* get normal controller data*/
							rc.ctrl.ch0 = comm->can_comm.rx_data[RC_IDX][0];
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8005910:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <can_comm_process+0x258>)
 8005912:	801a      	strh	r2, [r3, #0]
							rc.ctrl.ch1 = comm->can_comm.rx_data[RC_IDX][1];
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800591a:	4b37      	ldr	r3, [pc, #220]	; (80059f8 <can_comm_process+0x258>)
 800591c:	805a      	strh	r2, [r3, #2]
						}
						can_comm_rx[RC_IDX].comm_id = 0;//reset id to avoid message flooding
 800591e:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <can_comm_process+0x248>)
 8005920:	2200      	movs	r2, #0
 8005922:	619a      	str	r2, [r3, #24]
					}

					break;
 8005924:	e003      	b.n	800592e <can_comm_process+0x18e>
			 }
		}
 8005926:	bf00      	nop
 8005928:	e002      	b.n	8005930 <can_comm_process+0x190>
					break;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <can_comm_process+0x190>
					break;
 800592e:	bf00      	nop
		if(isSubscribed(&comm->sub_list, COMM_PC_CONTROL) == SUB_SUCCESS){
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3354      	adds	r3, #84	; 0x54
 8005934:	2104      	movs	r1, #4
 8005936:	4618      	mov	r0, r3
 8005938:	f002 fd42 	bl	80083c0 <isSubscribed>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d13d      	bne.n	80059be <can_comm_process+0x21e>
			switch(pc_message.role){
 8005942:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <can_comm_process+0x260>)
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d019      	beq.n	800597e <can_comm_process+0x1de>
 800594a:	2b01      	cmp	r3, #1
 800594c:	d13c      	bne.n	80059c8 <can_comm_process+0x228>
				case Transmitter:
					if(pc_message.message.comm_pc.send_flag == 1){
 800594e:	4b2c      	ldr	r3, [pc, #176]	; (8005a00 <can_comm_process+0x260>)
 8005950:	7b1b      	ldrb	r3, [r3, #12]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d135      	bne.n	80059c2 <can_comm_process+0x222>
						memcpy(comm->can_comm.tx_data, &(pc_message.message.comm_pc.pc_data), sizeof(pc_message.message.comm_pc.pc_data));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	330c      	adds	r3, #12
 800595a:	2208      	movs	r2, #8
 800595c:	4929      	ldr	r1, [pc, #164]	; (8005a04 <can_comm_process+0x264>)
 800595e:	4618      	mov	r0, r3
 8005960:	f00a fca4 	bl	80102ac <memcpy>
						comm->can_comm.can_send_comm_data(&hcan2, comm->can_comm.tx_data, PC_COMM_ID);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	f102 010c 	add.w	r1, r2, #12
 800596e:	f240 3203 	movw	r2, #771	; 0x303
 8005972:	4819      	ldr	r0, [pc, #100]	; (80059d8 <can_comm_process+0x238>)
 8005974:	4798      	blx	r3
						pc_message.message.comm_pc.send_flag = 0;//reset flag to avoid message flooding
 8005976:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <can_comm_process+0x260>)
 8005978:	2200      	movs	r2, #0
 800597a:	731a      	strb	r2, [r3, #12]
					}
					break;
 800597c:	e021      	b.n	80059c2 <can_comm_process+0x222>
				case Receiver:
					if(can_comm_rx[PC_IDX].comm_id == PC_COMM_ID){
 800597e:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <can_comm_process+0x248>)
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	f240 3203 	movw	r2, #771	; 0x303
 8005986:	4293      	cmp	r3, r2
 8005988:	d11d      	bne.n	80059c6 <can_comm_process+0x226>
						rc.pc.mouse.x = comm->can_comm.rx_data[PC_IDX][0];
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f9b3 202c 	ldrsh.w	r2, [r3, #44]	; 0x2c
 8005990:	4b19      	ldr	r3, [pc, #100]	; (80059f8 <can_comm_process+0x258>)
 8005992:	819a      	strh	r2, [r3, #12]
						rc.pc.mouse.y = comm->can_comm.rx_data[PC_IDX][1];
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800599a:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <can_comm_process+0x258>)
 800599c:	81da      	strh	r2, [r3, #14]
						rc.pc.mouse.left_click.status  = comm->can_comm.rx_data[PC_IDX][2];
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <can_comm_process+0x258>)
 80059a8:	751a      	strb	r2, [r3, #20]
						rc.pc.mouse.right_click.status  = comm->can_comm.rx_data[PC_IDX][3];
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <can_comm_process+0x258>)
 80059b4:	75da      	strb	r2, [r3, #23]
						can_comm_rx[PC_IDX].comm_id = 0;//reset id to avoid message flooding
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <can_comm_process+0x248>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	625a      	str	r2, [r3, #36]	; 0x24
					}
					break;
 80059bc:	e003      	b.n	80059c6 <can_comm_process+0x226>
			 }
		}
 80059be:	bf00      	nop
 80059c0:	e002      	b.n	80059c8 <can_comm_process+0x228>
					break;
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <can_comm_process+0x228>
					break;
 80059c6:	bf00      	nop

		/* delay until wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80059c8:	f107 0308 	add.w	r3, r7, #8
 80059cc:	68f9      	ldr	r1, [r7, #12]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f009 faea 	bl	800efa8 <vTaskDelayUntil>
		comm->can_comm.can_recv_comm_data(&hcan2, 8, comm->can_comm.rx_data);
 80059d4:	e6f3      	b.n	80057be <can_comm_process+0x1e>
 80059d6:	bf00      	nop
 80059d8:	2000d7c0 	.word	0x2000d7c0
 80059dc:	20000084 	.word	0x20000084
 80059e0:	461b283d 	.word	0x461b283d
 80059e4:	20000088 	.word	0x20000088
 80059e8:	20000530 	.word	0x20000530
 80059ec:	2000d474 	.word	0x2000d474
 80059f0:	200000ec 	.word	0x200000ec
 80059f4:	200000f0 	.word	0x200000f0
 80059f8:	2000d6b0 	.word	0x2000d6b0
 80059fc:	200047c0 	.word	0x200047c0
 8005a00:	20000154 	.word	0x20000154
 8005a04:	20000158 	.word	0x20000158

08005a08 <process_tx_data_ftoi16>:
/**
* @brief CAN commnication send data float to int16
* @param comm: main comm app struct
* 		 scale_factor: corresponding scale_factor
*/
void process_tx_data_ftoi16(float* input_data, int16_t* output_data, int length, float scale_factor){
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	ed87 0a00 	vstr	s0, [r7]
    for (int i = 0; i < length; i++) {
 8005a18:	2300      	movs	r3, #0
 8005a1a:	617b      	str	r3, [r7, #20]
 8005a1c:	e016      	b.n	8005a4c <process_tx_data_ftoi16+0x44>
        output_data[i] = (int16_t)(input_data[i] * scale_factor);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	ed93 7a00 	vldr	s14, [r3]
 8005a2a:	edd7 7a00 	vldr	s15, [r7]
 8005a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	4413      	add	r3, r2
 8005a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a3e:	ee17 2a90 	vmov	r2, s15
 8005a42:	b212      	sxth	r2, r2
 8005a44:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < length; i++) {
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	dbe4      	blt.n	8005a1e <process_tx_data_ftoi16+0x16>
    }
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <process_rx_data_i16tof>:
/**
* @brief CAN commnication recving data int16 to float
* @param comm: main comm app struct
* 		 scale_factor: corresponding scale_factor
*/
void process_rx_data_i16tof(BoardComm_t *comm, float *output_buffer, float scale_factor, uint32_t idx) {
 8005a62:	b480      	push	{r7}
 8005a64:	b087      	sub	sp, #28
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005a70:	603a      	str	r2, [r7, #0]
	/*we cannot set the output buffer as a local variable in this fucntion
	 * since it may cause "dangling pointer" problem */
    for (int i = 0; i < 4; i++) {
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e01a      	b.n	8005aae <process_rx_data_i16tof+0x4c>
//        comm->can_comm.rx_data[idx][i] = (comm->can_comm.rx_data[idx][i*2] << 8) | comm->can_comm.rx_data[1][i*2+1];
        output_buffer[i] = (float)comm->can_comm.rx_data[idx][i] / scale_factor;
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	0099      	lsls	r1, r3, #2
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	440b      	add	r3, r1
 8005a82:	3308      	adds	r3, #8
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005a8c:	ee07 3a90 	vmov	s15, r3
 8005a90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005aa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	dde1      	ble.n	8005a78 <process_rx_data_i16tof+0x16>
    }
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <can_send_comm_data>:
* @param CAN_HandleTypeDef object: hcan pointer refer to a HAL CAN structure
* 		 int32_t* send_data: The data is ready to be sent
* 		 uint32_t comm_id：
* @retval None
*/
void can_send_comm_data(CAN_HandleTypeDef* hcan, int16_t* send_data, uint32_t comm_id){
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b08c      	sub	sp, #48	; 0x30
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
	uint8_t comm_can_send_data[8];
//	uint32_t send_mail_box;
	CAN_TxHeaderTypeDef  comm_tx_message;

	comm_tx_message.IDE = CAN_ID_STD;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
	comm_tx_message.RTR = CAN_RTR_DATA;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]
	comm_tx_message.DLC = 0x08;
 8005ad8:	2308      	movs	r3, #8
 8005ada:	623b      	str	r3, [r7, #32]
	comm_tx_message.StdId = comm_id;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	613b      	str	r3, [r7, #16]

	comm_can_send_data[0] = send_data[0] >> 8;
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ae6:	121b      	asrs	r3, r3, #8
 8005ae8:	b21b      	sxth	r3, r3
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	comm_can_send_data[1] = send_data[0];
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	comm_can_send_data[2] = send_data[1] >> 8;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3302      	adds	r3, #2
 8005b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b04:	121b      	asrs	r3, r3, #8
 8005b06:	b21b      	sxth	r3, r3
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	comm_can_send_data[3] = send_data[1];
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	3302      	adds	r3, #2
 8005b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	comm_can_send_data[4] = send_data[2] >> 8;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b24:	121b      	asrs	r3, r3, #8
 8005b26:	b21b      	sxth	r3, r3
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	comm_can_send_data[5] = send_data[2];
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	3304      	adds	r3, #4
 8005b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	comm_can_send_data[6] = send_data[3] >> 8;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	3306      	adds	r3, #6
 8005b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b44:	121b      	asrs	r3, r3, #8
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	comm_can_send_data[7] = send_data[3];
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	3306      	adds	r3, #6
 8005b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	/* send to fifo queue*/
	enqueueCanMessage(&comm_tx_message, canQueue, &canqm, comm_can_send_data);
 8005b5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b60:	f107 0010 	add.w	r0, r7, #16
 8005b64:	4a06      	ldr	r2, [pc, #24]	; (8005b80 <can_send_comm_data+0xbc>)
 8005b66:	4907      	ldr	r1, [pc, #28]	; (8005b84 <can_send_comm_data+0xc0>)
 8005b68:	f7fc ff60 	bl	8002a2c <enqueueCanMessage>

//	if(HAL_CAN_GetTxMailboxesFreeLevel(hcan)>0){
		sendNextCanMessage(hcan, canQueue, &canqm);
 8005b6c:	4a04      	ldr	r2, [pc, #16]	; (8005b80 <can_send_comm_data+0xbc>)
 8005b6e:	4905      	ldr	r1, [pc, #20]	; (8005b84 <can_send_comm_data+0xc0>)
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fc ffab 	bl	8002acc <sendNextCanMessage>
//		HAL_CAN_AddTxMessage(hcan, &comm_tx_message, comm_can_send_data, (uint32_t *)CAN_TX_MAILBOX0);
//	}
}
 8005b76:	bf00      	nop
 8005b78:	3730      	adds	r7, #48	; 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	2000d504 	.word	0x2000d504
 8005b84:	20005774 	.word	0x20005774

08005b88 <can_recv_comm_data>:
* @brief CAN commnication receiving function, activated for CAN2 comms
* @param CAN_HandleTypeDef object: A can pointer refer to a CAN structure
* 		 int32_t* send_data: The data is ready to be sent
* @retval None
*/
void can_recv_comm_data(CAN_HandleTypeDef* hcan, uint32_t data_len, int16_t (*rx_buffer)[TOTAL_COMM_ID][4]){
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
	uint8_t comm_temp_rx_buffer[8];
	for(int i=0;i<TOTAL_COMM_ID;i++){
 8005b94:	2300      	movs	r3, #0
 8005b96:	61fb      	str	r3, [r7, #28]
 8005b98:	e042      	b.n	8005c20 <can_recv_comm_data+0x98>
		memcpy(comm_temp_rx_buffer, can_comm_rx[i].comm_rx_buffer, data_len);
 8005b9a:	69fa      	ldr	r2, [r7, #28]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <can_recv_comm_data+0xa8>)
 8005ba6:	4413      	add	r3, r2
 8005ba8:	1d19      	adds	r1, r3, #4
 8005baa:	f107 0314 	add.w	r3, r7, #20
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f00a fb7b 	bl	80102ac <memcpy>
		(*rx_buffer)[i][0] = (int16_t)(comm_temp_rx_buffer[0] << 8 | comm_temp_rx_buffer[1]);
 8005bb6:	7d3b      	ldrb	r3, [r7, #20]
 8005bb8:	021b      	lsls	r3, r3, #8
 8005bba:	b21a      	sxth	r2, r3
 8005bbc:	7d7b      	ldrb	r3, [r7, #21]
 8005bbe:	b21b      	sxth	r3, r3
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	b219      	sxth	r1, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
		(*rx_buffer)[i][1] = (int16_t)(comm_temp_rx_buffer[2] << 8 | comm_temp_rx_buffer[3]);
 8005bcc:	7dbb      	ldrb	r3, [r7, #22]
 8005bce:	021b      	lsls	r3, r3, #8
 8005bd0:	b21a      	sxth	r2, r3
 8005bd2:	7dfb      	ldrb	r3, [r7, #23]
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b219      	sxth	r1, r3
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	4413      	add	r3, r2
 8005be2:	460a      	mov	r2, r1
 8005be4:	805a      	strh	r2, [r3, #2]
		(*rx_buffer)[i][2] = (int16_t)(comm_temp_rx_buffer[4] << 8 | comm_temp_rx_buffer[5]);
 8005be6:	7e3b      	ldrb	r3, [r7, #24]
 8005be8:	021b      	lsls	r3, r3, #8
 8005bea:	b21a      	sxth	r2, r3
 8005bec:	7e7b      	ldrb	r3, [r7, #25]
 8005bee:	b21b      	sxth	r3, r3
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	b219      	sxth	r1, r3
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	4413      	add	r3, r2
 8005bfc:	460a      	mov	r2, r1
 8005bfe:	809a      	strh	r2, [r3, #4]
		(*rx_buffer)[i][3] = (int16_t)(comm_temp_rx_buffer[6] << 8 | comm_temp_rx_buffer[7]);
 8005c00:	7ebb      	ldrb	r3, [r7, #26]
 8005c02:	021b      	lsls	r3, r3, #8
 8005c04:	b21a      	sxth	r2, r3
 8005c06:	7efb      	ldrb	r3, [r7, #27]
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	b219      	sxth	r1, r3
 8005c0e:	687a      	ldr	r2, [r7, #4]
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	4413      	add	r3, r2
 8005c16:	460a      	mov	r2, r1
 8005c18:	80da      	strh	r2, [r3, #6]
	for(int i=0;i<TOTAL_COMM_ID;i++){
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	2b06      	cmp	r3, #6
 8005c24:	ddb9      	ble.n	8005b9a <can_recv_comm_data+0x12>
	}
}
 8005c26:	bf00      	nop
 8005c28:	bf00      	nop
 8005c2a:	3720      	adds	r7, #32
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000530 	.word	0x20000530

08005c34 <RC_Task_Func>:
/**
  * @brief     main remote control task
  * @param[in] None
  * @retval    None
  */
void RC_Task_Func(){
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(10); // 100Hz, make sure this task slower than comm app
 8005c3a:	230a      	movs	r3, #10
 8005c3c:	607b      	str	r3, [r7, #4]

	/* init rc task */
	rc_task_init(&rc);
 8005c3e:	480d      	ldr	r0, [pc, #52]	; (8005c74 <RC_Task_Func+0x40>)
 8005c40:	f000 f822 	bl	8005c88 <rc_task_init>

	/* reset rc test */
	rc_reset(&rc);
 8005c44:	480b      	ldr	r0, [pc, #44]	; (8005c74 <RC_Task_Func+0x40>)
 8005c46:	f000 fb51 	bl	80062ec <rc_reset>

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8005c4a:	f009 fb69 	bl	800f320 <xTaskGetTickCount>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	603b      	str	r3, [r7, #0]

	for(;;){

		rc_process_rx_data(&rc, rc_rx_buffer);
 8005c52:	4909      	ldr	r1, [pc, #36]	; (8005c78 <RC_Task_Func+0x44>)
 8005c54:	4807      	ldr	r0, [pc, #28]	; (8005c74 <RC_Task_Func+0x40>)
 8005c56:	f000 f8b5 	bl	8005dc4 <rc_process_rx_data>
		rc_update_comm_pack(&rc, &(rc_message.message.comm_rc), &(pc_message.message.comm_pc),&(pc_ext_message.message.comm_ext_pc));
 8005c5a:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <RC_Task_Func+0x48>)
 8005c5c:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <RC_Task_Func+0x4c>)
 8005c5e:	4909      	ldr	r1, [pc, #36]	; (8005c84 <RC_Task_Func+0x50>)
 8005c60:	4804      	ldr	r0, [pc, #16]	; (8005c74 <RC_Task_Func+0x40>)
 8005c62:	f000 fac9 	bl	80061f8 <rc_update_comm_pack>

		/* delay until wake time */
	    vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8005c66:	463b      	mov	r3, r7
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f009 f99c 	bl	800efa8 <vTaskDelayUntil>
		rc_process_rx_data(&rc, rc_rx_buffer);
 8005c70:	e7ef      	b.n	8005c52 <RC_Task_Func+0x1e>
 8005c72:	bf00      	nop
 8005c74:	2000d6b0 	.word	0x2000d6b0
 8005c78:	2000d868 	.word	0x2000d868
 8005c7c:	200001c0 	.word	0x200001c0
 8005c80:	20000158 	.word	0x20000158
 8005c84:	200000f0 	.word	0x200000f0

08005c88 <rc_task_init>:
/**
  * @brief     init all the struct before task begin
  * @param[in] main rc struct
  * @retval    None
  */
void rc_task_init(RemoteControl_t *rc_hdlr){
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	/* controller init */
	rc_hdlr->ctrl.ch0 = 0;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	801a      	strh	r2, [r3, #0]
	rc_hdlr->ctrl.ch1 = 0;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	805a      	strh	r2, [r3, #2]
	rc_hdlr->ctrl.ch2 = 0;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	809a      	strh	r2, [r3, #4]
	rc_hdlr->ctrl.ch3 = 0;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	80da      	strh	r2, [r3, #6]
	rc_hdlr->ctrl.s1 = SW_MID; //idle mode
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2203      	movs	r2, #3
 8005cac:	721a      	strb	r2, [r3, #8]
	rc_hdlr->ctrl.s2 = SW_MID; //cease fire
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	725a      	strb	r2, [r3, #9]

	/* pc init */
	rc_hdlr->pc.mouse.x = 0;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	819a      	strh	r2, [r3, #12]
	rc_hdlr->pc.mouse.y = 0;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	81da      	strh	r2, [r3, #14]
	rc_hdlr->pc.mouse.z = 0;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	821a      	strh	r2, [r3, #16]
	rc_hdlr->pc.mouse.click_l = 0;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	749a      	strb	r2, [r3, #18]
	rc_hdlr->pc.mouse.click_r = 0;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	74da      	strb	r2, [r3, #19]

	rc_key_init(&rc_hdlr->pc.key.W);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	333c      	adds	r3, #60	; 0x3c
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fb1c 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.A);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	333f      	adds	r3, #63	; 0x3f
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fb17 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.S);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	3342      	adds	r3, #66	; 0x42
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fb12 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.D);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3345      	adds	r3, #69	; 0x45
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f000 fb0d 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.Q);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	3348      	adds	r3, #72	; 0x48
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f000 fb08 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.E);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	334b      	adds	r3, #75	; 0x4b
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fb03 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.R);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	334e      	adds	r3, #78	; 0x4e
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 fafe 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.V);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3351      	adds	r3, #81	; 0x51
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 faf9 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.Ctrl);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3354      	adds	r3, #84	; 0x54
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 faf4 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.F);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3357      	adds	r3, #87	; 0x57
 8005d30:	4618      	mov	r0, r3
 8005d32:	f000 faef 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.Shift);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	335a      	adds	r3, #90	; 0x5a
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f000 faea 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.G);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	335d      	adds	r3, #93	; 0x5d
 8005d44:	4618      	mov	r0, r3
 8005d46:	f000 fae5 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.C);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	3360      	adds	r3, #96	; 0x60
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 fae0 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.key.B);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3363      	adds	r3, #99	; 0x63
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fadb 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.mouse.left_click);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3314      	adds	r3, #20
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fad6 	bl	8006314 <rc_key_init>
	rc_key_init(&rc_hdlr->pc.mouse.right_click);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	3317      	adds	r3, #23
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 fad1 	bl	8006314 <rc_key_init>


	/* init low pass params */
	rc_hdlr->pc.mouse.x_folp.a = 0.95;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a12      	ldr	r2, [pc, #72]	; (8005dc0 <rc_task_init+0x138>)
 8005d76:	629a      	str	r2, [r3, #40]	; 0x28
	rc_hdlr->pc.mouse.x_folp.cur_data = 0;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f04f 0200 	mov.w	r2, #0
 8005d7e:	61da      	str	r2, [r3, #28]
	rc_hdlr->pc.mouse.x_folp.last_output_data = 0;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	625a      	str	r2, [r3, #36]	; 0x24
	rc_hdlr->pc.mouse.x_folp.output_data = 0;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	621a      	str	r2, [r3, #32]

	rc_hdlr->pc.mouse.y_folp.a = 0.95;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a0b      	ldr	r2, [pc, #44]	; (8005dc0 <rc_task_init+0x138>)
 8005d94:	639a      	str	r2, [r3, #56]	; 0x38
	rc_hdlr->pc.mouse.y_folp.cur_data = 0;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f04f 0200 	mov.w	r2, #0
 8005d9c:	62da      	str	r2, [r3, #44]	; 0x2c
	rc_hdlr->pc.mouse.y_folp.last_output_data = 0;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f04f 0200 	mov.w	r2, #0
 8005da4:	635a      	str	r2, [r3, #52]	; 0x34
	rc_hdlr->pc.mouse.y_folp.output_data = 0;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f04f 0200 	mov.w	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

	/* apply deflaut mode */
	rc_hdlr->control_mode = CTRLER_MODE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
}
 8005db6:	bf00      	nop
 8005db8:	3708      	adds	r7, #8
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	3f733333 	.word	0x3f733333

08005dc4 <rc_process_rx_data>:
/**
  * @brief     rc process recv data from dbus
  * @param[in] main rc struct
  * @retval    None
  */
void rc_process_rx_data(RemoteControl_t *rc_hdlr, uint8_t *rc_rx_buffer){
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	/* no matter what mode, read switch data */
	rc_hdlr->ctrl.s1   = ((rc_rx_buffer[5] >> 4)& 0x000C) >> 2;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	3305      	adds	r3, #5
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	109b      	asrs	r3, r3, #2
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	721a      	strb	r2, [r3, #8]
	rc_hdlr->ctrl.s2   = ((rc_rx_buffer[5] >> 4)& 0x0003);      //may use this as mode swap indicator
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	3305      	adds	r3, #5
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	091b      	lsrs	r3, r3, #4
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	b2da      	uxtb	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	725a      	strb	r2, [r3, #9]

	/* currently hard coding */
	if(rc_hdlr->ctrl.s1 == SW_MID && rc_hdlr->ctrl.s2 == SW_DOWN)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	7a1b      	ldrb	r3, [r3, #8]
 8005dfe:	2b03      	cmp	r3, #3
 8005e00:	d108      	bne.n	8005e14 <rc_process_rx_data+0x50>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	7a5b      	ldrb	r3, [r3, #9]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d104      	bne.n	8005e14 <rc_process_rx_data+0x50>
		rc_hdlr->control_mode = PC_MODE;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8005e12:	e003      	b.n	8005e1c <rc_process_rx_data+0x58>
	else
		rc_hdlr->control_mode = CTRLER_MODE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

	if(rc_hdlr->control_mode == CTRLER_MODE){
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f040 80ab 	bne.w	8005f7e <rc_process_rx_data+0x1ba>
		/* remote controller parse process */
		rc_hdlr->ctrl.ch0  = ((rc_rx_buffer[0]| (rc_rx_buffer[1] << 8)) & 0x07ff) - CHANNEL_CENTER;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b21a      	sxth	r2, r3
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	021b      	lsls	r3, r3, #8
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	b21b      	sxth	r3, r3
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	b21a      	sxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	801a      	strh	r2, [r3, #0]
		rc_hdlr->ctrl.ch1  = (((rc_rx_buffer[1] >> 3) | (rc_rx_buffer[2] << 5)) & 0x07ff) - CHANNEL_CENTER;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	08db      	lsrs	r3, r3, #3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	b21a      	sxth	r2, r3
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	3302      	adds	r3, #2
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	015b      	lsls	r3, r3, #5
 8005e64:	b21b      	sxth	r3, r3
 8005e66:	4313      	orrs	r3, r2
 8005e68:	b21b      	sxth	r3, r3
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e70:	b29b      	uxth	r3, r3
 8005e72:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	b21a      	sxth	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	805a      	strh	r2, [r3, #2]
		rc_hdlr->ctrl.ch2  = (((rc_rx_buffer[2] >> 6) | (rc_rx_buffer[3] << 2) | (rc_rx_buffer[4] << 10)) & 0x07ff) - CHANNEL_CENTER;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	3302      	adds	r3, #2
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	099b      	lsrs	r3, r3, #6
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	b21a      	sxth	r2, r3
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	3303      	adds	r3, #3
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b21a      	sxth	r2, r3
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	b21b      	sxth	r3, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b21b      	sxth	r3, r3
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	b21a      	sxth	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	809a      	strh	r2, [r3, #4]
		rc_hdlr->ctrl.ch3  = (((rc_rx_buffer[4] >> 1) | (rc_rx_buffer[5] << 7)) & 0x07ff) - CHANNEL_CENTER;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	085b      	lsrs	r3, r3, #1
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	b21a      	sxth	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	3305      	adds	r3, #5
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	01db      	lsls	r3, r3, #7
 8005ece:	b21b      	sxth	r3, r3
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	b21b      	sxth	r3, r3
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	b21a      	sxth	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	80da      	strh	r2, [r3, #6]
		rc_hdlr->ctrl.wheel = ((rc_rx_buffer[16]|(rc_rx_buffer[17]<<8))&0x07FF) - CHANNEL_CENTER;
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	3310      	adds	r3, #16
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	b21a      	sxth	r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	3311      	adds	r3, #17
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	b21b      	sxth	r3, r3
 8005efa:	4313      	orrs	r3, r2
 8005efc:	b21b      	sxth	r3, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	b21a      	sxth	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	815a      	strh	r2, [r3, #10]

		/* calibration process to avoid some unexpected values */
		if ((abs(rc_hdlr->ctrl.ch0)  > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch1) > CHANNEL_OFFSET_MAX_ABS_VAL) || \
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	bfb8      	it	lt
 8005f1c:	425b      	neglt	r3, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8005f24:	d81e      	bhi.n	8005f64 <rc_process_rx_data+0x1a0>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bfb8      	it	lt
 8005f30:	425b      	neglt	r3, r3
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8005f38:	d814      	bhi.n	8005f64 <rc_process_rx_data+0x1a0>
			 (abs(rc_hdlr->ctrl.ch2) > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch3) > CHANNEL_OFFSET_MAX_ABS_VAL))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bfb8      	it	lt
 8005f44:	425b      	neglt	r3, r3
 8005f46:	b29b      	uxth	r3, r3
		if ((abs(rc_hdlr->ctrl.ch0)  > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch1) > CHANNEL_OFFSET_MAX_ABS_VAL) || \
 8005f48:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8005f4c:	d80a      	bhi.n	8005f64 <rc_process_rx_data+0x1a0>
			 (abs(rc_hdlr->ctrl.ch2) > CHANNEL_OFFSET_MAX_ABS_VAL) ||(abs(rc_hdlr->ctrl.ch3) > CHANNEL_OFFSET_MAX_ABS_VAL))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	bfb8      	it	lt
 8005f58:	425b      	neglt	r3, r3
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8005f60:	f240 8143 	bls.w	80061ea <rc_process_rx_data+0x426>
		  {
			rc.ctrl.ch0 = 0;
 8005f64:	4ba3      	ldr	r3, [pc, #652]	; (80061f4 <rc_process_rx_data+0x430>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	801a      	strh	r2, [r3, #0]
			rc.ctrl.ch1 = 0;
 8005f6a:	4ba2      	ldr	r3, [pc, #648]	; (80061f4 <rc_process_rx_data+0x430>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	805a      	strh	r2, [r3, #2]
			rc.ctrl.ch2 = 0;
 8005f70:	4ba0      	ldr	r3, [pc, #640]	; (80061f4 <rc_process_rx_data+0x430>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	809a      	strh	r2, [r3, #4]
			rc.ctrl.ch3 = 0;
 8005f76:	4b9f      	ldr	r3, [pc, #636]	; (80061f4 <rc_process_rx_data+0x430>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	80da      	strh	r2, [r3, #6]

		rc_key_scan(&rc_hdlr->pc.mouse.left_click, rc_hdlr->pc.mouse.click_l, 0x0001);
		rc_key_scan(&rc_hdlr->pc.mouse.right_click, rc_hdlr->pc.mouse.click_r, 0x0001);

	}
}
 8005f7c:	e135      	b.n	80061ea <rc_process_rx_data+0x426>
	else if(rc_hdlr->control_mode == PC_MODE){
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 8130 	bne.w	80061ea <rc_process_rx_data+0x426>
		rc_hdlr->pc.mouse.x = rc_rx_buffer[6] | (rc_rx_buffer[7] << 8);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	3306      	adds	r3, #6
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	b21a      	sxth	r2, r3
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	3307      	adds	r3, #7
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	b21a      	sxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	819a      	strh	r2, [r3, #12]
		rc_hdlr->pc.mouse.y = rc_rx_buffer[8] | (rc_rx_buffer[9] << 8);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	b21a      	sxth	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	3309      	adds	r3, #9
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	b21b      	sxth	r3, r3
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	b21a      	sxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	81da      	strh	r2, [r3, #14]
		rc_hdlr->pc.mouse.z = rc_rx_buffer[10] | (rc_rx_buffer[11] << 8);//why the official parse process has z axis??
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	330a      	adds	r3, #10
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	b21a      	sxth	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	330b      	adds	r3, #11
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	021b      	lsls	r3, r3, #8
 8005fce:	b21b      	sxth	r3, r3
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	b21a      	sxth	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	821a      	strh	r2, [r3, #16]
		rc_hdlr->pc.mouse.click_l = rc_rx_buffer[12];
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	7b1a      	ldrb	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	749a      	strb	r2, [r3, #18]
		rc_hdlr->pc.mouse.click_r = rc_rx_buffer[13];
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	7b5a      	ldrb	r2, [r3, #13]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	74da      	strb	r2, [r3, #19]
		rc_hdlr->pc.key.key_buffer = rc_rx_buffer[14] | (rc_rx_buffer[15] << 8);//multiple keys reading
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	330e      	adds	r3, #14
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	b21a      	sxth	r2, r3
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	330f      	adds	r3, #15
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	b21b      	sxth	r3, r3
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	b21b      	sxth	r3, r3
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		rc_key_scan(&rc_hdlr->pc.key.W, rc_hdlr->pc.key.key_buffer, KEY_BOARD_W);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006012:	2201      	movs	r2, #1
 8006014:	4619      	mov	r1, r3
 8006016:	f000 f990 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.S, rc_hdlr->pc.key.key_buffer, KEY_BOARD_S);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f103 0042 	add.w	r0, r3, #66	; 0x42
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006026:	2202      	movs	r2, #2
 8006028:	4619      	mov	r1, r3
 800602a:	f000 f986 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.A, rc_hdlr->pc.key.key_buffer, KEY_BOARD_A);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f103 003f 	add.w	r0, r3, #63	; 0x3f
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800603a:	2204      	movs	r2, #4
 800603c:	4619      	mov	r1, r3
 800603e:	f000 f97c 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.D, rc_hdlr->pc.key.key_buffer, KEY_BOARD_D);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f103 0045 	add.w	r0, r3, #69	; 0x45
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800604e:	2208      	movs	r2, #8
 8006050:	4619      	mov	r1, r3
 8006052:	f000 f972 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.Shift, rc_hdlr->pc.key.key_buffer, KEY_BOARD_SHIFT);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f103 005a 	add.w	r0, r3, #90	; 0x5a
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006062:	2210      	movs	r2, #16
 8006064:	4619      	mov	r1, r3
 8006066:	f000 f968 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.Ctrl, rc_hdlr->pc.key.key_buffer, KEY_BOARD_CTRL);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006076:	2220      	movs	r2, #32
 8006078:	4619      	mov	r1, r3
 800607a:	f000 f95e 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.Q, rc_hdlr->pc.key.key_buffer, KEY_BOARD_Q);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800608a:	2240      	movs	r2, #64	; 0x40
 800608c:	4619      	mov	r1, r3
 800608e:	f000 f954 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.E, rc_hdlr->pc.key.key_buffer, KEY_BOARD_E);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f103 004b 	add.w	r0, r3, #75	; 0x4b
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800609e:	2280      	movs	r2, #128	; 0x80
 80060a0:	4619      	mov	r1, r3
 80060a2:	f000 f94a 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.R, rc_hdlr->pc.key.key_buffer, KEY_BOARD_R);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f103 004e 	add.w	r0, r3, #78	; 0x4e
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80060b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060b6:	4619      	mov	r1, r3
 80060b8:	f000 f93f 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.F, rc_hdlr->pc.key.key_buffer, KEY_BOARD_F);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f103 0057 	add.w	r0, r3, #87	; 0x57
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80060c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060cc:	4619      	mov	r1, r3
 80060ce:	f000 f934 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.G, rc_hdlr->pc.key.key_buffer, KEY_BOARD_G);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f103 005d 	add.w	r0, r3, #93	; 0x5d
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80060de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060e2:	4619      	mov	r1, r3
 80060e4:	f000 f929 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.C, rc_hdlr->pc.key.key_buffer, KEY_BOARD_C);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f103 0060 	add.w	r0, r3, #96	; 0x60
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80060f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060f8:	4619      	mov	r1, r3
 80060fa:	f000 f91e 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.V, rc_hdlr->pc.key.key_buffer, KEY_BOARD_V);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f103 0051 	add.w	r0, r3, #81	; 0x51
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800610a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800610e:	4619      	mov	r1, r3
 8006110:	f000 f913 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.key.B, rc_hdlr->pc.key.key_buffer, KEY_BOARD_B);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f103 0063 	add.w	r0, r3, #99	; 0x63
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006120:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006124:	4619      	mov	r1, r3
 8006126:	f000 f908 	bl	800633a <rc_key_scan>
		rc_hdlr->pc.mouse.x = first_order_low_pass_filter(&rc_hdlr->pc.mouse.x_folp, rc_hdlr->pc.mouse.x);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f103 021c 	add.w	r2, r3, #28
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800613e:	eeb0 0a67 	vmov.f32	s0, s15
 8006142:	4610      	mov	r0, r2
 8006144:	f7fc ff9a 	bl	800307c <first_order_low_pass_filter>
 8006148:	eef0 7a40 	vmov.f32	s15, s0
 800614c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006150:	ee17 3a90 	vmov	r3, s15
 8006154:	b21a      	sxth	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	819a      	strh	r2, [r3, #12]
		rc_hdlr->pc.mouse.y = first_order_low_pass_filter(&rc_hdlr->pc.mouse.y_folp, rc_hdlr->pc.mouse.y);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800616e:	eeb0 0a67 	vmov.f32	s0, s15
 8006172:	4610      	mov	r0, r2
 8006174:	f7fc ff82 	bl	800307c <first_order_low_pass_filter>
 8006178:	eef0 7a40 	vmov.f32	s15, s0
 800617c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006180:	ee17 3a90 	vmov	r3, s15
 8006184:	b21a      	sxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	81da      	strh	r2, [r3, #14]
		if ((abs(rc_hdlr->pc.mouse.x)  > MOUSE_MAX_SPEED_VALUE) ||(abs(rc_hdlr->pc.mouse.x) > MOUSE_MAX_SPEED_VALUE)){
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	bfb8      	it	lt
 8006194:	425b      	neglt	r3, r3
 8006196:	b29b      	uxth	r3, r3
 8006198:	f247 5230 	movw	r2, #30000	; 0x7530
 800619c:	4293      	cmp	r3, r2
 800619e:	d80a      	bhi.n	80061b6 <rc_process_rx_data+0x3f2>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	bfb8      	it	lt
 80061aa:	425b      	neglt	r3, r3
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f247 5230 	movw	r2, #30000	; 0x7530
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d905      	bls.n	80061c2 <rc_process_rx_data+0x3fe>
			rc_hdlr->pc.mouse.x = 0;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	819a      	strh	r2, [r3, #12]
			rc_hdlr->pc.mouse.y = 0;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	81da      	strh	r2, [r3, #14]
		rc_key_scan(&rc_hdlr->pc.mouse.left_click, rc_hdlr->pc.mouse.click_l, 0x0001);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f103 0014 	add.w	r0, r3, #20
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	7c9b      	ldrb	r3, [r3, #18]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2201      	movs	r2, #1
 80061d0:	4619      	mov	r1, r3
 80061d2:	f000 f8b2 	bl	800633a <rc_key_scan>
		rc_key_scan(&rc_hdlr->pc.mouse.right_click, rc_hdlr->pc.mouse.click_r, 0x0001);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f103 0017 	add.w	r0, r3, #23
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7cdb      	ldrb	r3, [r3, #19]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	2201      	movs	r2, #1
 80061e4:	4619      	mov	r1, r3
 80061e6:	f000 f8a8 	bl	800633a <rc_key_scan>
}
 80061ea:	bf00      	nop
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2000d6b0 	.word	0x2000d6b0

080061f8 <rc_update_comm_pack>:
  * @brief     update the remote comm pack
  * @param[in] main rc struct
  * @param[in] comm rc struct
  * @retval    None
  */
static void rc_update_comm_pack(RemoteControl_t *rc_hdlr, CommRemoteControl_t *comm_rc, CommPCControl_t *comm_pc, CommExtPCControl_t *comm_ext_pc){
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	60b9      	str	r1, [r7, #8]
 8006202:	607a      	str	r2, [r7, #4]
 8006204:	603b      	str	r3, [r7, #0]
	if(rc_hdlr->control_mode == CTRLER_MODE){
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11a      	bne.n	8006246 <rc_update_comm_pack+0x4e>
		comm_rc->rc_data[0] = rc_hdlr->ctrl.ch0;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	801a      	strh	r2, [r3, #0]
		comm_rc->rc_data[1] = rc_hdlr->ctrl.ch1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	805a      	strh	r2, [r3, #2]
		comm_rc->rc_data[2]  = rc_hdlr->ctrl.s1;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	7a1b      	ldrb	r3, [r3, #8]
 8006228:	b21a      	sxth	r2, r3
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	809a      	strh	r2, [r3, #4]
		comm_rc->rc_data[3]  = rc_hdlr->ctrl.s2;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	7a5b      	ldrb	r3, [r3, #9]
 8006232:	b21a      	sxth	r2, r3
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	80da      	strh	r2, [r3, #6]
		comm_rc->send_flag = 1;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	2201      	movs	r2, #1
 800623c:	721a      	strb	r2, [r3, #8]

		/* not send pc data */
		comm_pc->send_flag = 0;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	721a      	strb	r2, [r3, #8]
		comm_ext_pc->pc_data[2] = rc_hdlr->pc.key.B.status;
		comm_ext_pc->send_flag = 1;


	}
}
 8006244:	e049      	b.n	80062da <rc_update_comm_pack+0xe2>
	else if(rc_hdlr->control_mode == PC_MODE){
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800624c:	2b01      	cmp	r3, #1
 800624e:	d144      	bne.n	80062da <rc_update_comm_pack+0xe2>
		comm_rc->rc_data[0] = chassis.chassis_mode;//board mode
 8006250:	4b25      	ldr	r3, [pc, #148]	; (80062e8 <rc_update_comm_pack+0xf0>)
 8006252:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8006256:	b21a      	sxth	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	801a      	strh	r2, [r3, #0]
		comm_rc->rc_data[1] = chassis.chassis_act_mode;//act_mode
 800625c:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <rc_update_comm_pack+0xf0>)
 800625e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8006262:	b21a      	sxth	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	805a      	strh	r2, [r3, #2]
		comm_rc->rc_data[2]  = rc_hdlr->ctrl.s1;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	7a1b      	ldrb	r3, [r3, #8]
 800626c:	b21a      	sxth	r2, r3
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	809a      	strh	r2, [r3, #4]
		comm_rc->rc_data[3]  = rc_hdlr->ctrl.s2;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	7a5b      	ldrb	r3, [r3, #9]
 8006276:	b21a      	sxth	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	80da      	strh	r2, [r3, #6]
		comm_rc->send_flag = 1;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2201      	movs	r2, #1
 8006280:	721a      	strb	r2, [r3, #8]
		comm_pc->pc_data[0] = rc_hdlr->pc.mouse.x;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	801a      	strh	r2, [r3, #0]
		comm_pc->pc_data[1] = rc_hdlr->pc.mouse.y;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	805a      	strh	r2, [r3, #2]
		comm_pc->pc_data[2]  = rc_hdlr->pc.mouse.left_click.status;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	7d1b      	ldrb	r3, [r3, #20]
 800629a:	b21a      	sxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	809a      	strh	r2, [r3, #4]
		comm_pc->pc_data[3]  = rc_hdlr->pc.mouse.right_click.status;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	7ddb      	ldrb	r3, [r3, #23]
 80062a4:	b21a      	sxth	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	80da      	strh	r2, [r3, #6]
		comm_pc->send_flag = 1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2201      	movs	r2, #1
 80062ae:	721a      	strb	r2, [r3, #8]
		comm_ext_pc->pc_data[0] = rc_hdlr->pc.key.C.status;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80062b6:	b21a      	sxth	r2, r3
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	801a      	strh	r2, [r3, #0]
		comm_ext_pc->pc_data[1] = rc_hdlr->pc.key.V.status;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062c2:	b21a      	sxth	r2, r3
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	805a      	strh	r2, [r3, #2]
		comm_ext_pc->pc_data[2] = rc_hdlr->pc.key.B.status;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 80062ce:	b21a      	sxth	r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	809a      	strh	r2, [r3, #4]
		comm_ext_pc->send_flag = 1;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2201      	movs	r2, #1
 80062d8:	719a      	strb	r2, [r3, #6]
}
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	2000d474 	.word	0x2000d474

080062ec <rc_reset>:
/**
  * @brief     reset everything when error occurs
  * @param[in] main rc struct
  * @retval    None
  */
void rc_reset(RemoteControl_t *rc_hdlr){
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	/* stop DMA */
	HAL_UART_DMAStop(&huart3);
 80062f4:	4805      	ldr	r0, [pc, #20]	; (800630c <rc_reset+0x20>)
 80062f6:	f007 fe3e 	bl	800df76 <HAL_UART_DMAStop>
	/* try to reconnect to rc */
	HAL_UART_Receive_DMA(&huart3, rc_rx_buffer, DBUS_BUFFER_LEN);
 80062fa:	2212      	movs	r2, #18
 80062fc:	4904      	ldr	r1, [pc, #16]	; (8006310 <rc_reset+0x24>)
 80062fe:	4803      	ldr	r0, [pc, #12]	; (800630c <rc_reset+0x20>)
 8006300:	f007 fe09 	bl	800df16 <HAL_UART_Receive_DMA>
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	2000dbbc 	.word	0x2000dbbc
 8006310:	2000d868 	.word	0x2000d868

08006314 <rc_key_init>:
/**
  * @brief	   key object initialization
  * @param[in] key object
  * @retval    None
  */
void rc_key_init(KeyObject_t *key){
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
	key->status = RELEASED;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	701a      	strb	r2, [r3, #0]
	key->pre_status = RELEASED;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	705a      	strb	r2, [r3, #1]
	key->status_count = 0;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	709a      	strb	r2, [r3, #2]
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <rc_key_scan>:
/**
  * @brief	   key object initialization
  * @param[in] key object
  * @retval    None
  */
void rc_key_scan(KeyObject_t *key_obj, uint16_t key_buffer, uint16_t compare_key){
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	807b      	strh	r3, [r7, #2]
 8006346:	4613      	mov	r3, r2
 8006348:	803b      	strh	r3, [r7, #0]
	if(key_buffer & compare_key)
 800634a:	887a      	ldrh	r2, [r7, #2]
 800634c:	883b      	ldrh	r3, [r7, #0]
 800634e:	4013      	ands	r3, r2
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d006      	beq.n	8006364 <rc_key_scan+0x2a>
		key_obj->status_count++;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	789b      	ldrb	r3, [r3, #2]
 800635a:	3301      	adds	r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	709a      	strb	r2, [r3, #2]
 8006362:	e002      	b.n	800636a <rc_key_scan+0x30>
	else
		key_obj->status_count = 0;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	709a      	strb	r2, [r3, #2]
	rc_get_key_status(key_obj);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f804 	bl	8006378 <rc_get_key_status>
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <rc_get_key_status>:
/**
  * @brief     get the current key status based on the count
  * @param[in] key object
  * @retval    current key status
  */
KeyStatus_t rc_get_key_status(KeyObject_t *key){
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	key->pre_status = key->status;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	705a      	strb	r2, [r3, #1]
	if(key->status_count > 1){// hold pressed
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	789b      	ldrb	r3, [r3, #2]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d919      	bls.n	80063c4 <rc_get_key_status+0x4c>
		switch(key->pre_status){
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b02      	cmp	r3, #2
 8006396:	dc02      	bgt.n	800639e <rc_get_key_status+0x26>
 8006398:	2b00      	cmp	r3, #0
 800639a:	da03      	bge.n	80063a4 <rc_get_key_status+0x2c>
 800639c:	e00a      	b.n	80063b4 <rc_get_key_status+0x3c>
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d004      	beq.n	80063ac <rc_get_key_status+0x34>
 80063a2:	e007      	b.n	80063b4 <rc_get_key_status+0x3c>
			/* in this case, we have 2 possible pre status */
			case RELEASED:
			case PRESSED_TO_RELEASE:
			case RELEASED_TO_PRESS: key->status = PRESSED;break;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2203      	movs	r2, #3
 80063a8:	701a      	strb	r2, [r3, #0]
 80063aa:	e003      	b.n	80063b4 <rc_get_key_status+0x3c>
			case PRESSED: key->status = PRESSED;break;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2203      	movs	r2, #3
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	bf00      	nop
		}
		if(key->status_count > 100)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	789b      	ldrb	r3, [r3, #2]
 80063b8:	2b64      	cmp	r3, #100	; 0x64
 80063ba:	d93c      	bls.n	8006436 <rc_get_key_status+0xbe>
			key->status_count = 100; //avoid infinite addition
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2264      	movs	r2, #100	; 0x64
 80063c0:	709a      	strb	r2, [r3, #2]
 80063c2:	e038      	b.n	8006436 <rc_get_key_status+0xbe>
	}
	else if(key->status_count == 1){ // rising edge triggered
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	789b      	ldrb	r3, [r3, #2]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d115      	bne.n	80063f8 <rc_get_key_status+0x80>
		switch(key->pre_status){
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d009      	beq.n	80063e8 <rc_get_key_status+0x70>
 80063d4:	2b03      	cmp	r3, #3
 80063d6:	dc2e      	bgt.n	8006436 <rc_get_key_status+0xbe>
 80063d8:	2b01      	cmp	r3, #1
 80063da:	dc02      	bgt.n	80063e2 <rc_get_key_status+0x6a>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	da03      	bge.n	80063e8 <rc_get_key_status+0x70>
 80063e0:	e029      	b.n	8006436 <rc_get_key_status+0xbe>
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d004      	beq.n	80063f0 <rc_get_key_status+0x78>
 80063e6:	e026      	b.n	8006436 <rc_get_key_status+0xbe>
			/* in this case , we have 2 possible pre status */
			case RELEASED_TO_PRESS:
			case PRESSED:
			case RELEASED: key->status = RELEASED_TO_PRESS;break;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e022      	b.n	8006436 <rc_get_key_status+0xbe>
			case PRESSED_TO_RELEASE:key->status = RELEASED_TO_PRESS;break;// count not ++, indicate																	 // not pressed
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
 80063f6:	e01e      	b.n	8006436 <rc_get_key_status+0xbe>
		}
	}
	else if(key->status_count == 0){ // released
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	789b      	ldrb	r3, [r3, #2]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d119      	bne.n	8006434 <rc_get_key_status+0xbc>
		switch(key->pre_status){
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d00d      	beq.n	8006424 <rc_get_key_status+0xac>
 8006408:	2b03      	cmp	r3, #3
 800640a:	dc14      	bgt.n	8006436 <rc_get_key_status+0xbe>
 800640c:	2b01      	cmp	r3, #1
 800640e:	dc02      	bgt.n	8006416 <rc_get_key_status+0x9e>
 8006410:	2b00      	cmp	r3, #0
 8006412:	da03      	bge.n	800641c <rc_get_key_status+0xa4>
 8006414:	e00f      	b.n	8006436 <rc_get_key_status+0xbe>
 8006416:	2b02      	cmp	r3, #2
 8006418:	d008      	beq.n	800642c <rc_get_key_status+0xb4>
 800641a:	e00c      	b.n	8006436 <rc_get_key_status+0xbe>
			/* in this case , we have 3 possible pre status */
			case RELEASED_TO_PRESS:
			case RELEASED: key->status = RELEASED;break;//release
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e008      	b.n	8006436 <rc_get_key_status+0xbe>
			case PRESSED: key->status  =  PRESSED_TO_RELEASE;break;//just release, falling edge triggered
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	701a      	strb	r2, [r3, #0]
 800642a:	e004      	b.n	8006436 <rc_get_key_status+0xbe>
			case PRESSED_TO_RELEASE:key->status = RELEASED;break; // release
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	e000      	b.n	8006436 <rc_get_key_status+0xbe>
		}
	}
 8006434:	bf00      	nop
	return key->status;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	781b      	ldrb	r3, [r3, #0]
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <IMU_Task_Function>:
/**
  * @brief     IMU task main entry function
  * @retval    None
  */
/* Task execution time (per loop): 1 ms */
void IMU_Task_Function(void){
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 1ms
 800644e:	2301      	movs	r3, #1
 8006450:	607b      	str	r3, [r7, #4]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8006452:	f008 ff65 	bl	800f320 <xTaskGetTickCount>
 8006456:	4603      	mov	r3, r0
 8006458:	603b      	str	r3, [r7, #0]

	/* main imu task begins */
	for(;;){

		/* set watch point */
		if( imu_init_flag != 1){//gimbal_cali_done_flag == 1 &&
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <IMU_Task_Function+0x80>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d023      	beq.n	80064aa <IMU_Task_Function+0x62>

			/* init imu parameters */
			imu_task_init();
 8006462:	f000 f839 	bl	80064d8 <imu_task_init>

			while(imu.temp_status != NORMAL){
 8006466:	e00d      	b.n	8006484 <IMU_Task_Function+0x3c>
				imu.temp = get_BMI088_temperature();
 8006468:	f001 fb12 	bl	8007a90 <get_BMI088_temperature>
 800646c:	eef0 7a40 	vmov.f32	s15, s0
 8006470:	4b16      	ldr	r3, [pc, #88]	; (80064cc <IMU_Task_Function+0x84>)
 8006472:	edc3 7a00 	vstr	s15, [r3]
				imu_temp_pid_control();
 8006476:	f000 f88f 	bl	8006598 <imu_temp_pid_control>
				vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800647a:	463b      	mov	r3, r7
 800647c:	6879      	ldr	r1, [r7, #4]
 800647e:	4618      	mov	r0, r3
 8006480:	f008 fd92 	bl	800efa8 <vTaskDelayUntil>
			while(imu.temp_status != NORMAL){
 8006484:	4b11      	ldr	r3, [pc, #68]	; (80064cc <IMU_Task_Function+0x84>)
 8006486:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1ec      	bne.n	8006468 <IMU_Task_Function+0x20>
			}

			/* set the offset when the temperature reach normal status */
			__HAL_TIM_SET_COMPARE(&IMU_TMP_PWM_HTIM, IMU_TMP_PWM_CHANNEL, 1000);//small current to keep tmp
 800648e:	4b10      	ldr	r3, [pc, #64]	; (80064d0 <IMU_Task_Function+0x88>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006496:	635a      	str	r2, [r3, #52]	; 0x34
			bmi088_get_offset();
 8006498:	f001 fd2c 	bl	8007ef4 <bmi088_get_offset>

			/* imu init finished */
			imu_init_flag = 1;
 800649c:	4b0a      	ldr	r3, [pc, #40]	; (80064c8 <IMU_Task_Function+0x80>)
 800649e:	2201      	movs	r2, #1
 80064a0:	701a      	strb	r2, [r3, #0]
			buzzer_play_mario(300);
 80064a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80064a6:	f000 fa93 	bl	80069d0 <buzzer_play_mario>
			}

		/* IMU temperature PID control*/
		imu_temp_pid_control();
 80064aa:	f000 f875 	bl	8006598 <imu_temp_pid_control>
		/* read the mpu data */
		if(imu_init_flag == 1){
 80064ae:	4b06      	ldr	r3, [pc, #24]	; (80064c8 <IMU_Task_Function+0x80>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d102      	bne.n	80064bc <IMU_Task_Function+0x74>
			bmi088_get_data(&imu.ahrs_sensor);
 80064b6:	4807      	ldr	r0, [pc, #28]	; (80064d4 <IMU_Task_Function+0x8c>)
 80064b8:	f001 fc1c 	bl	8007cf4 <bmi088_get_data>
		}

		/* delay utill wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80064bc:	463b      	mov	r3, r7
 80064be:	6879      	ldr	r1, [r7, #4]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f008 fd71 	bl	800efa8 <vTaskDelayUntil>
		if( imu_init_flag != 1){//gimbal_cali_done_flag == 1 &&
 80064c6:	e7c8      	b.n	800645a <IMU_Task_Function+0x12>
 80064c8:	20000525 	.word	0x20000525
 80064cc:	20004670 	.word	0x20004670
 80064d0:	2000da24 	.word	0x2000da24
 80064d4:	200046b8 	.word	0x200046b8

080064d8 <imu_task_init>:

	}
}

void imu_task_init(void){
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0
	/* inint bmi088 */
	bmi088_device_init();
 80064dc:	f001 fc40 	bl	8007d60 <bmi088_device_init>
	/* init sensor pid */
	pid_param_init(&(imu.tmp_pid), 2000, 1500, 25, 900, 0.10, 0.05);
 80064e0:	ed9f 2a16 	vldr	s4, [pc, #88]	; 800653c <imu_task_init+0x64>
 80064e4:	eddf 1a16 	vldr	s3, [pc, #88]	; 8006540 <imu_task_init+0x68>
 80064e8:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8006544 <imu_task_init+0x6c>
 80064ec:	eef3 0a09 	vmov.f32	s1, #57	; 0x41c80000  25.0
 80064f0:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8006548 <imu_task_init+0x70>
 80064f4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80064f8:	4814      	ldr	r0, [pc, #80]	; (800654c <imu_task_init+0x74>)
 80064fa:	f7fc fb65 	bl	8002bc8 <pid_param_init>
	set_imu_temp_status(&imu, ABNORMAL);
 80064fe:	2101      	movs	r1, #1
 8006500:	4813      	ldr	r0, [pc, #76]	; (8006550 <imu_task_init+0x78>)
 8006502:	f000 f827 	bl	8006554 <set_imu_temp_status>
	imu.imu_mode = GA_MODE; // forbid ist8310
 8006506:	4b12      	ldr	r3, [pc, #72]	; (8006550 <imu_task_init+0x78>)
 8006508:	2201      	movs	r2, #1
 800650a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if(imu.imu_mode == GA_MODE){
 800650e:	4b10      	ldr	r3, [pc, #64]	; (8006550 <imu_task_init+0x78>)
 8006510:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006514:	2b01      	cmp	r3, #1
 8006516:	d10b      	bne.n	8006530 <imu_task_init+0x58>
    	// no use ist8310
		imu.ahrs_sensor.mx = 0.0f;
 8006518:	4b0d      	ldr	r3, [pc, #52]	; (8006550 <imu_task_init+0x78>)
 800651a:	f04f 0200 	mov.w	r2, #0
 800651e:	661a      	str	r2, [r3, #96]	; 0x60
		imu.ahrs_sensor.my = 0.0f;
 8006520:	4b0b      	ldr	r3, [pc, #44]	; (8006550 <imu_task_init+0x78>)
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	665a      	str	r2, [r3, #100]	; 0x64
		imu.ahrs_sensor.mz = 0.0f;
 8006528:	4b09      	ldr	r3, [pc, #36]	; (8006550 <imu_task_init+0x78>)
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	669a      	str	r2, [r3, #104]	; 0x68
    }
//	imu.sample_time = DWT_Get();
	imu.temp = 0.0;
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <imu_task_init+0x78>)
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	601a      	str	r2, [r3, #0]
}
 8006538:	bf00      	nop
 800653a:	bd80      	pop	{r7, pc}
 800653c:	3d4ccccd 	.word	0x3d4ccccd
 8006540:	3dcccccd 	.word	0x3dcccccd
 8006544:	44610000 	.word	0x44610000
 8006548:	44bb8000 	.word	0x44bb8000
 800654c:	20004678 	.word	0x20004678
 8006550:	20004670 	.word	0x20004670

08006554 <set_imu_temp_status>:
  * @brief     set IMU temp status
  * @param[in] pimu: main imu sturct
  * @param[in] status: IMU_temp_status enum variable
  * @retval    None
  */
void set_imu_temp_status(IMU_t *pimu, IMU_temp_status status){
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
	pimu->temp_status = status;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	78fa      	ldrb	r2, [r7, #3]
 8006564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <set_imu_pwm>:

void set_imu_pwm(IMU_t *pimu, uint16_t pwm){
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	460b      	mov	r3, r1
 800657e:	807b      	strh	r3, [r7, #2]
	 __HAL_TIM_SET_COMPARE(&IMU_TMP_PWM_HTIM, IMU_TMP_PWM_CHANNEL, pwm);
 8006580:	4b04      	ldr	r3, [pc, #16]	; (8006594 <set_imu_pwm+0x20>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	887a      	ldrh	r2, [r7, #2]
 8006586:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	2000da24 	.word	0x2000da24

08006598 <imu_temp_pid_control>:
  * @brief  temperature of imu pid control
  * @param[in]: Not used
  * @retval 0
  */
int32_t imu_temp_pid_control(void)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
  float temp=imu.temp;
 800659e:	4b37      	ldr	r3, [pc, #220]	; (800667c <imu_temp_pid_control+0xe4>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	607b      	str	r3, [r7, #4]
  pid_single_loop_control(DEFAULT_IMU_TEMP, &(imu.tmp_pid), temp); // pid control
 80065a4:	edd7 0a01 	vldr	s1, [r7, #4]
 80065a8:	4835      	ldr	r0, [pc, #212]	; (8006680 <imu_temp_pid_control+0xe8>)
 80065aa:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8006684 <imu_temp_pid_control+0xec>
 80065ae:	f7fc fbdf 	bl	8002d70 <pid_single_loop_control>

  if(temp <= (DEFAULT_IMU_TEMP+0.1f) && temp >= (DEFAULT_IMU_TEMP-0.1f)){
 80065b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80065b6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006688 <imu_temp_pid_control+0xf0>
 80065ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c2:	d81f      	bhi.n	8006604 <imu_temp_pid_control+0x6c>
 80065c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80065c8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800668c <imu_temp_pid_control+0xf4>
 80065cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	db16      	blt.n	8006604 <imu_temp_pid_control+0x6c>
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_RESET);
 80065d6:	2200      	movs	r2, #0
 80065d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80065dc:	482c      	ldr	r0, [pc, #176]	; (8006690 <imu_temp_pid_control+0xf8>)
 80065de:	f005 fc77 	bl	800bed0 <HAL_GPIO_WritePin>
	  set_imu_pwm(&imu, imu.tmp_pid.total_out);
 80065e2:	4b26      	ldr	r3, [pc, #152]	; (800667c <imu_temp_pid_control+0xe4>)
 80065e4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80065e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065ec:	ee17 3a90 	vmov	r3, s15
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	4619      	mov	r1, r3
 80065f4:	4821      	ldr	r0, [pc, #132]	; (800667c <imu_temp_pid_control+0xe4>)
 80065f6:	f7ff ffbd 	bl	8006574 <set_imu_pwm>
	  set_imu_temp_status(&imu, NORMAL);
 80065fa:	2100      	movs	r1, #0
 80065fc:	481f      	ldr	r0, [pc, #124]	; (800667c <imu_temp_pid_control+0xe4>)
 80065fe:	f7ff ffa9 	bl	8006554 <set_imu_temp_status>
 8006602:	e035      	b.n	8006670 <imu_temp_pid_control+0xd8>
  }
  else if(temp > DEFAULT_IMU_TEMP + 0.1f){
 8006604:	edd7 7a01 	vldr	s15, [r7, #4]
 8006608:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006688 <imu_temp_pid_control+0xf0>
 800660c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006614:	dd16      	ble.n	8006644 <imu_temp_pid_control+0xac>
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8006616:	2201      	movs	r2, #1
 8006618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800661c:	481c      	ldr	r0, [pc, #112]	; (8006690 <imu_temp_pid_control+0xf8>)
 800661e:	f005 fc57 	bl	800bed0 <HAL_GPIO_WritePin>
	  set_imu_pwm(&imu, imu.tmp_pid.total_out);
 8006622:	4b16      	ldr	r3, [pc, #88]	; (800667c <imu_temp_pid_control+0xe4>)
 8006624:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662c:	ee17 3a90 	vmov	r3, s15
 8006630:	b29b      	uxth	r3, r3
 8006632:	4619      	mov	r1, r3
 8006634:	4811      	ldr	r0, [pc, #68]	; (800667c <imu_temp_pid_control+0xe4>)
 8006636:	f7ff ff9d 	bl	8006574 <set_imu_pwm>
	  set_imu_temp_status(&imu, ABNORMAL);
 800663a:	2101      	movs	r1, #1
 800663c:	480f      	ldr	r0, [pc, #60]	; (800667c <imu_temp_pid_control+0xe4>)
 800663e:	f7ff ff89 	bl	8006554 <set_imu_temp_status>
 8006642:	e015      	b.n	8006670 <imu_temp_pid_control+0xd8>
  }
  else{
	  HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 8006644:	2201      	movs	r2, #1
 8006646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800664a:	4811      	ldr	r0, [pc, #68]	; (8006690 <imu_temp_pid_control+0xf8>)
 800664c:	f005 fc40 	bl	800bed0 <HAL_GPIO_WritePin>
	  set_imu_pwm(&imu, imu.tmp_pid.total_out);
 8006650:	4b0a      	ldr	r3, [pc, #40]	; (800667c <imu_temp_pid_control+0xe4>)
 8006652:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665a:	ee17 3a90 	vmov	r3, s15
 800665e:	b29b      	uxth	r3, r3
 8006660:	4619      	mov	r1, r3
 8006662:	4806      	ldr	r0, [pc, #24]	; (800667c <imu_temp_pid_control+0xe4>)
 8006664:	f7ff ff86 	bl	8006574 <set_imu_pwm>
	  set_imu_temp_status(&imu, ABNORMAL);
 8006668:	2101      	movs	r1, #1
 800666a:	4804      	ldr	r0, [pc, #16]	; (800667c <imu_temp_pid_control+0xe4>)
 800666c:	f7ff ff72 	bl	8006554 <set_imu_temp_status>
  }
  return 0;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20004670 	.word	0x20004670
 8006680:	20004678 	.word	0x20004678
 8006684:	42340000 	.word	0x42340000
 8006688:	42346666 	.word	0x42346666
 800668c:	4233999a 	.word	0x4233999a
 8006690:	40021c00 	.word	0x40021c00

08006694 <Timer_Task_Func>:
* @retval None
*/

/* Task execution time (per loop): 1ms */
//FIXME: this task takes too much time to run, try to optimize it within 2-3ms
void Timer_Task_Func(void const * argument){
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af02      	add	r7, sp, #8
 800669a:	6078      	str	r0, [r7, #4]

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(1); // task exec period 1ms
 800669c:	2301      	movs	r3, #1
 800669e:	60fb      	str	r3, [r7, #12]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 80066a0:	f008 fe3e 	bl	800f320 <xTaskGetTickCount>
 80066a4:	4603      	mov	r3, r0
 80066a6:	60bb      	str	r3, [r7, #8]

	for (;;){

		//FIXME: may put this read fucntion to can pending callback function
		Motor_Data_Read(&hcan1);
 80066a8:	4824      	ldr	r0, [pc, #144]	; (800673c <Timer_Task_Func+0xa8>)
 80066aa:	f000 fa2f 	bl	8006b0c <Motor_Data_Read>
		/* CAN data  */
		if(board_status == CHASSIS_BOARD){
 80066ae:	4b24      	ldr	r3, [pc, #144]	; (8006740 <Timer_Task_Func+0xac>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d115      	bne.n	80066e2 <Timer_Task_Func+0x4e>
			Motor_Data_Send(&hcan1, MOTOR_3508_STDID,
 80066b6:	4b23      	ldr	r3, [pc, #140]	; (8006744 <Timer_Task_Func+0xb0>)
 80066b8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80066bc:	4b21      	ldr	r3, [pc, #132]	; (8006744 <Timer_Task_Func+0xb0>)
 80066be:	f8d3 0124 	ldr.w	r0, [r3, #292]	; 0x124
 80066c2:	4b20      	ldr	r3, [pc, #128]	; (8006744 <Timer_Task_Func+0xb0>)
 80066c4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 80066c8:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <Timer_Task_Func+0xb0>)
 80066ca:	f8d2 224c 	ldr.w	r2, [r2, #588]	; 0x24c
 80066ce:	9201      	str	r2, [sp, #4]
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	4603      	mov	r3, r0
 80066d4:	460a      	mov	r2, r1
 80066d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066da:	4818      	ldr	r0, [pc, #96]	; (800673c <Timer_Task_Func+0xa8>)
 80066dc:	f000 fa72 	bl	8006bc4 <Motor_Data_Send>
 80066e0:	e024      	b.n	800672c <Timer_Task_Func+0x98>
							motor_data[0].tx_data,
							motor_data[1].tx_data,
							motor_data[2].tx_data,
							motor_data[3].tx_data);
		}
		else if(board_status == GIMBAL_BOARD){
 80066e2:	4b17      	ldr	r3, [pc, #92]	; (8006740 <Timer_Task_Func+0xac>)
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d120      	bne.n	800672c <Timer_Task_Func+0x98>
			Motor_Data_Send(&hcan1, MOTOR_6020_STDID,
 80066ea:	4b16      	ldr	r3, [pc, #88]	; (8006744 <Timer_Task_Func+0xb0>)
 80066ec:	f8d3 22e0 	ldr.w	r2, [r3, #736]	; 0x2e0
 80066f0:	4b14      	ldr	r3, [pc, #80]	; (8006744 <Timer_Task_Func+0xb0>)
 80066f2:	f8d3 1374 	ldr.w	r1, [r3, #884]	; 0x374
 80066f6:	4b13      	ldr	r3, [pc, #76]	; (8006744 <Timer_Task_Func+0xb0>)
 80066f8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80066fc:	2000      	movs	r0, #0
 80066fe:	9001      	str	r0, [sp, #4]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	460b      	mov	r3, r1
 8006704:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006708:	480c      	ldr	r0, [pc, #48]	; (800673c <Timer_Task_Func+0xa8>)
 800670a:	f000 fa5b 	bl	8006bc4 <Motor_Data_Send>
							motor_data[4].tx_data,
							motor_data[5].tx_data,
							motor_data[6].tx_data,
							0);
#ifdef USE_CAN_FRIC
			Motor_Data_Send(&hcan1, MOTOR_3508_STDID,
 800670e:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <Timer_Task_Func+0xb0>)
 8006710:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <Timer_Task_Func+0xb0>)
 8006716:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 800671a:	2100      	movs	r1, #0
 800671c:	9101      	str	r1, [sp, #4]
 800671e:	2100      	movs	r1, #0
 8006720:	9100      	str	r1, [sp, #0]
 8006722:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006726:	4805      	ldr	r0, [pc, #20]	; (800673c <Timer_Task_Func+0xa8>)
 8006728:	f000 fa4c 	bl	8006bc4 <Motor_Data_Send>
							0);
#endif
		}

		/* delay until wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800672c:	f107 0308 	add.w	r3, r7, #8
 8006730:	68f9      	ldr	r1, [r7, #12]
 8006732:	4618      	mov	r0, r3
 8006734:	f008 fc38 	bl	800efa8 <vTaskDelayUntil>
		Motor_Data_Read(&hcan1);
 8006738:	e7b6      	b.n	80066a8 <Timer_Task_Func+0x14>
 800673a:	bf00      	nop
 800673c:	2000d7e8 	.word	0x2000d7e8
 8006740:	20004718 	.word	0x20004718
 8006744:	20005278 	.word	0x20005278

08006748 <WatchDog_Task_Function>:
/**
  * @brief     watch dog task main entry function
  * @retval    None
  */
/* Task execution time (per loop): 100 ms */
void WatchDog_Task_Function(void){
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
	/* define wd global flag */
	static uint8_t wd_daemon_flag = 0;

	/* init the watch dog program */
	wdg_task_init();
 800674e:	f000 f81b 	bl	8006788 <wdg_task_init>

	/* set task exec period */
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(100); // task exec period 1ms
 8006752:	2364      	movs	r3, #100	; 0x64
 8006754:	607b      	str	r3, [r7, #4]

	/* init the task ticks */
	xLastWakeTime = xTaskGetTickCount();
 8006756:	f008 fde3 	bl	800f320 <xTaskGetTickCount>
 800675a:	4603      	mov	r3, r0
 800675c:	603b      	str	r3, [r7, #0]

	/* main imu task begins */
	for(;;){

		/* self check progress*/
		if(self_check_system() == CHECK_OK)
 800675e:	f001 ff0d 	bl	800857c <self_check_system>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d103      	bne.n	8006770 <WatchDog_Task_Function+0x28>
			wd_daemon_flag = 0;//pass
 8006768:	4b06      	ldr	r3, [pc, #24]	; (8006784 <WatchDog_Task_Function+0x3c>)
 800676a:	2200      	movs	r2, #0
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e002      	b.n	8006776 <WatchDog_Task_Function+0x2e>
		else
			wd_daemon_flag = 1;//fail
 8006770:	4b04      	ldr	r3, [pc, #16]	; (8006784 <WatchDog_Task_Function+0x3c>)
 8006772:	2201      	movs	r2, #1
 8006774:	701a      	strb	r2, [r3, #0]
		//       but currently just feed dog whatever the check pass or fail
#ifdef USE_IWDG
		wdg_daemon_feed_dog();
#endif
		/* delay utill wake time */
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8006776:	463b      	mov	r3, r7
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4618      	mov	r0, r3
 800677c:	f008 fc14 	bl	800efa8 <vTaskDelayUntil>
		if(self_check_system() == CHECK_OK)
 8006780:	e7ed      	b.n	800675e <WatchDog_Task_Function+0x16>
 8006782:	bf00      	nop
 8006784:	20000526 	.word	0x20000526

08006788 <wdg_task_init>:

	}
}

void wdg_task_init(void){
 8006788:	b580      	push	{r7, lr}
 800678a:	af00      	add	r7, sp, #0
	/* set a binary watch dog semaphore */
	wdgSemaphore = xSemaphoreCreateBinary();
 800678c:	2203      	movs	r2, #3
 800678e:	2100      	movs	r1, #0
 8006790:	2001      	movs	r0, #1
 8006792:	f008 fa11 	bl	800ebb8 <xQueueGenericCreate>
 8006796:	4603      	mov	r3, r0
 8006798:	4a01      	ldr	r2, [pc, #4]	; (80067a0 <wdg_task_init+0x18>)
 800679a:	6013      	str	r3, [r2, #0]
}
 800679c:	bf00      	nop
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	2000d71c 	.word	0x2000d71c

080067a4 <buzzer_init>:
 * param[in] times want to be buzzed
 * param[in] delay duration
 * retval None
 * author Haoran
 */
void buzzer_init(Buzzer_t *buzz){
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	buzz->buzz_times = 0;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	721a      	strb	r2, [r3, #8]
	buzz->buzzer_tick = 0;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]
	buzz->times_tick  =0;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(&BUZZ_HTIM, BUZZ_PWM_CH);
 80067be:	2108      	movs	r1, #8
 80067c0:	4803      	ldr	r0, [pc, #12]	; (80067d0 <buzzer_init+0x2c>)
 80067c2:	f006 fd49 	bl	800d258 <HAL_TIM_PWM_Start>
}
 80067c6:	bf00      	nop
 80067c8:	3708      	adds	r7, #8
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	2000d9dc 	.word	0x2000d9dc

080067d4 <buzzer_set_tune>:

void buzzer_set_tune(uint16_t tune, uint16_t ctrl){
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	460a      	mov	r2, r1
 80067de:	80fb      	strh	r3, [r7, #6]
 80067e0:	4613      	mov	r3, r2
 80067e2:	80bb      	strh	r3, [r7, #4]
    /* set Auto-reload value for the timer */
    __HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM, tune);
 80067e4:	4b08      	ldr	r3, [pc, #32]	; (8006808 <buzzer_set_tune+0x34>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	88fa      	ldrh	r2, [r7, #6]
 80067ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	4a06      	ldr	r2, [pc, #24]	; (8006808 <buzzer_set_tune+0x34>)
 80067f0:	60d3      	str	r3, [r2, #12]
    /* set compare value to control duty cycle */
    __HAL_TIM_SET_COMPARE(&BUZZ_HTIM, BUZZ_PWM_CH, ctrl);
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <buzzer_set_tune+0x34>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	88ba      	ldrh	r2, [r7, #4]
 80067f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	2000d9dc 	.word	0x2000d9dc

0800680c <buzzer_alarm_times>:
 * param[in] times want to be buzzed
 * param[in] delay duration
 * retval None
 * author Haoran
 */
void buzzer_alarm_times(uint8_t times, uint16_t duration, Buzzer_t *buzz){
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	603a      	str	r2, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
 8006818:	460b      	mov	r3, r1
 800681a:	80bb      	strh	r3, [r7, #4]
	/* check if a period of alarm has been called */
	uint32_t cur_ticks = HAL_GetTick();
 800681c:	f003 fe44 	bl	800a4a8 <HAL_GetTick>
 8006820:	60f8      	str	r0, [r7, #12]
    if(cur_ticks - buzz->buzzer_tick > duration){
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	1ad2      	subs	r2, r2, r3
 800682a:	88bb      	ldrh	r3, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d909      	bls.n	8006844 <buzzer_alarm_times+0x38>
        buzz->buzzer_tick = cur_ticks;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	601a      	str	r2, [r3, #0]
        buzz->times_tick = cur_ticks;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	605a      	str	r2, [r3, #4]
        buzz->buzz_times = times; // Set the number of times buzzer should play
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	79fa      	ldrb	r2, [r7, #7]
 8006840:	721a      	strb	r2, [r3, #8]
        else{
            buzz->buzz_times--;
            buzz->times_tick = cur_ticks;
        }
    }
}
 8006842:	e025      	b.n	8006890 <buzzer_alarm_times+0x84>
    else if(buzz->buzz_times != 0){
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	7a1b      	ldrb	r3, [r3, #8]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d021      	beq.n	8006890 <buzzer_alarm_times+0x84>
        if(cur_ticks - buzz->times_tick < 200){			     //use Hal_GetTick to use for both
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	2bc7      	cmp	r3, #199	; 0xc7
 8006856:	d805      	bhi.n	8006864 <buzzer_alarm_times+0x58>
            buzzer_set_tune(7135, 100); // play the tone c1  //in freertos and normal program
 8006858:	2164      	movs	r1, #100	; 0x64
 800685a:	f641 30df 	movw	r0, #7135	; 0x1bdf
 800685e:	f7ff ffb9 	bl	80067d4 <buzzer_set_tune>
}
 8006862:	e015      	b.n	8006890 <buzzer_alarm_times+0x84>
        else if(cur_ticks - buzz->times_tick < 400){
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006870:	d205      	bcs.n	800687e <buzzer_alarm_times+0x72>
            buzzer_set_tune(7135, 0);  // silence the buzzer
 8006872:	2100      	movs	r1, #0
 8006874:	f641 30df 	movw	r0, #7135	; 0x1bdf
 8006878:	f7ff ffac 	bl	80067d4 <buzzer_set_tune>
}
 800687c:	e008      	b.n	8006890 <buzzer_alarm_times+0x84>
            buzz->buzz_times--;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	7a1b      	ldrb	r3, [r3, #8]
 8006882:	3b01      	subs	r3, #1
 8006884:	b2da      	uxtb	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	721a      	strb	r2, [r3, #8]
            buzz->times_tick = cur_ticks;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	605a      	str	r2, [r3, #4]
}
 8006890:	bf00      	nop
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <buzzer_play_g0>:


/* below are the buzzer tune play functions, used for imu task and for fun! */
void buzzer_play_g0(int32_t duration){
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <buzzer_play_g0+0x44>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2200      	movs	r2, #0
 80068a6:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 35);
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,9523);
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <buzzer_play_g0+0x44>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f242 5233 	movw	r2, #9523	; 0x2533
 80068b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <buzzer_play_g0+0x44>)
 80068b4:	f242 5233 	movw	r2, #9523	; 0x2533
 80068b8:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 80068ba:	4b08      	ldr	r3, [pc, #32]	; (80068dc <buzzer_play_g0+0x44>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2264      	movs	r2, #100	; 0x64
 80068c0:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f008 f846 	bl	800e956 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 80068ca:	4b04      	ldr	r3, [pc, #16]	; (80068dc <buzzer_play_g0+0x44>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2200      	movs	r2, #0
 80068d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	2000d9dc 	.word	0x2000d9dc

080068e0 <buzzer_play_c1>:

void buzzer_play_c1(int32_t duration){
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 80068e8:	4b0e      	ldr	r3, [pc, #56]	; (8006924 <buzzer_play_c1+0x44>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2200      	movs	r2, #0
 80068ee:	625a      	str	r2, [r3, #36]	; 0x24
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 35);
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,7135);
 80068f0:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <buzzer_play_c1+0x44>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f641 32df 	movw	r2, #7135	; 0x1bdf
 80068f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80068fa:	4b0a      	ldr	r3, [pc, #40]	; (8006924 <buzzer_play_c1+0x44>)
 80068fc:	f641 32df 	movw	r2, #7135	; 0x1bdf
 8006900:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 8006902:	4b08      	ldr	r3, [pc, #32]	; (8006924 <buzzer_play_c1+0x44>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2264      	movs	r2, #100	; 0x64
 8006908:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4618      	mov	r0, r3
 800690e:	f008 f822 	bl	800e956 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 8006912:	4b04      	ldr	r3, [pc, #16]	; (8006924 <buzzer_play_c1+0x44>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2200      	movs	r2, #0
 8006918:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	2000d9dc 	.word	0x2000d9dc

08006928 <buzzer_play_e1>:
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
}

void buzzer_play_e1(int32_t duration){
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 25);
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 8006930:	4b0e      	ldr	r3, [pc, #56]	; (800696c <buzzer_play_e1+0x44>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2200      	movs	r2, #0
 8006936:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,5662);
 8006938:	4b0c      	ldr	r3, [pc, #48]	; (800696c <buzzer_play_e1+0x44>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f241 621e 	movw	r2, #5662	; 0x161e
 8006940:	62da      	str	r2, [r3, #44]	; 0x2c
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <buzzer_play_e1+0x44>)
 8006944:	f241 621e 	movw	r2, #5662	; 0x161e
 8006948:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 800694a:	4b08      	ldr	r3, [pc, #32]	; (800696c <buzzer_play_e1+0x44>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2264      	movs	r2, #100	; 0x64
 8006950:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4618      	mov	r0, r3
 8006956:	f007 fffe 	bl	800e956 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <buzzer_play_e1+0x44>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2200      	movs	r2, #0
 8006960:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	2000d9dc 	.word	0x2000d9dc

08006970 <buzzer_play_g1>:
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
}

void buzzer_play_g1(int32_t duration){
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_PRESCALER(&BUZZ_HTIM, 21);
	__HAL_TIM_SET_COUNTER(&BUZZ_HTIM,0);
 8006978:	4b0e      	ldr	r3, [pc, #56]	; (80069b4 <buzzer_play_g1+0x44>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2200      	movs	r2, #0
 800697e:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&BUZZ_HTIM,4761);
 8006980:	4b0c      	ldr	r3, [pc, #48]	; (80069b4 <buzzer_play_g1+0x44>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f241 2299 	movw	r2, #4761	; 0x1299
 8006988:	62da      	str	r2, [r3, #44]	; 0x2c
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <buzzer_play_g1+0x44>)
 800698c:	f241 2299 	movw	r2, #4761	; 0x1299
 8006990:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <buzzer_play_g1+0x44>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2264      	movs	r2, #100	; 0x64
 8006998:	63da      	str	r2, [r3, #60]	; 0x3c
	osDelay(duration);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	f007 ffda 	bl	800e956 <osDelay>
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
 80069a2:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <buzzer_play_g1+0x44>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	2000d9dc 	.word	0x2000d9dc

080069b8 <buzzer_rest>:
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,100);
	osDelay(duration);
	__HAL_TIM_SET_COMPARE(&BUZZ_HTIM,BUZZ_PWM_CH,0);
}

void buzzer_rest(int32_t duration){
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	osDelay(duration);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f007 ffc7 	bl	800e956 <osDelay>
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <buzzer_play_mario>:
	buzzer_play_b1(duration);
	buzzer_play_c2(duration);
}


void buzzer_play_mario(int32_t bpm){
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
	int32_t quarter=(double)60/bpm*1000;
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f7f9 fda3 	bl	8000524 <__aeabi_i2d>
 80069de:	4602      	mov	r2, r0
 80069e0:	460b      	mov	r3, r1
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	492d      	ldr	r1, [pc, #180]	; (8006a9c <buzzer_play_mario+0xcc>)
 80069e8:	f7f9 ff30 	bl	800084c <__aeabi_ddiv>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	4b29      	ldr	r3, [pc, #164]	; (8006aa0 <buzzer_play_mario+0xd0>)
 80069fa:	f7f9 fdfd 	bl	80005f8 <__aeabi_dmul>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4610      	mov	r0, r2
 8006a04:	4619      	mov	r1, r3
 8006a06:	f7fa f8a7 	bl	8000b58 <__aeabi_d2iz>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	60fb      	str	r3, [r7, #12]
	int32_t eighth=(double)60/bpm*1000*0.5;
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7f9 fd88 	bl	8000524 <__aeabi_i2d>
 8006a14:	4602      	mov	r2, r0
 8006a16:	460b      	mov	r3, r1
 8006a18:	f04f 0000 	mov.w	r0, #0
 8006a1c:	491f      	ldr	r1, [pc, #124]	; (8006a9c <buzzer_play_mario+0xcc>)
 8006a1e:	f7f9 ff15 	bl	800084c <__aeabi_ddiv>
 8006a22:	4602      	mov	r2, r0
 8006a24:	460b      	mov	r3, r1
 8006a26:	4610      	mov	r0, r2
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f04f 0200 	mov.w	r2, #0
 8006a2e:	4b1c      	ldr	r3, [pc, #112]	; (8006aa0 <buzzer_play_mario+0xd0>)
 8006a30:	f7f9 fde2 	bl	80005f8 <__aeabi_dmul>
 8006a34:	4602      	mov	r2, r0
 8006a36:	460b      	mov	r3, r1
 8006a38:	4610      	mov	r0, r2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <buzzer_play_mario+0xd4>)
 8006a42:	f7f9 fdd9 	bl	80005f8 <__aeabi_dmul>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	f7fa f883 	bl	8000b58 <__aeabi_d2iz>
 8006a52:	4603      	mov	r3, r0
 8006a54:	60bb      	str	r3, [r7, #8]

	buzzer_play_e1(eighth);
 8006a56:	68b8      	ldr	r0, [r7, #8]
 8006a58:	f7ff ff66 	bl	8006928 <buzzer_play_e1>
	buzzer_play_e1(eighth);
 8006a5c:	68b8      	ldr	r0, [r7, #8]
 8006a5e:	f7ff ff63 	bl	8006928 <buzzer_play_e1>
	buzzer_rest(eighth);
 8006a62:	68b8      	ldr	r0, [r7, #8]
 8006a64:	f7ff ffa8 	bl	80069b8 <buzzer_rest>
	buzzer_play_e1(eighth);
 8006a68:	68b8      	ldr	r0, [r7, #8]
 8006a6a:	f7ff ff5d 	bl	8006928 <buzzer_play_e1>
	buzzer_rest(eighth);
 8006a6e:	68b8      	ldr	r0, [r7, #8]
 8006a70:	f7ff ffa2 	bl	80069b8 <buzzer_rest>
	buzzer_play_c1(eighth);
 8006a74:	68b8      	ldr	r0, [r7, #8]
 8006a76:	f7ff ff33 	bl	80068e0 <buzzer_play_c1>
	buzzer_play_e1(quarter);
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f7ff ff54 	bl	8006928 <buzzer_play_e1>
	buzzer_play_g1(quarter);
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f7ff ff75 	bl	8006970 <buzzer_play_g1>
	buzzer_rest(quarter);
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff ff96 	bl	80069b8 <buzzer_rest>
	buzzer_play_g0(quarter);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff ff03 	bl	8006898 <buzzer_play_g0>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	404e0000 	.word	0x404e0000
 8006aa0:	408f4000 	.word	0x408f4000
 8006aa4:	3fe00000 	.word	0x3fe00000

08006aa8 <dwt_init>:

/**
  * @brief     DWT init function
  * @retval    None
  */
void dwt_init(void) {
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
    if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
 8006aac:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <dwt_init+0x38>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10e      	bne.n	8006ad6 <dwt_init+0x2e>
        CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // Enable Debug Core
 8006ab8:	4b09      	ldr	r3, [pc, #36]	; (8006ae0 <dwt_init+0x38>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <dwt_init+0x38>)
 8006abe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ac2:	60d3      	str	r3, [r2, #12]
        DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable Cycle Counter
 8006ac4:	4b07      	ldr	r3, [pc, #28]	; (8006ae4 <dwt_init+0x3c>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a06      	ldr	r2, [pc, #24]	; (8006ae4 <dwt_init+0x3c>)
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	6013      	str	r3, [r2, #0]
        DWT->CYCCNT = 0; // Reset Cycle Counter Value
 8006ad0:	4b04      	ldr	r3, [pc, #16]	; (8006ae4 <dwt_init+0x3c>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	605a      	str	r2, [r3, #4]
    }
}
 8006ad6:	bf00      	nop
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	e000edf0 	.word	0xe000edf0
 8006ae4:	e0001000 	.word	0xe0001000

08006ae8 <dwt_getCnt_us>:
/**
  * @brief    get timestamp from dwt
  * @retval   time count of dwt
  */
uint32_t dwt_getCnt_us(void){
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / SYSTEM_CORE_FREQ;//unit: usec
 8006aec:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <dwt_getCnt_us+0x1c>)
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	08db      	lsrs	r3, r3, #3
 8006af2:	4a05      	ldr	r2, [pc, #20]	; (8006b08 <dwt_getCnt_us+0x20>)
 8006af4:	fba2 2303 	umull	r2, r3, r2, r3
 8006af8:	085b      	lsrs	r3, r3, #1
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr
 8006b04:	e0001000 	.word	0xe0001000
 8006b08:	18618619 	.word	0x18618619

08006b0c <Motor_Data_Read>:
/**
  * @brief     Read feedback from the motor sensor
  * @param[in] can1/can2 type header
  * @retval    None
  */
void Motor_Data_Read(CAN_HandleTypeDef* hcan) {
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
	uint8_t motorStatus[MOTOR_COUNT];
	for (int i=0; i<MOTOR_COUNT; i++){
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	e046      	b.n	8006ba8 <Motor_Data_Read+0x9c>
		memcpy(motorStatus, can_rx_buffer[i], 8);
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	4a27      	ldr	r2, [pc, #156]	; (8006bbc <Motor_Data_Read+0xb0>)
 8006b20:	441a      	add	r2, r3
 8006b22:	f107 030c 	add.w	r3, r7, #12
 8006b26:	6810      	ldr	r0, [r2, #0]
 8006b28:	6851      	ldr	r1, [r2, #4]
 8006b2a:	c303      	stmia	r3!, {r0, r1}
		motor_data[i].motor_feedback.rx_angle	=(int16_t)(motorStatus[0] << 8 | motorStatus[1]);
 8006b2c:	7b3b      	ldrb	r3, [r7, #12]
 8006b2e:	021b      	lsls	r3, r3, #8
 8006b30:	b21a      	sxth	r2, r3
 8006b32:	7b7b      	ldrb	r3, [r7, #13]
 8006b34:	b21b      	sxth	r3, r3
 8006b36:	4313      	orrs	r3, r2
 8006b38:	b218      	sxth	r0, r3
 8006b3a:	4a21      	ldr	r2, [pc, #132]	; (8006bc0 <Motor_Data_Read+0xb4>)
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	2194      	movs	r1, #148	; 0x94
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	4413      	add	r3, r2
 8006b46:	3388      	adds	r3, #136	; 0x88
 8006b48:	4602      	mov	r2, r0
 8006b4a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_rpm		=(int16_t)(motorStatus[2] << 8 | motorStatus[3]);
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	b21a      	sxth	r2, r3
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
 8006b54:	b21b      	sxth	r3, r3
 8006b56:	4313      	orrs	r3, r2
 8006b58:	b218      	sxth	r0, r3
 8006b5a:	4a19      	ldr	r2, [pc, #100]	; (8006bc0 <Motor_Data_Read+0xb4>)
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2194      	movs	r1, #148	; 0x94
 8006b60:	fb01 f303 	mul.w	r3, r1, r3
 8006b64:	4413      	add	r3, r2
 8006b66:	338a      	adds	r3, #138	; 0x8a
 8006b68:	4602      	mov	r2, r0
 8006b6a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_current =(int16_t)(motorStatus[4] << 8 | motorStatus[5]);
 8006b6c:	7c3b      	ldrb	r3, [r7, #16]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	b21a      	sxth	r2, r3
 8006b72:	7c7b      	ldrb	r3, [r7, #17]
 8006b74:	b21b      	sxth	r3, r3
 8006b76:	4313      	orrs	r3, r2
 8006b78:	b218      	sxth	r0, r3
 8006b7a:	4a11      	ldr	r2, [pc, #68]	; (8006bc0 <Motor_Data_Read+0xb4>)
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2194      	movs	r1, #148	; 0x94
 8006b80:	fb01 f303 	mul.w	r3, r1, r3
 8006b84:	4413      	add	r3, r2
 8006b86:	338c      	adds	r3, #140	; 0x8c
 8006b88:	4602      	mov	r2, r0
 8006b8a:	801a      	strh	r2, [r3, #0]
		motor_data[i].motor_feedback.rx_temp	=(int16_t)(motorStatus[6]);
 8006b8c:	7cbb      	ldrb	r3, [r7, #18]
 8006b8e:	b218      	sxth	r0, r3
 8006b90:	4a0b      	ldr	r2, [pc, #44]	; (8006bc0 <Motor_Data_Read+0xb4>)
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	2194      	movs	r1, #148	; 0x94
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	338e      	adds	r3, #142	; 0x8e
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	801a      	strh	r2, [r3, #0]
	for (int i=0; i<MOTOR_COUNT; i++){
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	3301      	adds	r3, #1
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	2b07      	cmp	r3, #7
 8006bac:	ddb5      	ble.n	8006b1a <Motor_Data_Read+0xe>
	}
}
 8006bae:	bf00      	nop
 8006bb0:	bf00      	nop
 8006bb2:	371c      	adds	r7, #28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	2000471c 	.word	0x2000471c
 8006bc0:	20005278 	.word	0x20005278

08006bc4 <Motor_Data_Send>:
  * @param[in] can1/can2 type header
  * @param[in] Stdid of can device
  * @param[in] data set to different can devices
  * @retval    None
  */
void Motor_Data_Send(CAN_HandleTypeDef* hcan, int32_t id, int32_t d1, int32_t d2, int32_t d3, int32_t d4){
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b08c      	sub	sp, #48	; 0x30
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
 8006bd0:	603b      	str	r3, [r7, #0]
	CAN_TxHeaderTypeDef  tx_header;
	uint8_t				 tx_data[8];

	tx_header.StdId = id;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	61bb      	str	r3, [r7, #24]
	tx_header.IDE = CAN_ID_STD;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	623b      	str	r3, [r7, #32]
	tx_header.RTR = CAN_RTR_DATA;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	627b      	str	r3, [r7, #36]	; 0x24
	tx_header.DLC = 0x08;
 8006bde:	2308      	movs	r3, #8
 8006be0:	62bb      	str	r3, [r7, #40]	; 0x28

	tx_data[0] = d1 >> 8;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	121b      	asrs	r3, r3, #8
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	743b      	strb	r3, [r7, #16]
	tx_data[1] = d1;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	747b      	strb	r3, [r7, #17]
	tx_data[2] = d2 >> 8;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	121b      	asrs	r3, r3, #8
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	74bb      	strb	r3, [r7, #18]
	tx_data[3] = d2;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	74fb      	strb	r3, [r7, #19]
	tx_data[4] = d3 >> 8;
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	121b      	asrs	r3, r3, #8
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	753b      	strb	r3, [r7, #20]
	tx_data[5] = d3;
 8006c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	757b      	strb	r3, [r7, #21]
	tx_data[6] = d4 >> 8;
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c0e:	121b      	asrs	r3, r3, #8
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	75bb      	strb	r3, [r7, #22]
	tx_data[7] = d4;
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	75fb      	strb	r3, [r7, #23]

	HAL_CAN_AddTxMessage(hcan, &tx_header, tx_data, (uint32_t*)CAN_TX_MAILBOX0);
 8006c1a:	f107 0210 	add.w	r2, r7, #16
 8006c1e:	f107 0118 	add.w	r1, r7, #24
 8006c22:	2301      	movs	r3, #1
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f003 fe6b 	bl	800a900 <HAL_CAN_AddTxMessage>
}
 8006c2a:	bf00      	nop
 8006c2c:	3730      	adds	r7, #48	; 0x30
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <motor_init>:
  * @brief     initialize the motor parameters
  * @retval    None
  */
void motor_init(uint8_t motor_id, int32_t max_out_f, float max_i_out_f, float max_err_f, float kp_f, float ki_f, float kd_f,
								  int32_t max_out_s, float max_i_out_s, float max_err_s, float kp_s, float ki_s, float kd_s,
								  float kf){
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b08e      	sub	sp, #56	; 0x38
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006c3e:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
 8006c42:	edc7 0a0a 	vstr	s1, [r7, #40]	; 0x28
 8006c46:	ed87 1a09 	vstr	s2, [r7, #36]	; 0x24
 8006c4a:	edc7 1a08 	vstr	s3, [r7, #32]
 8006c4e:	ed87 2a07 	vstr	s4, [r7, #28]
 8006c52:	61ba      	str	r2, [r7, #24]
 8006c54:	edc7 2a05 	vstr	s5, [r7, #20]
 8006c58:	ed87 3a04 	vstr	s6, [r7, #16]
 8006c5c:	edc7 3a03 	vstr	s7, [r7, #12]
 8006c60:	ed87 4a02 	vstr	s8, [r7, #8]
 8006c64:	edc7 4a01 	vstr	s9, [r7, #4]
 8006c68:	ed87 5a00 	vstr	s10, [r7]
 8006c6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	pid_param_init(&(motor_data[motor_id].motor_info.f_pid), max_out_f, max_i_out_f, max_err_f, kp_f, ki_f, kd_f);
 8006c70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006c74:	2294      	movs	r2, #148	; 0x94
 8006c76:	fb02 f303 	mul.w	r3, r2, r3
 8006c7a:	4a1c      	ldr	r2, [pc, #112]	; (8006cec <motor_init+0xb8>)
 8006c7c:	4413      	add	r3, r2
 8006c7e:	3304      	adds	r3, #4
 8006c80:	ed97 2a07 	vldr	s4, [r7, #28]
 8006c84:	edd7 1a08 	vldr	s3, [r7, #32]
 8006c88:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 8006c8c:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 8006c90:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7fb ff96 	bl	8002bc8 <pid_param_init>
	pid_param_init(&(motor_data[motor_id].motor_info.s_pid), max_out_s, max_i_out_s, max_err_s, kp_s, ki_s, kd_s);
 8006c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ca0:	2294      	movs	r2, #148	; 0x94
 8006ca2:	fb02 f303 	mul.w	r3, r2, r3
 8006ca6:	3340      	adds	r3, #64	; 0x40
 8006ca8:	4a10      	ldr	r2, [pc, #64]	; (8006cec <motor_init+0xb8>)
 8006caa:	4413      	add	r3, r2
 8006cac:	ed97 2a01 	vldr	s4, [r7, #4]
 8006cb0:	edd7 1a02 	vldr	s3, [r7, #8]
 8006cb4:	ed97 1a03 	vldr	s2, [r7, #12]
 8006cb8:	edd7 0a04 	vldr	s1, [r7, #16]
 8006cbc:	ed97 0a05 	vldr	s0, [r7, #20]
 8006cc0:	69b9      	ldr	r1, [r7, #24]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fb ff80 	bl	8002bc8 <pid_param_init>
	ff_param_init(&(motor_data[motor_id].motor_info.ff), kf);
 8006cc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006ccc:	2294      	movs	r2, #148	; 0x94
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	3378      	adds	r3, #120	; 0x78
 8006cd4:	4a05      	ldr	r2, [pc, #20]	; (8006cec <motor_init+0xb8>)
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3304      	adds	r3, #4
 8006cda:	ed97 0a00 	vldr	s0, [r7]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fb ff34 	bl	8002b4c <ff_param_init>
}
 8006ce4:	bf00      	nop
 8006ce6:	3738      	adds	r7, #56	; 0x38
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20005278 	.word	0x20005278

08006cf0 <set_motor_can_volt>:
  * @param[in] can1/can2 type header
  * @param[in] Stdid of can device
  * @param[in] velocity/angle set to different can devices
  * @retval    None
  */
void set_motor_can_volt(float a1, float a2, int32_t v3, int32_t v4, int32_t control_indicator, GimbalMotorMode_t mode){
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	ed2d 8b02 	vpush	{d8}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	ed87 0a05 	vstr	s0, [r7, #20]
 8006cfe:	edc7 0a04 	vstr	s1, [r7, #16]
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	70fb      	strb	r3, [r7, #3]

	if(control_indicator == DUAL_LOOP_PID_CONTROL && mode == ENCODE_MODE){
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d17b      	bne.n	8006e08 <set_motor_can_volt+0x118>
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d178      	bne.n	8006e08 <set_motor_can_volt+0x118>
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 8006d16:	ed97 0a05 	vldr	s0, [r7, #20]
 8006d1a:	4882      	ldr	r0, [pc, #520]	; (8006f24 <set_motor_can_volt+0x234>)
 8006d1c:	f7fb ff2d 	bl	8002b7a <feedforward>
 8006d20:	eeb0 8a40 	vmov.f32	s16, s0
														  &(motor_data[yaw_id].motor_info.f_pid),
														  &(motor_data[yaw_id].motor_info.s_pid),
														  in_out_map(gimbal_get_ecd_rel_angle(motor_data[yaw_id].motor_feedback.rx_angle, YAW_ECD_CENTER),
 8006d24:	4b80      	ldr	r3, [pc, #512]	; (8006f28 <set_motor_can_volt+0x238>)
 8006d26:	f9b3 32d8 	ldrsh.w	r3, [r3, #728]	; 0x2d8
 8006d2a:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fd fcc5 	bl	80046be <gimbal_get_ecd_rel_angle>
 8006d34:	4603      	mov	r3, r0
 8006d36:	ee07 3a90 	vmov	s15, r3
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 8006d3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d3e:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 8006f2c <set_motor_can_volt+0x23c>
 8006d42:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8006f30 <set_motor_can_volt+0x240>
 8006d46:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8006f34 <set_motor_can_volt+0x244>
 8006d4a:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8006f38 <set_motor_can_volt+0x248>
 8006d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d52:	f7fc f949 	bl	8002fe8 <in_out_map>
 8006d56:	eeb0 7a40 	vmov.f32	s14, s0
														  			 -4095,4095,-PI,PI),
														  motor_data[yaw_id].motor_feedback.rx_rpm);
 8006d5a:	4b73      	ldr	r3, [pc, #460]	; (8006f28 <set_motor_can_volt+0x238>)
 8006d5c:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d68:	eeb0 1a67 	vmov.f32	s2, s15
 8006d6c:	eef0 0a47 	vmov.f32	s1, s14
 8006d70:	4972      	ldr	r1, [pc, #456]	; (8006f3c <set_motor_can_volt+0x24c>)
 8006d72:	4873      	ldr	r0, [pc, #460]	; (8006f40 <set_motor_can_volt+0x250>)
 8006d74:	eeb0 0a48 	vmov.f32	s0, s16
 8006d78:	f7fc f810 	bl	8002d9c <pid_dual_loop_control>
 8006d7c:	eef0 7a40 	vmov.f32	s15, s0
 8006d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d84:	ee17 2a90 	vmov	r2, s15
 8006d88:	4b67      	ldr	r3, [pc, #412]	; (8006f28 <set_motor_can_volt+0x238>)
 8006d8a:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff
 8006d8e:	ed97 0a04 	vldr	s0, [r7, #16]
 8006d92:	486c      	ldr	r0, [pc, #432]	; (8006f44 <set_motor_can_volt+0x254>)
 8006d94:	f7fb fef1 	bl	8002b7a <feedforward>
 8006d98:	eeb0 8a40 	vmov.f32	s16, s0
														  &(motor_data[pitch_id].motor_info.f_pid),
														  &(motor_data[pitch_id].motor_info.s_pid),
                                    					  in_out_map(gimbal_get_ecd_rel_angle(motor_data[pitch_id].motor_feedback.rx_angle, PITCH_ECD_CENTER),
 8006d9c:	4b62      	ldr	r3, [pc, #392]	; (8006f28 <set_motor_can_volt+0x238>)
 8006d9e:	f9b3 336c 	ldrsh.w	r3, [r3, #876]	; 0x36c
 8006da2:	f640 51ac 	movw	r1, #3500	; 0xdac
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fd fc89 	bl	80046be <gimbal_get_ecd_rel_angle>
 8006dac:	4603      	mov	r3, r0
 8006dae:	ee07 3a90 	vmov	s15, r3
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff
 8006db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006db6:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 8006f2c <set_motor_can_volt+0x23c>
 8006dba:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8006f30 <set_motor_can_volt+0x240>
 8006dbe:	ed9f 1a5d 	vldr	s2, [pc, #372]	; 8006f34 <set_motor_can_volt+0x244>
 8006dc2:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8006f38 <set_motor_can_volt+0x248>
 8006dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8006dca:	f7fc f90d 	bl	8002fe8 <in_out_map>
 8006dce:	eeb0 7a40 	vmov.f32	s14, s0
																     -4095,4095,-PI,PI),
														  motor_data[pitch_id].motor_feedback.rx_rpm);
 8006dd2:	4b55      	ldr	r3, [pc, #340]	; (8006f28 <set_motor_can_volt+0x238>)
 8006dd4:	f9b3 336e 	ldrsh.w	r3, [r3, #878]	; 0x36e
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006de0:	eeb0 1a67 	vmov.f32	s2, s15
 8006de4:	eef0 0a47 	vmov.f32	s1, s14
 8006de8:	4957      	ldr	r1, [pc, #348]	; (8006f48 <set_motor_can_volt+0x258>)
 8006dea:	4858      	ldr	r0, [pc, #352]	; (8006f4c <set_motor_can_volt+0x25c>)
 8006dec:	eeb0 0a48 	vmov.f32	s0, s16
 8006df0:	f7fb ffd4 	bl	8002d9c <pid_dual_loop_control>
 8006df4:	eef0 7a40 	vmov.f32	s15, s0
 8006df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dfc:	ee17 2a90 	vmov	r2, s15
 8006e00:	4b49      	ldr	r3, [pc, #292]	; (8006f28 <set_motor_can_volt+0x238>)
 8006e02:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8006e06:	e086      	b.n	8006f16 <set_motor_can_volt+0x226>
		}
	else if(control_indicator == DUAL_LOOP_PID_CONTROL && mode == GYRO_MODE){
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d163      	bne.n	8006ed6 <set_motor_can_volt+0x1e6>
 8006e0e:	78fb      	ldrb	r3, [r7, #3]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d160      	bne.n	8006ed6 <set_motor_can_volt+0x1e6>
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 8006e14:	ed97 0a05 	vldr	s0, [r7, #20]
 8006e18:	4842      	ldr	r0, [pc, #264]	; (8006f24 <set_motor_can_volt+0x234>)
 8006e1a:	f7fb feae 	bl	8002b7a <feedforward>
 8006e1e:	eef0 6a40 	vmov.f32	s13, s0
 8006e22:	4b4b      	ldr	r3, [pc, #300]	; (8006f50 <set_motor_can_volt+0x260>)
 8006e24:	edd3 7a05 	vldr	s15, [r3, #20]
														  &(motor_data[yaw_id].motor_info.f_pid),
														  &(motor_data[yaw_id].motor_info.s_pid),
														  gimbal.yaw_cur_abs_angle,
														  motor_data[yaw_id].motor_feedback.rx_rpm);//pid+ff
 8006e28:	4b3f      	ldr	r3, [pc, #252]	; (8006f28 <set_motor_can_volt+0x238>)
 8006e2a:	f9b3 32da 	ldrsh.w	r3, [r3, #730]	; 0x2da
			motor_data[yaw_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[yaw_id].motor_info.ff, a1),//pid+ff
 8006e2e:	ee07 3a10 	vmov	s14, r3
 8006e32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006e36:	eeb0 1a47 	vmov.f32	s2, s14
 8006e3a:	eef0 0a67 	vmov.f32	s1, s15
 8006e3e:	493f      	ldr	r1, [pc, #252]	; (8006f3c <set_motor_can_volt+0x24c>)
 8006e40:	483f      	ldr	r0, [pc, #252]	; (8006f40 <set_motor_can_volt+0x250>)
 8006e42:	eeb0 0a66 	vmov.f32	s0, s13
 8006e46:	f7fb ffa9 	bl	8002d9c <pid_dual_loop_control>
 8006e4a:	eef0 7a40 	vmov.f32	s15, s0
 8006e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e52:	ee17 2a90 	vmov	r2, s15
 8006e56:	4b34      	ldr	r3, [pc, #208]	; (8006f28 <set_motor_can_volt+0x238>)
 8006e58:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff, pitch always use rel angle from encoder
 8006e5c:	ed97 0a04 	vldr	s0, [r7, #16]
 8006e60:	4838      	ldr	r0, [pc, #224]	; (8006f44 <set_motor_can_volt+0x254>)
 8006e62:	f7fb fe8a 	bl	8002b7a <feedforward>
 8006e66:	eeb0 8a40 	vmov.f32	s16, s0
														  &(motor_data[pitch_id].motor_info.f_pid),
														  &(motor_data[pitch_id].motor_info.s_pid),
														  in_out_map(gimbal_get_ecd_rel_angle(motor_data[pitch_id].motor_feedback.rx_angle, PITCH_ECD_CENTER),
 8006e6a:	4b2f      	ldr	r3, [pc, #188]	; (8006f28 <set_motor_can_volt+0x238>)
 8006e6c:	f9b3 336c 	ldrsh.w	r3, [r3, #876]	; 0x36c
 8006e70:	f640 51ac 	movw	r1, #3500	; 0xdac
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7fd fc22 	bl	80046be <gimbal_get_ecd_rel_angle>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	ee07 3a90 	vmov	s15, r3
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff, pitch always use rel angle from encoder
 8006e80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e84:	ed9f 2a29 	vldr	s4, [pc, #164]	; 8006f2c <set_motor_can_volt+0x23c>
 8006e88:	eddf 1a29 	vldr	s3, [pc, #164]	; 8006f30 <set_motor_can_volt+0x240>
 8006e8c:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8006f34 <set_motor_can_volt+0x244>
 8006e90:	eddf 0a29 	vldr	s1, [pc, #164]	; 8006f38 <set_motor_can_volt+0x248>
 8006e94:	eeb0 0a67 	vmov.f32	s0, s15
 8006e98:	f7fc f8a6 	bl	8002fe8 <in_out_map>
 8006e9c:	eeb0 7a40 	vmov.f32	s14, s0
														  		     -4095,4095,-PI,PI),
														  motor_data[pitch_id].motor_feedback.rx_rpm);//pid+ff
 8006ea0:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <set_motor_can_volt+0x238>)
 8006ea2:	f9b3 336e 	ldrsh.w	r3, [r3, #878]	; 0x36e
			motor_data[pitch_id].tx_data = pid_dual_loop_control(feedforward(&motor_data[pitch_id].motor_info.ff, a2),//pid+ff, pitch always use rel angle from encoder
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eae:	eeb0 1a67 	vmov.f32	s2, s15
 8006eb2:	eef0 0a47 	vmov.f32	s1, s14
 8006eb6:	4924      	ldr	r1, [pc, #144]	; (8006f48 <set_motor_can_volt+0x258>)
 8006eb8:	4824      	ldr	r0, [pc, #144]	; (8006f4c <set_motor_can_volt+0x25c>)
 8006eba:	eeb0 0a48 	vmov.f32	s0, s16
 8006ebe:	f7fb ff6d 	bl	8002d9c <pid_dual_loop_control>
 8006ec2:	eef0 7a40 	vmov.f32	s15, s0
 8006ec6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eca:	ee17 2a90 	vmov	r2, s15
 8006ece:	4b16      	ldr	r3, [pc, #88]	; (8006f28 <set_motor_can_volt+0x238>)
 8006ed0:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374
 8006ed4:	e01f      	b.n	8006f16 <set_motor_can_volt+0x226>


	}
	else if(control_indicator == SINGLE_LOOP_PID_CONTROL){
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d11c      	bne.n	8006f16 <set_motor_can_volt+0x226>
			// only for spd control, dual loop control in the shoot app
			motor_data[mag_2006_id].tx_data = pid_single_loop_control(v3,
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
															&(motor_data[mag_2006_id].motor_info.s_pid),
														      motor_data[mag_2006_id].motor_feedback.rx_rpm);
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <set_motor_can_volt+0x238>)
 8006ee8:	f9b3 3402 	ldrsh.w	r3, [r3, #1026]	; 0x402
			motor_data[mag_2006_id].tx_data = pid_single_loop_control(v3,
 8006eec:	ee07 3a10 	vmov	s14, r3
 8006ef0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ef4:	eef0 0a47 	vmov.f32	s1, s14
 8006ef8:	4816      	ldr	r0, [pc, #88]	; (8006f54 <set_motor_can_volt+0x264>)
 8006efa:	eeb0 0a67 	vmov.f32	s0, s15
 8006efe:	f7fb ff37 	bl	8002d70 <pid_single_loop_control>
 8006f02:	eef0 7a40 	vmov.f32	s15, s0
 8006f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f0a:	ee17 2a90 	vmov	r2, s15
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <set_motor_can_volt+0x238>)
 8006f10:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			/* not applied */
//			motor_data[7].tx_data = pid_single_loop_control(v4,
//															motor_data[7].motor_info.f_pid,
//															motor_data[7].motor_feedback.rx_rpm);
		}
}
 8006f14:	e7ff      	b.n	8006f16 <set_motor_can_volt+0x226>
 8006f16:	bf00      	nop
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	ecbd 8b02 	vpop	{d8}
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	20005544 	.word	0x20005544
 8006f28:	20005278 	.word	0x20005278
 8006f2c:	40490fdb 	.word	0x40490fdb
 8006f30:	c0490fdb 	.word	0xc0490fdb
 8006f34:	457ff000 	.word	0x457ff000
 8006f38:	c57ff000 	.word	0xc57ff000
 8006f3c:	20005508 	.word	0x20005508
 8006f40:	200054cc 	.word	0x200054cc
 8006f44:	200055d8 	.word	0x200055d8
 8006f48:	2000559c 	.word	0x2000559c
 8006f4c:	20005560 	.word	0x20005560
 8006f50:	200047c0 	.word	0x200047c0
 8006f54:	20005630 	.word	0x20005630

08006f58 <set_motor_can_current>:



void set_motor_can_current(int32_t v1, int32_t v2, int32_t v3, int32_t v4, int32_t control_indicator){
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	607a      	str	r2, [r7, #4]
 8006f64:	603b      	str	r3, [r7, #0]
	if(control_indicator == DUAL_LOOP_PID_CONTROL){// only for hero magazine
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	f000 80ac 	beq.w	80070c6 <set_motor_can_current+0x16e>
		/* implemented in shoot app */
	}
	else if(control_indicator == SINGLE_LOOP_SHOOT_CONTROL){
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d138      	bne.n	8006fe6 <set_motor_can_current+0x8e>
		motor_data[fric_left_id].tx_data = pid_single_loop_control(v1,
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
																&(motor_data[fric_left_id].motor_info.f_pid),
															    motor_data[fric_left_id].motor_feedback.rx_current);
 8006f7e:	4b54      	ldr	r3, [pc, #336]	; (80070d0 <set_motor_can_current+0x178>)
 8006f80:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
		motor_data[fric_left_id].tx_data = pid_single_loop_control(v1,
 8006f84:	ee07 3a10 	vmov	s14, r3
 8006f88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006f8c:	eef0 0a47 	vmov.f32	s1, s14
 8006f90:	4850      	ldr	r0, [pc, #320]	; (80070d4 <set_motor_can_current+0x17c>)
 8006f92:	eeb0 0a67 	vmov.f32	s0, s15
 8006f96:	f7fb feeb 	bl	8002d70 <pid_single_loop_control>
 8006f9a:	eef0 7a40 	vmov.f32	s15, s0
 8006f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fa2:	ee17 2a90 	vmov	r2, s15
 8006fa6:	4b4a      	ldr	r3, [pc, #296]	; (80070d0 <set_motor_can_current+0x178>)
 8006fa8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		motor_data[fric_right_id].tx_data = pid_single_loop_control(v2,
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
																&(motor_data[fric_right_id].motor_info.f_pid),
																motor_data[fric_right_id].motor_feedback.rx_current);
 8006fb6:	4b46      	ldr	r3, [pc, #280]	; (80070d0 <set_motor_can_current+0x178>)
 8006fb8:	f9b3 3120 	ldrsh.w	r3, [r3, #288]	; 0x120
		motor_data[fric_right_id].tx_data = pid_single_loop_control(v2,
 8006fbc:	ee07 3a10 	vmov	s14, r3
 8006fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006fc4:	eef0 0a47 	vmov.f32	s1, s14
 8006fc8:	4843      	ldr	r0, [pc, #268]	; (80070d8 <set_motor_can_current+0x180>)
 8006fca:	eeb0 0a67 	vmov.f32	s0, s15
 8006fce:	f7fb fecf 	bl	8002d70 <pid_single_loop_control>
 8006fd2:	eef0 7a40 	vmov.f32	s15, s0
 8006fd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fda:	ee17 2a90 	vmov	r2, s15
 8006fde:	4b3c      	ldr	r3, [pc, #240]	; (80070d0 <set_motor_can_current+0x178>)
 8006fe0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
													    motor_data[wheel_id3].motor_feedback.rx_rpm);
		motor_data[wheel_id4].tx_data = pid_single_loop_control(v4,
														&(motor_data[wheel_id4].motor_info.f_pid),
													    motor_data[wheel_id4].motor_feedback.rx_rpm);
	}
}
 8006fe4:	e06f      	b.n	80070c6 <set_motor_can_current+0x16e>
		motor_data[wheel_id1].tx_data = pid_single_loop_control(v1,
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	ee07 3a90 	vmov	s15, r3
 8006fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id1].motor_feedback.rx_rpm);
 8006ff0:	4b37      	ldr	r3, [pc, #220]	; (80070d0 <set_motor_can_current+0x178>)
 8006ff2:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
		motor_data[wheel_id1].tx_data = pid_single_loop_control(v1,
 8006ff6:	ee07 3a10 	vmov	s14, r3
 8006ffa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006ffe:	eef0 0a47 	vmov.f32	s1, s14
 8007002:	4834      	ldr	r0, [pc, #208]	; (80070d4 <set_motor_can_current+0x17c>)
 8007004:	eeb0 0a67 	vmov.f32	s0, s15
 8007008:	f7fb feb2 	bl	8002d70 <pid_single_loop_control>
 800700c:	eef0 7a40 	vmov.f32	s15, s0
 8007010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007014:	ee17 2a90 	vmov	r2, s15
 8007018:	4b2d      	ldr	r3, [pc, #180]	; (80070d0 <set_motor_can_current+0x178>)
 800701a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		motor_data[wheel_id2].tx_data = pid_single_loop_control(v2,
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	ee07 3a90 	vmov	s15, r3
 8007024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id2].motor_feedback.rx_rpm);
 8007028:	4b29      	ldr	r3, [pc, #164]	; (80070d0 <set_motor_can_current+0x178>)
 800702a:	f9b3 311e 	ldrsh.w	r3, [r3, #286]	; 0x11e
		motor_data[wheel_id2].tx_data = pid_single_loop_control(v2,
 800702e:	ee07 3a10 	vmov	s14, r3
 8007032:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007036:	eef0 0a47 	vmov.f32	s1, s14
 800703a:	4827      	ldr	r0, [pc, #156]	; (80070d8 <set_motor_can_current+0x180>)
 800703c:	eeb0 0a67 	vmov.f32	s0, s15
 8007040:	f7fb fe96 	bl	8002d70 <pid_single_loop_control>
 8007044:	eef0 7a40 	vmov.f32	s15, s0
 8007048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800704c:	ee17 2a90 	vmov	r2, s15
 8007050:	4b1f      	ldr	r3, [pc, #124]	; (80070d0 <set_motor_can_current+0x178>)
 8007052:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		motor_data[wheel_id3].tx_data = pid_single_loop_control(v3,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	ee07 3a90 	vmov	s15, r3
 800705c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id3].motor_feedback.rx_rpm);
 8007060:	4b1b      	ldr	r3, [pc, #108]	; (80070d0 <set_motor_can_current+0x178>)
 8007062:	f9b3 31b2 	ldrsh.w	r3, [r3, #434]	; 0x1b2
		motor_data[wheel_id3].tx_data = pid_single_loop_control(v3,
 8007066:	ee07 3a10 	vmov	s14, r3
 800706a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800706e:	eef0 0a47 	vmov.f32	s1, s14
 8007072:	481a      	ldr	r0, [pc, #104]	; (80070dc <set_motor_can_current+0x184>)
 8007074:	eeb0 0a67 	vmov.f32	s0, s15
 8007078:	f7fb fe7a 	bl	8002d70 <pid_single_loop_control>
 800707c:	eef0 7a40 	vmov.f32	s15, s0
 8007080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007084:	ee17 2a90 	vmov	r2, s15
 8007088:	4b11      	ldr	r3, [pc, #68]	; (80070d0 <set_motor_can_current+0x178>)
 800708a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
		motor_data[wheel_id4].tx_data = pid_single_loop_control(v4,
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	ee07 3a90 	vmov	s15, r3
 8007094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
													    motor_data[wheel_id4].motor_feedback.rx_rpm);
 8007098:	4b0d      	ldr	r3, [pc, #52]	; (80070d0 <set_motor_can_current+0x178>)
 800709a:	f9b3 3246 	ldrsh.w	r3, [r3, #582]	; 0x246
		motor_data[wheel_id4].tx_data = pid_single_loop_control(v4,
 800709e:	ee07 3a10 	vmov	s14, r3
 80070a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80070a6:	eef0 0a47 	vmov.f32	s1, s14
 80070aa:	480d      	ldr	r0, [pc, #52]	; (80070e0 <set_motor_can_current+0x188>)
 80070ac:	eeb0 0a67 	vmov.f32	s0, s15
 80070b0:	f7fb fe5e 	bl	8002d70 <pid_single_loop_control>
 80070b4:	eef0 7a40 	vmov.f32	s15, s0
 80070b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070bc:	ee17 2a90 	vmov	r2, s15
 80070c0:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <set_motor_can_current+0x178>)
 80070c2:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
}
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20005278 	.word	0x20005278
 80070d4:	2000527c 	.word	0x2000527c
 80070d8:	20005310 	.word	0x20005310
 80070dc:	200053a4 	.word	0x200053a4
 80070e0:	20005438 	.word	0x20005438

080070e4 <BMI088_init>:
    {BMI088_GYRO_INT3_INT4_IO_MAP, BMI088_GYRO_DRDY_IO_INT3, BMI088_GYRO_INT3_INT4_IO_MAP_ERROR}

};

uint8_t BMI088_init(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
    uint8_t ERROR = BMI088_NO_ERROR;
 80070ea:	2300      	movs	r3, #0
 80070ec:	71fb      	strb	r3, [r7, #7]
    // GPIO and SPI  Init .
    BMI088_GPIO_Init();
 80070ee:	f000 fd5b 	bl	8007ba8 <BMI088_GPIO_Init>
    BMI088_Com_Init();
 80070f2:	f000 fd60 	bl	8007bb6 <BMI088_Com_Init>

    // self test pass and init
    if (bmi088_accel_self_test() != BMI088_NO_ERROR)
 80070f6:	f000 f975 	bl	80073e4 <bmi088_accel_self_test>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <BMI088_init+0x26>
    {
        ERROR |= BMI088_SELF_TEST_ACCEL_ERROR;
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007106:	71fb      	strb	r3, [r7, #7]
 8007108:	e006      	b.n	8007118 <BMI088_init+0x34>
    }
    else
    {
        ERROR |= bmi088_accel_init();
 800710a:	f000 f81b 	bl	8007144 <bmi088_accel_init>
 800710e:	4603      	mov	r3, r0
 8007110:	461a      	mov	r2, r3
 8007112:	79fb      	ldrb	r3, [r7, #7]
 8007114:	4313      	orrs	r3, r2
 8007116:	71fb      	strb	r3, [r7, #7]
    }

    if (bmi088_gyro_self_test() != BMI088_NO_ERROR)
 8007118:	f000 fb38 	bl	800778c <bmi088_gyro_self_test>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d004      	beq.n	800712c <BMI088_init+0x48>
    {
        ERROR |= BMI088_SELF_TEST_GYRO_ERROR;
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007128:	71fb      	strb	r3, [r7, #7]
 800712a:	e006      	b.n	800713a <BMI088_init+0x56>
    }
    else
    {
        ERROR |= bmi088_gyro_init();
 800712c:	f000 f8c2 	bl	80072b4 <bmi088_gyro_init>
 8007130:	4603      	mov	r3, r0
 8007132:	461a      	mov	r2, r3
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	4313      	orrs	r3, r2
 8007138:	71fb      	strb	r3, [r7, #7]
    }
    return ERROR;
 800713a:	79fb      	ldrb	r3, [r7, #7]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <bmi088_accel_init>:

uint8_t bmi088_accel_init(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	71fb      	strb	r3, [r7, #7]

    //check commiunication
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007152:	f000 fd89 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007156:	2080      	movs	r0, #128	; 0x80
 8007158:	f000 fdb6 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800715c:	2055      	movs	r0, #85	; 0x55
 800715e:	f000 fdb3 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007162:	2055      	movs	r0, #85	; 0x55
 8007164:	f000 fdb0 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007168:	4603      	mov	r3, r0
 800716a:	71bb      	strb	r3, [r7, #6]
 800716c:	f000 fd88 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007170:	2096      	movs	r0, #150	; 0x96
 8007172:	f000 fd35 	bl	8007be0 <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007176:	f000 fd77 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800717a:	2080      	movs	r0, #128	; 0x80
 800717c:	f000 fda4 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007180:	2055      	movs	r0, #85	; 0x55
 8007182:	f000 fda1 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007186:	2055      	movs	r0, #85	; 0x55
 8007188:	f000 fd9e 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800718c:	4603      	mov	r3, r0
 800718e:	71bb      	strb	r3, [r7, #6]
 8007190:	f000 fd76 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007194:	2096      	movs	r0, #150	; 0x96
 8007196:	f000 fd23 	bl	8007be0 <BMI088_Delay_us>

    //accel software reset
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 800719a:	f000 fd65 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800719e:	21b6      	movs	r1, #182	; 0xb6
 80071a0:	207e      	movs	r0, #126	; 0x7e
 80071a2:	f000 fcb0 	bl	8007b06 <BMI088_Write_Single_Reg>
 80071a6:	f000 fd6b 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 80071aa:	2050      	movs	r0, #80	; 0x50
 80071ac:	f000 fd0a 	bl	8007bc4 <BMI088_Delay_ms>

    //check commiunication is normal after reset
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 80071b0:	f000 fd5a 	bl	8007c68 <BMI088_ACCEL_NS_L>
 80071b4:	2080      	movs	r0, #128	; 0x80
 80071b6:	f000 fd87 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80071ba:	2055      	movs	r0, #85	; 0x55
 80071bc:	f000 fd84 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80071c0:	2055      	movs	r0, #85	; 0x55
 80071c2:	f000 fd81 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80071c6:	4603      	mov	r3, r0
 80071c8:	71bb      	strb	r3, [r7, #6]
 80071ca:	f000 fd59 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80071ce:	2096      	movs	r0, #150	; 0x96
 80071d0:	f000 fd06 	bl	8007be0 <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 80071d4:	f000 fd48 	bl	8007c68 <BMI088_ACCEL_NS_L>
 80071d8:	2080      	movs	r0, #128	; 0x80
 80071da:	f000 fd75 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80071de:	2055      	movs	r0, #85	; 0x55
 80071e0:	f000 fd72 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80071e4:	2055      	movs	r0, #85	; 0x55
 80071e6:	f000 fd6f 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80071ea:	4603      	mov	r3, r0
 80071ec:	71bb      	strb	r3, [r7, #6]
 80071ee:	f000 fd47 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80071f2:	2096      	movs	r0, #150	; 0x96
 80071f4:	f000 fcf4 	bl	8007be0 <BMI088_Delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80071f8:	79bb      	ldrb	r3, [r7, #6]
 80071fa:	2b1e      	cmp	r3, #30
 80071fc:	d001      	beq.n	8007202 <bmi088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80071fe:	23ff      	movs	r3, #255	; 0xff
 8007200:	e052      	b.n	80072a8 <bmi088_accel_init+0x164>
    }

    //set accel sonsor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_Write_ACCEL_Reg_Num; write_reg_num++)
 8007202:	2300      	movs	r3, #0
 8007204:	71fb      	strb	r3, [r7, #7]
 8007206:	e04b      	b.n	80072a0 <bmi088_accel_init+0x15c>
    {

        BMI088_ACCEL_Write_Single_Reg(write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][0], write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][1]);
 8007208:	f000 fd2e 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800720c:	79fa      	ldrb	r2, [r7, #7]
 800720e:	4928      	ldr	r1, [pc, #160]	; (80072b0 <bmi088_accel_init+0x16c>)
 8007210:	4613      	mov	r3, r2
 8007212:	005b      	lsls	r3, r3, #1
 8007214:	4413      	add	r3, r2
 8007216:	440b      	add	r3, r1
 8007218:	7818      	ldrb	r0, [r3, #0]
 800721a:	79fa      	ldrb	r2, [r7, #7]
 800721c:	4924      	ldr	r1, [pc, #144]	; (80072b0 <bmi088_accel_init+0x16c>)
 800721e:	4613      	mov	r3, r2
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	4413      	add	r3, r2
 8007224:	440b      	add	r3, r1
 8007226:	3301      	adds	r3, #1
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	4619      	mov	r1, r3
 800722c:	f000 fc6b 	bl	8007b06 <BMI088_Write_Single_Reg>
 8007230:	f000 fd26 	bl	8007c80 <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007234:	2096      	movs	r0, #150	; 0x96
 8007236:	f000 fcd3 	bl	8007be0 <BMI088_Delay_us>

        BMI088_ACCEL_Read_Single_Reg(write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][0], res);
 800723a:	f000 fd15 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800723e:	79fa      	ldrb	r2, [r7, #7]
 8007240:	491b      	ldr	r1, [pc, #108]	; (80072b0 <bmi088_accel_init+0x16c>)
 8007242:	4613      	mov	r3, r2
 8007244:	005b      	lsls	r3, r3, #1
 8007246:	4413      	add	r3, r2
 8007248:	440b      	add	r3, r1
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007250:	b2db      	uxtb	r3, r3
 8007252:	4618      	mov	r0, r3
 8007254:	f000 fd38 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007258:	2055      	movs	r0, #85	; 0x55
 800725a:	f000 fd35 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800725e:	2055      	movs	r0, #85	; 0x55
 8007260:	f000 fd32 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007264:	4603      	mov	r3, r0
 8007266:	71bb      	strb	r3, [r7, #6]
 8007268:	f000 fd0a 	bl	8007c80 <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800726c:	2096      	movs	r0, #150	; 0x96
 800726e:	f000 fcb7 	bl	8007be0 <BMI088_Delay_us>

        if (res != write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][1])
 8007272:	79fa      	ldrb	r2, [r7, #7]
 8007274:	490e      	ldr	r1, [pc, #56]	; (80072b0 <bmi088_accel_init+0x16c>)
 8007276:	4613      	mov	r3, r2
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4413      	add	r3, r2
 800727c:	440b      	add	r3, r1
 800727e:	3301      	adds	r3, #1
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	79ba      	ldrb	r2, [r7, #6]
 8007284:	429a      	cmp	r2, r3
 8007286:	d008      	beq.n	800729a <bmi088_accel_init+0x156>
        {
            return write_BMI088_ACCEL_Reg_Data_ERROR[write_reg_num][2];
 8007288:	79fa      	ldrb	r2, [r7, #7]
 800728a:	4909      	ldr	r1, [pc, #36]	; (80072b0 <bmi088_accel_init+0x16c>)
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	440b      	add	r3, r1
 8007294:	3302      	adds	r3, #2
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	e006      	b.n	80072a8 <bmi088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_Write_ACCEL_Reg_Num; write_reg_num++)
 800729a:	79fb      	ldrb	r3, [r7, #7]
 800729c:	3301      	adds	r3, #1
 800729e:	71fb      	strb	r3, [r7, #7]
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b05      	cmp	r3, #5
 80072a4:	d9b0      	bls.n	8007208 <bmi088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3708      	adds	r7, #8
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	20000014 	.word	0x20000014

080072b4 <bmi088_gyro_init>:

uint8_t bmi088_gyro_init(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 80072ba:	2300      	movs	r3, #0
 80072bc:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80072be:	2300      	movs	r3, #0
 80072c0:	71bb      	strb	r3, [r7, #6]

    //check commiunication
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 80072c2:	f000 fce9 	bl	8007c98 <BMI088_GYRO_NS_L>
 80072c6:	1dbb      	adds	r3, r7, #6
 80072c8:	4619      	mov	r1, r3
 80072ca:	2000      	movs	r0, #0
 80072cc:	f000 fc2f 	bl	8007b2e <BMI088_Read_Single_Reg>
 80072d0:	f000 fcee 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80072d4:	2096      	movs	r0, #150	; 0x96
 80072d6:	f000 fc83 	bl	8007be0 <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 80072da:	f000 fcdd 	bl	8007c98 <BMI088_GYRO_NS_L>
 80072de:	1dbb      	adds	r3, r7, #6
 80072e0:	4619      	mov	r1, r3
 80072e2:	2000      	movs	r0, #0
 80072e4:	f000 fc23 	bl	8007b2e <BMI088_Read_Single_Reg>
 80072e8:	f000 fce2 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80072ec:	2096      	movs	r0, #150	; 0x96
 80072ee:	f000 fc77 	bl	8007be0 <BMI088_Delay_us>

    //reset the gyro SENSOR
    BMI088_GYRO_Write_Single_Reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80072f2:	f000 fcd1 	bl	8007c98 <BMI088_GYRO_NS_L>
 80072f6:	21b6      	movs	r1, #182	; 0xb6
 80072f8:	2014      	movs	r0, #20
 80072fa:	f000 fc04 	bl	8007b06 <BMI088_Write_Single_Reg>
 80072fe:	f000 fcd7 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007302:	2050      	movs	r0, #80	; 0x50
 8007304:	f000 fc5e 	bl	8007bc4 <BMI088_Delay_ms>
    //check commiunication is normal after reset
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007308:	f000 fcc6 	bl	8007c98 <BMI088_GYRO_NS_L>
 800730c:	1dbb      	adds	r3, r7, #6
 800730e:	4619      	mov	r1, r3
 8007310:	2000      	movs	r0, #0
 8007312:	f000 fc0c 	bl	8007b2e <BMI088_Read_Single_Reg>
 8007316:	f000 fccb 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800731a:	2096      	movs	r0, #150	; 0x96
 800731c:	f000 fc60 	bl	8007be0 <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 8007320:	f000 fcba 	bl	8007c98 <BMI088_GYRO_NS_L>
 8007324:	1dbb      	adds	r3, r7, #6
 8007326:	4619      	mov	r1, r3
 8007328:	2000      	movs	r0, #0
 800732a:	f000 fc00 	bl	8007b2e <BMI088_Read_Single_Reg>
 800732e:	f000 fcbf 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007332:	2096      	movs	r0, #150	; 0x96
 8007334:	f000 fc54 	bl	8007be0 <BMI088_Delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8007338:	79bb      	ldrb	r3, [r7, #6]
 800733a:	2b0f      	cmp	r3, #15
 800733c:	d001      	beq.n	8007342 <bmi088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800733e:	23ff      	movs	r3, #255	; 0xff
 8007340:	e049      	b.n	80073d6 <bmi088_gyro_init+0x122>
    }

    //set gyro sonsor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_Write_GYRO_Reg_Num; write_reg_num++)
 8007342:	2300      	movs	r3, #0
 8007344:	71fb      	strb	r3, [r7, #7]
 8007346:	e042      	b.n	80073ce <bmi088_gyro_init+0x11a>
    {

        BMI088_GYRO_Write_Single_Reg(write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][0], write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][1]);
 8007348:	f000 fca6 	bl	8007c98 <BMI088_GYRO_NS_L>
 800734c:	79fa      	ldrb	r2, [r7, #7]
 800734e:	4924      	ldr	r1, [pc, #144]	; (80073e0 <bmi088_gyro_init+0x12c>)
 8007350:	4613      	mov	r3, r2
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4413      	add	r3, r2
 8007356:	440b      	add	r3, r1
 8007358:	7818      	ldrb	r0, [r3, #0]
 800735a:	79fa      	ldrb	r2, [r7, #7]
 800735c:	4920      	ldr	r1, [pc, #128]	; (80073e0 <bmi088_gyro_init+0x12c>)
 800735e:	4613      	mov	r3, r2
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	440b      	add	r3, r1
 8007366:	3301      	adds	r3, #1
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	4619      	mov	r1, r3
 800736c:	f000 fbcb 	bl	8007b06 <BMI088_Write_Single_Reg>
 8007370:	f000 fc9e 	bl	8007cb0 <BMI088_GYRO_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007374:	2096      	movs	r0, #150	; 0x96
 8007376:	f000 fc33 	bl	8007be0 <BMI088_Delay_us>

        BMI088_GYRO_Read_Single_Reg(write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][0], res);
 800737a:	f000 fc8d 	bl	8007c98 <BMI088_GYRO_NS_L>
 800737e:	79fa      	ldrb	r2, [r7, #7]
 8007380:	4917      	ldr	r1, [pc, #92]	; (80073e0 <bmi088_gyro_init+0x12c>)
 8007382:	4613      	mov	r3, r2
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	4413      	add	r3, r2
 8007388:	440b      	add	r3, r1
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	1dba      	adds	r2, r7, #6
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f000 fbcc 	bl	8007b2e <BMI088_Read_Single_Reg>
 8007396:	f000 fc8b 	bl	8007cb0 <BMI088_GYRO_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800739a:	2096      	movs	r0, #150	; 0x96
 800739c:	f000 fc20 	bl	8007be0 <BMI088_Delay_us>

        if (res != write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][1])
 80073a0:	79fa      	ldrb	r2, [r7, #7]
 80073a2:	490f      	ldr	r1, [pc, #60]	; (80073e0 <bmi088_gyro_init+0x12c>)
 80073a4:	4613      	mov	r3, r2
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	4413      	add	r3, r2
 80073aa:	440b      	add	r3, r1
 80073ac:	3301      	adds	r3, #1
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	79bb      	ldrb	r3, [r7, #6]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d008      	beq.n	80073c8 <bmi088_gyro_init+0x114>
        {
            return write_BMI088_GYRO_Reg_Data_ERROR[write_reg_num][2];
 80073b6:	79fa      	ldrb	r2, [r7, #7]
 80073b8:	4909      	ldr	r1, [pc, #36]	; (80073e0 <bmi088_gyro_init+0x12c>)
 80073ba:	4613      	mov	r3, r2
 80073bc:	005b      	lsls	r3, r3, #1
 80073be:	4413      	add	r3, r2
 80073c0:	440b      	add	r3, r1
 80073c2:	3302      	adds	r3, #2
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	e006      	b.n	80073d6 <bmi088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_Write_GYRO_Reg_Num; write_reg_num++)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	3301      	adds	r3, #1
 80073cc:	71fb      	strb	r3, [r7, #7]
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	2b05      	cmp	r3, #5
 80073d2:	d9b9      	bls.n	8007348 <bmi088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000028 	.word	0x20000028

080073e4 <bmi088_accel_self_test>:

uint8_t bmi088_accel_self_test(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0

    int16_t self_test_accel[2][3];

    uint8_t buf[6] = {0, 0, 0, 0, 0, 0};
 80073ea:	4ad1      	ldr	r2, [pc, #836]	; (8007730 <bmi088_accel_self_test+0x34c>)
 80073ec:	463b      	mov	r3, r7
 80073ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80073f2:	6018      	str	r0, [r3, #0]
 80073f4:	3304      	adds	r3, #4
 80073f6:	8019      	strh	r1, [r3, #0]
    uint8_t res = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75bb      	strb	r3, [r7, #22]

    uint8_t write_reg_num = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	75fb      	strb	r3, [r7, #23]
        {BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_POSITIVE_SIGNAL, BMI088_ACC_PWR_CONF_ERROR},
        {BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_NEGATIVE_SIGNAL, BMI088_ACC_PWR_CONF_ERROR}

    };
    //check commiunication is normal
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007400:	f000 fc32 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007404:	2080      	movs	r0, #128	; 0x80
 8007406:	f000 fc5f 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800740a:	2055      	movs	r0, #85	; 0x55
 800740c:	f000 fc5c 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007410:	2055      	movs	r0, #85	; 0x55
 8007412:	f000 fc59 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007416:	4603      	mov	r3, r0
 8007418:	75bb      	strb	r3, [r7, #22]
 800741a:	f000 fc31 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800741e:	2096      	movs	r0, #150	; 0x96
 8007420:	f000 fbde 	bl	8007be0 <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007424:	f000 fc20 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007428:	2080      	movs	r0, #128	; 0x80
 800742a:	f000 fc4d 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800742e:	2055      	movs	r0, #85	; 0x55
 8007430:	f000 fc4a 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007434:	2055      	movs	r0, #85	; 0x55
 8007436:	f000 fc47 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800743a:	4603      	mov	r3, r0
 800743c:	75bb      	strb	r3, [r7, #22]
 800743e:	f000 fc1f 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007442:	2096      	movs	r0, #150	; 0x96
 8007444:	f000 fbcc 	bl	8007be0 <BMI088_Delay_us>

    // reset  bmi088 accel SENSOR and wait for > 50ms
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8007448:	f000 fc0e 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800744c:	21b6      	movs	r1, #182	; 0xb6
 800744e:	207e      	movs	r0, #126	; 0x7e
 8007450:	f000 fb59 	bl	8007b06 <BMI088_Write_Single_Reg>
 8007454:	f000 fc14 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007458:	2050      	movs	r0, #80	; 0x50
 800745a:	f000 fbb3 	bl	8007bc4 <BMI088_Delay_ms>

    //check commiunication is normal
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 800745e:	f000 fc03 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007462:	2080      	movs	r0, #128	; 0x80
 8007464:	f000 fc30 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007468:	2055      	movs	r0, #85	; 0x55
 800746a:	f000 fc2d 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800746e:	2055      	movs	r0, #85	; 0x55
 8007470:	f000 fc2a 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007474:	4603      	mov	r3, r0
 8007476:	75bb      	strb	r3, [r7, #22]
 8007478:	f000 fc02 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800747c:	2096      	movs	r0, #150	; 0x96
 800747e:	f000 fbaf 	bl	8007be0 <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007482:	f000 fbf1 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007486:	2080      	movs	r0, #128	; 0x80
 8007488:	f000 fc1e 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800748c:	2055      	movs	r0, #85	; 0x55
 800748e:	f000 fc1b 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007492:	2055      	movs	r0, #85	; 0x55
 8007494:	f000 fc18 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007498:	4603      	mov	r3, r0
 800749a:	75bb      	strb	r3, [r7, #22]
 800749c:	f000 fbf0 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80074a0:	2096      	movs	r0, #150	; 0x96
 80074a2:	f000 fb9d 	bl	8007be0 <BMI088_Delay_us>

    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80074a6:	7dbb      	ldrb	r3, [r7, #22]
 80074a8:	2b1e      	cmp	r3, #30
 80074aa:	d001      	beq.n	80074b0 <bmi088_accel_self_test+0xcc>
    {
        return BMI088_NO_SENSOR;
 80074ac:	23ff      	movs	r3, #255	; 0xff
 80074ae:	e168      	b.n	8007782 <bmi088_accel_self_test+0x39e>
    }

    // set the accel register
    for (write_reg_num = 0; write_reg_num < 4; write_reg_num++)
 80074b0:	2300      	movs	r3, #0
 80074b2:	75fb      	strb	r3, [r7, #23]
 80074b4:	e04e      	b.n	8007554 <bmi088_accel_self_test+0x170>
    {

        BMI088_ACCEL_Write_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][0], write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][1]);
 80074b6:	f000 fbd7 	bl	8007c68 <BMI088_ACCEL_NS_L>
 80074ba:	7dfa      	ldrb	r2, [r7, #23]
 80074bc:	499d      	ldr	r1, [pc, #628]	; (8007734 <bmi088_accel_self_test+0x350>)
 80074be:	4613      	mov	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4413      	add	r3, r2
 80074c4:	440b      	add	r3, r1
 80074c6:	7818      	ldrb	r0, [r3, #0]
 80074c8:	7dfa      	ldrb	r2, [r7, #23]
 80074ca:	499a      	ldr	r1, [pc, #616]	; (8007734 <bmi088_accel_self_test+0x350>)
 80074cc:	4613      	mov	r3, r2
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	4413      	add	r3, r2
 80074d2:	440b      	add	r3, r1
 80074d4:	3301      	adds	r3, #1
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	4619      	mov	r1, r3
 80074da:	f000 fb14 	bl	8007b06 <BMI088_Write_Single_Reg>
 80074de:	f000 fbcf 	bl	8007c80 <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80074e2:	2096      	movs	r0, #150	; 0x96
 80074e4:	f000 fb7c 	bl	8007be0 <BMI088_Delay_us>

        BMI088_ACCEL_Read_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][0], res);
 80074e8:	f000 fbbe 	bl	8007c68 <BMI088_ACCEL_NS_L>
 80074ec:	7dfa      	ldrb	r2, [r7, #23]
 80074ee:	4991      	ldr	r1, [pc, #580]	; (8007734 <bmi088_accel_self_test+0x350>)
 80074f0:	4613      	mov	r3, r2
 80074f2:	005b      	lsls	r3, r3, #1
 80074f4:	4413      	add	r3, r2
 80074f6:	440b      	add	r3, r1
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fbe1 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007506:	2055      	movs	r0, #85	; 0x55
 8007508:	f000 fbde 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800750c:	2055      	movs	r0, #85	; 0x55
 800750e:	f000 fbdb 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007512:	4603      	mov	r3, r0
 8007514:	75bb      	strb	r3, [r7, #22]
 8007516:	f000 fbb3 	bl	8007c80 <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800751a:	2096      	movs	r0, #150	; 0x96
 800751c:	f000 fb60 	bl	8007be0 <BMI088_Delay_us>

        if (res != write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][1])
 8007520:	7dfa      	ldrb	r2, [r7, #23]
 8007522:	4984      	ldr	r1, [pc, #528]	; (8007734 <bmi088_accel_self_test+0x350>)
 8007524:	4613      	mov	r3, r2
 8007526:	005b      	lsls	r3, r3, #1
 8007528:	4413      	add	r3, r2
 800752a:	440b      	add	r3, r1
 800752c:	3301      	adds	r3, #1
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	7dba      	ldrb	r2, [r7, #22]
 8007532:	429a      	cmp	r2, r3
 8007534:	d008      	beq.n	8007548 <bmi088_accel_self_test+0x164>
        {
            return write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num][2];
 8007536:	7dfa      	ldrb	r2, [r7, #23]
 8007538:	497e      	ldr	r1, [pc, #504]	; (8007734 <bmi088_accel_self_test+0x350>)
 800753a:	4613      	mov	r3, r2
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	4413      	add	r3, r2
 8007540:	440b      	add	r3, r1
 8007542:	3302      	adds	r3, #2
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	e11c      	b.n	8007782 <bmi088_accel_self_test+0x39e>
        }
        // accel conf and accel range  . the two register set need wait for > 50ms
        BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007548:	2050      	movs	r0, #80	; 0x50
 800754a:	f000 fb3b 	bl	8007bc4 <BMI088_Delay_ms>
    for (write_reg_num = 0; write_reg_num < 4; write_reg_num++)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	3301      	adds	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
 8007554:	7dfb      	ldrb	r3, [r7, #23]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d9ad      	bls.n	80074b6 <bmi088_accel_self_test+0xd2>
    }

    // self test include postive and negative
    for (write_reg_num = 0; write_reg_num < 2; write_reg_num++)
 800755a:	2300      	movs	r3, #0
 800755c:	75fb      	strb	r3, [r7, #23]
 800755e:	e096      	b.n	800768e <bmi088_accel_self_test+0x2aa>
    {

        BMI088_ACCEL_Write_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][0], write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][1]);
 8007560:	f000 fb82 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007564:	7dfb      	ldrb	r3, [r7, #23]
 8007566:	1d1a      	adds	r2, r3, #4
 8007568:	4972      	ldr	r1, [pc, #456]	; (8007734 <bmi088_accel_self_test+0x350>)
 800756a:	4613      	mov	r3, r2
 800756c:	005b      	lsls	r3, r3, #1
 800756e:	4413      	add	r3, r2
 8007570:	440b      	add	r3, r1
 8007572:	7818      	ldrb	r0, [r3, #0]
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	496e      	ldr	r1, [pc, #440]	; (8007734 <bmi088_accel_self_test+0x350>)
 800757a:	4613      	mov	r3, r2
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	440b      	add	r3, r1
 8007582:	3301      	adds	r3, #1
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	4619      	mov	r1, r3
 8007588:	f000 fabd 	bl	8007b06 <BMI088_Write_Single_Reg>
 800758c:	f000 fb78 	bl	8007c80 <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007590:	2096      	movs	r0, #150	; 0x96
 8007592:	f000 fb25 	bl	8007be0 <BMI088_Delay_us>

        BMI088_ACCEL_Read_Single_Reg(write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][0], res);
 8007596:	f000 fb67 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	1d1a      	adds	r2, r3, #4
 800759e:	4965      	ldr	r1, [pc, #404]	; (8007734 <bmi088_accel_self_test+0x350>)
 80075a0:	4613      	mov	r3, r2
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	4413      	add	r3, r2
 80075a6:	440b      	add	r3, r1
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fb89 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80075b6:	2055      	movs	r0, #85	; 0x55
 80075b8:	f000 fb86 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80075bc:	2055      	movs	r0, #85	; 0x55
 80075be:	f000 fb83 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80075c2:	4603      	mov	r3, r0
 80075c4:	75bb      	strb	r3, [r7, #22]
 80075c6:	f000 fb5b 	bl	8007c80 <BMI088_ACCEL_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80075ca:	2096      	movs	r0, #150	; 0x96
 80075cc:	f000 fb08 	bl	8007be0 <BMI088_Delay_us>

        if (res != write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][1])
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	1d1a      	adds	r2, r3, #4
 80075d4:	4957      	ldr	r1, [pc, #348]	; (8007734 <bmi088_accel_self_test+0x350>)
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	440b      	add	r3, r1
 80075de:	3301      	adds	r3, #1
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	7dba      	ldrb	r2, [r7, #22]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d009      	beq.n	80075fc <bmi088_accel_self_test+0x218>
        {
            return write_BMI088_ACCEL_self_test_Reg_Data_ERROR[write_reg_num + 4][2];
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	4951      	ldr	r1, [pc, #324]	; (8007734 <bmi088_accel_self_test+0x350>)
 80075ee:	4613      	mov	r3, r2
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	4413      	add	r3, r2
 80075f4:	440b      	add	r3, r1
 80075f6:	3302      	adds	r3, #2
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	e0c2      	b.n	8007782 <bmi088_accel_self_test+0x39e>
        }
        // accel conf and accel range  . the two register set need wait for > 50ms
        BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 80075fc:	2050      	movs	r0, #80	; 0x50
 80075fe:	f000 fae1 	bl	8007bc4 <BMI088_Delay_ms>

        // read response accel
        BMI088_ACCEL_Read_Muli_Reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8007602:	f000 fb31 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007606:	2092      	movs	r0, #146	; 0x92
 8007608:	f000 fb5e 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800760c:	463b      	mov	r3, r7
 800760e:	2206      	movs	r2, #6
 8007610:	4619      	mov	r1, r3
 8007612:	2012      	movs	r0, #18
 8007614:	f000 faa3 	bl	8007b5e <BMI088_Read_Muli_Reg>
 8007618:	f000 fb32 	bl	8007c80 <BMI088_ACCEL_NS_H>

        self_test_accel[write_reg_num][0] = (int16_t)((buf[1]) << 8) | buf[0];
 800761c:	787b      	ldrb	r3, [r7, #1]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	b219      	sxth	r1, r3
 8007622:	783b      	ldrb	r3, [r7, #0]
 8007624:	b21b      	sxth	r3, r3
 8007626:	7dfa      	ldrb	r2, [r7, #23]
 8007628:	430b      	orrs	r3, r1
 800762a:	b219      	sxth	r1, r3
 800762c:	4613      	mov	r3, r2
 800762e:	005b      	lsls	r3, r3, #1
 8007630:	4413      	add	r3, r2
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	f107 0218 	add.w	r2, r7, #24
 8007638:	4413      	add	r3, r2
 800763a:	3b10      	subs	r3, #16
 800763c:	460a      	mov	r2, r1
 800763e:	801a      	strh	r2, [r3, #0]
        self_test_accel[write_reg_num][1] = (int16_t)((buf[3]) << 8) | buf[2];
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	b219      	sxth	r1, r3
 8007646:	78bb      	ldrb	r3, [r7, #2]
 8007648:	b21b      	sxth	r3, r3
 800764a:	7dfa      	ldrb	r2, [r7, #23]
 800764c:	430b      	orrs	r3, r1
 800764e:	b219      	sxth	r1, r3
 8007650:	4613      	mov	r3, r2
 8007652:	005b      	lsls	r3, r3, #1
 8007654:	4413      	add	r3, r2
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	f107 0218 	add.w	r2, r7, #24
 800765c:	4413      	add	r3, r2
 800765e:	3b0e      	subs	r3, #14
 8007660:	460a      	mov	r2, r1
 8007662:	801a      	strh	r2, [r3, #0]
        self_test_accel[write_reg_num][2] = (int16_t)((buf[5]) << 8) | buf[4];
 8007664:	797b      	ldrb	r3, [r7, #5]
 8007666:	021b      	lsls	r3, r3, #8
 8007668:	b219      	sxth	r1, r3
 800766a:	793b      	ldrb	r3, [r7, #4]
 800766c:	b21b      	sxth	r3, r3
 800766e:	7dfa      	ldrb	r2, [r7, #23]
 8007670:	430b      	orrs	r3, r1
 8007672:	b219      	sxth	r1, r3
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	005b      	lsls	r3, r3, #1
 800767c:	f107 0218 	add.w	r2, r7, #24
 8007680:	4413      	add	r3, r2
 8007682:	3b0c      	subs	r3, #12
 8007684:	460a      	mov	r2, r1
 8007686:	801a      	strh	r2, [r3, #0]
    for (write_reg_num = 0; write_reg_num < 2; write_reg_num++)
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	3301      	adds	r3, #1
 800768c:	75fb      	strb	r3, [r7, #23]
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	2b01      	cmp	r3, #1
 8007692:	f67f af65 	bls.w	8007560 <bmi088_accel_self_test+0x17c>
    }

    //set self test off
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SELF_TEST, BMI088_ACC_SELF_TEST_OFF);
 8007696:	f000 fae7 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800769a:	2100      	movs	r1, #0
 800769c:	206d      	movs	r0, #109	; 0x6d
 800769e:	f000 fa32 	bl	8007b06 <BMI088_Write_Single_Reg>
 80076a2:	f000 faed 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80076a6:	2096      	movs	r0, #150	; 0x96
 80076a8:	f000 fa9a 	bl	8007be0 <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_SELF_TEST, res);
 80076ac:	f000 fadc 	bl	8007c68 <BMI088_ACCEL_NS_L>
 80076b0:	20ed      	movs	r0, #237	; 0xed
 80076b2:	f000 fb09 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80076b6:	2055      	movs	r0, #85	; 0x55
 80076b8:	f000 fb06 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80076bc:	2055      	movs	r0, #85	; 0x55
 80076be:	f000 fb03 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80076c2:	4603      	mov	r3, r0
 80076c4:	75bb      	strb	r3, [r7, #22]
 80076c6:	f000 fadb 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80076ca:	2096      	movs	r0, #150	; 0x96
 80076cc:	f000 fa88 	bl	8007be0 <BMI088_Delay_us>

    if (res != (BMI088_ACC_SELF_TEST_OFF))
 80076d0:	7dbb      	ldrb	r3, [r7, #22]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <bmi088_accel_self_test+0x2f6>
    {
        return BMI088_ACC_SELF_TEST_ERROR;
 80076d6:	2304      	movs	r3, #4
 80076d8:	e053      	b.n	8007782 <bmi088_accel_self_test+0x39e>
    }

    //reset the accel SENSOR
    BMI088_ACCEL_Write_Single_Reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 80076da:	f000 fac5 	bl	8007c68 <BMI088_ACCEL_NS_L>
 80076de:	21b6      	movs	r1, #182	; 0xb6
 80076e0:	207e      	movs	r0, #126	; 0x7e
 80076e2:	f000 fa10 	bl	8007b06 <BMI088_Write_Single_Reg>
 80076e6:	f000 facb 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 80076ea:	2050      	movs	r0, #80	; 0x50
 80076ec:	f000 fa6a 	bl	8007bc4 <BMI088_Delay_ms>

    if ((self_test_accel[0][0] - self_test_accel[1][0] < 1365) || (self_test_accel[0][1] - self_test_accel[1][1] < 1365) || (self_test_accel[0][2] - self_test_accel[1][2] < 680))
 80076f0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80076f4:	461a      	mov	r2, r3
 80076f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	f240 5254 	movw	r2, #1364	; 0x554
 8007700:	4293      	cmp	r3, r2
 8007702:	dd12      	ble.n	800772a <bmi088_accel_self_test+0x346>
 8007704:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007708:	461a      	mov	r2, r3
 800770a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	f240 5254 	movw	r2, #1364	; 0x554
 8007714:	4293      	cmp	r3, r2
 8007716:	dd08      	ble.n	800772a <bmi088_accel_self_test+0x346>
 8007718:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800771c:	461a      	mov	r2, r3
 800771e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8007728:	da06      	bge.n	8007738 <bmi088_accel_self_test+0x354>
    {
        return BMI088_SELF_TEST_ACCEL_ERROR;
 800772a:	2380      	movs	r3, #128	; 0x80
 800772c:	e029      	b.n	8007782 <bmi088_accel_self_test+0x39e>
 800772e:	bf00      	nop
 8007730:	08013788 	.word	0x08013788
 8007734:	080139fc 	.word	0x080139fc
    }

    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 8007738:	f000 fa96 	bl	8007c68 <BMI088_ACCEL_NS_L>
 800773c:	2080      	movs	r0, #128	; 0x80
 800773e:	f000 fac3 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007742:	2055      	movs	r0, #85	; 0x55
 8007744:	f000 fac0 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007748:	2055      	movs	r0, #85	; 0x55
 800774a:	f000 fabd 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800774e:	4603      	mov	r3, r0
 8007750:	75bb      	strb	r3, [r7, #22]
 8007752:	f000 fa95 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007756:	2096      	movs	r0, #150	; 0x96
 8007758:	f000 fa42 	bl	8007be0 <BMI088_Delay_us>
    BMI088_ACCEL_Read_Single_Reg(BMI088_ACC_CHIP_ID, res);
 800775c:	f000 fa84 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007760:	2080      	movs	r0, #128	; 0x80
 8007762:	f000 fab1 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007766:	2055      	movs	r0, #85	; 0x55
 8007768:	f000 faae 	bl	8007cc8 <BMI088_Read_Write_Byte>
 800776c:	2055      	movs	r0, #85	; 0x55
 800776e:	f000 faab 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007772:	4603      	mov	r3, r0
 8007774:	75bb      	strb	r3, [r7, #22]
 8007776:	f000 fa83 	bl	8007c80 <BMI088_ACCEL_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800777a:	2096      	movs	r0, #150	; 0x96
 800777c:	f000 fa30 	bl	8007be0 <BMI088_Delay_us>

    return BMI088_NO_ERROR;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop

0800778c <bmi088_gyro_self_test>:

uint8_t bmi088_gyro_self_test(void)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	71bb      	strb	r3, [r7, #6]
    uint8_t retry = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	71fb      	strb	r3, [r7, #7]
    //check commiunication is normal
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 800779a:	f000 fa7d 	bl	8007c98 <BMI088_GYRO_NS_L>
 800779e:	1dbb      	adds	r3, r7, #6
 80077a0:	4619      	mov	r1, r3
 80077a2:	2000      	movs	r0, #0
 80077a4:	f000 f9c3 	bl	8007b2e <BMI088_Read_Single_Reg>
 80077a8:	f000 fa82 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80077ac:	2096      	movs	r0, #150	; 0x96
 80077ae:	f000 fa17 	bl	8007be0 <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 80077b2:	f000 fa71 	bl	8007c98 <BMI088_GYRO_NS_L>
 80077b6:	1dbb      	adds	r3, r7, #6
 80077b8:	4619      	mov	r1, r3
 80077ba:	2000      	movs	r0, #0
 80077bc:	f000 f9b7 	bl	8007b2e <BMI088_Read_Single_Reg>
 80077c0:	f000 fa76 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80077c4:	2096      	movs	r0, #150	; 0x96
 80077c6:	f000 fa0b 	bl	8007be0 <BMI088_Delay_us>
    //reset the gyro SENSOR
    BMI088_GYRO_Write_Single_Reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80077ca:	f000 fa65 	bl	8007c98 <BMI088_GYRO_NS_L>
 80077ce:	21b6      	movs	r1, #182	; 0xb6
 80077d0:	2014      	movs	r0, #20
 80077d2:	f000 f998 	bl	8007b06 <BMI088_Write_Single_Reg>
 80077d6:	f000 fa6b 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 80077da:	2050      	movs	r0, #80	; 0x50
 80077dc:	f000 f9f2 	bl	8007bc4 <BMI088_Delay_ms>
    //check commiunication is normal after reset
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 80077e0:	f000 fa5a 	bl	8007c98 <BMI088_GYRO_NS_L>
 80077e4:	1dbb      	adds	r3, r7, #6
 80077e6:	4619      	mov	r1, r3
 80077e8:	2000      	movs	r0, #0
 80077ea:	f000 f9a0 	bl	8007b2e <BMI088_Read_Single_Reg>
 80077ee:	f000 fa5f 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80077f2:	2096      	movs	r0, #150	; 0x96
 80077f4:	f000 f9f4 	bl	8007be0 <BMI088_Delay_us>
    BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_CHIP_ID, res);
 80077f8:	f000 fa4e 	bl	8007c98 <BMI088_GYRO_NS_L>
 80077fc:	1dbb      	adds	r3, r7, #6
 80077fe:	4619      	mov	r1, r3
 8007800:	2000      	movs	r0, #0
 8007802:	f000 f994 	bl	8007b2e <BMI088_Read_Single_Reg>
 8007806:	f000 fa53 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800780a:	2096      	movs	r0, #150	; 0x96
 800780c:	f000 f9e8 	bl	8007be0 <BMI088_Delay_us>

    BMI088_GYRO_Write_Single_Reg(BMI088_GYRO_SELF_TEST, BMI088_GYRO_TRIG_BIST);
 8007810:	f000 fa42 	bl	8007c98 <BMI088_GYRO_NS_L>
 8007814:	2101      	movs	r1, #1
 8007816:	203c      	movs	r0, #60	; 0x3c
 8007818:	f000 f975 	bl	8007b06 <BMI088_Write_Single_Reg>
 800781c:	f000 fa48 	bl	8007cb0 <BMI088_GYRO_NS_H>
    BMI088_Delay_ms(BMI088_LONG_DELAY_TIME);
 8007820:	2050      	movs	r0, #80	; 0x50
 8007822:	f000 f9cf 	bl	8007bc4 <BMI088_Delay_ms>

    do
    {

        BMI088_GYRO_Read_Single_Reg(BMI088_GYRO_SELF_TEST, res);
 8007826:	f000 fa37 	bl	8007c98 <BMI088_GYRO_NS_L>
 800782a:	1dbb      	adds	r3, r7, #6
 800782c:	4619      	mov	r1, r3
 800782e:	203c      	movs	r0, #60	; 0x3c
 8007830:	f000 f97d 	bl	8007b2e <BMI088_Read_Single_Reg>
 8007834:	f000 fa3c 	bl	8007cb0 <BMI088_GYRO_NS_H>
        BMI088_Delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8007838:	2096      	movs	r0, #150	; 0x96
 800783a:	f000 f9d1 	bl	8007be0 <BMI088_Delay_us>
        retry++;
 800783e:	79fb      	ldrb	r3, [r7, #7]
 8007840:	3301      	adds	r3, #1
 8007842:	71fb      	strb	r3, [r7, #7]
    }
    while (!(res & BMI088_GYRO_BIST_RDY) && retry < 10);
 8007844:	79bb      	ldrb	r3, [r7, #6]
 8007846:	f003 0302 	and.w	r3, r3, #2
 800784a:	2b00      	cmp	r3, #0
 800784c:	d102      	bne.n	8007854 <bmi088_gyro_self_test+0xc8>
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	2b09      	cmp	r3, #9
 8007852:	d9e8      	bls.n	8007826 <bmi088_gyro_self_test+0x9a>

    if (retry == 10)
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	2b0a      	cmp	r3, #10
 8007858:	d101      	bne.n	800785e <bmi088_gyro_self_test+0xd2>
    {
        return BMI088_SELF_TEST_GYRO_ERROR;
 800785a:	2340      	movs	r3, #64	; 0x40
 800785c:	e007      	b.n	800786e <bmi088_gyro_self_test+0xe2>
    }

    if (res & BMI088_GYRO_BIST_FAIL)
 800785e:	79bb      	ldrb	r3, [r7, #6]
 8007860:	f003 0304 	and.w	r3, r3, #4
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <bmi088_gyro_self_test+0xe0>
    {
        return BMI088_SELF_TEST_GYRO_ERROR;
 8007868:	2340      	movs	r3, #64	; 0x40
 800786a:	e000      	b.n	800786e <bmi088_gyro_self_test+0xe2>
    }

    return BMI088_NO_ERROR;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <BMI088_Read>:
}

int16_t gyro_x, gyro_y, gyro_z, accel_x, accel_y, accel_z;

void BMI088_Read(float gyro[3], float accel[3], float *temperature)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b088      	sub	sp, #32
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8007884:	4a79      	ldr	r2, [pc, #484]	; (8007a6c <BMI088_Read+0x1f4>)
 8007886:	f107 0314 	add.w	r3, r7, #20
 800788a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800788e:	6018      	str	r0, [r3, #0]
 8007890:	3304      	adds	r3, #4
 8007892:	8019      	strh	r1, [r3, #0]
 8007894:	3302      	adds	r3, #2
 8007896:	0c0a      	lsrs	r2, r1, #16
 8007898:	701a      	strb	r2, [r3, #0]
 800789a:	2300      	movs	r3, #0
 800789c:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_ACCEL_Read_Muli_Reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800789e:	f000 f9e3 	bl	8007c68 <BMI088_ACCEL_NS_L>
 80078a2:	2092      	movs	r0, #146	; 0x92
 80078a4:	f000 fa10 	bl	8007cc8 <BMI088_Read_Write_Byte>
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	2206      	movs	r2, #6
 80078ae:	4619      	mov	r1, r3
 80078b0:	2012      	movs	r0, #18
 80078b2:	f000 f954 	bl	8007b5e <BMI088_Read_Muli_Reg>
 80078b6:	f000 f9e3 	bl	8007c80 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80078ba:	7d7b      	ldrb	r3, [r7, #21]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	b21a      	sxth	r2, r3
 80078c0:	7d3b      	ldrb	r3, [r7, #20]
 80078c2:	b21b      	sxth	r3, r3
 80078c4:	4313      	orrs	r3, r2
 80078c6:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80078c8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80078cc:	ee07 3a90 	vmov	s15, r3
 80078d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078d4:	4b66      	ldr	r3, [pc, #408]	; (8007a70 <BMI088_Read+0x1f8>)
 80078d6:	edd3 7a00 	vldr	s15, [r3]
 80078da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	edc3 7a00 	vstr	s15, [r3]
    accel_x = bmi088_raw_temp;
 80078e4:	4a63      	ldr	r2, [pc, #396]	; (8007a74 <BMI088_Read+0x1fc>)
 80078e6:	8bfb      	ldrh	r3, [r7, #30]
 80078e8:	8013      	strh	r3, [r2, #0]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80078ea:	7dfb      	ldrb	r3, [r7, #23]
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	b21a      	sxth	r2, r3
 80078f0:	7dbb      	ldrb	r3, [r7, #22]
 80078f2:	b21b      	sxth	r3, r3
 80078f4:	4313      	orrs	r3, r2
 80078f6:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80078f8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007904:	4b5a      	ldr	r3, [pc, #360]	; (8007a70 <BMI088_Read+0x1f8>)
 8007906:	edd3 7a00 	vldr	s15, [r3]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	3304      	adds	r3, #4
 800790e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007912:	edc3 7a00 	vstr	s15, [r3]
    accel_y = bmi088_raw_temp;
 8007916:	4a58      	ldr	r2, [pc, #352]	; (8007a78 <BMI088_Read+0x200>)
 8007918:	8bfb      	ldrh	r3, [r7, #30]
 800791a:	8013      	strh	r3, [r2, #0]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800791c:	7e7b      	ldrb	r3, [r7, #25]
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	b21a      	sxth	r2, r3
 8007922:	7e3b      	ldrb	r3, [r7, #24]
 8007924:	b21b      	sxth	r3, r3
 8007926:	4313      	orrs	r3, r2
 8007928:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800792a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007936:	4b4e      	ldr	r3, [pc, #312]	; (8007a70 <BMI088_Read+0x1f8>)
 8007938:	edd3 7a00 	vldr	s15, [r3]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	3308      	adds	r3, #8
 8007940:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007944:	edc3 7a00 	vstr	s15, [r3]
    accel_z = bmi088_raw_temp;
 8007948:	4a4c      	ldr	r2, [pc, #304]	; (8007a7c <BMI088_Read+0x204>)
 800794a:	8bfb      	ldrh	r3, [r7, #30]
 800794c:	8013      	strh	r3, [r2, #0]

    BMI088_GYRO_Read_Muli_Reg(BMI088_GYRO_CHIP_ID, buf, 8);
 800794e:	f000 f9a3 	bl	8007c98 <BMI088_GYRO_NS_L>
 8007952:	f107 0314 	add.w	r3, r7, #20
 8007956:	2208      	movs	r2, #8
 8007958:	4619      	mov	r1, r3
 800795a:	2000      	movs	r0, #0
 800795c:	f000 f8ff 	bl	8007b5e <BMI088_Read_Muli_Reg>
 8007960:	f000 f9a6 	bl	8007cb0 <BMI088_GYRO_NS_H>
    if (buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8007964:	7d3b      	ldrb	r3, [r7, #20]
 8007966:	2b0f      	cmp	r3, #15
 8007968:	d149      	bne.n	80079fe <BMI088_Read+0x186>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	b21a      	sxth	r2, r3
 8007970:	7dbb      	ldrb	r3, [r7, #22]
 8007972:	b21b      	sxth	r3, r3
 8007974:	4313      	orrs	r3, r2
 8007976:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8007978:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800797c:	ee07 3a90 	vmov	s15, r3
 8007980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007984:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <BMI088_Read+0x208>)
 8007986:	edd3 7a00 	vldr	s15, [r3]
 800798a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	edc3 7a00 	vstr	s15, [r3]
        gyro_x = bmi088_raw_temp;
 8007994:	4a3b      	ldr	r2, [pc, #236]	; (8007a84 <BMI088_Read+0x20c>)
 8007996:	8bfb      	ldrh	r3, [r7, #30]
 8007998:	8013      	strh	r3, [r2, #0]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800799a:	7e7b      	ldrb	r3, [r7, #25]
 800799c:	021b      	lsls	r3, r3, #8
 800799e:	b21a      	sxth	r2, r3
 80079a0:	7e3b      	ldrb	r3, [r7, #24]
 80079a2:	b21b      	sxth	r3, r3
 80079a4:	4313      	orrs	r3, r2
 80079a6:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80079a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80079ac:	ee07 3a90 	vmov	s15, r3
 80079b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079b4:	4b32      	ldr	r3, [pc, #200]	; (8007a80 <BMI088_Read+0x208>)
 80079b6:	edd3 7a00 	vldr	s15, [r3]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3304      	adds	r3, #4
 80079be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c2:	edc3 7a00 	vstr	s15, [r3]
        gyro_y = bmi088_raw_temp;
 80079c6:	4a30      	ldr	r2, [pc, #192]	; (8007a88 <BMI088_Read+0x210>)
 80079c8:	8bfb      	ldrh	r3, [r7, #30]
 80079ca:	8013      	strh	r3, [r2, #0]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80079cc:	7efb      	ldrb	r3, [r7, #27]
 80079ce:	021b      	lsls	r3, r3, #8
 80079d0:	b21a      	sxth	r2, r3
 80079d2:	7ebb      	ldrb	r3, [r7, #26]
 80079d4:	b21b      	sxth	r3, r3
 80079d6:	4313      	orrs	r3, r2
 80079d8:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80079da:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80079de:	ee07 3a90 	vmov	s15, r3
 80079e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079e6:	4b26      	ldr	r3, [pc, #152]	; (8007a80 <BMI088_Read+0x208>)
 80079e8:	edd3 7a00 	vldr	s15, [r3]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3308      	adds	r3, #8
 80079f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f4:	edc3 7a00 	vstr	s15, [r3]
        gyro_z = bmi088_raw_temp;
 80079f8:	4a24      	ldr	r2, [pc, #144]	; (8007a8c <BMI088_Read+0x214>)
 80079fa:	8bfb      	ldrh	r3, [r7, #30]
 80079fc:	8013      	strh	r3, [r2, #0]
    }
    BMI088_ACCEL_Read_Muli_Reg(BMI088_TEMP_M, buf, 2);
 80079fe:	f000 f933 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007a02:	20a2      	movs	r0, #162	; 0xa2
 8007a04:	f000 f960 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007a08:	f107 0314 	add.w	r3, r7, #20
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	4619      	mov	r1, r3
 8007a10:	2022      	movs	r0, #34	; 0x22
 8007a12:	f000 f8a4 	bl	8007b5e <BMI088_Read_Muli_Reg>
 8007a16:	f000 f933 	bl	8007c80 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8007a1a:	7d3b      	ldrb	r3, [r7, #20]
 8007a1c:	00db      	lsls	r3, r3, #3
 8007a1e:	b21a      	sxth	r2, r3
 8007a20:	7d7b      	ldrb	r3, [r7, #21]
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	b21b      	sxth	r3, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8007a2c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a34:	db04      	blt.n	8007a40 <BMI088_Read+0x1c8>
    {
        bmi088_raw_temp -= 2048;
 8007a36:	8bfb      	ldrh	r3, [r7, #30]
 8007a38:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	83fb      	strh	r3, [r7, #30]
    }

    *temperature = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8007a40:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007a44:	ee07 3a90 	vmov	s15, r3
 8007a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a4c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8007a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a54:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8007a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	edc3 7a00 	vstr	s15, [r3]
}
 8007a62:	bf00      	nop
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	08013790 	.word	0x08013790
 8007a70:	2000000c 	.word	0x2000000c
 8007a74:	2000d72c 	.word	0x2000d72c
 8007a78:	2000d730 	.word	0x2000d730
 8007a7c:	2000d734 	.word	0x2000d734
 8007a80:	20000010 	.word	0x20000010
 8007a84:	2000d732 	.word	0x2000d732
 8007a88:	2000d72e 	.word	0x2000d72e
 8007a8c:	2000d736 	.word	0x2000d736

08007a90 <get_BMI088_temperature>:

    return SENSOR_time;
}

float get_BMI088_temperature(void)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
    uint8_t buf[2];
    float temperature;
    int16_t temperature_raw_temp;
    BMI088_ACCEL_Read_Muli_Reg(BMI088_TEMP_M, buf, 2);
 8007a96:	f000 f8e7 	bl	8007c68 <BMI088_ACCEL_NS_L>
 8007a9a:	20a2      	movs	r0, #162	; 0xa2
 8007a9c:	f000 f914 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007aa0:	1d3b      	adds	r3, r7, #4
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	2022      	movs	r0, #34	; 0x22
 8007aa8:	f000 f859 	bl	8007b5e <BMI088_Read_Muli_Reg>
 8007aac:	f000 f8e8 	bl	8007c80 <BMI088_ACCEL_NS_H>
    temperature_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8007ab0:	793b      	ldrb	r3, [r7, #4]
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	b21a      	sxth	r2, r3
 8007ab6:	797b      	ldrb	r3, [r7, #5]
 8007ab8:	095b      	lsrs	r3, r3, #5
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	b21b      	sxth	r3, r3
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	81fb      	strh	r3, [r7, #14]
    if (temperature_raw_temp > 1023)
 8007ac2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aca:	db04      	blt.n	8007ad6 <get_BMI088_temperature+0x46>
    {
        temperature_raw_temp -= 2048;
 8007acc:	89fb      	ldrh	r3, [r7, #14]
 8007ace:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	81fb      	strh	r3, [r7, #14]
    }
    temperature = temperature_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8007ad6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ae2:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8007ae6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007aea:	eeb3 7a07 	vmov.f32	s14, #55	; 0x41b80000  23.0
 8007aee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007af2:	edc7 7a02 	vstr	s15, [r7, #8]
    return temperature;
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	ee07 3a90 	vmov	s15, r3
}
 8007afc:	eeb0 0a67 	vmov.f32	s0, s15
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <BMI088_Write_Single_Reg>:
    accel[2] = accel_raw_temp * BMI088_ACCEL_SEN;
}

#if defined(BMI088_USE_SPI)
static void BMI088_Write_Single_Reg(uint8_t reg, uint8_t data)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	460a      	mov	r2, r1
 8007b10:	71fb      	strb	r3, [r7, #7]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71bb      	strb	r3, [r7, #6]
    BMI088_Read_Write_Byte(reg);
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 f8d5 	bl	8007cc8 <BMI088_Read_Write_Byte>
    BMI088_Read_Write_Byte(data);
 8007b1e:	79bb      	ldrb	r3, [r7, #6]
 8007b20:	4618      	mov	r0, r3
 8007b22:	f000 f8d1 	bl	8007cc8 <BMI088_Read_Write_Byte>
}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <BMI088_Read_Single_Reg>:

static void BMI088_Read_Single_Reg(uint8_t reg, uint8_t *return_data)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b082      	sub	sp, #8
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	4603      	mov	r3, r0
 8007b36:	6039      	str	r1, [r7, #0]
 8007b38:	71fb      	strb	r3, [r7, #7]
    BMI088_Read_Write_Byte(reg | 0x80);
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f8c0 	bl	8007cc8 <BMI088_Read_Write_Byte>
    *return_data = BMI088_Read_Write_Byte(0x55);
 8007b48:	2055      	movs	r0, #85	; 0x55
 8007b4a:	f000 f8bd 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	461a      	mov	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	701a      	strb	r2, [r3, #0]
}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <BMI088_Read_Muli_Reg>:

static void BMI088_Read_Muli_Reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b082      	sub	sp, #8
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	4603      	mov	r3, r0
 8007b66:	6039      	str	r1, [r7, #0]
 8007b68:	71fb      	strb	r3, [r7, #7]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	71bb      	strb	r3, [r7, #6]
    BMI088_Read_Write_Byte(reg | 0x80);
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 f8a6 	bl	8007cc8 <BMI088_Read_Write_Byte>

    while (len != 0)
 8007b7c:	e00c      	b.n	8007b98 <BMI088_Read_Muli_Reg+0x3a>
    {
        *buf = BMI088_Read_Write_Byte(0x55);
 8007b7e:	2055      	movs	r0, #85	; 0x55
 8007b80:	f000 f8a2 	bl	8007cc8 <BMI088_Read_Write_Byte>
 8007b84:	4603      	mov	r3, r0
 8007b86:	461a      	mov	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	701a      	strb	r2, [r3, #0]
        buf++;
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	3301      	adds	r3, #1
 8007b90:	603b      	str	r3, [r7, #0]
        len--;
 8007b92:	79bb      	ldrb	r3, [r7, #6]
 8007b94:	3b01      	subs	r3, #1
 8007b96:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8007b98:	79bb      	ldrb	r3, [r7, #6]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d1ef      	bne.n	8007b7e <BMI088_Read_Muli_Reg+0x20>
    }
}
 8007b9e:	bf00      	nop
 8007ba0:	bf00      	nop
 8007ba2:	3708      	adds	r7, #8
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <BMI088_GPIO_Init>:
#include "cmsis_os.h"

extern SPI_HandleTypeDef hspi1;

void BMI088_GPIO_Init(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0

}
 8007bac:	bf00      	nop
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <BMI088_Com_Init>:

void BMI088_Com_Init(void)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	af00      	add	r7, sp, #0


}
 8007bba:	bf00      	nop
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <BMI088_Delay_ms>:

void BMI088_Delay_ms(uint16_t ms)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	4603      	mov	r3, r0
 8007bcc:	80fb      	strh	r3, [r7, #6]

    osDelay(ms);
 8007bce:	88fb      	ldrh	r3, [r7, #6]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f006 fec0 	bl	800e956 <osDelay>
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <BMI088_Delay_us>:

void BMI088_Delay_us(uint16_t us)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b089      	sub	sp, #36	; 0x24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8007bfe:	4b19      	ldr	r3, [pc, #100]	; (8007c64 <BMI088_Delay_us+0x84>)
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	22a8      	movs	r2, #168	; 0xa8
 8007c08:	fb02 f303 	mul.w	r3, r2, r3
 8007c0c:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8007c0e:	4b15      	ldr	r3, [pc, #84]	; (8007c64 <BMI088_Delay_us+0x84>)
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8007c14:	4b13      	ldr	r3, [pc, #76]	; (8007c64 <BMI088_Delay_us+0x84>)
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d0f8      	beq.n	8007c14 <BMI088_Delay_us+0x34>
        {
            if (tnow < told)
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d206      	bcs.n	8007c38 <BMI088_Delay_us+0x58>
            {
                tcnt += told - tnow;
 8007c2a:	69fa      	ldr	r2, [r7, #28]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4413      	add	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
 8007c36:	e007      	b.n	8007c48 <BMI088_Delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	1ad2      	subs	r2, r2, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	4413      	add	r3, r2
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	4413      	add	r3, r2
 8007c46:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d200      	bcs.n	8007c56 <BMI088_Delay_us+0x76>
        tnow = SysTick->VAL;
 8007c54:	e7de      	b.n	8007c14 <BMI088_Delay_us+0x34>
            {
                break;
 8007c56:	bf00      	nop
            }
        }
    }


}
 8007c58:	bf00      	nop
 8007c5a:	3724      	adds	r7, #36	; 0x24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr
 8007c64:	e000e010 	.word	0xe000e010

08007c68 <BMI088_ACCEL_NS_L>:

void BMI088_ACCEL_NS_L(void)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2110      	movs	r1, #16
 8007c70:	4802      	ldr	r0, [pc, #8]	; (8007c7c <BMI088_ACCEL_NS_L+0x14>)
 8007c72:	f004 f92d 	bl	800bed0 <HAL_GPIO_WritePin>
}
 8007c76:	bf00      	nop
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40020000 	.word	0x40020000

08007c80 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8007c84:	2201      	movs	r2, #1
 8007c86:	2110      	movs	r1, #16
 8007c88:	4802      	ldr	r0, [pc, #8]	; (8007c94 <BMI088_ACCEL_NS_H+0x14>)
 8007c8a:	f004 f921 	bl	800bed0 <HAL_GPIO_WritePin>
}
 8007c8e:	bf00      	nop
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	bf00      	nop
 8007c94:	40020000 	.word	0x40020000

08007c98 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2101      	movs	r1, #1
 8007ca0:	4802      	ldr	r0, [pc, #8]	; (8007cac <BMI088_GYRO_NS_L+0x14>)
 8007ca2:	f004 f915 	bl	800bed0 <HAL_GPIO_WritePin>
}
 8007ca6:	bf00      	nop
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	40020400 	.word	0x40020400

08007cb0 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	2101      	movs	r1, #1
 8007cb8:	4802      	ldr	r0, [pc, #8]	; (8007cc4 <BMI088_GYRO_NS_H+0x14>)
 8007cba:	f004 f909 	bl	800bed0 <HAL_GPIO_WritePin>
}
 8007cbe:	bf00      	nop
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40020400 	.word	0x40020400

08007cc8 <BMI088_Read_Write_Byte>:

uint8_t BMI088_Read_Write_Byte(uint8_t txdata)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af02      	add	r7, sp, #8
 8007cce:	4603      	mov	r3, r0
 8007cd0:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8007cd2:	f107 020f 	add.w	r2, r7, #15
 8007cd6:	1df9      	adds	r1, r7, #7
 8007cd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007cdc:	9300      	str	r3, [sp, #0]
 8007cde:	2301      	movs	r3, #1
 8007ce0:	4803      	ldr	r0, [pc, #12]	; (8007cf0 <BMI088_Read_Write_Byte+0x28>)
 8007ce2:	f004 ff3c 	bl	800cb5e <HAL_SPI_TransmitReceive>
    return rx_data;
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3710      	adds	r7, #16
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	2000d87c 	.word	0x2000d87c

08007cf4 <bmi088_get_data>:
//float ins_angle[3];

static void bmi088_cali_slove(float gyro[3], float accel[3], bmi088_real_data_t *bmi088);

void bmi088_get_data(AhrsSensor_t *sensor)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	/* read bmi088 rawa data */
    BMI088_Read(bmi088_real_data.gyro, bmi088_real_data.accel, &imu.temp);
 8007cfc:	4a12      	ldr	r2, [pc, #72]	; (8007d48 <bmi088_get_data+0x54>)
 8007cfe:	4913      	ldr	r1, [pc, #76]	; (8007d4c <bmi088_get_data+0x58>)
 8007d00:	4813      	ldr	r0, [pc, #76]	; (8007d50 <bmi088_get_data+0x5c>)
 8007d02:	f7ff fdb9 	bl	8007878 <BMI088_Read>
    /* data fusion with the offset */
    bmi088_cali_slove(gyro, accel, &bmi088_real_data);
 8007d06:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <bmi088_get_data+0x60>)
 8007d08:	4913      	ldr	r1, [pc, #76]	; (8007d58 <bmi088_get_data+0x64>)
 8007d0a:	4814      	ldr	r0, [pc, #80]	; (8007d5c <bmi088_get_data+0x68>)
 8007d0c:	f000 f904 	bl	8007f18 <bmi088_cali_slove>

    sensor->ax = accel[0];
 8007d10:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <bmi088_get_data+0x64>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	601a      	str	r2, [r3, #0]
    sensor->ay = accel[1];
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <bmi088_get_data+0x64>)
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	605a      	str	r2, [r3, #4]
    sensor->az = accel[2];
 8007d20:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <bmi088_get_data+0x64>)
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	609a      	str	r2, [r3, #8]

    sensor->wx = gyro[0];
 8007d28:	4b0c      	ldr	r3, [pc, #48]	; (8007d5c <bmi088_get_data+0x68>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	60da      	str	r2, [r3, #12]
    sensor->wy = gyro[1];
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <bmi088_get_data+0x68>)
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	611a      	str	r2, [r3, #16]
    sensor->wz = gyro[2];
 8007d38:	4b08      	ldr	r3, [pc, #32]	; (8007d5c <bmi088_get_data+0x68>)
 8007d3a:	689a      	ldr	r2, [r3, #8]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	615a      	str	r2, [r3, #20]
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20004670 	.word	0x20004670
 8007d4c:	2000d784 	.word	0x2000d784
 8007d50:	2000d794 	.word	0x2000d794
 8007d54:	2000d780 	.word	0x2000d780
 8007d58:	2000d744 	.word	0x2000d744
 8007d5c:	2000d75c 	.word	0x2000d75c

08007d60 <bmi088_device_init>:
  * @brief  bmi088 init
  * @param
  * @retval error code
  */
uint8_t bmi088_device_init(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
    BMI088_init();
 8007d64:	f7ff f9be 	bl	80070e4 <BMI088_init>
    BMI088_Read(bmi088_real_data.gyro, bmi088_real_data.accel, &temperature);
 8007d68:	4a06      	ldr	r2, [pc, #24]	; (8007d84 <bmi088_device_init+0x24>)
 8007d6a:	4907      	ldr	r1, [pc, #28]	; (8007d88 <bmi088_device_init+0x28>)
 8007d6c:	4807      	ldr	r0, [pc, #28]	; (8007d8c <bmi088_device_init+0x2c>)
 8007d6e:	f7ff fd83 	bl	8007878 <BMI088_Read>
    bmi088_cali_slove(gyro, accel, &bmi088_real_data);
 8007d72:	4a07      	ldr	r2, [pc, #28]	; (8007d90 <bmi088_device_init+0x30>)
 8007d74:	4907      	ldr	r1, [pc, #28]	; (8007d94 <bmi088_device_init+0x34>)
 8007d76:	4808      	ldr	r0, [pc, #32]	; (8007d98 <bmi088_device_init+0x38>)
 8007d78:	f000 f8ce 	bl	8007f18 <bmi088_cali_slove>

//    AHRS_init(ins_quat, accel, mag);
//    get_angle(ins_quat, ins_angle, ins_angle + 1, ins_angle + 2);//for ist

    return 0;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000528 	.word	0x20000528
 8007d88:	2000d784 	.word	0x2000d784
 8007d8c:	2000d794 	.word	0x2000d794
 8007d90:	2000d780 	.word	0x2000d780
 8007d94:	2000d744 	.word	0x2000d744
 8007d98:	2000d75c 	.word	0x2000d75c

08007d9c <bmi088_set_offset>:
  * @brief  bmi088 get gyrp offset
  * @param
  * @retval error code
  */
uint8_t bmi088_set_offset(void)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b088      	sub	sp, #32
 8007da0:	af00      	add	r7, sp, #0

    float gyro[3], accel[3];

    for (int i = 0; i < 300; i++)
 8007da2:	2300      	movs	r3, #0
 8007da4:	61fb      	str	r3, [r7, #28]
 8007da6:	e048      	b.n	8007e3a <bmi088_set_offset+0x9e>
    {
        BMI088_Read(gyro, accel, &temperature);
 8007da8:	1d39      	adds	r1, r7, #4
 8007daa:	f107 0310 	add.w	r3, r7, #16
 8007dae:	4a4d      	ldr	r2, [pc, #308]	; (8007ee4 <bmi088_set_offset+0x148>)
 8007db0:	4618      	mov	r0, r3
 8007db2:	f7ff fd61 	bl	8007878 <BMI088_Read>
        gyro_offset[0] += gyro[0];
 8007db6:	4b4c      	ldr	r3, [pc, #304]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007db8:	ed93 7a00 	vldr	s14, [r3]
 8007dbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8007dc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dc4:	4b48      	ldr	r3, [pc, #288]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007dc6:	edc3 7a00 	vstr	s15, [r3]
        gyro_offset[1] += gyro[1];
 8007dca:	4b47      	ldr	r3, [pc, #284]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007dcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8007dd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8007dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dd8:	4b43      	ldr	r3, [pc, #268]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007dda:	edc3 7a01 	vstr	s15, [r3, #4]
        gyro_offset[2] += gyro[2];
 8007dde:	4b42      	ldr	r3, [pc, #264]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007de0:	ed93 7a02 	vldr	s14, [r3, #8]
 8007de4:	edd7 7a06 	vldr	s15, [r7, #24]
 8007de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007dec:	4b3e      	ldr	r3, [pc, #248]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007dee:	edc3 7a02 	vstr	s15, [r3, #8]

        accel_offset[0] += accel[0];
 8007df2:	4b3e      	ldr	r3, [pc, #248]	; (8007eec <bmi088_set_offset+0x150>)
 8007df4:	ed93 7a00 	vldr	s14, [r3]
 8007df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8007dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e00:	4b3a      	ldr	r3, [pc, #232]	; (8007eec <bmi088_set_offset+0x150>)
 8007e02:	edc3 7a00 	vstr	s15, [r3]
        accel_offset[1] += accel[1];
 8007e06:	4b39      	ldr	r3, [pc, #228]	; (8007eec <bmi088_set_offset+0x150>)
 8007e08:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8007e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e14:	4b35      	ldr	r3, [pc, #212]	; (8007eec <bmi088_set_offset+0x150>)
 8007e16:	edc3 7a01 	vstr	s15, [r3, #4]
        accel_offset[2] += accel[2];
 8007e1a:	4b34      	ldr	r3, [pc, #208]	; (8007eec <bmi088_set_offset+0x150>)
 8007e1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e20:	edd7 7a03 	vldr	s15, [r7, #12]
 8007e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e28:	4b30      	ldr	r3, [pc, #192]	; (8007eec <bmi088_set_offset+0x150>)
 8007e2a:	edc3 7a02 	vstr	s15, [r3, #8]

        /* delay a given period */
        osDelay(3);
 8007e2e:	2003      	movs	r0, #3
 8007e30:	f006 fd91 	bl	800e956 <osDelay>
    for (int i = 0; i < 300; i++)
 8007e34:	69fb      	ldr	r3, [r7, #28]
 8007e36:	3301      	adds	r3, #1
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8007e40:	dbb2      	blt.n	8007da8 <bmi088_set_offset+0xc>
    }

    gyro_offset[0] = gyro_offset[0] / 300;
 8007e42:	4b29      	ldr	r3, [pc, #164]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007e44:	ed93 7a00 	vldr	s14, [r3]
 8007e48:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007ef0 <bmi088_set_offset+0x154>
 8007e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e50:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007e52:	edc3 7a00 	vstr	s15, [r3]
    gyro_offset[1] = gyro_offset[1] / 300;
 8007e56:	4b24      	ldr	r3, [pc, #144]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007e58:	ed93 7a01 	vldr	s14, [r3, #4]
 8007e5c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007ef0 <bmi088_set_offset+0x154>
 8007e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e64:	4b20      	ldr	r3, [pc, #128]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007e66:	edc3 7a01 	vstr	s15, [r3, #4]
    gyro_offset[2] = gyro_offset[2] / 300;
 8007e6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007e6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8007e70:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007ef0 <bmi088_set_offset+0x154>
 8007e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e78:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <bmi088_set_offset+0x14c>)
 8007e7a:	edc3 7a02 	vstr	s15, [r3, #8]

    accel_offset[0] += accel_offset[0] / 300;
 8007e7e:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <bmi088_set_offset+0x150>)
 8007e80:	ed93 7a00 	vldr	s14, [r3]
 8007e84:	4b19      	ldr	r3, [pc, #100]	; (8007eec <bmi088_set_offset+0x150>)
 8007e86:	edd3 6a00 	vldr	s13, [r3]
 8007e8a:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8007ef0 <bmi088_set_offset+0x154>
 8007e8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e96:	4b15      	ldr	r3, [pc, #84]	; (8007eec <bmi088_set_offset+0x150>)
 8007e98:	edc3 7a00 	vstr	s15, [r3]
	accel_offset[1] += accel_offset[1] / 300;
 8007e9c:	4b13      	ldr	r3, [pc, #76]	; (8007eec <bmi088_set_offset+0x150>)
 8007e9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007ea2:	4b12      	ldr	r3, [pc, #72]	; (8007eec <bmi088_set_offset+0x150>)
 8007ea4:	edd3 6a01 	vldr	s13, [r3, #4]
 8007ea8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 8007ef0 <bmi088_set_offset+0x154>
 8007eac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007eb4:	4b0d      	ldr	r3, [pc, #52]	; (8007eec <bmi088_set_offset+0x150>)
 8007eb6:	edc3 7a01 	vstr	s15, [r3, #4]
	accel_offset[2] += accel_offset[2] / 300;
 8007eba:	4b0c      	ldr	r3, [pc, #48]	; (8007eec <bmi088_set_offset+0x150>)
 8007ebc:	ed93 7a02 	vldr	s14, [r3, #8]
 8007ec0:	4b0a      	ldr	r3, [pc, #40]	; (8007eec <bmi088_set_offset+0x150>)
 8007ec2:	edd3 6a02 	vldr	s13, [r3, #8]
 8007ec6:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8007ef0 <bmi088_set_offset+0x154>
 8007eca:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007ece:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ed2:	4b06      	ldr	r3, [pc, #24]	; (8007eec <bmi088_set_offset+0x150>)
 8007ed4:	edc3 7a02 	vstr	s15, [r3, #8]

    return 0;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3720      	adds	r7, #32
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000528 	.word	0x20000528
 8007ee8:	2000d768 	.word	0x2000d768
 8007eec:	2000d738 	.word	0x2000d738
 8007ef0:	43960000 	.word	0x43960000

08007ef4 <bmi088_get_offset>:

uint8_t bmi088_get_offset(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
    size_t read_len = 0;
 8007efa:	2300      	movs	r3, #0
 8007efc:	607b      	str	r3, [r7, #4]
    if (read_len == sizeof(gyro_offset))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2b0c      	cmp	r3, #12
 8007f02:	d101      	bne.n	8007f08 <bmi088_get_offset+0x14>
    {
        /* read ok */
        return 0;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e002      	b.n	8007f0e <bmi088_get_offset+0x1a>
    }
    else
    {
        bmi088_set_offset();
 8007f08:	f7ff ff48 	bl	8007d9c <bmi088_set_offset>
    }

    return 0;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
	...

08007f18 <bmi088_cali_slove>:

static void bmi088_cali_slove(float gyro[3], float accel[3], bmi088_real_data_t *bmi088)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b087      	sub	sp, #28
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	60f8      	str	r0, [r7, #12]
 8007f20:	60b9      	str	r1, [r7, #8]
 8007f22:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < 3; i++)
 8007f24:	2300      	movs	r3, #0
 8007f26:	75fb      	strb	r3, [r7, #23]
 8007f28:	e07e      	b.n	8008028 <bmi088_cali_slove+0x110>
    {
        gyro[i] = bmi088->gyro[0] * gyro_scale_factor[i][0] + bmi088->gyro[1] * gyro_scale_factor[i][1] + bmi088->gyro[2] * gyro_scale_factor[i][2] - gyro_offset[i];
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	ed93 7a05 	vldr	s14, [r3, #20]
 8007f30:	7dfa      	ldrb	r2, [r7, #23]
 8007f32:	4943      	ldr	r1, [pc, #268]	; (8008040 <bmi088_cali_slove+0x128>)
 8007f34:	4613      	mov	r3, r2
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	4413      	add	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	edd3 7a00 	vldr	s15, [r3]
 8007f42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	edd3 6a06 	vldr	s13, [r3, #24]
 8007f4c:	7dfa      	ldrb	r2, [r7, #23]
 8007f4e:	493c      	ldr	r1, [pc, #240]	; (8008040 <bmi088_cali_slove+0x128>)
 8007f50:	4613      	mov	r3, r2
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	edd3 7a00 	vldr	s15, [r3]
 8007f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	edd3 6a07 	vldr	s13, [r3, #28]
 8007f6e:	7dfa      	ldrb	r2, [r7, #23]
 8007f70:	4933      	ldr	r1, [pc, #204]	; (8008040 <bmi088_cali_slove+0x128>)
 8007f72:	4613      	mov	r3, r2
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3308      	adds	r3, #8
 8007f7e:	edd3 7a00 	vldr	s15, [r3]
 8007f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007f86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
 8007f8c:	4a2d      	ldr	r2, [pc, #180]	; (8008044 <bmi088_cali_slove+0x12c>)
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	4413      	add	r3, r2
 8007f92:	edd3 7a00 	vldr	s15, [r3]
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007fa2:	edc3 7a00 	vstr	s15, [r3]
        accel[i] = bmi088->accel[0] * accel_scale_factor[i][0] + bmi088->accel[1] * accel_scale_factor[i][1] + bmi088->accel[2] * accel_scale_factor[i][2] - accel_offset[i];
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	ed93 7a01 	vldr	s14, [r3, #4]
 8007fac:	7dfa      	ldrb	r2, [r7, #23]
 8007fae:	4926      	ldr	r1, [pc, #152]	; (8008048 <bmi088_cali_slove+0x130>)
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	edd3 7a00 	vldr	s15, [r3]
 8007fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	edd3 6a02 	vldr	s13, [r3, #8]
 8007fc8:	7dfa      	ldrb	r2, [r7, #23]
 8007fca:	491f      	ldr	r1, [pc, #124]	; (8008048 <bmi088_cali_slove+0x130>)
 8007fcc:	4613      	mov	r3, r2
 8007fce:	005b      	lsls	r3, r3, #1
 8007fd0:	4413      	add	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	440b      	add	r3, r1
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	edd3 7a00 	vldr	s15, [r3]
 8007fdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	edd3 6a03 	vldr	s13, [r3, #12]
 8007fea:	7dfa      	ldrb	r2, [r7, #23]
 8007fec:	4916      	ldr	r1, [pc, #88]	; (8008048 <bmi088_cali_slove+0x130>)
 8007fee:	4613      	mov	r3, r2
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	4413      	add	r3, r2
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	440b      	add	r3, r1
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	edd3 7a00 	vldr	s15, [r3]
 8007ffe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008006:	7dfb      	ldrb	r3, [r7, #23]
 8008008:	4a10      	ldr	r2, [pc, #64]	; (800804c <bmi088_cali_slove+0x134>)
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	edd3 7a00 	vldr	s15, [r3]
 8008012:	7dfb      	ldrb	r3, [r7, #23]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4413      	add	r3, r2
 800801a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800801e:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 3; i++)
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	3301      	adds	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
 8008028:	7dfb      	ldrb	r3, [r7, #23]
 800802a:	2b02      	cmp	r3, #2
 800802c:	f67f af7d 	bls.w	8007f2a <bmi088_cali_slove+0x12>
    }
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	2000003c 	.word	0x2000003c
 8008044:	2000d768 	.word	0x2000d768
 8008048:	20000060 	.word	0x20000060
 800804c:	2000d738 	.word	0x2000d738

08008050 <uc_rx_pack_init>:
#include "auto_aim.h"

/* define the global UC pack */
UC_Recv_Pack_t uc_rx_pack;

void uc_rx_pack_init(UC_Recv_Pack_t *uc_rx_pack){
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	/* header */
	uc_rx_pack->header = 0;           // 1 byte
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	701a      	strb	r2, [r3, #0]

	/* auto aiming */
	uc_rx_pack->delta_yaw = 0.0;	   // 4 bytes
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	605a      	str	r2, [r3, #4]
	uc_rx_pack->delta_pitch = 0.0;	   // 4 bytes
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f04f 0200 	mov.w	r2, #0
 800806c:	609a      	str	r2, [r3, #8]
	uc_rx_pack->target_num=-1;       // 1 byte
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	22ff      	movs	r2, #255	; 0xff
 8008072:	731a      	strb	r2, [r3, #12]

	/* checksum calibration */
	uc_rx_pack->checksum= 0;           // 2 bytes
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	81da      	strh	r2, [r3, #14]
}
 800807a:	bf00      	nop
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <calculate_checksum>:

uint16_t calculate_checksum(const char data[], size_t length){
 8008086:	b480      	push	{r7}
 8008088:	b085      	sub	sp, #20
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
	uint16_t checksum = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	81fb      	strh	r3, [r7, #14]
	for (size_t i = UC_RX_READ_START; i < length; i++){
 8008094:	2301      	movs	r3, #1
 8008096:	60bb      	str	r3, [r7, #8]
 8008098:	e00a      	b.n	80080b0 <calculate_checksum+0x2a>
		checksum += (uint8_t)data[i];  // Cast to unsigned char to ensure correct addition
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4413      	add	r3, r2
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	89fb      	ldrh	r3, [r7, #14]
 80080a6:	4413      	add	r3, r2
 80080a8:	81fb      	strh	r3, [r7, #14]
	for (size_t i = UC_RX_READ_START; i < length; i++){
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60bb      	str	r3, [r7, #8]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d3f0      	bcc.n	800809a <calculate_checksum+0x14>
	}
	checksum = checksum % 256;
 80080b8:	89fb      	ldrh	r3, [r7, #14]
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	81fb      	strh	r3, [r7, #14]
	return checksum;  // Return a value in the range [0, 255]
 80080be:	89fb      	ldrh	r3, [r7, #14]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <uc_parse_recv_packet>:

uint8_t uc_parse_recv_packet(const char recv_pack[], UC_Recv_Pack_t *uc_rx_pack) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	uc_rx_pack->header = recv_pack[0];
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	701a      	strb	r2, [r3, #0]
	if (uc_rx_pack->header != 0x1A) { // header was hard-coding
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b1a      	cmp	r3, #26
 80080e4:	d001      	beq.n	80080ea <uc_parse_recv_packet+0x1e>
		return -1; //header failed, drop the pack
 80080e6:	23ff      	movs	r3, #255	; 0xff
 80080e8:	e02d      	b.n	8008146 <uc_parse_recv_packet+0x7a>
	}

	// assuming little-endian byte order
	uc_rx_pack->delta_yaw = *((float*)(recv_pack + 1));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3301      	adds	r3, #1
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	605a      	str	r2, [r3, #4]
	uc_rx_pack->delta_pitch = *((float*)(recv_pack + 5));
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	3305      	adds	r3, #5
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	609a      	str	r2, [r3, #8]
	uc_rx_pack->target_num = recv_pack[9];
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3309      	adds	r3, #9
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	b25a      	sxtb	r2, r3
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	731a      	strb	r2, [r3, #12]
	uc_rx_pack->checksum = (recv_pack[10] << 8) | recv_pack[11];
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	330a      	adds	r3, #10
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	021b      	lsls	r3, r3, #8
 8008112:	b21a      	sxth	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	330b      	adds	r3, #11
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	b21b      	sxth	r3, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	b21b      	sxth	r3, r3
 8008120:	b29a      	uxth	r2, r3
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	81da      	strh	r2, [r3, #14]

	// calculate and compare checksum
	uint16_t calculated_checksum = calculate_checksum(recv_pack, UC_RX_DATALEN);  // exclude the checksum field itself
 8008126:	210a      	movs	r1, #10
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f7ff ffac 	bl	8008086 <calculate_checksum>
 800812e:	4603      	mov	r3, r0
 8008130:	81fb      	strh	r3, [r7, #14]
	if (calculated_checksum != (uc_rx_pack->checksum % 256)) {
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	89db      	ldrh	r3, [r3, #14]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	b29b      	uxth	r3, r3
 800813a:	89fa      	ldrh	r2, [r7, #14]
 800813c:	429a      	cmp	r2, r3
 800813e:	d001      	beq.n	8008144 <uc_parse_recv_packet+0x78>
		return -1; // check failed, drop the pack
 8008140:	23ff      	movs	r3, #255	; 0xff
 8008142:	e000      	b.n	8008146 <uc_parse_recv_packet+0x7a>
	}
	else {
		return 0; // check successfully
 8008144:	2300      	movs	r3, #0
	}
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <gimbal_angle_message_init>:
/* define vars here */
//Comm_t comm_pack;

/* declare all used message */
/* init comm for gimbal angle info */
void gimbal_angle_message_init(CommMessageUnion_t *cmu){
 800814e:	b480      	push	{r7}
 8008150:	b085      	sub	sp, #20
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<4;i++)
 8008156:	2300      	movs	r3, #0
 8008158:	73fb      	strb	r3, [r7, #15]
 800815a:	e009      	b.n	8008170 <gimbal_angle_message_init+0x22>
		cmu->comm_ga.angle_data[i] = 0.0f;
 800815c:	7bfb      	ldrb	r3, [r7, #15]
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	4413      	add	r3, r2
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0;i<4;i++)
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	3301      	adds	r3, #1
 800816e:	73fb      	strb	r3, [r7, #15]
 8008170:	7bfb      	ldrb	r3, [r7, #15]
 8008172:	2b03      	cmp	r3, #3
 8008174:	d9f2      	bls.n	800815c <gimbal_angle_message_init+0xe>
	cmu->comm_ga.send_flag = 0;//reset flag
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	741a      	strb	r2, [r3, #16]
}
 800817c:	bf00      	nop
 800817e:	3714      	adds	r7, #20
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <rc_message_init>:
    .message_type = COMM_GIMBAL_ANGLE,
    .init = gimbal_angle_message_init
};

/* init comm for rc info */
void rc_message_init(CommMessageUnion_t *cmu){
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<2;i++)
 8008190:	2300      	movs	r3, #0
 8008192:	73fb      	strb	r3, [r7, #15]
 8008194:	e007      	b.n	80081a6 <rc_message_init+0x1e>
		cmu->comm_rc.rc_data[i] = 0;
 8008196:	7bfa      	ldrb	r2, [r7, #15]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2100      	movs	r1, #0
 800819c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i=0;i<2;i++)
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	3301      	adds	r3, #1
 80081a4:	73fb      	strb	r3, [r7, #15]
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d9f4      	bls.n	8008196 <rc_message_init+0xe>
	cmu->comm_rc.rc_data[2] = SW_MID;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2203      	movs	r2, #3
 80081b0:	809a      	strh	r2, [r3, #4]
	cmu->comm_rc.rc_data[3] = SW_MID;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2203      	movs	r2, #3
 80081b6:	80da      	strh	r2, [r3, #6]
	cmu->comm_rc.send_flag = 0;//reset flag
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	721a      	strb	r2, [r3, #8]
}
 80081be:	bf00      	nop
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <pc_message_init>:
    .message_type = COMM_REMOTE_CONTROL,
    .init = rc_message_init
};

/* init comm for pc info */
void pc_message_init(CommMessageUnion_t *cmu){
 80081ca:	b480      	push	{r7}
 80081cc:	b085      	sub	sp, #20
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
	for(uint8_t i=0;i<2;i++)
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]
 80081d6:	e007      	b.n	80081e8 <pc_message_init+0x1e>
		cmu->comm_pc.pc_data[i] = 0;
 80081d8:	7bfa      	ldrb	r2, [r7, #15]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2100      	movs	r1, #0
 80081de:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i=0;i<2;i++)
 80081e2:	7bfb      	ldrb	r3, [r7, #15]
 80081e4:	3301      	adds	r3, #1
 80081e6:	73fb      	strb	r3, [r7, #15]
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d9f4      	bls.n	80081d8 <pc_message_init+0xe>
	cmu->comm_pc.pc_data[2] = RELEASED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	809a      	strh	r2, [r3, #4]
	cmu->comm_pc.pc_data[3] = RELEASED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	80da      	strh	r2, [r3, #6]
	cmu->comm_pc.send_flag = 0;//reset flag
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	721a      	strb	r2, [r3, #8]
}
 8008200:	bf00      	nop
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <pc_ext_message_init>:
CommMessage_t pc_message = {
    .message_type = COMM_PC_CONTROL,
    .init = pc_message_init
};

void pc_ext_message_init(CommMessageUnion_t *cmu){
 800820c:	b480      	push	{r7}
 800820e:	b085      	sub	sp, #20
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0;i<3; i++)
 8008214:	2300      	movs	r3, #0
 8008216:	73fb      	strb	r3, [r7, #15]
 8008218:	e007      	b.n	800822a <pc_ext_message_init+0x1e>
		cmu->comm_ext_pc.pc_data[i] = RELEASED;
 800821a:	7bfa      	ldrb	r2, [r7, #15]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2100      	movs	r1, #0
 8008220:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0;i<3; i++)
 8008224:	7bfb      	ldrb	r3, [r7, #15]
 8008226:	3301      	adds	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
 800822a:	7bfb      	ldrb	r3, [r7, #15]
 800822c:	2b02      	cmp	r3, #2
 800822e:	d9f4      	bls.n	800821a <pc_ext_message_init+0xe>
	cmu->comm_ext_pc.send_flag = 0;//reset flag
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	719a      	strb	r2, [r3, #6]
}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <ref_message_init>:
    .init = pc_ext_message_init
};


/* init comm for referee info */
void ref_message_init(CommMessageUnion_t* cmu){
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
	/* not implement yet */
	return;
 800824a:	bf00      	nop
}
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <vision_message_init>:
    .message_type = COMM_REFEREE,
    .init = ref_message_init
};

/* init comm for computer vision massage info */
void vision_message_init(CommMessageUnion_t* cmu){
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
	/* not implement yet */
	return;
 800825e:	bf00      	nop
}
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <comm_subscribe>:
 * @brief 	  comm message subscribe function
 * @param[in] sub: comm message subscribe list
 * @param[in] msgType: comm message type
 * @retval    None
 */
void comm_subscribe(CommMessageSublist_t *sub, CommMessageType_t msgType, CommRole_t role) {
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
 8008278:	4613      	mov	r3, r2
 800827a:	70bb      	strb	r3, [r7, #2]
    /* update subscription list */
    sub->sub_list |= msgType;//use mask to set bit
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	881a      	ldrh	r2, [r3, #0]
 8008280:	78fb      	ldrb	r3, [r7, #3]
 8008282:	b29b      	uxth	r3, r3
 8008284:	4313      	orrs	r3, r2
 8008286:	b29a      	uxth	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	801a      	strh	r2, [r3, #0]
    sub->sub_list_num++;			//total num plus one
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	885b      	ldrh	r3, [r3, #2]
 8008290:	3301      	adds	r3, #1
 8008292:	b29a      	uxth	r2, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	805a      	strh	r2, [r3, #2]

    /* call the appropriate init function */
    switch (msgType) {
 8008298:	78fb      	ldrb	r3, [r7, #3]
 800829a:	3b01      	subs	r3, #1
 800829c:	2b1f      	cmp	r3, #31
 800829e:	d873      	bhi.n	8008388 <comm_subscribe+0x11c>
 80082a0:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <comm_subscribe+0x3c>)
 80082a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a6:	bf00      	nop
 80082a8:	08008329 	.word	0x08008329
 80082ac:	08008339 	.word	0x08008339
 80082b0:	08008389 	.word	0x08008389
 80082b4:	08008349 	.word	0x08008349
 80082b8:	08008389 	.word	0x08008389
 80082bc:	08008389 	.word	0x08008389
 80082c0:	08008389 	.word	0x08008389
 80082c4:	08008369 	.word	0x08008369
 80082c8:	08008389 	.word	0x08008389
 80082cc:	08008389 	.word	0x08008389
 80082d0:	08008389 	.word	0x08008389
 80082d4:	08008389 	.word	0x08008389
 80082d8:	08008389 	.word	0x08008389
 80082dc:	08008389 	.word	0x08008389
 80082e0:	08008389 	.word	0x08008389
 80082e4:	08008379 	.word	0x08008379
 80082e8:	08008389 	.word	0x08008389
 80082ec:	08008389 	.word	0x08008389
 80082f0:	08008389 	.word	0x08008389
 80082f4:	08008389 	.word	0x08008389
 80082f8:	08008389 	.word	0x08008389
 80082fc:	08008389 	.word	0x08008389
 8008300:	08008389 	.word	0x08008389
 8008304:	08008389 	.word	0x08008389
 8008308:	08008389 	.word	0x08008389
 800830c:	08008389 	.word	0x08008389
 8008310:	08008389 	.word	0x08008389
 8008314:	08008389 	.word	0x08008389
 8008318:	08008389 	.word	0x08008389
 800831c:	08008389 	.word	0x08008389
 8008320:	08008389 	.word	0x08008389
 8008324:	08008359 	.word	0x08008359
        case COMM_GIMBAL_ANGLE:
        	gimbal_angle_message.role = role;
 8008328:	4a19      	ldr	r2, [pc, #100]	; (8008390 <comm_subscribe+0x124>)
 800832a:	78bb      	ldrb	r3, [r7, #2]
 800832c:	7053      	strb	r3, [r2, #1]
            gimbal_angle_message.init(&(gimbal_angle_message.message));
 800832e:	4b18      	ldr	r3, [pc, #96]	; (8008390 <comm_subscribe+0x124>)
 8008330:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008332:	4818      	ldr	r0, [pc, #96]	; (8008394 <comm_subscribe+0x128>)
 8008334:	4798      	blx	r3
            break;
 8008336:	e027      	b.n	8008388 <comm_subscribe+0x11c>
        case COMM_REMOTE_CONTROL:
        	rc_message.role = role;
 8008338:	4a17      	ldr	r2, [pc, #92]	; (8008398 <comm_subscribe+0x12c>)
 800833a:	78bb      	ldrb	r3, [r7, #2]
 800833c:	7053      	strb	r3, [r2, #1]
            rc_message.init(&(rc_message.message));
 800833e:	4b16      	ldr	r3, [pc, #88]	; (8008398 <comm_subscribe+0x12c>)
 8008340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008342:	4816      	ldr	r0, [pc, #88]	; (800839c <comm_subscribe+0x130>)
 8008344:	4798      	blx	r3
            break;
 8008346:	e01f      	b.n	8008388 <comm_subscribe+0x11c>
        case COMM_PC_CONTROL:
			pc_message.role = role;
 8008348:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <comm_subscribe+0x134>)
 800834a:	78bb      	ldrb	r3, [r7, #2]
 800834c:	7053      	strb	r3, [r2, #1]
			pc_message.init(&(pc_message.message));
 800834e:	4b14      	ldr	r3, [pc, #80]	; (80083a0 <comm_subscribe+0x134>)
 8008350:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008352:	4814      	ldr	r0, [pc, #80]	; (80083a4 <comm_subscribe+0x138>)
 8008354:	4798      	blx	r3
			break;
 8008356:	e017      	b.n	8008388 <comm_subscribe+0x11c>
        case COMM_EXT_PC_CONTROL:
        	pc_ext_message.role = role;
 8008358:	4a13      	ldr	r2, [pc, #76]	; (80083a8 <comm_subscribe+0x13c>)
 800835a:	78bb      	ldrb	r3, [r7, #2]
 800835c:	7053      	strb	r3, [r2, #1]
        	pc_ext_message.init(&(pc_ext_message.message));
 800835e:	4b12      	ldr	r3, [pc, #72]	; (80083a8 <comm_subscribe+0x13c>)
 8008360:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008362:	4812      	ldr	r0, [pc, #72]	; (80083ac <comm_subscribe+0x140>)
 8008364:	4798      	blx	r3
        	break;
 8008366:	e00f      	b.n	8008388 <comm_subscribe+0x11c>
        case COMM_REFEREE:
        	ref_message.role = role;
 8008368:	4a11      	ldr	r2, [pc, #68]	; (80083b0 <comm_subscribe+0x144>)
 800836a:	78bb      	ldrb	r3, [r7, #2]
 800836c:	7053      	strb	r3, [r2, #1]
            ref_message.init(&(ref_message.message));
 800836e:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <comm_subscribe+0x144>)
 8008370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008372:	4810      	ldr	r0, [pc, #64]	; (80083b4 <comm_subscribe+0x148>)
 8008374:	4798      	blx	r3
            break;
 8008376:	e007      	b.n	8008388 <comm_subscribe+0x11c>
        case COMM_VISION:
        	vision_message.role = role;
 8008378:	4a0f      	ldr	r2, [pc, #60]	; (80083b8 <comm_subscribe+0x14c>)
 800837a:	78bb      	ldrb	r3, [r7, #2]
 800837c:	7053      	strb	r3, [r2, #1]
            vision_message.init(&(vision_message.message));
 800837e:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <comm_subscribe+0x14c>)
 8008380:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008382:	480e      	ldr	r0, [pc, #56]	; (80083bc <comm_subscribe+0x150>)
 8008384:	4798      	blx	r3
            break;
 8008386:	bf00      	nop
    }
}
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000084 	.word	0x20000084
 8008394:	20000088 	.word	0x20000088
 8008398:	200000ec 	.word	0x200000ec
 800839c:	200000f0 	.word	0x200000f0
 80083a0:	20000154 	.word	0x20000154
 80083a4:	20000158 	.word	0x20000158
 80083a8:	200001bc 	.word	0x200001bc
 80083ac:	200001c0 	.word	0x200001c0
 80083b0:	20000224 	.word	0x20000224
 80083b4:	20000228 	.word	0x20000228
 80083b8:	2000028c 	.word	0x2000028c
 80083bc:	20000290 	.word	0x20000290

080083c0 <isSubscribed>:

CommSubscribeStatus_t isSubscribed(CommMessageSublist_t *sub, CommMessageType_t msgType){
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	70fb      	strb	r3, [r7, #3]
     if((sub->sub_list & msgType) != 0)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	881b      	ldrh	r3, [r3, #0]
 80083d0:	461a      	mov	r2, r3
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	4013      	ands	r3, r2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d001      	beq.n	80083de <isSubscribed+0x1e>
    	 return SUB_SUCCESS;
 80083da:	2300      	movs	r3, #0
 80083dc:	e000      	b.n	80083e0 <isSubscribed+0x20>
     else
    	 return SUB_FAIL;
 80083de:	2301      	movs	r3, #1
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <referee_init>:
/**
  * @brief     init ref sys struct
  * @param[in] main ref struct
  * @retval    None
  */
void referee_init(Referee_t *ref){
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b082      	sub	sp, #8
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]

	memset(&(ref->header), 0, sizeof(frame_header_t));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2205      	movs	r2, #5
 80083f8:	2100      	movs	r1, #0
 80083fa:	4618      	mov	r0, r3
 80083fc:	f007 ff64 	bl	80102c8 <memset>

	memset(&(ref->game_status_data),  0, sizeof(game_status_t));
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	332e      	adds	r3, #46	; 0x2e
 8008404:	220b      	movs	r2, #11
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f007 ff5d 	bl	80102c8 <memset>
	memset(&(ref->HP_data), 		  0, sizeof(game_robot_HP_t));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3339      	adds	r3, #57	; 0x39
 8008412:	2220      	movs	r2, #32
 8008414:	2100      	movs	r1, #0
 8008416:	4618      	mov	r0, r3
 8008418:	f007 ff56 	bl	80102c8 <memset>
	memset(&(ref->robot_status_data), 0, sizeof(robot_status_t));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	3359      	adds	r3, #89	; 0x59
 8008420:	221b      	movs	r2, #27
 8008422:	2100      	movs	r1, #0
 8008424:	4618      	mov	r0, r3
 8008426:	f007 ff4f 	bl	80102c8 <memset>
	memset(&(ref->power_heat_data),   0, sizeof(power_heat_data_t));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	3374      	adds	r3, #116	; 0x74
 800842e:	2210      	movs	r2, #16
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f007 ff48 	bl	80102c8 <memset>
	memset(&(ref->shoot_data), 		  0, sizeof(shoot_data_t));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3384      	adds	r3, #132	; 0x84
 800843c:	2207      	movs	r2, #7
 800843e:	2100      	movs	r1, #0
 8008440:	4618      	mov	r0, r3
 8008442:	f007 ff41 	bl	80102c8 <memset>
	memset(&(ref->ui_intrect_data),   0, sizeof(robot_interaction_data_t));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	338b      	adds	r3, #139	; 0x8b
 800844a:	2277      	movs	r2, #119	; 0x77
 800844c:	2100      	movs	r1, #0
 800844e:	4618      	mov	r0, r3
 8008450:	f007 ff3a 	bl	80102c8 <memset>
	memset(&(ref->custom_robot_data), 0, sizeof(custom_robot_data_t));
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f503 7381 	add.w	r3, r3, #258	; 0x102
 800845a:	221e      	movs	r2, #30
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f007 ff32 	bl	80102c8 <memset>
}
 8008464:	bf00      	nop
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <referee_read_data>:
  * @brief     init ref sys struct
  * @param[in] main ref struct
  * @param[in] received frame (array) from ref sys // abodoned, directly copy within uart3 dma
  * @retval    None
  */
void referee_read_data(Referee_t *ref, uint8_t *rx_frame){
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]

	referee_parsed_flag = 0;
 8008476:	4b40      	ldr	r3, [pc, #256]	; (8008578 <referee_read_data+0x10c>)
 8008478:	2200      	movs	r2, #0
 800847a:	801a      	strh	r2, [r3, #0]

	if (rx_frame == NULL) {
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d075      	beq.n	800856e <referee_read_data+0x102>
		// frame is NULL, return
		return;
	}
	/* copy frame header */
	memcpy(&ref->header, rx_frame, HEADER_LEN);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2205      	movs	r2, #5
 8008486:	6839      	ldr	r1, [r7, #0]
 8008488:	4618      	mov	r0, r3
 800848a:	f007 ff0f 	bl	80102ac <memcpy>

	/* frame header CRC8 verification */
	if(ref->header.sof == SOF_ID && Verify_CRC8_Check_Sum(&(ref->header), HEADER_LEN) == 1){
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2ba5      	cmp	r3, #165	; 0xa5
 8008494:	d10d      	bne.n	80084b2 <referee_read_data+0x46>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2105      	movs	r1, #5
 800849a:	4618      	mov	r0, r3
 800849c:	f7fa fa8e 	bl	80029bc <Verify_CRC8_Check_Sum>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d105      	bne.n	80084b2 <referee_read_data+0x46>
		/* successfully verified */
		ref->ref_cmd_id = *(uint16_t *)(rx_frame + HEADER_LEN); //point to the addr of the cmd id
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	3305      	adds	r3, #5
 80084aa:	881a      	ldrh	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
	}
	//uint8_t ref_data_index = HEADER_LEN + CMD_LEN;// an index value pointed to current data addr
	memcpy(ref->ref_data, rx_frame + HEADER_LEN + CMD_LEN, sizeof(ref->ref_data));//pointer to the beginning of the data addr
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	1d58      	adds	r0, r3, #5
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	3307      	adds	r3, #7
 80084ba:	2229      	movs	r2, #41	; 0x29
 80084bc:	4619      	mov	r1, r3
 80084be:	f007 fef5 	bl	80102ac <memcpy>


	/* parse the frame and get referee data */
	switch(ref->ref_cmd_id){
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	f240 2207 	movw	r2, #519	; 0x207
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d03f      	beq.n	8008552 <referee_read_data+0xe6>
 80084d2:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80084d6:	da46      	bge.n	8008566 <referee_read_data+0xfa>
 80084d8:	f240 2202 	movw	r2, #514	; 0x202
 80084dc:	4293      	cmp	r3, r2
 80084de:	d02e      	beq.n	800853e <referee_read_data+0xd2>
 80084e0:	f240 2202 	movw	r2, #514	; 0x202
 80084e4:	4293      	cmp	r3, r2
 80084e6:	dc3e      	bgt.n	8008566 <referee_read_data+0xfa>
 80084e8:	f240 2201 	movw	r2, #513	; 0x201
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d01c      	beq.n	800852a <referee_read_data+0xbe>
 80084f0:	f240 2201 	movw	r2, #513	; 0x201
 80084f4:	4293      	cmp	r3, r2
 80084f6:	dc36      	bgt.n	8008566 <referee_read_data+0xfa>
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d002      	beq.n	8008502 <referee_read_data+0x96>
 80084fc:	2b03      	cmp	r3, #3
 80084fe:	d00a      	beq.n	8008516 <referee_read_data+0xaa>
 8008500:	e031      	b.n	8008566 <referee_read_data+0xfa>
		case GAME_STAT_ID: {
			memcpy(&(ref->game_status_data), ref->ref_data, sizeof(game_status_t));break;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3305      	adds	r3, #5
 800850c:	220b      	movs	r2, #11
 800850e:	4619      	mov	r1, r3
 8008510:	f007 fecc 	bl	80102ac <memcpy>
 8008514:	e027      	b.n	8008566 <referee_read_data+0xfa>
		}
		case GMAE_HP_ID: {
			memcpy(&(ref->HP_data), ref->ref_data, sizeof(game_robot_HP_t));break;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3305      	adds	r3, #5
 8008520:	2220      	movs	r2, #32
 8008522:	4619      	mov	r1, r3
 8008524:	f007 fec2 	bl	80102ac <memcpy>
 8008528:	e01d      	b.n	8008566 <referee_read_data+0xfa>
		}
		case ROBOT_STAT_ID: {
			memcpy(&(ref->robot_status_data), ref->ref_data, sizeof(robot_status_t));break;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f103 0059 	add.w	r0, r3, #89	; 0x59
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	3305      	adds	r3, #5
 8008534:	221b      	movs	r2, #27
 8008536:	4619      	mov	r1, r3
 8008538:	f007 feb8 	bl	80102ac <memcpy>
 800853c:	e013      	b.n	8008566 <referee_read_data+0xfa>
		}
		case POWER_HEAT_ID: {
			memcpy(&(ref->power_heat_data), ref->ref_data, sizeof(power_heat_data_t));break;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3305      	adds	r3, #5
 8008548:	2210      	movs	r2, #16
 800854a:	4619      	mov	r1, r3
 800854c:	f007 feae 	bl	80102ac <memcpy>
 8008550:	e009      	b.n	8008566 <referee_read_data+0xfa>
		}
		case SHOOT_ID: {
			memcpy(&(ref->shoot_data), ref->ref_data, sizeof(shoot_data_t));break;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f103 0084 	add.w	r0, r3, #132	; 0x84
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3305      	adds	r3, #5
 800855c:	2207      	movs	r2, #7
 800855e:	4619      	mov	r1, r3
 8008560:	f007 fea4 	bl	80102ac <memcpy>
 8008564:	bf00      	nop
		}

	}

	referee_parsed_flag = 1;
 8008566:	4b04      	ldr	r3, [pc, #16]	; (8008578 <referee_read_data+0x10c>)
 8008568:	2201      	movs	r2, #1
 800856a:	801a      	strh	r2, [r3, #0]
 800856c:	e000      	b.n	8008570 <referee_read_data+0x104>
		return;
 800856e:	bf00      	nop
}
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	2000052c 	.word	0x2000052c

0800857c <self_check_system>:
/**
  * @brief    self-check system mian func
  * @param[in] motor id to be checked
  * @retval    SelfCheckStatus_t
  */
SelfCheckStatus_t self_check_system(){
 800857c:	b580      	push	{r7, lr}
 800857e:	af00      	add	r7, sp, #0
	/* motor check processes */
	if(board_status == CHASSIS_BOARD){
 8008580:	4b36      	ldr	r3, [pc, #216]	; (800865c <self_check_system+0xe0>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	2b01      	cmp	r3, #1
 8008586:	d137      	bne.n	80085f8 <self_check_system+0x7c>
		if(self_check_motors(wheel_id1) == CHECK_FAIL){
 8008588:	2000      	movs	r0, #0
 800858a:	f000 f86b 	bl	8008664 <self_check_motors>
 800858e:	4603      	mov	r3, r0
 8008590:	2b01      	cmp	r3, #1
 8008592:	d107      	bne.n	80085a4 <self_check_system+0x28>
			buzzer_alarm_times(1, TWO_SECOND_CNT, &buzzer);// 1 buzz per second
 8008594:	4a32      	ldr	r2, [pc, #200]	; (8008660 <self_check_system+0xe4>)
 8008596:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800859a:	2001      	movs	r0, #1
 800859c:	f7fe f936 	bl	800680c <buzzer_alarm_times>
			return CHECK_FAIL;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e058      	b.n	8008656 <self_check_system+0xda>
		}
		else if(self_check_motors(wheel_id2) == CHECK_FAIL){
 80085a4:	2001      	movs	r0, #1
 80085a6:	f000 f85d 	bl	8008664 <self_check_motors>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d107      	bne.n	80085c0 <self_check_system+0x44>
			buzzer_alarm_times(2, TWO_SECOND_CNT, &buzzer);// 2 buzz per second
 80085b0:	4a2b      	ldr	r2, [pc, #172]	; (8008660 <self_check_system+0xe4>)
 80085b2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80085b6:	2002      	movs	r0, #2
 80085b8:	f7fe f928 	bl	800680c <buzzer_alarm_times>
			return CHECK_FAIL;
 80085bc:	2301      	movs	r3, #1
 80085be:	e04a      	b.n	8008656 <self_check_system+0xda>
		}
		else if(self_check_motors(wheel_id3) == CHECK_FAIL){
 80085c0:	2002      	movs	r0, #2
 80085c2:	f000 f84f 	bl	8008664 <self_check_motors>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d107      	bne.n	80085dc <self_check_system+0x60>
			buzzer_alarm_times(3, TWO_SECOND_CNT, &buzzer);// 3 buzz per second
 80085cc:	4a24      	ldr	r2, [pc, #144]	; (8008660 <self_check_system+0xe4>)
 80085ce:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80085d2:	2003      	movs	r0, #3
 80085d4:	f7fe f91a 	bl	800680c <buzzer_alarm_times>
			return CHECK_FAIL;
 80085d8:	2301      	movs	r3, #1
 80085da:	e03c      	b.n	8008656 <self_check_system+0xda>
		}
		else if(self_check_motors(wheel_id4) == CHECK_FAIL){
 80085dc:	2003      	movs	r0, #3
 80085de:	f000 f841 	bl	8008664 <self_check_motors>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d135      	bne.n	8008654 <self_check_system+0xd8>
			buzzer_alarm_times(4, TWO_SECOND_CNT, &buzzer);// 4 buzz per second
 80085e8:	4a1d      	ldr	r2, [pc, #116]	; (8008660 <self_check_system+0xe4>)
 80085ea:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80085ee:	2004      	movs	r0, #4
 80085f0:	f7fe f90c 	bl	800680c <buzzer_alarm_times>
			return CHECK_FAIL;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e02e      	b.n	8008656 <self_check_system+0xda>
		}
	}
	else if(board_status == GIMBAL_BOARD){
 80085f8:	4b18      	ldr	r3, [pc, #96]	; (800865c <self_check_system+0xe0>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d129      	bne.n	8008654 <self_check_system+0xd8>
		if(self_check_motors(yaw_id) == CHECK_FAIL){
 8008600:	2004      	movs	r0, #4
 8008602:	f000 f82f 	bl	8008664 <self_check_motors>
 8008606:	4603      	mov	r3, r0
 8008608:	2b01      	cmp	r3, #1
 800860a:	d107      	bne.n	800861c <self_check_system+0xa0>
			buzzer_alarm_times(1, TWO_SECOND_CNT, &buzzer);// 1 buzz per second
 800860c:	4a14      	ldr	r2, [pc, #80]	; (8008660 <self_check_system+0xe4>)
 800860e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8008612:	2001      	movs	r0, #1
 8008614:	f7fe f8fa 	bl	800680c <buzzer_alarm_times>
			return CHECK_FAIL;
 8008618:	2301      	movs	r3, #1
 800861a:	e01c      	b.n	8008656 <self_check_system+0xda>
		}
		else if(self_check_motors(pitch_id) == CHECK_FAIL){
 800861c:	2005      	movs	r0, #5
 800861e:	f000 f821 	bl	8008664 <self_check_motors>
 8008622:	4603      	mov	r3, r0
 8008624:	2b01      	cmp	r3, #1
 8008626:	d107      	bne.n	8008638 <self_check_system+0xbc>
			buzzer_alarm_times(2, TWO_SECOND_CNT, &buzzer);// 2 buzz per second
 8008628:	4a0d      	ldr	r2, [pc, #52]	; (8008660 <self_check_system+0xe4>)
 800862a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800862e:	2002      	movs	r0, #2
 8008630:	f7fe f8ec 	bl	800680c <buzzer_alarm_times>
			return CHECK_FAIL;
 8008634:	2301      	movs	r3, #1
 8008636:	e00e      	b.n	8008656 <self_check_system+0xda>
		}
		else if(self_check_motors(mag_2006_id) == CHECK_FAIL){
 8008638:	2006      	movs	r0, #6
 800863a:	f000 f813 	bl	8008664 <self_check_motors>
 800863e:	4603      	mov	r3, r0
 8008640:	2b01      	cmp	r3, #1
 8008642:	d107      	bne.n	8008654 <self_check_system+0xd8>
			buzzer_alarm_times(3, TWO_SECOND_CNT, &buzzer);// 3 buzz per second
 8008644:	4a06      	ldr	r2, [pc, #24]	; (8008660 <self_check_system+0xe4>)
 8008646:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800864a:	2003      	movs	r0, #3
 800864c:	f7fe f8de 	bl	800680c <buzzer_alarm_times>
			return CHECK_FAIL;
 8008650:	2301      	movs	r3, #1
 8008652:	e000      	b.n	8008656 <self_check_system+0xda>
		}
	}
	/* RC check processes */
	return CHECK_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	20004718 	.word	0x20004718
 8008660:	2000d720 	.word	0x2000d720

08008664 <self_check_motors>:
/**
  * @brief     self check DJI CAN motor status based on feedback
  * @param[in] motor id to be checked
  * @retval    SelfCheckStatus_t
  */
SelfCheckStatus_t self_check_motors(uint8_t motor_id){
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	71fb      	strb	r3, [r7, #7]
	/* check motor online status */
	if(motor_data[motor_id].motor_feedback.rx_angle > 0){
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	4a09      	ldr	r2, [pc, #36]	; (8008698 <self_check_motors+0x34>)
 8008672:	2194      	movs	r1, #148	; 0x94
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	4413      	add	r3, r2
 800867a:	3388      	adds	r3, #136	; 0x88
 800867c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008680:	2b00      	cmp	r3, #0
 8008682:	dd01      	ble.n	8008688 <self_check_motors+0x24>
		/* this may have issue when the fb angle exactly equal to 0 (very rare)*/
		return 	CHECK_OK;
 8008684:	2300      	movs	r3, #0
 8008686:	e000      	b.n	800868a <self_check_motors+0x26>
	}
	return CHECK_FAIL;
 8008688:	2301      	movs	r3, #1
}
 800868a:	4618      	mov	r0, r3
 800868c:	370c      	adds	r7, #12
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	20005278 	.word	0x20005278

0800869c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80086a0:	4b17      	ldr	r3, [pc, #92]	; (8008700 <MX_CAN1_Init+0x64>)
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <MX_CAN1_Init+0x68>)
 80086a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80086a6:	4b16      	ldr	r3, [pc, #88]	; (8008700 <MX_CAN1_Init+0x64>)
 80086a8:	2203      	movs	r2, #3
 80086aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80086ac:	4b14      	ldr	r3, [pc, #80]	; (8008700 <MX_CAN1_Init+0x64>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80086b2:	4b13      	ldr	r3, [pc, #76]	; (8008700 <MX_CAN1_Init+0x64>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80086b8:	4b11      	ldr	r3, [pc, #68]	; (8008700 <MX_CAN1_Init+0x64>)
 80086ba:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80086be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80086c0:	4b0f      	ldr	r3, [pc, #60]	; (8008700 <MX_CAN1_Init+0x64>)
 80086c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80086c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <MX_CAN1_Init+0x64>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80086ce:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <MX_CAN1_Init+0x64>)
 80086d0:	2201      	movs	r2, #1
 80086d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <MX_CAN1_Init+0x64>)
 80086d6:	2201      	movs	r2, #1
 80086d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80086da:	4b09      	ldr	r3, [pc, #36]	; (8008700 <MX_CAN1_Init+0x64>)
 80086dc:	2201      	movs	r2, #1
 80086de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80086e0:	4b07      	ldr	r3, [pc, #28]	; (8008700 <MX_CAN1_Init+0x64>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80086e6:	4b06      	ldr	r3, [pc, #24]	; (8008700 <MX_CAN1_Init+0x64>)
 80086e8:	2201      	movs	r2, #1
 80086ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80086ec:	4804      	ldr	r0, [pc, #16]	; (8008700 <MX_CAN1_Init+0x64>)
 80086ee:	f001 fee7 	bl	800a4c0 <HAL_CAN_Init>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80086f8:	f000 fe6c 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80086fc:	bf00      	nop
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	2000d7e8 	.word	0x2000d7e8
 8008704:	40006400 	.word	0x40006400

08008708 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800870c:	4b17      	ldr	r3, [pc, #92]	; (800876c <MX_CAN2_Init+0x64>)
 800870e:	4a18      	ldr	r2, [pc, #96]	; (8008770 <MX_CAN2_Init+0x68>)
 8008710:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8008712:	4b16      	ldr	r3, [pc, #88]	; (800876c <MX_CAN2_Init+0x64>)
 8008714:	2203      	movs	r2, #3
 8008716:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8008718:	4b14      	ldr	r3, [pc, #80]	; (800876c <MX_CAN2_Init+0x64>)
 800871a:	2200      	movs	r2, #0
 800871c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800871e:	4b13      	ldr	r3, [pc, #76]	; (800876c <MX_CAN2_Init+0x64>)
 8008720:	2200      	movs	r2, #0
 8008722:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8008724:	4b11      	ldr	r3, [pc, #68]	; (800876c <MX_CAN2_Init+0x64>)
 8008726:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800872a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800872c:	4b0f      	ldr	r3, [pc, #60]	; (800876c <MX_CAN2_Init+0x64>)
 800872e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008732:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <MX_CAN2_Init+0x64>)
 8008736:	2200      	movs	r2, #0
 8008738:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800873a:	4b0c      	ldr	r3, [pc, #48]	; (800876c <MX_CAN2_Init+0x64>)
 800873c:	2201      	movs	r2, #1
 800873e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = ENABLE;
 8008740:	4b0a      	ldr	r3, [pc, #40]	; (800876c <MX_CAN2_Init+0x64>)
 8008742:	2201      	movs	r2, #1
 8008744:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <MX_CAN2_Init+0x64>)
 8008748:	2201      	movs	r2, #1
 800874a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800874c:	4b07      	ldr	r3, [pc, #28]	; (800876c <MX_CAN2_Init+0x64>)
 800874e:	2200      	movs	r2, #0
 8008750:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = ENABLE;
 8008752:	4b06      	ldr	r3, [pc, #24]	; (800876c <MX_CAN2_Init+0x64>)
 8008754:	2201      	movs	r2, #1
 8008756:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8008758:	4804      	ldr	r0, [pc, #16]	; (800876c <MX_CAN2_Init+0x64>)
 800875a:	f001 feb1 	bl	800a4c0 <HAL_CAN_Init>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d001      	beq.n	8008768 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8008764:	f000 fe36 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8008768:	bf00      	nop
 800876a:	bd80      	pop	{r7, pc}
 800876c:	2000d7c0 	.word	0x2000d7c0
 8008770:	40006800 	.word	0x40006800

08008774 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08c      	sub	sp, #48	; 0x30
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800877c:	f107 031c 	add.w	r3, r7, #28
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]
 8008784:	605a      	str	r2, [r3, #4]
 8008786:	609a      	str	r2, [r3, #8]
 8008788:	60da      	str	r2, [r3, #12]
 800878a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a52      	ldr	r2, [pc, #328]	; (80088dc <HAL_CAN_MspInit+0x168>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d145      	bne.n	8008822 <HAL_CAN_MspInit+0xae>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008796:	4b52      	ldr	r3, [pc, #328]	; (80088e0 <HAL_CAN_MspInit+0x16c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3301      	adds	r3, #1
 800879c:	4a50      	ldr	r2, [pc, #320]	; (80088e0 <HAL_CAN_MspInit+0x16c>)
 800879e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80087a0:	4b4f      	ldr	r3, [pc, #316]	; (80088e0 <HAL_CAN_MspInit+0x16c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10d      	bne.n	80087c4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80087a8:	2300      	movs	r3, #0
 80087aa:	61bb      	str	r3, [r7, #24]
 80087ac:	4b4d      	ldr	r3, [pc, #308]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 80087ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b0:	4a4c      	ldr	r2, [pc, #304]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 80087b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80087b6:	6413      	str	r3, [r2, #64]	; 0x40
 80087b8:	4b4a      	ldr	r3, [pc, #296]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c0:	61bb      	str	r3, [r7, #24]
 80087c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80087c4:	2300      	movs	r3, #0
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	4b46      	ldr	r3, [pc, #280]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	4a45      	ldr	r2, [pc, #276]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 80087ce:	f043 0308 	orr.w	r3, r3, #8
 80087d2:	6313      	str	r3, [r2, #48]	; 0x30
 80087d4:	4b43      	ldr	r3, [pc, #268]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 80087d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	617b      	str	r3, [r7, #20]
 80087de:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80087e0:	2303      	movs	r3, #3
 80087e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e4:	2302      	movs	r3, #2
 80087e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e8:	2300      	movs	r3, #0
 80087ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ec:	2303      	movs	r3, #3
 80087ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80087f0:	2309      	movs	r3, #9
 80087f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80087f4:	f107 031c 	add.w	r3, r7, #28
 80087f8:	4619      	mov	r1, r3
 80087fa:	483b      	ldr	r0, [pc, #236]	; (80088e8 <HAL_CAN_MspInit+0x174>)
 80087fc:	f003 f9b4 	bl	800bb68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8008800:	2200      	movs	r2, #0
 8008802:	2105      	movs	r1, #5
 8008804:	2013      	movs	r0, #19
 8008806:	f002 fd98 	bl	800b33a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800880a:	2013      	movs	r0, #19
 800880c:	f002 fdb1 	bl	800b372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8008810:	2200      	movs	r2, #0
 8008812:	2105      	movs	r1, #5
 8008814:	2014      	movs	r0, #20
 8008816:	f002 fd90 	bl	800b33a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800881a:	2014      	movs	r0, #20
 800881c:	f002 fda9 	bl	800b372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8008820:	e057      	b.n	80088d2 <HAL_CAN_MspInit+0x15e>
  else if(canHandle->Instance==CAN2)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a31      	ldr	r2, [pc, #196]	; (80088ec <HAL_CAN_MspInit+0x178>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d152      	bne.n	80088d2 <HAL_CAN_MspInit+0x15e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800882c:	2300      	movs	r3, #0
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	4b2c      	ldr	r3, [pc, #176]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	4a2b      	ldr	r2, [pc, #172]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 8008836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800883a:	6413      	str	r3, [r2, #64]	; 0x40
 800883c:	4b29      	ldr	r3, [pc, #164]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 800883e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008844:	613b      	str	r3, [r7, #16]
 8008846:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8008848:	4b25      	ldr	r3, [pc, #148]	; (80088e0 <HAL_CAN_MspInit+0x16c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3301      	adds	r3, #1
 800884e:	4a24      	ldr	r2, [pc, #144]	; (80088e0 <HAL_CAN_MspInit+0x16c>)
 8008850:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8008852:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <HAL_CAN_MspInit+0x16c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d10d      	bne.n	8008876 <HAL_CAN_MspInit+0x102>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	4a20      	ldr	r2, [pc, #128]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 8008864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008868:	6413      	str	r3, [r2, #64]	; 0x40
 800886a:	4b1e      	ldr	r3, [pc, #120]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008872:	60fb      	str	r3, [r7, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008876:	2300      	movs	r3, #0
 8008878:	60bb      	str	r3, [r7, #8]
 800887a:	4b1a      	ldr	r3, [pc, #104]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 800887c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887e:	4a19      	ldr	r2, [pc, #100]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 8008880:	f043 0302 	orr.w	r3, r3, #2
 8008884:	6313      	str	r3, [r2, #48]	; 0x30
 8008886:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <HAL_CAN_MspInit+0x170>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	60bb      	str	r3, [r7, #8]
 8008890:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008892:	2360      	movs	r3, #96	; 0x60
 8008894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008896:	2302      	movs	r3, #2
 8008898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889a:	2300      	movs	r3, #0
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800889e:	2303      	movs	r3, #3
 80088a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80088a2:	2309      	movs	r3, #9
 80088a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088a6:	f107 031c 	add.w	r3, r7, #28
 80088aa:	4619      	mov	r1, r3
 80088ac:	4810      	ldr	r0, [pc, #64]	; (80088f0 <HAL_CAN_MspInit+0x17c>)
 80088ae:	f003 f95b 	bl	800bb68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 80088b2:	2200      	movs	r2, #0
 80088b4:	2105      	movs	r1, #5
 80088b6:	203f      	movs	r0, #63	; 0x3f
 80088b8:	f002 fd3f 	bl	800b33a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 80088bc:	203f      	movs	r0, #63	; 0x3f
 80088be:	f002 fd58 	bl	800b372 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80088c2:	2200      	movs	r2, #0
 80088c4:	2105      	movs	r1, #5
 80088c6:	2040      	movs	r0, #64	; 0x40
 80088c8:	f002 fd37 	bl	800b33a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80088cc:	2040      	movs	r0, #64	; 0x40
 80088ce:	f002 fd50 	bl	800b372 <HAL_NVIC_EnableIRQ>
}
 80088d2:	bf00      	nop
 80088d4:	3730      	adds	r7, #48	; 0x30
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	40006400 	.word	0x40006400
 80088e0:	20000584 	.word	0x20000584
 80088e4:	40023800 	.word	0x40023800
 80088e8:	40020c00 	.word	0x40020c00
 80088ec:	40006800 	.word	0x40006800
 80088f0:	40020400 	.word	0x40020400

080088f4 <can_filter_enable>:
  /* USER CODE END CAN2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_filter_enable(CAN_HandleTypeDef* hcan){
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08c      	sub	sp, #48	; 0x30
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef CAN_FilterConfigStructure;

	CAN_FilterConfigStructure.FilterIdHigh = 0x0000;
 80088fc:	2300      	movs	r3, #0
 80088fe:	60bb      	str	r3, [r7, #8]
	CAN_FilterConfigStructure.FilterIdLow = 0x0000;
 8008900:	2300      	movs	r3, #0
 8008902:	60fb      	str	r3, [r7, #12]
	CAN_FilterConfigStructure.FilterMaskIdHigh = 0x0000;
 8008904:	2300      	movs	r3, #0
 8008906:	613b      	str	r3, [r7, #16]
	CAN_FilterConfigStructure.FilterMaskIdLow = 0x0000;
 8008908:	2300      	movs	r3, #0
 800890a:	617b      	str	r3, [r7, #20]
	CAN_FilterConfigStructure.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800890c:	2300      	movs	r3, #0
 800890e:	61bb      	str	r3, [r7, #24]
	CAN_FilterConfigStructure.FilterMode = CAN_FILTERMODE_IDMASK;
 8008910:	2300      	movs	r3, #0
 8008912:	623b      	str	r3, [r7, #32]
	CAN_FilterConfigStructure.FilterScale = CAN_FILTERSCALE_32BIT;
 8008914:	2301      	movs	r3, #1
 8008916:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterConfigStructure.FilterActivation = ENABLE;
 8008918:	2301      	movs	r3, #1
 800891a:	62bb      	str	r3, [r7, #40]	; 0x28
	if(hcan == &hcan1){
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a0e      	ldr	r2, [pc, #56]	; (8008958 <can_filter_enable+0x64>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d102      	bne.n	800892a <can_filter_enable+0x36>
//		CAN_FilterConfigStructure.SlaveStartFilterBank = 27;
		CAN_FilterConfigStructure.FilterBank = 0;
 8008924:	2300      	movs	r3, #0
 8008926:	61fb      	str	r3, [r7, #28]
 8008928:	e007      	b.n	800893a <can_filter_enable+0x46>
	}
	else if(hcan == &hcan2){
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a0b      	ldr	r2, [pc, #44]	; (800895c <can_filter_enable+0x68>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d103      	bne.n	800893a <can_filter_enable+0x46>
		//FIXME: Test current back filter idx
		CAN_FilterConfigStructure.SlaveStartFilterBank = 14;
 8008932:	230e      	movs	r3, #14
 8008934:	62fb      	str	r3, [r7, #44]	; 0x2c
		CAN_FilterConfigStructure.FilterBank = 14;
 8008936:	230e      	movs	r3, #14
 8008938:	61fb      	str	r3, [r7, #28]
	}

	HAL_CAN_ConfigFilter(hcan, &CAN_FilterConfigStructure);
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f001 feb9 	bl	800a6b8 <HAL_CAN_ConfigFilter>
	// activate the canx msg callback interrupt
	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8008946:	2102      	movs	r1, #2
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f002 f9c6 	bl	800acda <HAL_CAN_ActivateNotification>
}
 800894e:	bf00      	nop
 8008950:	3730      	adds	r7, #48	; 0x30
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	2000d7e8 	.word	0x2000d7e8
 800895c:	2000d7c0 	.word	0x2000d7c0

08008960 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* This function activates whenever the RxFifo receives a message
 * The StdId is obtained from the can message, then it is written into the buffer array (it is an array of arrays)
 * To figure out which motor it is for the read/write functions, we will refer to a table - see notes from March 25, 2021
 * There may be a better table later
*/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8008960:	b580      	push	{r7, lr}
 8008962:	b08a      	sub	sp, #40	; 0x28
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef rx_header;
	rx_header.StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[CAN_RX_FIFO0].RIR) >> CAN_TI0R_STID_Pos;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008970:	0d5b      	lsrs	r3, r3, #21
 8008972:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008976:	60bb      	str	r3, [r7, #8]
	if(hcan == &hcan1){
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a2d      	ldr	r2, [pc, #180]	; (8008a30 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d10f      	bne.n	80089a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		uint8_t idx=rx_header.StdId-CAN_RX_ID_START;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	3b01      	subs	r3, #1
 8008986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_rx_buffer[idx]);
 800898a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800898e:	00db      	lsls	r3, r3, #3
 8008990:	4a28      	ldr	r2, [pc, #160]	; (8008a34 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8008992:	4413      	add	r3, r2
 8008994:	f107 0208 	add.w	r2, r7, #8
 8008998:	2100      	movs	r1, #0
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f002 f88b 	bl	800aab6 <HAL_CAN_GetRxMessage>
	}
	if(hcan == &hcan2){
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a25      	ldr	r2, [pc, #148]	; (8008a38 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d13f      	bne.n	8008a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
		if(board_status==CHASSIS_BOARD){
 80089a8:	4b24      	ldr	r3, [pc, #144]	; (8008a3c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d11b      	bne.n	80089e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			uint8_t idx=rx_header.StdId-IDLE_COMM_ID;
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			can_comm_rx[idx].comm_id = rx_header.StdId;
 80089b6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089ba:	68b9      	ldr	r1, [r7, #8]
 80089bc:	4820      	ldr	r0, [pc, #128]	; (8008a40 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80089be:	4613      	mov	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4403      	add	r3, r0
 80089c8:	6019      	str	r1, [r3, #0]
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_comm_rx[idx].comm_rx_buffer);
 80089ca:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089ce:	4613      	mov	r3, r2
 80089d0:	005b      	lsls	r3, r3, #1
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	4a1a      	ldr	r2, [pc, #104]	; (8008a40 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80089d8:	4413      	add	r3, r2
 80089da:	3304      	adds	r3, #4
 80089dc:	f107 0208 	add.w	r2, r7, #8
 80089e0:	2100      	movs	r1, #0
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f002 f867 	bl	800aab6 <HAL_CAN_GetRxMessage>
		}
		if(board_status==GIMBAL_BOARD){
 80089e8:	4b14      	ldr	r3, [pc, #80]	; (8008a3c <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d11b      	bne.n	8008a28 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
			uint8_t idx=rx_header.StdId-IDLE_COMM_ID;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			can_comm_rx[idx].comm_id = rx_header.StdId;
 80089f6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	4810      	ldr	r0, [pc, #64]	; (8008a40 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80089fe:	4613      	mov	r3, r2
 8008a00:	005b      	lsls	r3, r3, #1
 8008a02:	4413      	add	r3, r2
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	4403      	add	r3, r0
 8008a08:	6019      	str	r1, [r3, #0]
			HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, can_comm_rx[idx].comm_rx_buffer);
 8008a0a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8008a0e:	4613      	mov	r3, r2
 8008a10:	005b      	lsls	r3, r3, #1
 8008a12:	4413      	add	r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8008a18:	4413      	add	r3, r2
 8008a1a:	3304      	adds	r3, #4
 8008a1c:	f107 0208 	add.w	r2, r7, #8
 8008a20:	2100      	movs	r1, #0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f002 f847 	bl	800aab6 <HAL_CAN_GetRxMessage>
		}
	}
}
 8008a28:	bf00      	nop
 8008a2a:	3728      	adds	r7, #40	; 0x28
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	2000d7e8 	.word	0x2000d7e8
 8008a34:	2000471c 	.word	0x2000471c
 8008a38:	2000d7c0 	.word	0x2000d7c0
 8008a3c:	20004718 	.word	0x20004718
 8008a40:	20000530 	.word	0x20000530

08008a44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b082      	sub	sp, #8
 8008a48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	4b27      	ldr	r3, [pc, #156]	; (8008aec <MX_DMA_Init+0xa8>)
 8008a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a52:	4a26      	ldr	r2, [pc, #152]	; (8008aec <MX_DMA_Init+0xa8>)
 8008a54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008a58:	6313      	str	r3, [r2, #48]	; 0x30
 8008a5a:	4b24      	ldr	r3, [pc, #144]	; (8008aec <MX_DMA_Init+0xa8>)
 8008a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a62:	607b      	str	r3, [r7, #4]
 8008a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008a66:	2300      	movs	r3, #0
 8008a68:	603b      	str	r3, [r7, #0]
 8008a6a:	4b20      	ldr	r3, [pc, #128]	; (8008aec <MX_DMA_Init+0xa8>)
 8008a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a6e:	4a1f      	ldr	r2, [pc, #124]	; (8008aec <MX_DMA_Init+0xa8>)
 8008a70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008a74:	6313      	str	r3, [r2, #48]	; 0x30
 8008a76:	4b1d      	ldr	r3, [pc, #116]	; (8008aec <MX_DMA_Init+0xa8>)
 8008a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8008a82:	2200      	movs	r2, #0
 8008a84:	2105      	movs	r1, #5
 8008a86:	200c      	movs	r0, #12
 8008a88:	f002 fc57 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8008a8c:	200c      	movs	r0, #12
 8008a8e:	f002 fc70 	bl	800b372 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8008a92:	2200      	movs	r2, #0
 8008a94:	2105      	movs	r1, #5
 8008a96:	2010      	movs	r0, #16
 8008a98:	f002 fc4f 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008a9c:	2010      	movs	r0, #16
 8008a9e:	f002 fc68 	bl	800b372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	2105      	movs	r1, #5
 8008aa6:	203a      	movs	r0, #58	; 0x3a
 8008aa8:	f002 fc47 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008aac:	203a      	movs	r0, #58	; 0x3a
 8008aae:	f002 fc60 	bl	800b372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2105      	movs	r1, #5
 8008ab6:	203b      	movs	r0, #59	; 0x3b
 8008ab8:	f002 fc3f 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8008abc:	203b      	movs	r0, #59	; 0x3b
 8008abe:	f002 fc58 	bl	800b372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2105      	movs	r1, #5
 8008ac6:	2044      	movs	r0, #68	; 0x44
 8008ac8:	f002 fc37 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8008acc:	2044      	movs	r0, #68	; 0x44
 8008ace:	f002 fc50 	bl	800b372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2105      	movs	r1, #5
 8008ad6:	2046      	movs	r0, #70	; 0x46
 8008ad8:	f002 fc2f 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008adc:	2046      	movs	r0, #70	; 0x46
 8008ade:	f002 fc48 	bl	800b372 <HAL_NVIC_EnableIRQ>

}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	40023800 	.word	0x40023800

08008af0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	60f8      	str	r0, [r7, #12]
 8008af8:	60b9      	str	r1, [r7, #8]
 8008afa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	4a07      	ldr	r2, [pc, #28]	; (8008b1c <vApplicationGetIdleTaskMemory+0x2c>)
 8008b00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a06      	ldr	r2, [pc, #24]	; (8008b20 <vApplicationGetIdleTaskMemory+0x30>)
 8008b06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2280      	movs	r2, #128	; 0x80
 8008b0c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008b0e:	bf00      	nop
 8008b10:	3714      	adds	r7, #20
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr
 8008b1a:	bf00      	nop
 8008b1c:	20000588 	.word	0x20000588
 8008b20:	200005dc 	.word	0x200005dc

08008b24 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008b24:	b5b0      	push	{r4, r5, r7, lr}
 8008b26:	b0c8      	sub	sp, #288	; 0x120
 8008b28:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8008b2a:	4b58      	ldr	r3, [pc, #352]	; (8008c8c <MX_FREERTOS_Init+0x168>)
 8008b2c:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 8008b30:	461d      	mov	r5, r3
 8008b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8008b3e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8008b42:	2100      	movs	r1, #0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f005 feba 	bl	800e8be <osThreadCreate>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	4a50      	ldr	r2, [pc, #320]	; (8008c90 <MX_FREERTOS_Init+0x16c>)
 8008b4e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  osThreadDef(TimerTask, Timer_Task_Func, osPriorityHigh, 0, 256);
 8008b50:	4b50      	ldr	r3, [pc, #320]	; (8008c94 <MX_FREERTOS_Init+0x170>)
 8008b52:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8008b56:	461d      	mov	r5, r3
 8008b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    TimerTaskHandle = osThreadCreate(osThread(TimerTask), NULL);
 8008b64:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8008b68:	2100      	movs	r1, #0
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f005 fea7 	bl	800e8be <osThreadCreate>
 8008b70:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c

    osThreadDef(CommTask, Comm_Task_Func, osPriorityHigh, 0, 256);
 8008b74:	4b48      	ldr	r3, [pc, #288]	; (8008c98 <MX_FREERTOS_Init+0x174>)
 8008b76:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8008b7a:	461d      	mov	r5, r3
 8008b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    CommTaskHandle = osThreadCreate(osThread(CommTask), NULL);
 8008b88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f005 fe95 	bl	800e8be <osThreadCreate>
 8008b94:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    osThreadDef(WDGTask, WatchDog_Task_Function, osPriorityHigh, 0, 256);
 8008b98:	4b40      	ldr	r3, [pc, #256]	; (8008c9c <MX_FREERTOS_Init+0x178>)
 8008b9a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8008b9e:	461d      	mov	r5, r3
 8008ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ba4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ba8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    WDGTaskHandle = osThreadCreate(osThread(WDGTask), NULL);
 8008bac:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f005 fe83 	bl	800e8be <osThreadCreate>
 8008bb8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114


    if(board_status == CHASSIS_BOARD){
 8008bbc:	4b38      	ldr	r3, [pc, #224]	; (8008ca0 <MX_FREERTOS_Init+0x17c>)
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d124      	bne.n	8008c0e <MX_FREERTOS_Init+0xea>
    	  osThreadDef(ChassisTask, Chassis_Task_Func, osPriorityRealtime, 0, 256);
 8008bc4:	4b37      	ldr	r3, [pc, #220]	; (8008ca4 <MX_FREERTOS_Init+0x180>)
 8008bc6:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8008bca:	461d      	mov	r5, r3
 8008bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008bd4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  ChassisTaskHandle = osThreadCreate(osThread(ChassisTask), NULL);
 8008bd8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f005 fe6d 	bl	800e8be <osThreadCreate>
 8008be4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

    	  osThreadDef(RCTask, RC_Task_Func, osPriorityHigh, 0, 384);
 8008be8:	4b2f      	ldr	r3, [pc, #188]	; (8008ca8 <MX_FREERTOS_Init+0x184>)
 8008bea:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8008bee:	461d      	mov	r5, r3
 8008bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bf4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008bf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  RCTaskHandle = osThreadCreate(osThread(RCTask), NULL);
 8008bfc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8008c00:	2100      	movs	r1, #0
 8008c02:	4618      	mov	r0, r3
 8008c04:	f005 fe5b 	bl	800e8be <osThreadCreate>
 8008c08:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
    	  osThreadDef(IMUTask, IMU_Task_Function, osPriorityHigh, 0, 256);
    	  IMUTaskHandle = osThreadCreate(osThread(IMUTask), NULL);
      }
  /* USER CODE END RTOS_THREADS */

}
 8008c0c:	e039      	b.n	8008c82 <MX_FREERTOS_Init+0x15e>
    else if(board_status == GIMBAL_BOARD){
 8008c0e:	4b24      	ldr	r3, [pc, #144]	; (8008ca0 <MX_FREERTOS_Init+0x17c>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d135      	bne.n	8008c82 <MX_FREERTOS_Init+0x15e>
    	  osThreadDef(GimbalTask, Gimbal_Task_Function, osPriorityRealtime, 0, 512);
 8008c16:	4b25      	ldr	r3, [pc, #148]	; (8008cac <MX_FREERTOS_Init+0x188>)
 8008c18:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8008c1c:	461d      	mov	r5, r3
 8008c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  GimbalTaskHandle = osThreadCreate(osThread(GimbalTask), NULL);
 8008c2a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f005 fe44 	bl	800e8be <osThreadCreate>
 8008c36:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    	  osThreadDef(ShootTask, Shoot_Task_Func, osPriorityHigh, 0, 256);
 8008c3a:	f107 0320 	add.w	r3, r7, #32
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	; (8008cb0 <MX_FREERTOS_Init+0x18c>)
 8008c40:	461c      	mov	r4, r3
 8008c42:	4615      	mov	r5, r2
 8008c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  ShootTaskHandle = osThreadCreate(osThread(ShootTask), NULL);
 8008c50:	f107 0320 	add.w	r3, r7, #32
 8008c54:	2100      	movs	r1, #0
 8008c56:	4618      	mov	r0, r3
 8008c58:	f005 fe31 	bl	800e8be <osThreadCreate>
 8008c5c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    	  osThreadDef(IMUTask, IMU_Task_Function, osPriorityHigh, 0, 256);
 8008c60:	1d3b      	adds	r3, r7, #4
 8008c62:	4a14      	ldr	r2, [pc, #80]	; (8008cb4 <MX_FREERTOS_Init+0x190>)
 8008c64:	461c      	mov	r4, r3
 8008c66:	4615      	mov	r5, r2
 8008c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c70:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    	  IMUTaskHandle = osThreadCreate(osThread(IMUTask), NULL);
 8008c74:	1d3b      	adds	r3, r7, #4
 8008c76:	2100      	movs	r1, #0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f005 fe20 	bl	800e8be <osThreadCreate>
 8008c7e:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
}
 8008c82:	bf00      	nop
 8008c84:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8008c8c:	080137f8 	.word	0x080137f8
 8008c90:	2000d810 	.word	0x2000d810
 8008c94:	08013814 	.word	0x08013814
 8008c98:	08013830 	.word	0x08013830
 8008c9c:	0801384c 	.word	0x0801384c
 8008ca0:	20004718 	.word	0x20004718
 8008ca4:	08013868 	.word	0x08013868
 8008ca8:	08013884 	.word	0x08013884
 8008cac:	080138a0 	.word	0x080138a0
 8008cb0:	080138bc 	.word	0x080138bc
 8008cb4:	080138d8 	.word	0x080138d8

08008cb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8008cc0:	2001      	movs	r0, #1
 8008cc2:	f005 fe48 	bl	800e956 <osDelay>
 8008cc6:	e7fb      	b.n	8008cc0 <StartDefaultTask+0x8>

08008cc8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08e      	sub	sp, #56	; 0x38
 8008ccc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
 8008cd6:	605a      	str	r2, [r3, #4]
 8008cd8:	609a      	str	r2, [r3, #8]
 8008cda:	60da      	str	r2, [r3, #12]
 8008cdc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cde:	2300      	movs	r3, #0
 8008ce0:	623b      	str	r3, [r7, #32]
 8008ce2:	4b94      	ldr	r3, [pc, #592]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce6:	4a93      	ldr	r2, [pc, #588]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008ce8:	f043 0302 	orr.w	r3, r3, #2
 8008cec:	6313      	str	r3, [r2, #48]	; 0x30
 8008cee:	4b91      	ldr	r3, [pc, #580]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf2:	f003 0302 	and.w	r3, r3, #2
 8008cf6:	623b      	str	r3, [r7, #32]
 8008cf8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61fb      	str	r3, [r7, #28]
 8008cfe:	4b8d      	ldr	r3, [pc, #564]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	4a8c      	ldr	r2, [pc, #560]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	6313      	str	r3, [r2, #48]	; 0x30
 8008d0a:	4b8a      	ldr	r3, [pc, #552]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	61fb      	str	r3, [r7, #28]
 8008d14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	4b86      	ldr	r3, [pc, #536]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1e:	4a85      	ldr	r2, [pc, #532]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d20:	f043 0308 	orr.w	r3, r3, #8
 8008d24:	6313      	str	r3, [r2, #48]	; 0x30
 8008d26:	4b83      	ldr	r3, [pc, #524]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	61bb      	str	r3, [r7, #24]
 8008d30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d32:	2300      	movs	r3, #0
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	4b7f      	ldr	r3, [pc, #508]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3a:	4a7e      	ldr	r2, [pc, #504]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d3c:	f043 0304 	orr.w	r3, r3, #4
 8008d40:	6313      	str	r3, [r2, #48]	; 0x30
 8008d42:	4b7c      	ldr	r3, [pc, #496]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008d4e:	2300      	movs	r3, #0
 8008d50:	613b      	str	r3, [r7, #16]
 8008d52:	4b78      	ldr	r3, [pc, #480]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	4a77      	ldr	r2, [pc, #476]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d5e:	4b75      	ldr	r3, [pc, #468]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d66:	613b      	str	r3, [r7, #16]
 8008d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
 8008d6e:	4b71      	ldr	r3, [pc, #452]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d72:	4a70      	ldr	r2, [pc, #448]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d78:	6313      	str	r3, [r2, #48]	; 0x30
 8008d7a:	4b6e      	ldr	r3, [pc, #440]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
 8008d8a:	4b6a      	ldr	r3, [pc, #424]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8e:	4a69      	ldr	r2, [pc, #420]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d90:	f043 0320 	orr.w	r3, r3, #32
 8008d94:	6313      	str	r3, [r2, #48]	; 0x30
 8008d96:	4b67      	ldr	r3, [pc, #412]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d9a:	f003 0320 	and.w	r3, r3, #32
 8008d9e:	60bb      	str	r3, [r7, #8]
 8008da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008da2:	2300      	movs	r3, #0
 8008da4:	607b      	str	r3, [r7, #4]
 8008da6:	4b63      	ldr	r3, [pc, #396]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	4a62      	ldr	r2, [pc, #392]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008db0:	6313      	str	r3, [r2, #48]	; 0x30
 8008db2:	4b60      	ldr	r3, [pc, #384]	; (8008f34 <MX_GPIO_Init+0x26c>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dba:	607b      	str	r3, [r7, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008dc4:	485c      	ldr	r0, [pc, #368]	; (8008f38 <MX_GPIO_Init+0x270>)
 8008dc6:	f003 f883 	bl	800bed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RSTN_IST8310_GPIO_Port, RSTN_IST8310_Pin, GPIO_PIN_SET);
 8008dca:	2201      	movs	r2, #1
 8008dcc:	2140      	movs	r1, #64	; 0x40
 8008dce:	485b      	ldr	r0, [pc, #364]	; (8008f3c <MX_GPIO_Init+0x274>)
 8008dd0:	f003 f87e 	bl	800bed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8008dda:	4859      	ldr	r0, [pc, #356]	; (8008f40 <MX_GPIO_Init+0x278>)
 8008ddc:	f003 f878 	bl	800bed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8008de0:	2201      	movs	r2, #1
 8008de2:	2110      	movs	r1, #16
 8008de4:	4857      	ldr	r0, [pc, #348]	; (8008f44 <MX_GPIO_Init+0x27c>)
 8008de6:	f003 f873 	bl	800bed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8008dea:	2201      	movs	r2, #1
 8008dec:	2101      	movs	r1, #1
 8008dee:	4856      	ldr	r0, [pc, #344]	; (8008f48 <MX_GPIO_Init+0x280>)
 8008df0:	f003 f86e 	bl	800bed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HIGH_VOLT_GPIO_Port, HIGH_VOLT_Pin, GPIO_PIN_RESET);
 8008df4:	2200      	movs	r2, #0
 8008df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dfa:	4853      	ldr	r0, [pc, #332]	; (8008f48 <MX_GPIO_Init+0x280>)
 8008dfc:	f003 f868 	bl	800bed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e06:	2301      	movs	r3, #1
 8008e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e16:	4619      	mov	r1, r3
 8008e18:	4847      	ldr	r0, [pc, #284]	; (8008f38 <MX_GPIO_Init+0x270>)
 8008e1a:	f002 fea5 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Board_Status_Pin;
 8008e1e:	2302      	movs	r3, #2
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e22:	2300      	movs	r3, #0
 8008e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e26:	2301      	movs	r3, #1
 8008e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Board_Status_GPIO_Port, &GPIO_InitStruct);
 8008e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4846      	ldr	r0, [pc, #280]	; (8008f4c <MX_GPIO_Init+0x284>)
 8008e32:	f002 fe99 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RSTN_IST8310_Pin;
 8008e36:	2340      	movs	r3, #64	; 0x40
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8008e42:	2301      	movs	r3, #1
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(RSTN_IST8310_GPIO_Port, &GPIO_InitStruct);
 8008e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	483b      	ldr	r0, [pc, #236]	; (8008f3c <MX_GPIO_Init+0x274>)
 8008e4e:	f002 fe8b 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = LED_Red_Pin|LED_Green_Pin|LED_Blue_Pin;
 8008e52:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e60:	2300      	movs	r3, #0
 8008e62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e68:	4619      	mov	r1, r3
 8008e6a:	4835      	ldr	r0, [pc, #212]	; (8008f40 <MX_GPIO_Init+0x278>)
 8008e6c:	f002 fe7c 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DRDY_IST8310_Pin|SOFTWARE_EXTI_Pin;
 8008e70:	2309      	movs	r3, #9
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008e74:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e82:	4619      	mov	r1, r3
 8008e84:	482d      	ldr	r0, [pc, #180]	; (8008f3c <MX_GPIO_Init+0x274>)
 8008e86:	f002 fe6f 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_ACCEL_Pin;
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008e92:	2301      	movs	r3, #1
 8008e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e96:	2302      	movs	r3, #2
 8008e98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS1_ACCEL_GPIO_Port, &GPIO_InitStruct);
 8008e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4828      	ldr	r0, [pc, #160]	; (8008f44 <MX_GPIO_Init+0x27c>)
 8008ea2:	f002 fe61 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin|INT1_GYRO_Pin;
 8008ea6:	2330      	movs	r3, #48	; 0x30
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008eaa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008eae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008eb8:	4619      	mov	r1, r3
 8008eba:	481f      	ldr	r0, [pc, #124]	; (8008f38 <MX_GPIO_Init+0x270>)
 8008ebc:	f002 fe54 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS1_GYRO_Pin;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ecc:	2302      	movs	r3, #2
 8008ece:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS1_GYRO_GPIO_Port, &GPIO_InitStruct);
 8008ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	481c      	ldr	r0, [pc, #112]	; (8008f48 <MX_GPIO_Init+0x280>)
 8008ed8:	f002 fe46 	bl	800bb68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HIGH_VOLT_Pin;
 8008edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eea:	2300      	movs	r3, #0
 8008eec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HIGH_VOLT_GPIO_Port, &GPIO_InitStruct);
 8008eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4814      	ldr	r0, [pc, #80]	; (8008f48 <MX_GPIO_Init+0x280>)
 8008ef6:	f002 fe37 	bl	800bb68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8008efa:	2200      	movs	r2, #0
 8008efc:	2105      	movs	r1, #5
 8008efe:	2006      	movs	r0, #6
 8008f00:	f002 fa1b 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008f04:	2006      	movs	r0, #6
 8008f06:	f002 fa34 	bl	800b372 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2105      	movs	r1, #5
 8008f0e:	200a      	movs	r0, #10
 8008f10:	f002 fa13 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8008f14:	200a      	movs	r0, #10
 8008f16:	f002 fa2c 	bl	800b372 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	2105      	movs	r1, #5
 8008f1e:	2017      	movs	r0, #23
 8008f20:	f002 fa0b 	bl	800b33a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008f24:	2017      	movs	r0, #23
 8008f26:	f002 fa24 	bl	800b372 <HAL_NVIC_EnableIRQ>

}
 8008f2a:	bf00      	nop
 8008f2c:	3738      	adds	r7, #56	; 0x38
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	40023800 	.word	0x40023800
 8008f38:	40020800 	.word	0x40020800
 8008f3c:	40021800 	.word	0x40021800
 8008f40:	40021c00 	.word	0x40021c00
 8008f44:	40020000 	.word	0x40020000
 8008f48:	40020400 	.word	0x40020400
 8008f4c:	40021400 	.word	0x40021400

08008f50 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	80fb      	strh	r3, [r7, #6]
	/* Not Implement Button IT Yet,
	 * may be reserved for gyro calibration */
}
 8008f5a:	bf00      	nop
 8008f5c:	370c      	adds	r7, #12
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr
	...

08008f68 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8008f6c:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f6e:	4a13      	ldr	r2, [pc, #76]	; (8008fbc <MX_I2C3_Init+0x54>)
 8008f70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8008f72:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f74:	4a12      	ldr	r2, [pc, #72]	; (8008fc0 <MX_I2C3_Init+0x58>)
 8008f76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008f78:	4b0f      	ldr	r3, [pc, #60]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8008f7e:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008f84:	4b0c      	ldr	r3, [pc, #48]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008f8a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008f8c:	4b0a      	ldr	r3, [pc, #40]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f8e:	2200      	movs	r2, #0
 8008f90:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8008f92:	4b09      	ldr	r3, [pc, #36]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008f98:	4b07      	ldr	r3, [pc, #28]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008f9e:	4b06      	ldr	r3, [pc, #24]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008fa4:	4804      	ldr	r0, [pc, #16]	; (8008fb8 <MX_I2C3_Init+0x50>)
 8008fa6:	f002 ffc5 	bl	800bf34 <HAL_I2C_Init>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8008fb0:	f000 fa10 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8008fb4:	bf00      	nop
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	2000d814 	.word	0x2000d814
 8008fbc:	40005c00 	.word	0x40005c00
 8008fc0:	00061a80 	.word	0x00061a80

08008fc4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08a      	sub	sp, #40	; 0x28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fcc:	f107 0314 	add.w	r3, r7, #20
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	601a      	str	r2, [r3, #0]
 8008fd4:	605a      	str	r2, [r3, #4]
 8008fd6:	609a      	str	r2, [r3, #8]
 8008fd8:	60da      	str	r2, [r3, #12]
 8008fda:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a29      	ldr	r2, [pc, #164]	; (8009088 <HAL_I2C_MspInit+0xc4>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d14b      	bne.n	800907e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	613b      	str	r3, [r7, #16]
 8008fea:	4b28      	ldr	r3, [pc, #160]	; (800908c <HAL_I2C_MspInit+0xc8>)
 8008fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fee:	4a27      	ldr	r2, [pc, #156]	; (800908c <HAL_I2C_MspInit+0xc8>)
 8008ff0:	f043 0304 	orr.w	r3, r3, #4
 8008ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8008ff6:	4b25      	ldr	r3, [pc, #148]	; (800908c <HAL_I2C_MspInit+0xc8>)
 8008ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	613b      	str	r3, [r7, #16]
 8009000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
 8009006:	4b21      	ldr	r3, [pc, #132]	; (800908c <HAL_I2C_MspInit+0xc8>)
 8009008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900a:	4a20      	ldr	r2, [pc, #128]	; (800908c <HAL_I2C_MspInit+0xc8>)
 800900c:	f043 0301 	orr.w	r3, r3, #1
 8009010:	6313      	str	r3, [r2, #48]	; 0x30
 8009012:	4b1e      	ldr	r3, [pc, #120]	; (800908c <HAL_I2C_MspInit+0xc8>)
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800901e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009024:	2312      	movs	r3, #18
 8009026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009028:	2301      	movs	r3, #1
 800902a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800902c:	2303      	movs	r3, #3
 800902e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009030:	2304      	movs	r3, #4
 8009032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009034:	f107 0314 	add.w	r3, r7, #20
 8009038:	4619      	mov	r1, r3
 800903a:	4815      	ldr	r0, [pc, #84]	; (8009090 <HAL_I2C_MspInit+0xcc>)
 800903c:	f002 fd94 	bl	800bb68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009046:	2312      	movs	r3, #18
 8009048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800904a:	2301      	movs	r3, #1
 800904c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800904e:	2303      	movs	r3, #3
 8009050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8009052:	2304      	movs	r3, #4
 8009054:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009056:	f107 0314 	add.w	r3, r7, #20
 800905a:	4619      	mov	r1, r3
 800905c:	480d      	ldr	r0, [pc, #52]	; (8009094 <HAL_I2C_MspInit+0xd0>)
 800905e:	f002 fd83 	bl	800bb68 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8009062:	2300      	movs	r3, #0
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	4b09      	ldr	r3, [pc, #36]	; (800908c <HAL_I2C_MspInit+0xc8>)
 8009068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800906a:	4a08      	ldr	r2, [pc, #32]	; (800908c <HAL_I2C_MspInit+0xc8>)
 800906c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009070:	6413      	str	r3, [r2, #64]	; 0x40
 8009072:	4b06      	ldr	r3, [pc, #24]	; (800908c <HAL_I2C_MspInit+0xc8>)
 8009074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009076:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800907e:	bf00      	nop
 8009080:	3728      	adds	r7, #40	; 0x28
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	40005c00 	.word	0x40005c00
 800908c:	40023800 	.word	0x40023800
 8009090:	40020800 	.word	0x40020800
 8009094:	40020000 	.word	0x40020000

08009098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800909c:	f001 f99e 	bl	800a3dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80090a0:	f000 f838 	bl	8009114 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80090a4:	f7ff fe10 	bl	8008cc8 <MX_GPIO_Init>
  MX_DMA_Init();
 80090a8:	f7ff fccc 	bl	8008a44 <MX_DMA_Init>
  MX_CAN1_Init();
 80090ac:	f7ff faf6 	bl	800869c <MX_CAN1_Init>
  MX_CAN2_Init();
 80090b0:	f7ff fb2a 	bl	8008708 <MX_CAN2_Init>
  MX_TIM4_Init();
 80090b4:	f000 fc34 	bl	8009920 <MX_TIM4_Init>
  MX_TIM8_Init();
 80090b8:	f000 fcfc 	bl	8009ab4 <MX_TIM8_Init>
  MX_TIM10_Init();
 80090bc:	f000 fd7e 	bl	8009bbc <MX_TIM10_Init>
  MX_TIM13_Init();
 80090c0:	f000 fdca 	bl	8009c58 <MX_TIM13_Init>
  MX_USART1_UART_Init();
 80090c4:	f000 ff30 	bl	8009f28 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80090c8:	f000 ff8a 	bl	8009fe0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80090cc:	f000 ff56 	bl	8009f7c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80090d0:	f000 f986 	bl	80093e0 <MX_SPI1_Init>
  MX_I2C3_Init();
 80090d4:	f7ff ff48 	bl	8008f68 <MX_I2C3_Init>
  MX_TIM5_Init();
 80090d8:	f000 fc7c 	bl	80099d4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
#ifdef USE_IWDG
/*To deactivate IWDG, go to main.h and comment #define USE_IWDG 1 */
  MX_IWDG_Init();//enable IWDG, period 2s
#endif
	HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_RESET);// turn off the green led
 80090dc:	2200      	movs	r2, #0
 80090de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090e2:	480b      	ldr	r0, [pc, #44]	; (8009110 <main+0x78>)
 80090e4:	f002 fef4 	bl	800bed0 <HAL_GPIO_WritePin>
	if(firmware_and_system_init() != HAL_OK){
 80090e8:	f000 f880 	bl	80091ec <firmware_and_system_init>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d002      	beq.n	80090f8 <main+0x60>
	  Error_Handler();
 80090f2:	f000 f96f 	bl	80093d4 <Error_Handler>
 80090f6:	e005      	b.n	8009104 <main+0x6c>
	}
	else
	  HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);// turn on the green led
 80090f8:	2201      	movs	r2, #1
 80090fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090fe:	4804      	ldr	r0, [pc, #16]	; (8009110 <main+0x78>)
 8009100:	f002 fee6 	bl	800bed0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8009104:	f7ff fd0e 	bl	8008b24 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8009108:	f005 fbd2 	bl	800e8b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800910c:	e7fe      	b.n	800910c <main+0x74>
 800910e:	bf00      	nop
 8009110:	40021c00 	.word	0x40021c00

08009114 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b094      	sub	sp, #80	; 0x50
 8009118:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800911a:	f107 0320 	add.w	r3, r7, #32
 800911e:	2230      	movs	r2, #48	; 0x30
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f007 f8d0 	bl	80102c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	2200      	movs	r2, #0
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	605a      	str	r2, [r3, #4]
 8009132:	609a      	str	r2, [r3, #8]
 8009134:	60da      	str	r2, [r3, #12]
 8009136:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009138:	2300      	movs	r3, #0
 800913a:	60bb      	str	r3, [r7, #8]
 800913c:	4b29      	ldr	r3, [pc, #164]	; (80091e4 <SystemClock_Config+0xd0>)
 800913e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009140:	4a28      	ldr	r2, [pc, #160]	; (80091e4 <SystemClock_Config+0xd0>)
 8009142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009146:	6413      	str	r3, [r2, #64]	; 0x40
 8009148:	4b26      	ldr	r3, [pc, #152]	; (80091e4 <SystemClock_Config+0xd0>)
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009150:	60bb      	str	r3, [r7, #8]
 8009152:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009154:	2300      	movs	r3, #0
 8009156:	607b      	str	r3, [r7, #4]
 8009158:	4b23      	ldr	r3, [pc, #140]	; (80091e8 <SystemClock_Config+0xd4>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a22      	ldr	r2, [pc, #136]	; (80091e8 <SystemClock_Config+0xd4>)
 800915e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009162:	6013      	str	r3, [r2, #0]
 8009164:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <SystemClock_Config+0xd4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009170:	2309      	movs	r3, #9
 8009172:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800917a:	2301      	movs	r3, #1
 800917c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800917e:	2302      	movs	r3, #2
 8009180:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8009188:	2306      	movs	r3, #6
 800918a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800918c:	23a8      	movs	r3, #168	; 0xa8
 800918e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009190:	2302      	movs	r3, #2
 8009192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8009194:	2304      	movs	r3, #4
 8009196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009198:	f107 0320 	add.w	r3, r7, #32
 800919c:	4618      	mov	r0, r3
 800919e:	f003 f80d 	bl	800c1bc <HAL_RCC_OscConfig>
 80091a2:	4603      	mov	r3, r0
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d001      	beq.n	80091ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80091a8:	f000 f914 	bl	80093d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80091ac:	230f      	movs	r3, #15
 80091ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80091b0:	2302      	movs	r3, #2
 80091b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80091b4:	2300      	movs	r3, #0
 80091b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80091b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80091bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80091be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80091c4:	f107 030c 	add.w	r3, r7, #12
 80091c8:	2105      	movs	r1, #5
 80091ca:	4618      	mov	r0, r3
 80091cc:	f003 fa6e 	bl	800c6ac <HAL_RCC_ClockConfig>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d001      	beq.n	80091da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80091d6:	f000 f8fd 	bl	80093d4 <Error_Handler>
  }
}
 80091da:	bf00      	nop
 80091dc:	3750      	adds	r7, #80	; 0x50
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	40023800 	.word	0x40023800
 80091e8:	40007000 	.word	0x40007000

080091ec <firmware_and_system_init>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef firmware_and_system_init(void){
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 /* CAN1 & CAN2 Init */
 if( HAL_CAN_Start(&hcan1) != HAL_OK){
 80091f2:	482d      	ldr	r0, [pc, #180]	; (80092a8 <firmware_and_system_init+0xbc>)
 80091f4:	f001 fb40 	bl	800a878 <HAL_CAN_Start>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <firmware_and_system_init+0x16>
	 return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e04d      	b.n	800929e <firmware_and_system_init+0xb2>
 }
 if( HAL_CAN_Start(&hcan2) != HAL_OK){
 8009202:	482a      	ldr	r0, [pc, #168]	; (80092ac <firmware_and_system_init+0xc0>)
 8009204:	f001 fb38 	bl	800a878 <HAL_CAN_Start>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <firmware_and_system_init+0x26>
 	 return HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	e045      	b.n	800929e <firmware_and_system_init+0xb2>
 }
 /* CAN1 & CAN2 filter Init */
 can_filter_enable(&hcan1);
 8009212:	4825      	ldr	r0, [pc, #148]	; (80092a8 <firmware_and_system_init+0xbc>)
 8009214:	f7ff fb6e 	bl	80088f4 <can_filter_enable>
 can_filter_enable(&hcan2);
 8009218:	4824      	ldr	r0, [pc, #144]	; (80092ac <firmware_and_system_init+0xc0>)
 800921a:	f7ff fb6b 	bl	80088f4 <can_filter_enable>

 /* Timer 13 IT Init */
 if( HAL_TIM_Base_Start_IT(&htim13) != HAL_OK){
 800921e:	4824      	ldr	r0, [pc, #144]	; (80092b0 <firmware_and_system_init+0xc4>)
 8009220:	f003 ff5a 	bl	800d0d8 <HAL_TIM_Base_Start_IT>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <firmware_and_system_init+0x42>
  	 return HAL_ERROR;
 800922a:	2301      	movs	r3, #1
 800922c:	e037      	b.n	800929e <firmware_and_system_init+0xb2>
 }
 /* Heat PWM signal Init */
 if( HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1) != HAL_OK){
 800922e:	2100      	movs	r1, #0
 8009230:	4820      	ldr	r0, [pc, #128]	; (80092b4 <firmware_and_system_init+0xc8>)
 8009232:	f004 f811 	bl	800d258 <HAL_TIM_PWM_Start>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d001      	beq.n	8009240 <firmware_and_system_init+0x54>
   	 return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e02e      	b.n	800929e <firmware_and_system_init+0xb2>
 }
 /* Read Board Status */
 if(HAL_GPIO_ReadPin(Board_Status_GPIO_Port, Board_Status_Pin) == GPIO_PIN_RESET)
 8009240:	2102      	movs	r1, #2
 8009242:	481d      	ldr	r0, [pc, #116]	; (80092b8 <firmware_and_system_init+0xcc>)
 8009244:	f002 fe2c 	bl	800bea0 <HAL_GPIO_ReadPin>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d103      	bne.n	8009256 <firmware_and_system_init+0x6a>
	  board_status = CHASSIS_BOARD;
 800924e:	4b1b      	ldr	r3, [pc, #108]	; (80092bc <firmware_and_system_init+0xd0>)
 8009250:	2201      	movs	r2, #1
 8009252:	701a      	strb	r2, [r3, #0]
 8009254:	e002      	b.n	800925c <firmware_and_system_init+0x70>
 else
	  board_status = GIMBAL_BOARD;
 8009256:	4b19      	ldr	r3, [pc, #100]	; (80092bc <firmware_and_system_init+0xd0>)
 8009258:	2200      	movs	r2, #0
 800925a:	701a      	strb	r2, [r3, #0]

 /* init fb struct of motors */
 for(int i=0;i<MOTOR_COUNT;i++){
 800925c:	2300      	movs	r3, #0
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	e00e      	b.n	8009280 <firmware_and_system_init+0x94>
	 memset(&(motor_data[i].motor_feedback), 0, sizeof(Motor_Feedback_Data_t));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2294      	movs	r2, #148	; 0x94
 8009266:	fb02 f303 	mul.w	r3, r2, r3
 800926a:	3388      	adds	r3, #136	; 0x88
 800926c:	4a14      	ldr	r2, [pc, #80]	; (80092c0 <firmware_and_system_init+0xd4>)
 800926e:	4413      	add	r3, r2
 8009270:	2208      	movs	r2, #8
 8009272:	2100      	movs	r1, #0
 8009274:	4618      	mov	r0, r3
 8009276:	f007 f827 	bl	80102c8 <memset>
 for(int i=0;i<MOTOR_COUNT;i++){
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3301      	adds	r3, #1
 800927e:	607b      	str	r3, [r7, #4]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2b07      	cmp	r3, #7
 8009284:	dded      	ble.n	8009262 <firmware_and_system_init+0x76>
 }
 /* referee system init*/
 referee_init(&referee);
 8009286:	480f      	ldr	r0, [pc, #60]	; (80092c4 <firmware_and_system_init+0xd8>)
 8009288:	f7ff f8b0 	bl	80083ec <referee_init>

 /* init buzzer */
 buzzer_init(&buzzer);
 800928c:	480e      	ldr	r0, [pc, #56]	; (80092c8 <firmware_and_system_init+0xdc>)
 800928e:	f7fd fa89 	bl	80067a4 <buzzer_init>

 /* init vision pack */
 uc_rx_pack_init(&uc_rx_pack);
 8009292:	480e      	ldr	r0, [pc, #56]	; (80092cc <firmware_and_system_init+0xe0>)
 8009294:	f7fe fedc 	bl	8008050 <uc_rx_pack_init>

 /* DWT init */
 dwt_init();
 8009298:	f7fd fc06 	bl	8006aa8 <dwt_init>

 return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	2000d7e8 	.word	0x2000d7e8
 80092ac:	2000d7c0 	.word	0x2000d7c0
 80092b0:	2000dab4 	.word	0x2000dab4
 80092b4:	2000da24 	.word	0x2000da24
 80092b8:	40021400 	.word	0x40021400
 80092bc:	20004718 	.word	0x20004718
 80092c0:	20005278 	.word	0x20005278
 80092c4:	2000d508 	.word	0x2000d508
 80092c8:	2000d720 	.word	0x2000d720
 80092cc:	2000d7b0 	.word	0x2000d7b0

080092d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim->Instance == TIM13)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a15      	ldr	r2, [pc, #84]	; (8009334 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d11c      	bne.n	800931c <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		if(debugger_signal_flag == 1)
 80092e2:	4b15      	ldr	r3, [pc, #84]	; (8009338 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d104      	bne.n	80092f4 <HAL_TIM_PeriodElapsedCallback+0x24>
			++debugger_signal_counter;
 80092ea:	4b14      	ldr	r3, [pc, #80]	; (800933c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3301      	adds	r3, #1
 80092f0:	4a12      	ldr	r2, [pc, #72]	; (800933c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80092f2:	6013      	str	r3, [r2, #0]
		if(shoot_reserve_flag == 1)
 80092f4:	4b12      	ldr	r3, [pc, #72]	; (8009340 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d105      	bne.n	8009308 <HAL_TIM_PeriodElapsedCallback+0x38>
			++shoot_reserve_counter;
 80092fc:	4b11      	ldr	r3, [pc, #68]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	3301      	adds	r3, #1
 8009302:	b2da      	uxtb	r2, r3
 8009304:	4b0f      	ldr	r3, [pc, #60]	; (8009344 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8009306:	701a      	strb	r2, [r3, #0]
		if(chassis_gyro_flag ==1)
 8009308:	4b0f      	ldr	r3, [pc, #60]	; (8009348 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d105      	bne.n	800931c <HAL_TIM_PeriodElapsedCallback+0x4c>
			++chassis_gyro_counter;
 8009310:	4b0e      	ldr	r3, [pc, #56]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8009312:	881b      	ldrh	r3, [r3, #0]
 8009314:	3301      	adds	r3, #1
 8009316:	b29a      	uxth	r2, r3
 8009318:	4b0c      	ldr	r3, [pc, #48]	; (800934c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800931a:	801a      	strh	r2, [r3, #0]
	}
	  /* USER CODE END Callback 0 */
	  if (htim->Instance == TIM5) {
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a0b      	ldr	r2, [pc, #44]	; (8009350 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d101      	bne.n	800932a <HAL_TIM_PeriodElapsedCallback+0x5a>
		  HAL_IncTick();
 8009326:	f001 f8ab 	bl	800a480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800932a:	bf00      	nop
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	40001c00 	.word	0x40001c00
 8009338:	200007e8 	.word	0x200007e8
 800933c:	200007e4 	.word	0x200007e4
 8009340:	200007dc 	.word	0x200007dc
 8009344:	200007dd 	.word	0x200007dd
 8009348:	200008ee 	.word	0x200008ee
 800934c:	200008ec 	.word	0x200008ec
 8009350:	40000c00 	.word	0x40000c00

08009354 <HAL_UART_RxCpltCallback>:
 * @note   This function is called when：
 * 			 Referee system recv: UART3_DMA1_Stream1
 * 			 Mini PC recv: 		  UART6_DMA2_Stream1
 *
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  if(huart == &huart2 && board_status == CHASSIS_BOARD){
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a16      	ldr	r2, [pc, #88]	; (80093b8 <HAL_UART_RxCpltCallback+0x64>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d10d      	bne.n	8009380 <HAL_UART_RxCpltCallback+0x2c>
 8009364:	4b15      	ldr	r3, [pc, #84]	; (80093bc <HAL_UART_RxCpltCallback+0x68>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d109      	bne.n	8009380 <HAL_UART_RxCpltCallback+0x2c>
	 /*read data*/
	 referee_read_data(&referee, ref_rx_frame);
 800936c:	4914      	ldr	r1, [pc, #80]	; (80093c0 <HAL_UART_RxCpltCallback+0x6c>)
 800936e:	4815      	ldr	r0, [pc, #84]	; (80093c4 <HAL_UART_RxCpltCallback+0x70>)
 8009370:	f7ff f87c 	bl	800846c <referee_read_data>
	 /* re-activate DMA */
	 HAL_UART_Receive_DMA(&huart2, ref_rx_frame, sizeof(ref_rx_frame));
 8009374:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009378:	4911      	ldr	r1, [pc, #68]	; (80093c0 <HAL_UART_RxCpltCallback+0x6c>)
 800937a:	480f      	ldr	r0, [pc, #60]	; (80093b8 <HAL_UART_RxCpltCallback+0x64>)
 800937c:	f004 fdcb 	bl	800df16 <HAL_UART_Receive_DMA>
  }
  if(huart == &huart1 && board_status == GIMBAL_BOARD){
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a11      	ldr	r2, [pc, #68]	; (80093c8 <HAL_UART_RxCpltCallback+0x74>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d113      	bne.n	80093b0 <HAL_UART_RxCpltCallback+0x5c>
 8009388:	4b0c      	ldr	r3, [pc, #48]	; (80093bc <HAL_UART_RxCpltCallback+0x68>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10f      	bne.n	80093b0 <HAL_UART_RxCpltCallback+0x5c>
	  uint8_t fail_indicator = 1;
 8009390:	2301      	movs	r3, #1
 8009392:	73fb      	strb	r3, [r7, #15]
	  /*read data from mini pc pack*/
	  fail_indicator = uc_parse_recv_packet(pdata, &uc_rx_pack);
 8009394:	490d      	ldr	r1, [pc, #52]	; (80093cc <HAL_UART_RxCpltCallback+0x78>)
 8009396:	480e      	ldr	r0, [pc, #56]	; (80093d0 <HAL_UART_RxCpltCallback+0x7c>)
 8009398:	f7fe fe98 	bl	80080cc <uc_parse_recv_packet>
 800939c:	4603      	mov	r3, r0
 800939e:	73fb      	strb	r3, [r7, #15]
	  /* re-activate DMA */
	  if(fail_indicator == 0)
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d104      	bne.n	80093b0 <HAL_UART_RxCpltCallback+0x5c>
		  HAL_UART_Receive_DMA(&huart1, pdata, UC_RX_PACKLEN);
 80093a6:	220c      	movs	r2, #12
 80093a8:	4909      	ldr	r1, [pc, #36]	; (80093d0 <HAL_UART_RxCpltCallback+0x7c>)
 80093aa:	4807      	ldr	r0, [pc, #28]	; (80093c8 <HAL_UART_RxCpltCallback+0x74>)
 80093ac:	f004 fdb3 	bl	800df16 <HAL_UART_Receive_DMA>
  }
}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	2000dd04 	.word	0x2000dd04
 80093bc:	20004718 	.word	0x20004718
 80093c0:	200007ec 	.word	0x200007ec
 80093c4:	2000d508 	.word	0x2000d508
 80093c8:	2000dcc0 	.word	0x2000dcc0
 80093cc:	2000d7b0 	.word	0x2000d7b0
 80093d0:	200008f0 	.word	0x200008f0

080093d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80093d4:	b480      	push	{r7}
 80093d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80093d8:	b672      	cpsid	i
}
 80093da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80093dc:	e7fe      	b.n	80093dc <Error_Handler+0x8>
	...

080093e0 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80093e4:	4b17      	ldr	r3, [pc, #92]	; (8009444 <MX_SPI1_Init+0x64>)
 80093e6:	4a18      	ldr	r2, [pc, #96]	; (8009448 <MX_SPI1_Init+0x68>)
 80093e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80093ea:	4b16      	ldr	r3, [pc, #88]	; (8009444 <MX_SPI1_Init+0x64>)
 80093ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80093f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80093f2:	4b14      	ldr	r3, [pc, #80]	; (8009444 <MX_SPI1_Init+0x64>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80093f8:	4b12      	ldr	r3, [pc, #72]	; (8009444 <MX_SPI1_Init+0x64>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80093fe:	4b11      	ldr	r3, [pc, #68]	; (8009444 <MX_SPI1_Init+0x64>)
 8009400:	2202      	movs	r2, #2
 8009402:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009404:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <MX_SPI1_Init+0x64>)
 8009406:	2201      	movs	r2, #1
 8009408:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800940a:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <MX_SPI1_Init+0x64>)
 800940c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009410:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8009412:	4b0c      	ldr	r3, [pc, #48]	; (8009444 <MX_SPI1_Init+0x64>)
 8009414:	2238      	movs	r2, #56	; 0x38
 8009416:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009418:	4b0a      	ldr	r3, [pc, #40]	; (8009444 <MX_SPI1_Init+0x64>)
 800941a:	2200      	movs	r2, #0
 800941c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <MX_SPI1_Init+0x64>)
 8009420:	2200      	movs	r2, #0
 8009422:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009424:	4b07      	ldr	r3, [pc, #28]	; (8009444 <MX_SPI1_Init+0x64>)
 8009426:	2200      	movs	r2, #0
 8009428:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800942a:	4b06      	ldr	r3, [pc, #24]	; (8009444 <MX_SPI1_Init+0x64>)
 800942c:	220a      	movs	r2, #10
 800942e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009430:	4804      	ldr	r0, [pc, #16]	; (8009444 <MX_SPI1_Init+0x64>)
 8009432:	f003 fb0b 	bl	800ca4c <HAL_SPI_Init>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800943c:	f7ff ffca 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009440:	bf00      	nop
 8009442:	bd80      	pop	{r7, pc}
 8009444:	2000d87c 	.word	0x2000d87c
 8009448:	40013000 	.word	0x40013000

0800944c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	; 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009454:	f107 0314 	add.w	r3, r7, #20
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	605a      	str	r2, [r3, #4]
 800945e:	609a      	str	r2, [r3, #8]
 8009460:	60da      	str	r2, [r3, #12]
 8009462:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a57      	ldr	r2, [pc, #348]	; (80095c8 <HAL_SPI_MspInit+0x17c>)
 800946a:	4293      	cmp	r3, r2
 800946c:	f040 80a8 	bne.w	80095c0 <HAL_SPI_MspInit+0x174>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009470:	2300      	movs	r3, #0
 8009472:	613b      	str	r3, [r7, #16]
 8009474:	4b55      	ldr	r3, [pc, #340]	; (80095cc <HAL_SPI_MspInit+0x180>)
 8009476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009478:	4a54      	ldr	r2, [pc, #336]	; (80095cc <HAL_SPI_MspInit+0x180>)
 800947a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800947e:	6453      	str	r3, [r2, #68]	; 0x44
 8009480:	4b52      	ldr	r3, [pc, #328]	; (80095cc <HAL_SPI_MspInit+0x180>)
 8009482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009488:	613b      	str	r3, [r7, #16]
 800948a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	4b4e      	ldr	r3, [pc, #312]	; (80095cc <HAL_SPI_MspInit+0x180>)
 8009492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009494:	4a4d      	ldr	r2, [pc, #308]	; (80095cc <HAL_SPI_MspInit+0x180>)
 8009496:	f043 0302 	orr.w	r3, r3, #2
 800949a:	6313      	str	r3, [r2, #48]	; 0x30
 800949c:	4b4b      	ldr	r3, [pc, #300]	; (80095cc <HAL_SPI_MspInit+0x180>)
 800949e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a0:	f003 0302 	and.w	r3, r3, #2
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094a8:	2300      	movs	r3, #0
 80094aa:	60bb      	str	r3, [r7, #8]
 80094ac:	4b47      	ldr	r3, [pc, #284]	; (80095cc <HAL_SPI_MspInit+0x180>)
 80094ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b0:	4a46      	ldr	r2, [pc, #280]	; (80095cc <HAL_SPI_MspInit+0x180>)
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	6313      	str	r3, [r2, #48]	; 0x30
 80094b8:	4b44      	ldr	r3, [pc, #272]	; (80095cc <HAL_SPI_MspInit+0x180>)
 80094ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094bc:	f003 0301 	and.w	r3, r3, #1
 80094c0:	60bb      	str	r3, [r7, #8]
 80094c2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80094c4:	2318      	movs	r3, #24
 80094c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094c8:	2302      	movs	r3, #2
 80094ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d0:	2303      	movs	r3, #3
 80094d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80094d4:	2305      	movs	r3, #5
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094d8:	f107 0314 	add.w	r3, r7, #20
 80094dc:	4619      	mov	r1, r3
 80094de:	483c      	ldr	r0, [pc, #240]	; (80095d0 <HAL_SPI_MspInit+0x184>)
 80094e0:	f002 fb42 	bl	800bb68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80094e4:	2380      	movs	r3, #128	; 0x80
 80094e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094e8:	2302      	movs	r3, #2
 80094ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ec:	2300      	movs	r3, #0
 80094ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094f0:	2303      	movs	r3, #3
 80094f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80094f4:	2305      	movs	r3, #5
 80094f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094f8:	f107 0314 	add.w	r3, r7, #20
 80094fc:	4619      	mov	r1, r3
 80094fe:	4835      	ldr	r0, [pc, #212]	; (80095d4 <HAL_SPI_MspInit+0x188>)
 8009500:	f002 fb32 	bl	800bb68 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8009504:	4b34      	ldr	r3, [pc, #208]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 8009506:	4a35      	ldr	r2, [pc, #212]	; (80095dc <HAL_SPI_MspInit+0x190>)
 8009508:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800950a:	4b33      	ldr	r3, [pc, #204]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 800950c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8009510:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009512:	4b31      	ldr	r3, [pc, #196]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 8009514:	2200      	movs	r2, #0
 8009516:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009518:	4b2f      	ldr	r3, [pc, #188]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 800951a:	2200      	movs	r2, #0
 800951c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800951e:	4b2e      	ldr	r3, [pc, #184]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 8009520:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009524:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009526:	4b2c      	ldr	r3, [pc, #176]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 8009528:	2200      	movs	r2, #0
 800952a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800952c:	4b2a      	ldr	r3, [pc, #168]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 800952e:	2200      	movs	r2, #0
 8009530:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8009532:	4b29      	ldr	r3, [pc, #164]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 8009534:	2200      	movs	r2, #0
 8009536:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8009538:	4b27      	ldr	r3, [pc, #156]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 800953a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800953e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009540:	4b25      	ldr	r3, [pc, #148]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 8009542:	2200      	movs	r2, #0
 8009544:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8009546:	4824      	ldr	r0, [pc, #144]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 8009548:	f001 ff2e 	bl	800b3a8 <HAL_DMA_Init>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 8009552:	f7ff ff3f 	bl	80093d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a1f      	ldr	r2, [pc, #124]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 800955a:	64da      	str	r2, [r3, #76]	; 0x4c
 800955c:	4a1e      	ldr	r2, [pc, #120]	; (80095d8 <HAL_SPI_MspInit+0x18c>)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8009562:	4b1f      	ldr	r3, [pc, #124]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 8009564:	4a1f      	ldr	r2, [pc, #124]	; (80095e4 <HAL_SPI_MspInit+0x198>)
 8009566:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8009568:	4b1d      	ldr	r3, [pc, #116]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 800956a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800956e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009570:	4b1b      	ldr	r3, [pc, #108]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 8009572:	2240      	movs	r2, #64	; 0x40
 8009574:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009576:	4b1a      	ldr	r3, [pc, #104]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 8009578:	2200      	movs	r2, #0
 800957a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800957c:	4b18      	ldr	r3, [pc, #96]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 800957e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009582:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009584:	4b16      	ldr	r3, [pc, #88]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 8009586:	2200      	movs	r2, #0
 8009588:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800958a:	4b15      	ldr	r3, [pc, #84]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 800958c:	2200      	movs	r2, #0
 800958e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8009590:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 8009592:	2200      	movs	r2, #0
 8009594:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8009596:	4b12      	ldr	r3, [pc, #72]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 8009598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800959c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800959e:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80095a4:	480e      	ldr	r0, [pc, #56]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 80095a6:	f001 feff 	bl	800b3a8 <HAL_DMA_Init>
 80095aa:	4603      	mov	r3, r0
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <HAL_SPI_MspInit+0x168>
    {
      Error_Handler();
 80095b0:	f7ff ff10 	bl	80093d4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a0a      	ldr	r2, [pc, #40]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 80095b8:	649a      	str	r2, [r3, #72]	; 0x48
 80095ba:	4a09      	ldr	r2, [pc, #36]	; (80095e0 <HAL_SPI_MspInit+0x194>)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6393      	str	r3, [r2, #56]	; 0x38
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
//    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
//    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80095c0:	bf00      	nop
 80095c2:	3728      	adds	r7, #40	; 0x28
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	40013000 	.word	0x40013000
 80095cc:	40023800 	.word	0x40023800
 80095d0:	40020400 	.word	0x40020400
 80095d4:	40020000 	.word	0x40020000
 80095d8:	2000d8d4 	.word	0x2000d8d4
 80095dc:	40026440 	.word	0x40026440
 80095e0:	2000d934 	.word	0x2000d934
 80095e4:	40026458 	.word	0x40026458

080095e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80095ee:	2300      	movs	r3, #0
 80095f0:	607b      	str	r3, [r7, #4]
 80095f2:	4b12      	ldr	r3, [pc, #72]	; (800963c <HAL_MspInit+0x54>)
 80095f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095f6:	4a11      	ldr	r2, [pc, #68]	; (800963c <HAL_MspInit+0x54>)
 80095f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095fc:	6453      	str	r3, [r2, #68]	; 0x44
 80095fe:	4b0f      	ldr	r3, [pc, #60]	; (800963c <HAL_MspInit+0x54>)
 8009600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009606:	607b      	str	r3, [r7, #4]
 8009608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800960a:	2300      	movs	r3, #0
 800960c:	603b      	str	r3, [r7, #0]
 800960e:	4b0b      	ldr	r3, [pc, #44]	; (800963c <HAL_MspInit+0x54>)
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	4a0a      	ldr	r2, [pc, #40]	; (800963c <HAL_MspInit+0x54>)
 8009614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009618:	6413      	str	r3, [r2, #64]	; 0x40
 800961a:	4b08      	ldr	r3, [pc, #32]	; (800963c <HAL_MspInit+0x54>)
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009622:	603b      	str	r3, [r7, #0]
 8009624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009626:	2200      	movs	r2, #0
 8009628:	210f      	movs	r1, #15
 800962a:	f06f 0001 	mvn.w	r0, #1
 800962e:	f001 fe84 	bl	800b33a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009632:	bf00      	nop
 8009634:	3708      	adds	r7, #8
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	40023800 	.word	0x40023800

08009640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009644:	e7fe      	b.n	8009644 <NMI_Handler+0x4>

08009646 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009646:	b480      	push	{r7}
 8009648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800964a:	e7fe      	b.n	800964a <HardFault_Handler+0x4>

0800964c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009650:	e7fe      	b.n	8009650 <MemManage_Handler+0x4>

08009652 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009652:	b480      	push	{r7}
 8009654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009656:	e7fe      	b.n	8009656 <BusFault_Handler+0x4>

08009658 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009658:	b480      	push	{r7}
 800965a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800965c:	e7fe      	b.n	800965c <UsageFault_Handler+0x4>

0800965e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800965e:	b480      	push	{r7}
 8009660:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009662:	bf00      	nop
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009670:	f000 ff06 	bl	800a480 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8009674:	f006 f8b0 	bl	800f7d8 <xTaskGetSchedulerState>
 8009678:	4603      	mov	r3, r0
 800967a:	2b01      	cmp	r3, #1
 800967c:	d001      	beq.n	8009682 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800967e:	f006 faf3 	bl	800fc68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009682:	bf00      	nop
 8009684:	bd80      	pop	{r7, pc}

08009686 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SOFTWARE_EXTI_Pin);
 800968a:	2001      	movs	r0, #1
 800968c:	f002 fc3a 	bl	800bf04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009690:	bf00      	nop
 8009692:	bd80      	pop	{r7, pc}

08009694 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CS1_ACCEL_Pin);
 8009698:	2010      	movs	r0, #16
 800969a:	f002 fc33 	bl	800bf04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800969e:	bf00      	nop
 80096a0:	bd80      	pop	{r7, pc}
	...

080096a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80096a8:	4802      	ldr	r0, [pc, #8]	; (80096b4 <DMA1_Stream1_IRQHandler+0x10>)
 80096aa:	f001 fff3 	bl	800b694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80096ae:	bf00      	nop
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	2000db5c 	.word	0x2000db5c

080096b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80096bc:	4802      	ldr	r0, [pc, #8]	; (80096c8 <DMA1_Stream5_IRQHandler+0x10>)
 80096be:	f001 ffe9 	bl	800b694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80096c2:	bf00      	nop
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	2000dafc 	.word	0x2000dafc

080096cc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80096d0:	4802      	ldr	r0, [pc, #8]	; (80096dc <CAN1_TX_IRQHandler+0x10>)
 80096d2:	f001 fb28 	bl	800ad26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80096d6:	bf00      	nop
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	2000d7e8 	.word	0x2000d7e8

080096e0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80096e4:	4802      	ldr	r0, [pc, #8]	; (80096f0 <CAN1_RX0_IRQHandler+0x10>)
 80096e6:	f001 fb1e 	bl	800ad26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80096ea:	bf00      	nop
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	2000d7e8 	.word	0x2000d7e8

080096f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_GYRO_Pin);
 80096f8:	2020      	movs	r0, #32
 80096fa:	f002 fc03 	bl	800bf04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80096fe:	bf00      	nop
 8009700:	bd80      	pop	{r7, pc}
	...

08009704 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8009708:	4803      	ldr	r0, [pc, #12]	; (8009718 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800970a:	f003 fe6d 	bl	800d3e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800970e:	4803      	ldr	r0, [pc, #12]	; (800971c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8009710:	f003 fe6a 	bl	800d3e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8009714:	bf00      	nop
 8009716:	bd80      	pop	{r7, pc}
 8009718:	2000d994 	.word	0x2000d994
 800971c:	2000dab4 	.word	0x2000dab4

08009720 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009724:	4802      	ldr	r0, [pc, #8]	; (8009730 <CAN2_TX_IRQHandler+0x10>)
 8009726:	f001 fafe 	bl	800ad26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800972a:	bf00      	nop
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	2000d7c0 	.word	0x2000d7c0

08009734 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8009738:	4802      	ldr	r0, [pc, #8]	; (8009744 <CAN2_RX0_IRQHandler+0x10>)
 800973a:	f001 faf4 	bl	800ad26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800973e:	bf00      	nop
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	2000d7c0 	.word	0x2000d7c0

08009748 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800974c:	4802      	ldr	r0, [pc, #8]	; (8009758 <DMA2_Stream5_IRQHandler+0x10>)
 800974e:	f001 ffa1 	bl	800b694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8009752:	bf00      	nop
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	2000dc60 	.word	0x2000dc60

0800975c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009760:	4802      	ldr	r0, [pc, #8]	; (800976c <DMA2_Stream7_IRQHandler+0x10>)
 8009762:	f001 ff97 	bl	800b694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8009766:	bf00      	nop
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	2000dc00 	.word	0x2000dc00

08009770 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
	return 1;
 8009774:	2301      	movs	r3, #1
}
 8009776:	4618      	mov	r0, r3
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <_kill>:

int _kill(int pid, int sig)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800978a:	f006 fd53 	bl	8010234 <__errno>
 800978e:	4603      	mov	r3, r0
 8009790:	2216      	movs	r2, #22
 8009792:	601a      	str	r2, [r3, #0]
	return -1;
 8009794:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009798:	4618      	mov	r0, r3
 800979a:	3708      	adds	r7, #8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <_exit>:

void _exit (int status)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80097a8:	f04f 31ff 	mov.w	r1, #4294967295
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff ffe7 	bl	8009780 <_kill>
	while (1) {}		/* Make sure we hang here */
 80097b2:	e7fe      	b.n	80097b2 <_exit+0x12>

080097b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b086      	sub	sp, #24
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	e00a      	b.n	80097dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80097c6:	f3af 8000 	nop.w
 80097ca:	4601      	mov	r1, r0
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	1c5a      	adds	r2, r3, #1
 80097d0:	60ba      	str	r2, [r7, #8]
 80097d2:	b2ca      	uxtb	r2, r1
 80097d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	3301      	adds	r3, #1
 80097da:	617b      	str	r3, [r7, #20]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	dbf0      	blt.n	80097c6 <_read+0x12>
	}

return len;
 80097e4:	687b      	ldr	r3, [r7, #4]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b086      	sub	sp, #24
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	60f8      	str	r0, [r7, #12]
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	e009      	b.n	8009814 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	60ba      	str	r2, [r7, #8]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	4618      	mov	r0, r3
 800980a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	3301      	adds	r3, #1
 8009812:	617b      	str	r3, [r7, #20]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	429a      	cmp	r2, r3
 800981a:	dbf1      	blt.n	8009800 <_write+0x12>
	}
	return len;
 800981c:	687b      	ldr	r3, [r7, #4]
}
 800981e:	4618      	mov	r0, r3
 8009820:	3718      	adds	r7, #24
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <_close>:

int _close(int file)
{
 8009826:	b480      	push	{r7}
 8009828:	b083      	sub	sp, #12
 800982a:	af00      	add	r7, sp, #0
 800982c:	6078      	str	r0, [r7, #4]
	return -1;
 800982e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009832:	4618      	mov	r0, r3
 8009834:	370c      	adds	r7, #12
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr

0800983e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800984e:	605a      	str	r2, [r3, #4]
	return 0;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <_isatty>:

int _isatty(int file)
{
 800985e:	b480      	push	{r7}
 8009860:	b083      	sub	sp, #12
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
	return 1;
 8009866:	2301      	movs	r3, #1
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
	return 0;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3714      	adds	r7, #20
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr
	...

08009890 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009898:	4a14      	ldr	r2, [pc, #80]	; (80098ec <_sbrk+0x5c>)
 800989a:	4b15      	ldr	r3, [pc, #84]	; (80098f0 <_sbrk+0x60>)
 800989c:	1ad3      	subs	r3, r2, r3
 800989e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80098a0:	697b      	ldr	r3, [r7, #20]
 80098a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80098a4:	4b13      	ldr	r3, [pc, #76]	; (80098f4 <_sbrk+0x64>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80098ac:	4b11      	ldr	r3, [pc, #68]	; (80098f4 <_sbrk+0x64>)
 80098ae:	4a12      	ldr	r2, [pc, #72]	; (80098f8 <_sbrk+0x68>)
 80098b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80098b2:	4b10      	ldr	r3, [pc, #64]	; (80098f4 <_sbrk+0x64>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	4413      	add	r3, r2
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	429a      	cmp	r2, r3
 80098be:	d207      	bcs.n	80098d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80098c0:	f006 fcb8 	bl	8010234 <__errno>
 80098c4:	4603      	mov	r3, r0
 80098c6:	220c      	movs	r2, #12
 80098c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80098ca:	f04f 33ff 	mov.w	r3, #4294967295
 80098ce:	e009      	b.n	80098e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80098d0:	4b08      	ldr	r3, [pc, #32]	; (80098f4 <_sbrk+0x64>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80098d6:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <_sbrk+0x64>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	4a05      	ldr	r2, [pc, #20]	; (80098f4 <_sbrk+0x64>)
 80098e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20020000 	.word	0x20020000
 80098f0:	00000400 	.word	0x00000400
 80098f4:	20000910 	.word	0x20000910
 80098f8:	2000dd60 	.word	0x2000dd60

080098fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80098fc:	b480      	push	{r7}
 80098fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009900:	4b06      	ldr	r3, [pc, #24]	; (800991c <SystemInit+0x20>)
 8009902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009906:	4a05      	ldr	r2, [pc, #20]	; (800991c <SystemInit+0x20>)
 8009908:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800990c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009910:	bf00      	nop
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	e000ed00 	.word	0xe000ed00

08009920 <MX_TIM4_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim13;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b08a      	sub	sp, #40	; 0x28
 8009924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009926:	f107 0320 	add.w	r3, r7, #32
 800992a:	2200      	movs	r2, #0
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009930:	1d3b      	adds	r3, r7, #4
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
 8009936:	605a      	str	r2, [r3, #4]
 8009938:	609a      	str	r2, [r3, #8]
 800993a:	60da      	str	r2, [r3, #12]
 800993c:	611a      	str	r2, [r3, #16]
 800993e:	615a      	str	r2, [r3, #20]
 8009940:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009942:	4b22      	ldr	r3, [pc, #136]	; (80099cc <MX_TIM4_Init+0xac>)
 8009944:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <MX_TIM4_Init+0xb0>)
 8009946:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 35;
 8009948:	4b20      	ldr	r3, [pc, #128]	; (80099cc <MX_TIM4_Init+0xac>)
 800994a:	2223      	movs	r2, #35	; 0x23
 800994c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800994e:	4b1f      	ldr	r3, [pc, #124]	; (80099cc <MX_TIM4_Init+0xac>)
 8009950:	2200      	movs	r2, #0
 8009952:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8009954:	4b1d      	ldr	r3, [pc, #116]	; (80099cc <MX_TIM4_Init+0xac>)
 8009956:	f242 720f 	movw	r2, #9999	; 0x270f
 800995a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800995c:	4b1b      	ldr	r3, [pc, #108]	; (80099cc <MX_TIM4_Init+0xac>)
 800995e:	2200      	movs	r2, #0
 8009960:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009962:	4b1a      	ldr	r3, [pc, #104]	; (80099cc <MX_TIM4_Init+0xac>)
 8009964:	2200      	movs	r2, #0
 8009966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009968:	4818      	ldr	r0, [pc, #96]	; (80099cc <MX_TIM4_Init+0xac>)
 800996a:	f003 fc25 	bl	800d1b8 <HAL_TIM_PWM_Init>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8009974:	f7ff fd2e 	bl	80093d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009978:	2300      	movs	r3, #0
 800997a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800997c:	2300      	movs	r3, #0
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009980:	f107 0320 	add.w	r3, r7, #32
 8009984:	4619      	mov	r1, r3
 8009986:	4811      	ldr	r0, [pc, #68]	; (80099cc <MX_TIM4_Init+0xac>)
 8009988:	f004 f996 	bl	800dcb8 <HAL_TIMEx_MasterConfigSynchronization>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8009992:	f7ff fd1f 	bl	80093d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009996:	2360      	movs	r3, #96	; 0x60
 8009998:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800999e:	2300      	movs	r3, #0
 80099a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80099a2:	2300      	movs	r3, #0
 80099a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80099a6:	1d3b      	adds	r3, r7, #4
 80099a8:	2208      	movs	r2, #8
 80099aa:	4619      	mov	r1, r3
 80099ac:	4807      	ldr	r0, [pc, #28]	; (80099cc <MX_TIM4_Init+0xac>)
 80099ae:	f003 fe23 	bl	800d5f8 <HAL_TIM_PWM_ConfigChannel>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80099b8:	f7ff fd0c 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80099bc:	4803      	ldr	r0, [pc, #12]	; (80099cc <MX_TIM4_Init+0xac>)
 80099be:	f000 fa01 	bl	8009dc4 <HAL_TIM_MspPostInit>

}
 80099c2:	bf00      	nop
 80099c4:	3728      	adds	r7, #40	; 0x28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
 80099ca:	bf00      	nop
 80099cc:	2000d9dc 	.word	0x2000d9dc
 80099d0:	40000800 	.word	0x40000800

080099d4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08a      	sub	sp, #40	; 0x28
 80099d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80099da:	f107 0320 	add.w	r3, r7, #32
 80099de:	2200      	movs	r2, #0
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80099e4:	1d3b      	adds	r3, r7, #4
 80099e6:	2200      	movs	r2, #0
 80099e8:	601a      	str	r2, [r3, #0]
 80099ea:	605a      	str	r2, [r3, #4]
 80099ec:	609a      	str	r2, [r3, #8]
 80099ee:	60da      	str	r2, [r3, #12]
 80099f0:	611a      	str	r2, [r3, #16]
 80099f2:	615a      	str	r2, [r3, #20]
 80099f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80099f6:	4b2d      	ldr	r3, [pc, #180]	; (8009aac <MX_TIM5_Init+0xd8>)
 80099f8:	4a2d      	ldr	r2, [pc, #180]	; (8009ab0 <MX_TIM5_Init+0xdc>)
 80099fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80099fc:	4b2b      	ldr	r3, [pc, #172]	; (8009aac <MX_TIM5_Init+0xd8>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a02:	4b2a      	ldr	r3, [pc, #168]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8009a08:	4b28      	ldr	r3, [pc, #160]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a10:	4b26      	ldr	r3, [pc, #152]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a16:	4b25      	ldr	r3, [pc, #148]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a18:	2200      	movs	r2, #0
 8009a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8009a1c:	4823      	ldr	r0, [pc, #140]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a1e:	f003 fbcb 	bl	800d1b8 <HAL_TIM_PWM_Init>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8009a28:	f7ff fcd4 	bl	80093d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a30:	2300      	movs	r3, #0
 8009a32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009a34:	f107 0320 	add.w	r3, r7, #32
 8009a38:	4619      	mov	r1, r3
 8009a3a:	481c      	ldr	r0, [pc, #112]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a3c:	f004 f93c 	bl	800dcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8009a46:	f7ff fcc5 	bl	80093d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009a4a:	2360      	movs	r3, #96	; 0x60
 8009a4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8009a4e:	f242 7310 	movw	r3, #10000	; 0x2710
 8009a52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009a54:	2300      	movs	r3, #0
 8009a56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009a5c:	1d3b      	adds	r3, r7, #4
 8009a5e:	2200      	movs	r2, #0
 8009a60:	4619      	mov	r1, r3
 8009a62:	4812      	ldr	r0, [pc, #72]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a64:	f003 fdc8 	bl	800d5f8 <HAL_TIM_PWM_ConfigChannel>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8009a6e:	f7ff fcb1 	bl	80093d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009a72:	1d3b      	adds	r3, r7, #4
 8009a74:	2204      	movs	r2, #4
 8009a76:	4619      	mov	r1, r3
 8009a78:	480c      	ldr	r0, [pc, #48]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a7a:	f003 fdbd 	bl	800d5f8 <HAL_TIM_PWM_ConfigChannel>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8009a84:	f7ff fca6 	bl	80093d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009a88:	1d3b      	adds	r3, r7, #4
 8009a8a:	2208      	movs	r2, #8
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4807      	ldr	r0, [pc, #28]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009a90:	f003 fdb2 	bl	800d5f8 <HAL_TIM_PWM_ConfigChannel>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8009a9a:	f7ff fc9b 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8009a9e:	4803      	ldr	r0, [pc, #12]	; (8009aac <MX_TIM5_Init+0xd8>)
 8009aa0:	f000 f990 	bl	8009dc4 <HAL_TIM_MspPostInit>

}
 8009aa4:	bf00      	nop
 8009aa6:	3728      	adds	r7, #40	; 0x28
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	2000da6c 	.word	0x2000da6c
 8009ab0:	40000c00 	.word	0x40000c00

08009ab4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b092      	sub	sp, #72	; 0x48
 8009ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009aba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009abe:	2200      	movs	r2, #0
 8009ac0:	601a      	str	r2, [r3, #0]
 8009ac2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]
 8009acc:	605a      	str	r2, [r3, #4]
 8009ace:	609a      	str	r2, [r3, #8]
 8009ad0:	60da      	str	r2, [r3, #12]
 8009ad2:	611a      	str	r2, [r3, #16]
 8009ad4:	615a      	str	r2, [r3, #20]
 8009ad6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009ad8:	1d3b      	adds	r3, r7, #4
 8009ada:	2220      	movs	r2, #32
 8009adc:	2100      	movs	r1, #0
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f006 fbf2 	bl	80102c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009ae4:	4b33      	ldr	r3, [pc, #204]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009ae6:	4a34      	ldr	r2, [pc, #208]	; (8009bb8 <MX_TIM8_Init+0x104>)
 8009ae8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 839;
 8009aea:	4b32      	ldr	r3, [pc, #200]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009aec:	f240 3247 	movw	r2, #839	; 0x347
 8009af0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009af2:	4b30      	ldr	r3, [pc, #192]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 8009af8:	4b2e      	ldr	r3, [pc, #184]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009afa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8009afe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b00:	4b2c      	ldr	r3, [pc, #176]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009b06:	4b2b      	ldr	r3, [pc, #172]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b0c:	4b29      	ldr	r3, [pc, #164]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8009b12:	4828      	ldr	r0, [pc, #160]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009b14:	f003 fb50 	bl	800d1b8 <HAL_TIM_PWM_Init>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8009b1e:	f7ff fc59 	bl	80093d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009b22:	2300      	movs	r3, #0
 8009b24:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009b2a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009b2e:	4619      	mov	r1, r3
 8009b30:	4820      	ldr	r0, [pc, #128]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009b32:	f004 f8c1 	bl	800dcb8 <HAL_TIMEx_MasterConfigSynchronization>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8009b3c:	f7ff fc4a 	bl	80093d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009b40:	2360      	movs	r3, #96	; 0x60
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8009b44:	2300      	movs	r3, #0
 8009b46:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009b54:	2300      	movs	r3, #0
 8009b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b60:	2204      	movs	r2, #4
 8009b62:	4619      	mov	r1, r3
 8009b64:	4813      	ldr	r0, [pc, #76]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009b66:	f003 fd47 	bl	800d5f8 <HAL_TIM_PWM_ConfigChannel>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8009b70:	f7ff fc30 	bl	80093d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009b74:	2300      	movs	r3, #0
 8009b76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009b80:	2300      	movs	r3, #0
 8009b82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009b84:	2300      	movs	r3, #0
 8009b86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009b92:	1d3b      	adds	r3, r7, #4
 8009b94:	4619      	mov	r1, r3
 8009b96:	4807      	ldr	r0, [pc, #28]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009b98:	f004 f90a 	bl	800ddb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8009ba2:	f7ff fc17 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009ba6:	4803      	ldr	r0, [pc, #12]	; (8009bb4 <MX_TIM8_Init+0x100>)
 8009ba8:	f000 f90c 	bl	8009dc4 <HAL_TIM_MspPostInit>

}
 8009bac:	bf00      	nop
 8009bae:	3748      	adds	r7, #72	; 0x48
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	2000d994 	.word	0x2000d994
 8009bb8:	40010400 	.word	0x40010400

08009bbc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b088      	sub	sp, #32
 8009bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009bc2:	1d3b      	adds	r3, r7, #4
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	605a      	str	r2, [r3, #4]
 8009bca:	609a      	str	r2, [r3, #8]
 8009bcc:	60da      	str	r2, [r3, #12]
 8009bce:	611a      	str	r2, [r3, #16]
 8009bd0:	615a      	str	r2, [r3, #20]
 8009bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009bd4:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009bd6:	4a1f      	ldr	r2, [pc, #124]	; (8009c54 <MX_TIM10_Init+0x98>)
 8009bd8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8009bda:	4b1d      	ldr	r3, [pc, #116]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009bdc:	2200      	movs	r2, #0
 8009bde:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009be0:	4b1b      	ldr	r3, [pc, #108]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 3999;
 8009be6:	4b1a      	ldr	r3, [pc, #104]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009be8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8009bec:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bee:	4b18      	ldr	r3, [pc, #96]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009bf4:	4b16      	ldr	r3, [pc, #88]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8009bfa:	4815      	ldr	r0, [pc, #84]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009bfc:	f003 fa1c 	bl	800d038 <HAL_TIM_Base_Init>
 8009c00:	4603      	mov	r3, r0
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d001      	beq.n	8009c0a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8009c06:	f7ff fbe5 	bl	80093d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8009c0a:	4811      	ldr	r0, [pc, #68]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009c0c:	f003 fad4 	bl	800d1b8 <HAL_TIM_PWM_Init>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d001      	beq.n	8009c1a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8009c16:	f7ff fbdd 	bl	80093d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c1a:	2360      	movs	r3, #96	; 0x60
 8009c1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c26:	2300      	movs	r3, #0
 8009c28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c2a:	1d3b      	adds	r3, r7, #4
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4807      	ldr	r0, [pc, #28]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009c32:	f003 fce1 	bl	800d5f8 <HAL_TIM_PWM_ConfigChannel>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d001      	beq.n	8009c40 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8009c3c:	f7ff fbca 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8009c40:	4803      	ldr	r0, [pc, #12]	; (8009c50 <MX_TIM10_Init+0x94>)
 8009c42:	f000 f8bf 	bl	8009dc4 <HAL_TIM_MspPostInit>

}
 8009c46:	bf00      	nop
 8009c48:	3720      	adds	r7, #32
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	2000da24 	.word	0x2000da24
 8009c54:	40014400 	.word	0x40014400

08009c58 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8009c5c:	4b0e      	ldr	r3, [pc, #56]	; (8009c98 <MX_TIM13_Init+0x40>)
 8009c5e:	4a0f      	ldr	r2, [pc, #60]	; (8009c9c <MX_TIM13_Init+0x44>)
 8009c60:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 839;
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <MX_TIM13_Init+0x40>)
 8009c64:	f240 3247 	movw	r2, #839	; 0x347
 8009c68:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c6a:	4b0b      	ldr	r3, [pc, #44]	; (8009c98 <MX_TIM13_Init+0x40>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8009c70:	4b09      	ldr	r3, [pc, #36]	; (8009c98 <MX_TIM13_Init+0x40>)
 8009c72:	f242 720f 	movw	r2, #9999	; 0x270f
 8009c76:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c78:	4b07      	ldr	r3, [pc, #28]	; (8009c98 <MX_TIM13_Init+0x40>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c7e:	4b06      	ldr	r3, [pc, #24]	; (8009c98 <MX_TIM13_Init+0x40>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8009c84:	4804      	ldr	r0, [pc, #16]	; (8009c98 <MX_TIM13_Init+0x40>)
 8009c86:	f003 f9d7 	bl	800d038 <HAL_TIM_Base_Init>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <MX_TIM13_Init+0x3c>
  {
    Error_Handler();
 8009c90:	f7ff fba0 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8009c94:	bf00      	nop
 8009c96:	bd80      	pop	{r7, pc}
 8009c98:	2000dab4 	.word	0x2000dab4
 8009c9c:	40001c00 	.word	0x40001c00

08009ca0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b086      	sub	sp, #24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a22      	ldr	r2, [pc, #136]	; (8009d38 <HAL_TIM_PWM_MspInit+0x98>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d10e      	bne.n	8009cd0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
 8009cb6:	4b21      	ldr	r3, [pc, #132]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	4a20      	ldr	r2, [pc, #128]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009cbc:	f043 0304 	orr.w	r3, r3, #4
 8009cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8009cc2:	4b1e      	ldr	r3, [pc, #120]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	f003 0304 	and.w	r3, r3, #4
 8009cca:	617b      	str	r3, [r7, #20]
 8009ccc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8009cce:	e02e      	b.n	8009d2e <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM5)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a1a      	ldr	r2, [pc, #104]	; (8009d40 <HAL_TIM_PWM_MspInit+0xa0>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d10e      	bne.n	8009cf8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009cda:	2300      	movs	r3, #0
 8009cdc:	613b      	str	r3, [r7, #16]
 8009cde:	4b17      	ldr	r3, [pc, #92]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	4a16      	ldr	r2, [pc, #88]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009ce4:	f043 0308 	orr.w	r3, r3, #8
 8009ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8009cea:	4b14      	ldr	r3, [pc, #80]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	f003 0308 	and.w	r3, r3, #8
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	693b      	ldr	r3, [r7, #16]
}
 8009cf6:	e01a      	b.n	8009d2e <HAL_TIM_PWM_MspInit+0x8e>
  else if(tim_pwmHandle->Instance==TIM8)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a11      	ldr	r2, [pc, #68]	; (8009d44 <HAL_TIM_PWM_MspInit+0xa4>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d115      	bne.n	8009d2e <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]
 8009d06:	4b0d      	ldr	r3, [pc, #52]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d0a:	4a0c      	ldr	r2, [pc, #48]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009d0c:	f043 0302 	orr.w	r3, r3, #2
 8009d10:	6453      	str	r3, [r2, #68]	; 0x44
 8009d12:	4b0a      	ldr	r3, [pc, #40]	; (8009d3c <HAL_TIM_PWM_MspInit+0x9c>)
 8009d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d16:	f003 0302 	and.w	r3, r3, #2
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8009d1e:	2200      	movs	r2, #0
 8009d20:	2105      	movs	r1, #5
 8009d22:	202c      	movs	r0, #44	; 0x2c
 8009d24:	f001 fb09 	bl	800b33a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009d28:	202c      	movs	r0, #44	; 0x2c
 8009d2a:	f001 fb22 	bl	800b372 <HAL_NVIC_EnableIRQ>
}
 8009d2e:	bf00      	nop
 8009d30:	3718      	adds	r7, #24
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	40000800 	.word	0x40000800
 8009d3c:	40023800 	.word	0x40023800
 8009d40:	40000c00 	.word	0x40000c00
 8009d44:	40010400 	.word	0x40010400

08009d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a18      	ldr	r2, [pc, #96]	; (8009db8 <HAL_TIM_Base_MspInit+0x70>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d10e      	bne.n	8009d78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	60fb      	str	r3, [r7, #12]
 8009d5e:	4b17      	ldr	r3, [pc, #92]	; (8009dbc <HAL_TIM_Base_MspInit+0x74>)
 8009d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d62:	4a16      	ldr	r2, [pc, #88]	; (8009dbc <HAL_TIM_Base_MspInit+0x74>)
 8009d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d68:	6453      	str	r3, [r2, #68]	; 0x44
 8009d6a:	4b14      	ldr	r3, [pc, #80]	; (8009dbc <HAL_TIM_Base_MspInit+0x74>)
 8009d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d72:	60fb      	str	r3, [r7, #12]
 8009d74:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8009d76:	e01a      	b.n	8009dae <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM13)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a10      	ldr	r2, [pc, #64]	; (8009dc0 <HAL_TIM_Base_MspInit+0x78>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d115      	bne.n	8009dae <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]
 8009d86:	4b0d      	ldr	r3, [pc, #52]	; (8009dbc <HAL_TIM_Base_MspInit+0x74>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	4a0c      	ldr	r2, [pc, #48]	; (8009dbc <HAL_TIM_Base_MspInit+0x74>)
 8009d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d90:	6413      	str	r3, [r2, #64]	; 0x40
 8009d92:	4b0a      	ldr	r3, [pc, #40]	; (8009dbc <HAL_TIM_Base_MspInit+0x74>)
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9a:	60bb      	str	r3, [r7, #8]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 5, 0);
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2105      	movs	r1, #5
 8009da2:	202c      	movs	r0, #44	; 0x2c
 8009da4:	f001 fac9 	bl	800b33a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009da8:	202c      	movs	r0, #44	; 0x2c
 8009daa:	f001 fae2 	bl	800b372 <HAL_NVIC_EnableIRQ>
}
 8009dae:	bf00      	nop
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	40014400 	.word	0x40014400
 8009dbc:	40023800 	.word	0x40023800
 8009dc0:	40001c00 	.word	0x40001c00

08009dc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b08c      	sub	sp, #48	; 0x30
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dcc:	f107 031c 	add.w	r3, r7, #28
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	605a      	str	r2, [r3, #4]
 8009dd6:	609a      	str	r2, [r3, #8]
 8009dd8:	60da      	str	r2, [r3, #12]
 8009dda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a48      	ldr	r2, [pc, #288]	; (8009f04 <HAL_TIM_MspPostInit+0x140>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d11f      	bne.n	8009e26 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009de6:	2300      	movs	r3, #0
 8009de8:	61bb      	str	r3, [r7, #24]
 8009dea:	4b47      	ldr	r3, [pc, #284]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dee:	4a46      	ldr	r2, [pc, #280]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009df0:	f043 0308 	orr.w	r3, r3, #8
 8009df4:	6313      	str	r3, [r2, #48]	; 0x30
 8009df6:	4b44      	ldr	r3, [pc, #272]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfa:	f003 0308 	and.w	r3, r3, #8
 8009dfe:	61bb      	str	r3, [r7, #24]
 8009e00:	69bb      	ldr	r3, [r7, #24]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = Buzzer_Pin_Pin;
 8009e02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e08:	2302      	movs	r3, #2
 8009e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e10:	2300      	movs	r3, #0
 8009e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009e14:	2302      	movs	r3, #2
 8009e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Buzzer_Pin_GPIO_Port, &GPIO_InitStruct);
 8009e18:	f107 031c 	add.w	r3, r7, #28
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	483b      	ldr	r0, [pc, #236]	; (8009f0c <HAL_TIM_MspPostInit+0x148>)
 8009e20:	f001 fea2 	bl	800bb68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8009e24:	e06a      	b.n	8009efc <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM5)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a39      	ldr	r2, [pc, #228]	; (8009f10 <HAL_TIM_MspPostInit+0x14c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d11e      	bne.n	8009e6e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	4b34      	ldr	r3, [pc, #208]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e38:	4a33      	ldr	r2, [pc, #204]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009e3a:	f043 0301 	orr.w	r3, r3, #1
 8009e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8009e40:	4b31      	ldr	r3, [pc, #196]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e44:	f003 0301 	and.w	r3, r3, #1
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_2;
 8009e4c:	2307      	movs	r3, #7
 8009e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e50:	2302      	movs	r3, #2
 8009e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e54:	2300      	movs	r3, #0
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e60:	f107 031c 	add.w	r3, r7, #28
 8009e64:	4619      	mov	r1, r3
 8009e66:	482b      	ldr	r0, [pc, #172]	; (8009f14 <HAL_TIM_MspPostInit+0x150>)
 8009e68:	f001 fe7e 	bl	800bb68 <HAL_GPIO_Init>
}
 8009e6c:	e046      	b.n	8009efc <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM8)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a29      	ldr	r2, [pc, #164]	; (8009f18 <HAL_TIM_MspPostInit+0x154>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d11e      	bne.n	8009eb6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]
 8009e7c:	4b22      	ldr	r3, [pc, #136]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e80:	4a21      	ldr	r2, [pc, #132]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e86:	6313      	str	r3, [r2, #48]	; 0x30
 8009e88:	4b1f      	ldr	r3, [pc, #124]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e90:	613b      	str	r3, [r7, #16]
 8009e92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Servo_Motor_Pin_Pin;
 8009e94:	2340      	movs	r3, #64	; 0x40
 8009e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e98:	2302      	movs	r3, #2
 8009e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo_Motor_Pin_GPIO_Port, &GPIO_InitStruct);
 8009ea8:	f107 031c 	add.w	r3, r7, #28
 8009eac:	4619      	mov	r1, r3
 8009eae:	481b      	ldr	r0, [pc, #108]	; (8009f1c <HAL_TIM_MspPostInit+0x158>)
 8009eb0:	f001 fe5a 	bl	800bb68 <HAL_GPIO_Init>
}
 8009eb4:	e022      	b.n	8009efc <HAL_TIM_MspPostInit+0x138>
  else if(timHandle->Instance==TIM10)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a19      	ldr	r2, [pc, #100]	; (8009f20 <HAL_TIM_MspPostInit+0x15c>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d11d      	bne.n	8009efc <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec8:	4a0f      	ldr	r2, [pc, #60]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009eca:	f043 0320 	orr.w	r3, r3, #32
 8009ece:	6313      	str	r3, [r2, #48]	; 0x30
 8009ed0:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <HAL_TIM_MspPostInit+0x144>)
 8009ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed4:	f003 0320 	and.w	r3, r3, #32
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_Heat_Pin_Pin;
 8009edc:	2340      	movs	r3, #64	; 0x40
 8009ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8009eec:	2303      	movs	r3, #3
 8009eee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(IMU_Heat_Pin_GPIO_Port, &GPIO_InitStruct);
 8009ef0:	f107 031c 	add.w	r3, r7, #28
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	480b      	ldr	r0, [pc, #44]	; (8009f24 <HAL_TIM_MspPostInit+0x160>)
 8009ef8:	f001 fe36 	bl	800bb68 <HAL_GPIO_Init>
}
 8009efc:	bf00      	nop
 8009efe:	3730      	adds	r7, #48	; 0x30
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	40000800 	.word	0x40000800
 8009f08:	40023800 	.word	0x40023800
 8009f0c:	40020c00 	.word	0x40020c00
 8009f10:	40000c00 	.word	0x40000c00
 8009f14:	40020000 	.word	0x40020000
 8009f18:	40010400 	.word	0x40010400
 8009f1c:	40022000 	.word	0x40022000
 8009f20:	40014400 	.word	0x40014400
 8009f24:	40021400 	.word	0x40021400

08009f28 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009f2c:	4b11      	ldr	r3, [pc, #68]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f2e:	4a12      	ldr	r2, [pc, #72]	; (8009f78 <MX_USART1_UART_Init+0x50>)
 8009f30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009f32:	4b10      	ldr	r3, [pc, #64]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009f38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009f3a:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009f40:	4b0c      	ldr	r3, [pc, #48]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009f46:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009f4c:	4b09      	ldr	r3, [pc, #36]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f4e:	220c      	movs	r2, #12
 8009f50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f52:	4b08      	ldr	r3, [pc, #32]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f58:	4b06      	ldr	r3, [pc, #24]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009f5e:	4805      	ldr	r0, [pc, #20]	; (8009f74 <MX_USART1_UART_Init+0x4c>)
 8009f60:	f003 ff8c 	bl	800de7c <HAL_UART_Init>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009f6a:	f7ff fa33 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009f6e:	bf00      	nop
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	2000dcc0 	.word	0x2000dcc0
 8009f78:	40011000 	.word	0x40011000

08009f7c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009f80:	4b14      	ldr	r3, [pc, #80]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009f82:	4a15      	ldr	r2, [pc, #84]	; (8009fd8 <MX_USART2_UART_Init+0x5c>)
 8009f84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009f86:	4b13      	ldr	r3, [pc, #76]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009f88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009f8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009f8e:	4b11      	ldr	r3, [pc, #68]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f94:	4b0f      	ldr	r3, [pc, #60]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009f9a:	4b0e      	ldr	r3, [pc, #56]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009fa0:	4b0c      	ldr	r3, [pc, #48]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009fa2:	220c      	movs	r2, #12
 8009fa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fa6:	4b0b      	ldr	r3, [pc, #44]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009fa8:	2200      	movs	r2, #0
 8009faa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fac:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009fae:	2200      	movs	r2, #0
 8009fb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009fb2:	4808      	ldr	r0, [pc, #32]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009fb4:	f003 ff62 	bl	800de7c <HAL_UART_Init>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8009fbe:	f7ff fa09 	bl	80093d4 <Error_Handler>
  else{
 	  HAL_UART_Receive_DMA(&huart2, ref_rx_frame, sizeof(ref_rx_frame));
   }
  /* USER CODE END USART2_Init 2 */

}
 8009fc2:	e005      	b.n	8009fd0 <MX_USART2_UART_Init+0x54>
 	  HAL_UART_Receive_DMA(&huart2, ref_rx_frame, sizeof(ref_rx_frame));
 8009fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fc8:	4904      	ldr	r1, [pc, #16]	; (8009fdc <MX_USART2_UART_Init+0x60>)
 8009fca:	4802      	ldr	r0, [pc, #8]	; (8009fd4 <MX_USART2_UART_Init+0x58>)
 8009fcc:	f003 ffa3 	bl	800df16 <HAL_UART_Receive_DMA>
}
 8009fd0:	bf00      	nop
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	2000dd04 	.word	0x2000dd04
 8009fd8:	40004400 	.word	0x40004400
 8009fdc:	200007ec 	.word	0x200007ec

08009fe0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009fe4:	4b11      	ldr	r3, [pc, #68]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 8009fe6:	4a12      	ldr	r2, [pc, #72]	; (800a030 <MX_USART3_UART_Init+0x50>)
 8009fe8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8009fea:	4b10      	ldr	r3, [pc, #64]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 8009fec:	4a11      	ldr	r2, [pc, #68]	; (800a034 <MX_USART3_UART_Init+0x54>)
 8009fee:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009ff0:	4b0e      	ldr	r3, [pc, #56]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009ff6:	4b0d      	ldr	r3, [pc, #52]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8009ffc:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 8009ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a002:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 800a006:	220c      	movs	r2, #12
 800a008:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a00a:	4b08      	ldr	r3, [pc, #32]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 800a012:	2200      	movs	r2, #0
 800a014:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a016:	4805      	ldr	r0, [pc, #20]	; (800a02c <MX_USART3_UART_Init+0x4c>)
 800a018:	f003 ff30 	bl	800de7c <HAL_UART_Init>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a022:	f7ff f9d7 	bl	80093d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
//  HAL_UART_Receive_IT(&huart3, rc_rx_buffer, DBUS_BUFFER_LEN);
  /* USER CODE END USART3_Init 2 */

}
 800a026:	bf00      	nop
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	2000dbbc 	.word	0x2000dbbc
 800a030:	40004800 	.word	0x40004800
 800a034:	000186a0 	.word	0x000186a0

0800a038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b08e      	sub	sp, #56	; 0x38
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	605a      	str	r2, [r3, #4]
 800a04a:	609a      	str	r2, [r3, #8]
 800a04c:	60da      	str	r2, [r3, #12]
 800a04e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a88      	ldr	r2, [pc, #544]	; (800a278 <HAL_UART_MspInit+0x240>)
 800a056:	4293      	cmp	r3, r2
 800a058:	f040 80ac 	bne.w	800a1b4 <HAL_UART_MspInit+0x17c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a05c:	2300      	movs	r3, #0
 800a05e:	623b      	str	r3, [r7, #32]
 800a060:	4b86      	ldr	r3, [pc, #536]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a064:	4a85      	ldr	r2, [pc, #532]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a066:	f043 0310 	orr.w	r3, r3, #16
 800a06a:	6453      	str	r3, [r2, #68]	; 0x44
 800a06c:	4b83      	ldr	r3, [pc, #524]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a06e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a070:	f003 0310 	and.w	r3, r3, #16
 800a074:	623b      	str	r3, [r7, #32]
 800a076:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a078:	2300      	movs	r3, #0
 800a07a:	61fb      	str	r3, [r7, #28]
 800a07c:	4b7f      	ldr	r3, [pc, #508]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a080:	4a7e      	ldr	r2, [pc, #504]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a082:	f043 0302 	orr.w	r3, r3, #2
 800a086:	6313      	str	r3, [r2, #48]	; 0x30
 800a088:	4b7c      	ldr	r3, [pc, #496]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	f003 0302 	and.w	r3, r3, #2
 800a090:	61fb      	str	r3, [r7, #28]
 800a092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a094:	2300      	movs	r3, #0
 800a096:	61bb      	str	r3, [r7, #24]
 800a098:	4b78      	ldr	r3, [pc, #480]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09c:	4a77      	ldr	r2, [pc, #476]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a09e:	f043 0301 	orr.w	r3, r3, #1
 800a0a2:	6313      	str	r3, [r2, #48]	; 0x30
 800a0a4:	4b75      	ldr	r3, [pc, #468]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0a8:	f003 0301 	and.w	r3, r3, #1
 800a0ac:	61bb      	str	r3, [r7, #24]
 800a0ae:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800a0b0:	2380      	movs	r3, #128	; 0x80
 800a0b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0b4:	2302      	movs	r3, #2
 800a0b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0bc:	2303      	movs	r3, #3
 800a0be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a0c0:	2307      	movs	r3, #7
 800a0c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	486d      	ldr	r0, [pc, #436]	; (800a280 <HAL_UART_MspInit+0x248>)
 800a0cc:	f001 fd4c 	bl	800bb68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a0d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a0e2:	2307      	movs	r3, #7
 800a0e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4865      	ldr	r0, [pc, #404]	; (800a284 <HAL_UART_MspInit+0x24c>)
 800a0ee:	f001 fd3b 	bl	800bb68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800a0f2:	4b65      	ldr	r3, [pc, #404]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a0f4:	4a65      	ldr	r2, [pc, #404]	; (800a28c <HAL_UART_MspInit+0x254>)
 800a0f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a0f8:	4b63      	ldr	r3, [pc, #396]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a0fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a0fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a100:	4b61      	ldr	r3, [pc, #388]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a102:	2200      	movs	r2, #0
 800a104:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a106:	4b60      	ldr	r3, [pc, #384]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a108:	2200      	movs	r2, #0
 800a10a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a10c:	4b5e      	ldr	r3, [pc, #376]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a10e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a112:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a114:	4b5c      	ldr	r3, [pc, #368]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a116:	2200      	movs	r2, #0
 800a118:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a11a:	4b5b      	ldr	r3, [pc, #364]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a120:	4b59      	ldr	r3, [pc, #356]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a122:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a126:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a128:	4b57      	ldr	r3, [pc, #348]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a12a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a12e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a130:	4b55      	ldr	r3, [pc, #340]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a132:	2200      	movs	r2, #0
 800a134:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a136:	4854      	ldr	r0, [pc, #336]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a138:	f001 f936 	bl	800b3a8 <HAL_DMA_Init>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800a142:	f7ff f947 	bl	80093d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a4f      	ldr	r2, [pc, #316]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38
 800a14c:	4a4e      	ldr	r2, [pc, #312]	; (800a288 <HAL_UART_MspInit+0x250>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a152:	4b4f      	ldr	r3, [pc, #316]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a154:	4a4f      	ldr	r2, [pc, #316]	; (800a294 <HAL_UART_MspInit+0x25c>)
 800a156:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a158:	4b4d      	ldr	r3, [pc, #308]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a15a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a15e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a160:	4b4b      	ldr	r3, [pc, #300]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a162:	2240      	movs	r2, #64	; 0x40
 800a164:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a166:	4b4a      	ldr	r3, [pc, #296]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a168:	2200      	movs	r2, #0
 800a16a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a16c:	4b48      	ldr	r3, [pc, #288]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a16e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a172:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a174:	4b46      	ldr	r3, [pc, #280]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a176:	2200      	movs	r2, #0
 800a178:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a17a:	4b45      	ldr	r3, [pc, #276]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a17c:	2200      	movs	r2, #0
 800a17e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 800a180:	4b43      	ldr	r3, [pc, #268]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a182:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a186:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800a188:	4b41      	ldr	r3, [pc, #260]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a18a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a18e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a190:	4b3f      	ldr	r3, [pc, #252]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a192:	2200      	movs	r2, #0
 800a194:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a196:	483e      	ldr	r0, [pc, #248]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a198:	f001 f906 	bl	800b3a8 <HAL_DMA_Init>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d001      	beq.n	800a1a6 <HAL_UART_MspInit+0x16e>
    {
      Error_Handler();
 800a1a2:	f7ff f917 	bl	80093d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a39      	ldr	r2, [pc, #228]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a1aa:	635a      	str	r2, [r3, #52]	; 0x34
 800a1ac:	4a38      	ldr	r2, [pc, #224]	; (800a290 <HAL_UART_MspInit+0x258>)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a1b2:	e0db      	b.n	800a36c <HAL_UART_MspInit+0x334>
  else if(uartHandle->Instance==USART2)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a37      	ldr	r2, [pc, #220]	; (800a298 <HAL_UART_MspInit+0x260>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d174      	bne.n	800a2a8 <HAL_UART_MspInit+0x270>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]
 800a1c2:	4b2e      	ldr	r3, [pc, #184]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c6:	4a2d      	ldr	r2, [pc, #180]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a1c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1cc:	6413      	str	r3, [r2, #64]	; 0x40
 800a1ce:	4b2b      	ldr	r3, [pc, #172]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1d6:	617b      	str	r3, [r7, #20]
 800a1d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1da:	2300      	movs	r3, #0
 800a1dc:	613b      	str	r3, [r7, #16]
 800a1de:	4b27      	ldr	r3, [pc, #156]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a1e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e2:	4a26      	ldr	r2, [pc, #152]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a1e4:	f043 0308 	orr.w	r3, r3, #8
 800a1e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a1ea:	4b24      	ldr	r3, [pc, #144]	; (800a27c <HAL_UART_MspInit+0x244>)
 800a1ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	613b      	str	r3, [r7, #16]
 800a1f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 800a1f6:	2360      	movs	r3, #96	; 0x60
 800a1f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1fa:	2302      	movs	r3, #2
 800a1fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a202:	2303      	movs	r3, #3
 800a204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a206:	2307      	movs	r3, #7
 800a208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a20a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a20e:	4619      	mov	r1, r3
 800a210:	4822      	ldr	r0, [pc, #136]	; (800a29c <HAL_UART_MspInit+0x264>)
 800a212:	f001 fca9 	bl	800bb68 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800a216:	4b22      	ldr	r3, [pc, #136]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a218:	4a22      	ldr	r2, [pc, #136]	; (800a2a4 <HAL_UART_MspInit+0x26c>)
 800a21a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800a21c:	4b20      	ldr	r3, [pc, #128]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a21e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a222:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a224:	4b1e      	ldr	r3, [pc, #120]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a226:	2200      	movs	r2, #0
 800a228:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a22a:	4b1d      	ldr	r3, [pc, #116]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a230:	4b1b      	ldr	r3, [pc, #108]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a236:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a238:	4b19      	ldr	r3, [pc, #100]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a23e:	4b18      	ldr	r3, [pc, #96]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a240:	2200      	movs	r2, #0
 800a242:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a244:	4b16      	ldr	r3, [pc, #88]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a246:	2200      	movs	r2, #0
 800a248:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a24a:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a24c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a250:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a252:	4b13      	ldr	r3, [pc, #76]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a254:	2200      	movs	r2, #0
 800a256:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a258:	4811      	ldr	r0, [pc, #68]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a25a:	f001 f8a5 	bl	800b3a8 <HAL_DMA_Init>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <HAL_UART_MspInit+0x230>
      Error_Handler();
 800a264:	f7ff f8b6 	bl	80093d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	4a0d      	ldr	r2, [pc, #52]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a26c:	639a      	str	r2, [r3, #56]	; 0x38
 800a26e:	4a0c      	ldr	r2, [pc, #48]	; (800a2a0 <HAL_UART_MspInit+0x268>)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a274:	e07a      	b.n	800a36c <HAL_UART_MspInit+0x334>
 800a276:	bf00      	nop
 800a278:	40011000 	.word	0x40011000
 800a27c:	40023800 	.word	0x40023800
 800a280:	40020400 	.word	0x40020400
 800a284:	40020000 	.word	0x40020000
 800a288:	2000dc60 	.word	0x2000dc60
 800a28c:	40026488 	.word	0x40026488
 800a290:	2000dc00 	.word	0x2000dc00
 800a294:	400264b8 	.word	0x400264b8
 800a298:	40004400 	.word	0x40004400
 800a29c:	40020c00 	.word	0x40020c00
 800a2a0:	2000dafc 	.word	0x2000dafc
 800a2a4:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a31      	ldr	r2, [pc, #196]	; (800a374 <HAL_UART_MspInit+0x33c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d15c      	bne.n	800a36c <HAL_UART_MspInit+0x334>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
 800a2b6:	4b30      	ldr	r3, [pc, #192]	; (800a378 <HAL_UART_MspInit+0x340>)
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	4a2f      	ldr	r2, [pc, #188]	; (800a378 <HAL_UART_MspInit+0x340>)
 800a2bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2c0:	6413      	str	r3, [r2, #64]	; 0x40
 800a2c2:	4b2d      	ldr	r3, [pc, #180]	; (800a378 <HAL_UART_MspInit+0x340>)
 800a2c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2ca:	60fb      	str	r3, [r7, #12]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	4b29      	ldr	r3, [pc, #164]	; (800a378 <HAL_UART_MspInit+0x340>)
 800a2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d6:	4a28      	ldr	r2, [pc, #160]	; (800a378 <HAL_UART_MspInit+0x340>)
 800a2d8:	f043 0304 	orr.w	r3, r3, #4
 800a2dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a2de:	4b26      	ldr	r3, [pc, #152]	; (800a378 <HAL_UART_MspInit+0x340>)
 800a2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e2:	f003 0304 	and.w	r3, r3, #4
 800a2e6:	60bb      	str	r3, [r7, #8]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800a2ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2f8:	2303      	movs	r3, #3
 800a2fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a2fc:	2307      	movs	r3, #7
 800a2fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a304:	4619      	mov	r1, r3
 800a306:	481d      	ldr	r0, [pc, #116]	; (800a37c <HAL_UART_MspInit+0x344>)
 800a308:	f001 fc2e 	bl	800bb68 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800a30c:	4b1c      	ldr	r3, [pc, #112]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a30e:	4a1d      	ldr	r2, [pc, #116]	; (800a384 <HAL_UART_MspInit+0x34c>)
 800a310:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800a312:	4b1b      	ldr	r3, [pc, #108]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a314:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a318:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a31a:	4b19      	ldr	r3, [pc, #100]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a31c:	2200      	movs	r2, #0
 800a31e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a320:	4b17      	ldr	r3, [pc, #92]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a322:	2200      	movs	r2, #0
 800a324:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a326:	4b16      	ldr	r3, [pc, #88]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a32c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a32e:	4b14      	ldr	r3, [pc, #80]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a330:	2200      	movs	r2, #0
 800a332:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a334:	4b12      	ldr	r3, [pc, #72]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a336:	2200      	movs	r2, #0
 800a338:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800a33a:	4b11      	ldr	r3, [pc, #68]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a33c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a340:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a342:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a344:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a348:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a34a:	4b0d      	ldr	r3, [pc, #52]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a34c:	2200      	movs	r2, #0
 800a34e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a350:	480b      	ldr	r0, [pc, #44]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a352:	f001 f829 	bl	800b3a8 <HAL_DMA_Init>
 800a356:	4603      	mov	r3, r0
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d001      	beq.n	800a360 <HAL_UART_MspInit+0x328>
      Error_Handler();
 800a35c:	f7ff f83a 	bl	80093d4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a07      	ldr	r2, [pc, #28]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a364:	639a      	str	r2, [r3, #56]	; 0x38
 800a366:	4a06      	ldr	r2, [pc, #24]	; (800a380 <HAL_UART_MspInit+0x348>)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a36c:	bf00      	nop
 800a36e:	3738      	adds	r7, #56	; 0x38
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	40004800 	.word	0x40004800
 800a378:	40023800 	.word	0x40023800
 800a37c:	40020800 	.word	0x40020800
 800a380:	2000db5c 	.word	0x2000db5c
 800a384:	40026028 	.word	0x40026028

0800a388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a388:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a3c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a38c:	480d      	ldr	r0, [pc, #52]	; (800a3c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800a38e:	490e      	ldr	r1, [pc, #56]	; (800a3c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800a390:	4a0e      	ldr	r2, [pc, #56]	; (800a3cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 800a392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a394:	e002      	b.n	800a39c <LoopCopyDataInit>

0800a396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a39a:	3304      	adds	r3, #4

0800a39c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a39c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a39e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a3a0:	d3f9      	bcc.n	800a396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a3a2:	4a0b      	ldr	r2, [pc, #44]	; (800a3d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800a3a4:	4c0b      	ldr	r4, [pc, #44]	; (800a3d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 800a3a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a3a8:	e001      	b.n	800a3ae <LoopFillZerobss>

0800a3aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a3aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3ac:	3204      	adds	r2, #4

0800a3ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3b0:	d3fb      	bcc.n	800a3aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800a3b2:	f7ff faa3 	bl	80098fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a3b6:	f005 ff55 	bl	8010264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a3ba:	f7fe fe6d 	bl	8009098 <main>
  bx  lr    
 800a3be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a3c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a3c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a3c8:	200004d8 	.word	0x200004d8
  ldr r2, =_sidata
 800a3cc:	08014698 	.word	0x08014698
  ldr r2, =_sbss
 800a3d0:	200004d8 	.word	0x200004d8
  ldr r4, =_ebss
 800a3d4:	2000dd5c 	.word	0x2000dd5c

0800a3d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a3d8:	e7fe      	b.n	800a3d8 <ADC_IRQHandler>
	...

0800a3dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a3e0:	4b0e      	ldr	r3, [pc, #56]	; (800a41c <HAL_Init+0x40>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a0d      	ldr	r2, [pc, #52]	; (800a41c <HAL_Init+0x40>)
 800a3e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <HAL_Init+0x40>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <HAL_Init+0x40>)
 800a3f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a3f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a3f8:	4b08      	ldr	r3, [pc, #32]	; (800a41c <HAL_Init+0x40>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a07      	ldr	r2, [pc, #28]	; (800a41c <HAL_Init+0x40>)
 800a3fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a404:	2003      	movs	r0, #3
 800a406:	f000 ff8d 	bl	800b324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a40a:	200f      	movs	r0, #15
 800a40c:	f000 f808 	bl	800a420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a410:	f7ff f8ea 	bl	80095e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	bd80      	pop	{r7, pc}
 800a41a:	bf00      	nop
 800a41c:	40023c00 	.word	0x40023c00

0800a420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a428:	4b12      	ldr	r3, [pc, #72]	; (800a474 <HAL_InitTick+0x54>)
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	4b12      	ldr	r3, [pc, #72]	; (800a478 <HAL_InitTick+0x58>)
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	4619      	mov	r1, r3
 800a432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a436:	fbb3 f3f1 	udiv	r3, r3, r1
 800a43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a43e:	4618      	mov	r0, r3
 800a440:	f000 ffa5 	bl	800b38e <HAL_SYSTICK_Config>
 800a444:	4603      	mov	r3, r0
 800a446:	2b00      	cmp	r3, #0
 800a448:	d001      	beq.n	800a44e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e00e      	b.n	800a46c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2b0f      	cmp	r3, #15
 800a452:	d80a      	bhi.n	800a46a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a454:	2200      	movs	r2, #0
 800a456:	6879      	ldr	r1, [r7, #4]
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	f000 ff6d 	bl	800b33a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a460:	4a06      	ldr	r2, [pc, #24]	; (800a47c <HAL_InitTick+0x5c>)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	e000      	b.n	800a46c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200002f4 	.word	0x200002f4
 800a478:	200002fc 	.word	0x200002fc
 800a47c:	200002f8 	.word	0x200002f8

0800a480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a480:	b480      	push	{r7}
 800a482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a484:	4b06      	ldr	r3, [pc, #24]	; (800a4a0 <HAL_IncTick+0x20>)
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	4b06      	ldr	r3, [pc, #24]	; (800a4a4 <HAL_IncTick+0x24>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	4413      	add	r3, r2
 800a490:	4a04      	ldr	r2, [pc, #16]	; (800a4a4 <HAL_IncTick+0x24>)
 800a492:	6013      	str	r3, [r2, #0]
}
 800a494:	bf00      	nop
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop
 800a4a0:	200002fc 	.word	0x200002fc
 800a4a4:	2000dd48 	.word	0x2000dd48

0800a4a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
  return uwTick;
 800a4ac:	4b03      	ldr	r3, [pc, #12]	; (800a4bc <HAL_GetTick+0x14>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	2000dd48 	.word	0x2000dd48

0800a4c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e0ed      	b.n	800a6ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7fe f948 	bl	8008774 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f042 0201 	orr.w	r2, r2, #1
 800a4f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a4f4:	f7ff ffd8 	bl	800a4a8 <HAL_GetTick>
 800a4f8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a4fa:	e012      	b.n	800a522 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a4fc:	f7ff ffd4 	bl	800a4a8 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b0a      	cmp	r3, #10
 800a508:	d90b      	bls.n	800a522 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2205      	movs	r2, #5
 800a51a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e0c5      	b.n	800a6ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f003 0301 	and.w	r3, r3, #1
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0e5      	beq.n	800a4fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f022 0202 	bic.w	r2, r2, #2
 800a53e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a540:	f7ff ffb2 	bl	800a4a8 <HAL_GetTick>
 800a544:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a546:	e012      	b.n	800a56e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a548:	f7ff ffae 	bl	800a4a8 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b0a      	cmp	r3, #10
 800a554:	d90b      	bls.n	800a56e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2205      	movs	r2, #5
 800a566:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	e09f      	b.n	800a6ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	f003 0302 	and.w	r3, r3, #2
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d1e5      	bne.n	800a548 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	7e1b      	ldrb	r3, [r3, #24]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d108      	bne.n	800a596 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	e007      	b.n	800a5a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	7e5b      	ldrb	r3, [r3, #25]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d108      	bne.n	800a5c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	e007      	b.n	800a5d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681a      	ldr	r2, [r3, #0]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	7e9b      	ldrb	r3, [r3, #26]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d108      	bne.n	800a5ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0220 	orr.w	r2, r2, #32
 800a5e6:	601a      	str	r2, [r3, #0]
 800a5e8:	e007      	b.n	800a5fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0220 	bic.w	r2, r2, #32
 800a5f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	7edb      	ldrb	r3, [r3, #27]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d108      	bne.n	800a614 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0210 	bic.w	r2, r2, #16
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	e007      	b.n	800a624 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f042 0210 	orr.w	r2, r2, #16
 800a622:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	7f1b      	ldrb	r3, [r3, #28]
 800a628:	2b01      	cmp	r3, #1
 800a62a:	d108      	bne.n	800a63e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f042 0208 	orr.w	r2, r2, #8
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	e007      	b.n	800a64e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f022 0208 	bic.w	r2, r2, #8
 800a64c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	7f5b      	ldrb	r3, [r3, #29]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d108      	bne.n	800a668 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f042 0204 	orr.w	r2, r2, #4
 800a664:	601a      	str	r2, [r3, #0]
 800a666:	e007      	b.n	800a678 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0204 	bic.w	r2, r2, #4
 800a676:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	689a      	ldr	r2, [r3, #8]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	431a      	orrs	r2, r3
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	431a      	orrs	r2, r3
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	695b      	ldr	r3, [r3, #20]
 800a68c:	ea42 0103 	orr.w	r1, r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	430a      	orrs	r2, r1
 800a69c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
	...

0800a6b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b087      	sub	sp, #28
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800a6d0:	7cfb      	ldrb	r3, [r7, #19]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d003      	beq.n	800a6de <HAL_CAN_ConfigFilter+0x26>
 800a6d6:	7cfb      	ldrb	r3, [r7, #19]
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	f040 80be 	bne.w	800a85a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800a6de:	4b65      	ldr	r3, [pc, #404]	; (800a874 <HAL_CAN_ConfigFilter+0x1bc>)
 800a6e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6e8:	f043 0201 	orr.w	r2, r3, #1
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	431a      	orrs	r2, r3
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	695b      	ldr	r3, [r3, #20]
 800a71a:	f003 031f 	and.w	r3, r3, #31
 800a71e:	2201      	movs	r2, #1
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	43db      	mvns	r3, r3
 800a730:	401a      	ands	r2, r3
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d123      	bne.n	800a788 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	43db      	mvns	r3, r3
 800a74a:	401a      	ands	r2, r3
 800a74c:	697b      	ldr	r3, [r7, #20]
 800a74e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	685b      	ldr	r3, [r3, #4]
 800a75c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a762:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	3248      	adds	r2, #72	; 0x48
 800a768:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a77c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a77e:	6979      	ldr	r1, [r7, #20]
 800a780:	3348      	adds	r3, #72	; 0x48
 800a782:	00db      	lsls	r3, r3, #3
 800a784:	440b      	add	r3, r1
 800a786:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d122      	bne.n	800a7d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	431a      	orrs	r2, r3
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a7b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	3248      	adds	r2, #72	; 0x48
 800a7b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a7ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a7cc:	6979      	ldr	r1, [r7, #20]
 800a7ce:	3348      	adds	r3, #72	; 0x48
 800a7d0:	00db      	lsls	r3, r3, #3
 800a7d2:	440b      	add	r3, r1
 800a7d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	699b      	ldr	r3, [r3, #24]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d109      	bne.n	800a7f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	43db      	mvns	r3, r3
 800a7e8:	401a      	ands	r2, r3
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800a7f0:	e007      	b.n	800a802 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	431a      	orrs	r2, r3
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	43db      	mvns	r3, r3
 800a814:	401a      	ands	r2, r3
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800a81c:	e007      	b.n	800a82e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	431a      	orrs	r2, r3
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	2b01      	cmp	r3, #1
 800a834:	d107      	bne.n	800a846 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	431a      	orrs	r2, r3
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a84c:	f023 0201 	bic.w	r2, r3, #1
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	e006      	b.n	800a868 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
  }
}
 800a868:	4618      	mov	r0, r3
 800a86a:	371c      	adds	r7, #28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	40006400 	.word	0x40006400

0800a878 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d12e      	bne.n	800a8ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2202      	movs	r2, #2
 800a890:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f022 0201 	bic.w	r2, r2, #1
 800a8a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a8a4:	f7ff fe00 	bl	800a4a8 <HAL_GetTick>
 800a8a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a8aa:	e012      	b.n	800a8d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a8ac:	f7ff fdfc 	bl	800a4a8 <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2b0a      	cmp	r3, #10
 800a8b8:	d90b      	bls.n	800a8d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2205      	movs	r2, #5
 800a8ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e012      	b.n	800a8f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1e5      	bne.n	800a8ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	e006      	b.n	800a8f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
  }
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800a900:	b480      	push	{r7}
 800a902:	b089      	sub	sp, #36	; 0x24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a914:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800a91e:	7ffb      	ldrb	r3, [r7, #31]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d003      	beq.n	800a92c <HAL_CAN_AddTxMessage+0x2c>
 800a924:	7ffb      	ldrb	r3, [r7, #31]
 800a926:	2b02      	cmp	r3, #2
 800a928:	f040 80b8 	bne.w	800aa9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10a      	bne.n	800a94c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d105      	bne.n	800a94c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800a946:	2b00      	cmp	r3, #0
 800a948:	f000 80a0 	beq.w	800aa8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	0e1b      	lsrs	r3, r3, #24
 800a950:	f003 0303 	and.w	r3, r3, #3
 800a954:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	2b02      	cmp	r3, #2
 800a95a:	d907      	bls.n	800a96c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a960:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e09e      	b.n	800aaaa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800a96c:	2201      	movs	r2, #1
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	409a      	lsls	r2, r3
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10d      	bne.n	800a99a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800a988:	68f9      	ldr	r1, [r7, #12]
 800a98a:	6809      	ldr	r1, [r1, #0]
 800a98c:	431a      	orrs	r2, r3
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	3318      	adds	r3, #24
 800a992:	011b      	lsls	r3, r3, #4
 800a994:	440b      	add	r3, r1
 800a996:	601a      	str	r2, [r3, #0]
 800a998:	e00f      	b.n	800a9ba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a9a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a9aa:	68f9      	ldr	r1, [r7, #12]
 800a9ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800a9ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	3318      	adds	r3, #24
 800a9b4:	011b      	lsls	r3, r3, #4
 800a9b6:	440b      	add	r3, r1
 800a9b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6819      	ldr	r1, [r3, #0]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	691a      	ldr	r2, [r3, #16]
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	3318      	adds	r3, #24
 800a9c6:	011b      	lsls	r3, r3, #4
 800a9c8:	440b      	add	r3, r1
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	7d1b      	ldrb	r3, [r3, #20]
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d111      	bne.n	800a9fa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	3318      	adds	r3, #24
 800a9de:	011b      	lsls	r3, r3, #4
 800a9e0:	4413      	add	r3, r2
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	6811      	ldr	r1, [r2, #0]
 800a9ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	3318      	adds	r3, #24
 800a9f2:	011b      	lsls	r3, r3, #4
 800a9f4:	440b      	add	r3, r1
 800a9f6:	3304      	adds	r3, #4
 800a9f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	3307      	adds	r3, #7
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	061a      	lsls	r2, r3, #24
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	3306      	adds	r3, #6
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	041b      	lsls	r3, r3, #16
 800aa0a:	431a      	orrs	r2, r3
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	3305      	adds	r3, #5
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	021b      	lsls	r3, r3, #8
 800aa14:	4313      	orrs	r3, r2
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	3204      	adds	r2, #4
 800aa1a:	7812      	ldrb	r2, [r2, #0]
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	68fa      	ldr	r2, [r7, #12]
 800aa20:	6811      	ldr	r1, [r2, #0]
 800aa22:	ea43 0200 	orr.w	r2, r3, r0
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	440b      	add	r3, r1
 800aa2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800aa30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	3303      	adds	r3, #3
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	061a      	lsls	r2, r3, #24
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	3302      	adds	r3, #2
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	041b      	lsls	r3, r3, #16
 800aa42:	431a      	orrs	r2, r3
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	3301      	adds	r3, #1
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	021b      	lsls	r3, r3, #8
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	7812      	ldrb	r2, [r2, #0]
 800aa52:	4610      	mov	r0, r2
 800aa54:	68fa      	ldr	r2, [r7, #12]
 800aa56:	6811      	ldr	r1, [r2, #0]
 800aa58:	ea43 0200 	orr.w	r2, r3, r0
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	011b      	lsls	r3, r3, #4
 800aa60:	440b      	add	r3, r1
 800aa62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800aa66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681a      	ldr	r2, [r3, #0]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	3318      	adds	r3, #24
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	4413      	add	r3, r2
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68fa      	ldr	r2, [r7, #12]
 800aa78:	6811      	ldr	r1, [r2, #0]
 800aa7a:	f043 0201 	orr.w	r2, r3, #1
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	3318      	adds	r3, #24
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	440b      	add	r3, r1
 800aa86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e00e      	b.n	800aaaa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e006      	b.n	800aaaa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
  }
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3724      	adds	r7, #36	; 0x24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr

0800aab6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800aab6:	b480      	push	{r7}
 800aab8:	b087      	sub	sp, #28
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	60b9      	str	r1, [r7, #8]
 800aac0:	607a      	str	r2, [r7, #4]
 800aac2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaca:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d003      	beq.n	800aada <HAL_CAN_GetRxMessage+0x24>
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	f040 80f3 	bne.w	800acc0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10e      	bne.n	800aafe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	68db      	ldr	r3, [r3, #12]
 800aae6:	f003 0303 	and.w	r3, r3, #3
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d116      	bne.n	800ab1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e0e7      	b.n	800acce <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	691b      	ldr	r3, [r3, #16]
 800ab04:	f003 0303 	and.w	r3, r3, #3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d107      	bne.n	800ab1c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e0d8      	b.n	800acce <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	331b      	adds	r3, #27
 800ab24:	011b      	lsls	r3, r3, #4
 800ab26:	4413      	add	r3, r2
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0204 	and.w	r2, r3, #4
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	689b      	ldr	r3, [r3, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10c      	bne.n	800ab54 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	331b      	adds	r3, #27
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	4413      	add	r3, r2
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	0d5b      	lsrs	r3, r3, #21
 800ab4a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	601a      	str	r2, [r3, #0]
 800ab52:	e00b      	b.n	800ab6c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	331b      	adds	r3, #27
 800ab5c:	011b      	lsls	r3, r3, #4
 800ab5e:	4413      	add	r3, r2
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	08db      	lsrs	r3, r3, #3
 800ab64:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	331b      	adds	r3, #27
 800ab74:	011b      	lsls	r3, r3, #4
 800ab76:	4413      	add	r3, r2
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f003 0202 	and.w	r2, r3, #2
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	331b      	adds	r3, #27
 800ab8a:	011b      	lsls	r3, r3, #4
 800ab8c:	4413      	add	r3, r2
 800ab8e:	3304      	adds	r3, #4
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 020f 	and.w	r2, r3, #15
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	331b      	adds	r3, #27
 800aba2:	011b      	lsls	r3, r3, #4
 800aba4:	4413      	add	r3, r2
 800aba6:	3304      	adds	r3, #4
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	0a1b      	lsrs	r3, r3, #8
 800abac:	b2da      	uxtb	r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	331b      	adds	r3, #27
 800abba:	011b      	lsls	r3, r3, #4
 800abbc:	4413      	add	r3, r2
 800abbe:	3304      	adds	r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	0c1b      	lsrs	r3, r3, #16
 800abc4:	b29a      	uxth	r2, r3
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	b2da      	uxtb	r2, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	4413      	add	r3, r2
 800abea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	0a1a      	lsrs	r2, r3, #8
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	3301      	adds	r3, #1
 800abf6:	b2d2      	uxtb	r2, r2
 800abf8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	011b      	lsls	r3, r3, #4
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	0c1a      	lsrs	r2, r3, #16
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	3302      	adds	r3, #2
 800ac10:	b2d2      	uxtb	r2, r2
 800ac12:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	0e1a      	lsrs	r2, r3, #24
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	3303      	adds	r3, #3
 800ac2a:	b2d2      	uxtb	r2, r2
 800ac2c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	011b      	lsls	r3, r3, #4
 800ac36:	4413      	add	r3, r2
 800ac38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	3304      	adds	r3, #4
 800ac42:	b2d2      	uxtb	r2, r2
 800ac44:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	011b      	lsls	r3, r3, #4
 800ac4e:	4413      	add	r3, r2
 800ac50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	0a1a      	lsrs	r2, r3, #8
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	3305      	adds	r3, #5
 800ac5c:	b2d2      	uxtb	r2, r2
 800ac5e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	0c1a      	lsrs	r2, r3, #16
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	3306      	adds	r3, #6
 800ac76:	b2d2      	uxtb	r2, r2
 800ac78:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	011b      	lsls	r3, r3, #4
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	0e1a      	lsrs	r2, r3, #24
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	3307      	adds	r3, #7
 800ac90:	b2d2      	uxtb	r2, r2
 800ac92:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d108      	bne.n	800acac <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68da      	ldr	r2, [r3, #12]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f042 0220 	orr.w	r2, r2, #32
 800aca8:	60da      	str	r2, [r3, #12]
 800acaa:	e007      	b.n	800acbc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	691a      	ldr	r2, [r3, #16]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f042 0220 	orr.w	r2, r2, #32
 800acba:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800acbc:	2300      	movs	r3, #0
 800acbe:	e006      	b.n	800acce <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800accc:	2301      	movs	r3, #1
  }
}
 800acce:	4618      	mov	r0, r3
 800acd0:	371c      	adds	r7, #28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800acda:	b480      	push	{r7}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800acec:	7bfb      	ldrb	r3, [r7, #15]
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d002      	beq.n	800acf8 <HAL_CAN_ActivateNotification+0x1e>
 800acf2:	7bfb      	ldrb	r3, [r7, #15]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d109      	bne.n	800ad0c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	6959      	ldr	r1, [r3, #20]
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800ad08:	2300      	movs	r3, #0
 800ad0a:	e006      	b.n	800ad1a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
  }
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr

0800ad26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800ad26:	b580      	push	{r7, lr}
 800ad28:	b08a      	sub	sp, #40	; 0x28
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	695b      	ldr	r3, [r3, #20]
 800ad38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68db      	ldr	r3, [r3, #12]
 800ad50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800ad62:	6a3b      	ldr	r3, [r7, #32]
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d07c      	beq.n	800ae66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d023      	beq.n	800adbe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d003      	beq.n	800ad90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f983 	bl	800b094 <HAL_CAN_TxMailbox0CompleteCallback>
 800ad8e:	e016      	b.n	800adbe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d004      	beq.n	800ada4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
 800ada2:	e00c      	b.n	800adbe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	f003 0308 	and.w	r3, r3, #8
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800adae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800adb4:	627b      	str	r3, [r7, #36]	; 0x24
 800adb6:	e002      	b.n	800adbe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 f989 	bl	800b0d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800adbe:	69bb      	ldr	r3, [r7, #24]
 800adc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d024      	beq.n	800ae12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800add0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800add2:	69bb      	ldr	r3, [r7, #24]
 800add4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f963 	bl	800b0a8 <HAL_CAN_TxMailbox1CompleteCallback>
 800ade2:	e016      	b.n	800ae12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adea:	2b00      	cmp	r3, #0
 800adec:	d004      	beq.n	800adf8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800adf4:	627b      	str	r3, [r7, #36]	; 0x24
 800adf6:	e00c      	b.n	800ae12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d004      	beq.n	800ae0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800ae02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae08:	627b      	str	r3, [r7, #36]	; 0x24
 800ae0a:	e002      	b.n	800ae12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 f969 	bl	800b0e4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d024      	beq.n	800ae66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ae24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d003      	beq.n	800ae38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f943 	bl	800b0bc <HAL_CAN_TxMailbox2CompleteCallback>
 800ae36:	e016      	b.n	800ae66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d004      	beq.n	800ae4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae48:	627b      	str	r3, [r7, #36]	; 0x24
 800ae4a:	e00c      	b.n	800ae66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800ae4c:	69bb      	ldr	r3, [r7, #24]
 800ae4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d004      	beq.n	800ae60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800ae56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ae5e:	e002      	b.n	800ae66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f949 	bl	800b0f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800ae66:	6a3b      	ldr	r3, [r7, #32]
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00c      	beq.n	800ae8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	f003 0310 	and.w	r3, r3, #16
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d007      	beq.n	800ae8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2210      	movs	r2, #16
 800ae88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00b      	beq.n	800aeac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d006      	beq.n	800aeac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2208      	movs	r2, #8
 800aea4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f000 f930 	bl	800b10c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	f003 0302 	and.w	r3, r3, #2
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d009      	beq.n	800aeca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d002      	beq.n	800aeca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f7fd fd4b 	bl	8008960 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800aeca:	6a3b      	ldr	r3, [r7, #32]
 800aecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00c      	beq.n	800aeee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	f003 0310 	and.w	r3, r3, #16
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d007      	beq.n	800aeee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800aede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aee4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2210      	movs	r2, #16
 800aeec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800aeee:	6a3b      	ldr	r3, [r7, #32]
 800aef0:	f003 0320 	and.w	r3, r3, #32
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d00b      	beq.n	800af10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f003 0308 	and.w	r3, r3, #8
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d006      	beq.n	800af10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2208      	movs	r2, #8
 800af08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f912 	bl	800b134 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800af10:	6a3b      	ldr	r3, [r7, #32]
 800af12:	f003 0310 	and.w	r3, r3, #16
 800af16:	2b00      	cmp	r3, #0
 800af18:	d009      	beq.n	800af2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	f003 0303 	and.w	r3, r3, #3
 800af24:	2b00      	cmp	r3, #0
 800af26:	d002      	beq.n	800af2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 f8f9 	bl	800b120 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00b      	beq.n	800af50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800af38:	69fb      	ldr	r3, [r7, #28]
 800af3a:	f003 0310 	and.w	r3, r3, #16
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d006      	beq.n	800af50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2210      	movs	r2, #16
 800af48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f8fc 	bl	800b148 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800af50:	6a3b      	ldr	r3, [r7, #32]
 800af52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00b      	beq.n	800af72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	f003 0308 	and.w	r3, r3, #8
 800af60:	2b00      	cmp	r3, #0
 800af62:	d006      	beq.n	800af72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2208      	movs	r2, #8
 800af6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f8f5 	bl	800b15c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800af72:	6a3b      	ldr	r3, [r7, #32]
 800af74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d07b      	beq.n	800b074 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	f003 0304 	and.w	r3, r3, #4
 800af82:	2b00      	cmp	r3, #0
 800af84:	d072      	beq.n	800b06c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d008      	beq.n	800afa2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9c:	f043 0301 	orr.w	r3, r3, #1
 800afa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800afa2:	6a3b      	ldr	r3, [r7, #32]
 800afa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d008      	beq.n	800afbe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800afb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb8:	f043 0302 	orr.w	r3, r3, #2
 800afbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800afbe:	6a3b      	ldr	r3, [r7, #32]
 800afc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d008      	beq.n	800afda <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	f043 0304 	orr.w	r3, r3, #4
 800afd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d043      	beq.n	800b06c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800afea:	2b00      	cmp	r3, #0
 800afec:	d03e      	beq.n	800b06c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aff4:	2b60      	cmp	r3, #96	; 0x60
 800aff6:	d02b      	beq.n	800b050 <HAL_CAN_IRQHandler+0x32a>
 800aff8:	2b60      	cmp	r3, #96	; 0x60
 800affa:	d82e      	bhi.n	800b05a <HAL_CAN_IRQHandler+0x334>
 800affc:	2b50      	cmp	r3, #80	; 0x50
 800affe:	d022      	beq.n	800b046 <HAL_CAN_IRQHandler+0x320>
 800b000:	2b50      	cmp	r3, #80	; 0x50
 800b002:	d82a      	bhi.n	800b05a <HAL_CAN_IRQHandler+0x334>
 800b004:	2b40      	cmp	r3, #64	; 0x40
 800b006:	d019      	beq.n	800b03c <HAL_CAN_IRQHandler+0x316>
 800b008:	2b40      	cmp	r3, #64	; 0x40
 800b00a:	d826      	bhi.n	800b05a <HAL_CAN_IRQHandler+0x334>
 800b00c:	2b30      	cmp	r3, #48	; 0x30
 800b00e:	d010      	beq.n	800b032 <HAL_CAN_IRQHandler+0x30c>
 800b010:	2b30      	cmp	r3, #48	; 0x30
 800b012:	d822      	bhi.n	800b05a <HAL_CAN_IRQHandler+0x334>
 800b014:	2b10      	cmp	r3, #16
 800b016:	d002      	beq.n	800b01e <HAL_CAN_IRQHandler+0x2f8>
 800b018:	2b20      	cmp	r3, #32
 800b01a:	d005      	beq.n	800b028 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b01c:	e01d      	b.n	800b05a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b020:	f043 0308 	orr.w	r3, r3, #8
 800b024:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b026:	e019      	b.n	800b05c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	f043 0310 	orr.w	r3, r3, #16
 800b02e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b030:	e014      	b.n	800b05c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	f043 0320 	orr.w	r3, r3, #32
 800b038:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b03a:	e00f      	b.n	800b05c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b042:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b044:	e00a      	b.n	800b05c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b04e:	e005      	b.n	800b05c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b056:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b058:	e000      	b.n	800b05c <HAL_CAN_IRQHandler+0x336>
            break;
 800b05a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	699a      	ldr	r2, [r3, #24]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b06a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2204      	movs	r2, #4
 800b072:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b076:	2b00      	cmp	r3, #0
 800b078:	d008      	beq.n	800b08c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b080:	431a      	orrs	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f872 	bl	800b170 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b08c:	bf00      	nop
 800b08e:	3728      	adds	r7, #40	; 0x28
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800b09c:	bf00      	nop
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800b0b0:	bf00      	nop
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b0d8:	bf00      	nop
 800b0da:	370c      	adds	r7, #12
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b083      	sub	sp, #12
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b100:	bf00      	nop
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b114:	bf00      	nop
 800b116:	370c      	adds	r7, #12
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b13c:	bf00      	nop
 800b13e:	370c      	adds	r7, #12
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b150:	bf00      	nop
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b083      	sub	sp, #12
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b178:	bf00      	nop
 800b17a:	370c      	adds	r7, #12
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b184:	b480      	push	{r7}
 800b186:	b085      	sub	sp, #20
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f003 0307 	and.w	r3, r3, #7
 800b192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b194:	4b0c      	ldr	r3, [pc, #48]	; (800b1c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b1a0:	4013      	ands	r3, r2
 800b1a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b1ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b1b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b1b6:	4a04      	ldr	r2, [pc, #16]	; (800b1c8 <__NVIC_SetPriorityGrouping+0x44>)
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	60d3      	str	r3, [r2, #12]
}
 800b1bc:	bf00      	nop
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr
 800b1c8:	e000ed00 	.word	0xe000ed00

0800b1cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b1d0:	4b04      	ldr	r3, [pc, #16]	; (800b1e4 <__NVIC_GetPriorityGrouping+0x18>)
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	0a1b      	lsrs	r3, r3, #8
 800b1d6:	f003 0307 	and.w	r3, r3, #7
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	e000ed00 	.word	0xe000ed00

0800b1e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b1f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	db0b      	blt.n	800b212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b1fa:	79fb      	ldrb	r3, [r7, #7]
 800b1fc:	f003 021f 	and.w	r2, r3, #31
 800b200:	4907      	ldr	r1, [pc, #28]	; (800b220 <__NVIC_EnableIRQ+0x38>)
 800b202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b206:	095b      	lsrs	r3, r3, #5
 800b208:	2001      	movs	r0, #1
 800b20a:	fa00 f202 	lsl.w	r2, r0, r2
 800b20e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800b212:	bf00      	nop
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	e000e100 	.word	0xe000e100

0800b224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	6039      	str	r1, [r7, #0]
 800b22e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b234:	2b00      	cmp	r3, #0
 800b236:	db0a      	blt.n	800b24e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	b2da      	uxtb	r2, r3
 800b23c:	490c      	ldr	r1, [pc, #48]	; (800b270 <__NVIC_SetPriority+0x4c>)
 800b23e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b242:	0112      	lsls	r2, r2, #4
 800b244:	b2d2      	uxtb	r2, r2
 800b246:	440b      	add	r3, r1
 800b248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b24c:	e00a      	b.n	800b264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	b2da      	uxtb	r2, r3
 800b252:	4908      	ldr	r1, [pc, #32]	; (800b274 <__NVIC_SetPriority+0x50>)
 800b254:	79fb      	ldrb	r3, [r7, #7]
 800b256:	f003 030f 	and.w	r3, r3, #15
 800b25a:	3b04      	subs	r3, #4
 800b25c:	0112      	lsls	r2, r2, #4
 800b25e:	b2d2      	uxtb	r2, r2
 800b260:	440b      	add	r3, r1
 800b262:	761a      	strb	r2, [r3, #24]
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr
 800b270:	e000e100 	.word	0xe000e100
 800b274:	e000ed00 	.word	0xe000ed00

0800b278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b278:	b480      	push	{r7}
 800b27a:	b089      	sub	sp, #36	; 0x24
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	60f8      	str	r0, [r7, #12]
 800b280:	60b9      	str	r1, [r7, #8]
 800b282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	f1c3 0307 	rsb	r3, r3, #7
 800b292:	2b04      	cmp	r3, #4
 800b294:	bf28      	it	cs
 800b296:	2304      	movcs	r3, #4
 800b298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	3304      	adds	r3, #4
 800b29e:	2b06      	cmp	r3, #6
 800b2a0:	d902      	bls.n	800b2a8 <NVIC_EncodePriority+0x30>
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	3b03      	subs	r3, #3
 800b2a6:	e000      	b.n	800b2aa <NVIC_EncodePriority+0x32>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b2ac:	f04f 32ff 	mov.w	r2, #4294967295
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2b6:	43da      	mvns	r2, r3
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	401a      	ands	r2, r3
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b2c0:	f04f 31ff 	mov.w	r1, #4294967295
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ca:	43d9      	mvns	r1, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b2d0:	4313      	orrs	r3, r2
         );
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3724      	adds	r7, #36	; 0x24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
	...

0800b2e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3b01      	subs	r3, #1
 800b2ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b2f0:	d301      	bcc.n	800b2f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e00f      	b.n	800b316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b2f6:	4a0a      	ldr	r2, [pc, #40]	; (800b320 <SysTick_Config+0x40>)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	3b01      	subs	r3, #1
 800b2fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b2fe:	210f      	movs	r1, #15
 800b300:	f04f 30ff 	mov.w	r0, #4294967295
 800b304:	f7ff ff8e 	bl	800b224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b308:	4b05      	ldr	r3, [pc, #20]	; (800b320 <SysTick_Config+0x40>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b30e:	4b04      	ldr	r3, [pc, #16]	; (800b320 <SysTick_Config+0x40>)
 800b310:	2207      	movs	r2, #7
 800b312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	e000e010 	.word	0xe000e010

0800b324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f7ff ff29 	bl	800b184 <__NVIC_SetPriorityGrouping>
}
 800b332:	bf00      	nop
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}

0800b33a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b086      	sub	sp, #24
 800b33e:	af00      	add	r7, sp, #0
 800b340:	4603      	mov	r3, r0
 800b342:	60b9      	str	r1, [r7, #8]
 800b344:	607a      	str	r2, [r7, #4]
 800b346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b348:	2300      	movs	r3, #0
 800b34a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b34c:	f7ff ff3e 	bl	800b1cc <__NVIC_GetPriorityGrouping>
 800b350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	68b9      	ldr	r1, [r7, #8]
 800b356:	6978      	ldr	r0, [r7, #20]
 800b358:	f7ff ff8e 	bl	800b278 <NVIC_EncodePriority>
 800b35c:	4602      	mov	r2, r0
 800b35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b362:	4611      	mov	r1, r2
 800b364:	4618      	mov	r0, r3
 800b366:	f7ff ff5d 	bl	800b224 <__NVIC_SetPriority>
}
 800b36a:	bf00      	nop
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b372:	b580      	push	{r7, lr}
 800b374:	b082      	sub	sp, #8
 800b376:	af00      	add	r7, sp, #0
 800b378:	4603      	mov	r3, r0
 800b37a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b380:	4618      	mov	r0, r3
 800b382:	f7ff ff31 	bl	800b1e8 <__NVIC_EnableIRQ>
}
 800b386:	bf00      	nop
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b38e:	b580      	push	{r7, lr}
 800b390:	b082      	sub	sp, #8
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff ffa2 	bl	800b2e0 <SysTick_Config>
 800b39c:	4603      	mov	r3, r0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b3b4:	f7ff f878 	bl	800a4a8 <HAL_GetTick>
 800b3b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e099      	b.n	800b4f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0201 	bic.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b3e4:	e00f      	b.n	800b406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b3e6:	f7ff f85f 	bl	800a4a8 <HAL_GetTick>
 800b3ea:	4602      	mov	r2, r0
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	2b05      	cmp	r3, #5
 800b3f2:	d908      	bls.n	800b406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2220      	movs	r2, #32
 800b3f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2203      	movs	r2, #3
 800b3fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e078      	b.n	800b4f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e8      	bne.n	800b3e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	4b38      	ldr	r3, [pc, #224]	; (800b500 <HAL_DMA_Init+0x158>)
 800b420:	4013      	ands	r3, r2
 800b422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685a      	ldr	r2, [r3, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b43e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	699b      	ldr	r3, [r3, #24]
 800b444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b44a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6a1b      	ldr	r3, [r3, #32]
 800b450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	4313      	orrs	r3, r2
 800b456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45c:	2b04      	cmp	r3, #4
 800b45e:	d107      	bne.n	800b470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b468:	4313      	orrs	r3, r2
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	4313      	orrs	r3, r2
 800b46e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	695b      	ldr	r3, [r3, #20]
 800b47e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	f023 0307 	bic.w	r3, r3, #7
 800b486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	4313      	orrs	r3, r2
 800b490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b496:	2b04      	cmp	r3, #4
 800b498:	d117      	bne.n	800b4ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d00e      	beq.n	800b4ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 fadf 	bl	800ba70 <DMA_CheckFifoParam>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d008      	beq.n	800b4ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2240      	movs	r2, #64	; 0x40
 800b4bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2201      	movs	r2, #1
 800b4c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e016      	b.n	800b4f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	697a      	ldr	r2, [r7, #20]
 800b4d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 fa96 	bl	800ba04 <DMA_CalcBaseAndBitshift>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b4e0:	223f      	movs	r2, #63	; 0x3f
 800b4e2:	409a      	lsls	r2, r3
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}
 800b500:	f010803f 	.word	0xf010803f

0800b504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b086      	sub	sp, #24
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b522:	2b01      	cmp	r3, #1
 800b524:	d101      	bne.n	800b52a <HAL_DMA_Start_IT+0x26>
 800b526:	2302      	movs	r3, #2
 800b528:	e040      	b.n	800b5ac <HAL_DMA_Start_IT+0xa8>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d12f      	bne.n	800b59e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2202      	movs	r2, #2
 800b542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	68b9      	ldr	r1, [r7, #8]
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f000 fa28 	bl	800b9a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b55c:	223f      	movs	r2, #63	; 0x3f
 800b55e:	409a      	lsls	r2, r3
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f042 0216 	orr.w	r2, r2, #22
 800b572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d007      	beq.n	800b58c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681a      	ldr	r2, [r3, #0]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f042 0208 	orr.w	r2, r2, #8
 800b58a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f042 0201 	orr.w	r2, r2, #1
 800b59a:	601a      	str	r2, [r3, #0]
 800b59c:	e005      	b.n	800b5aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b5a6:	2302      	movs	r3, #2
 800b5a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b5c2:	f7fe ff71 	bl	800a4a8 <HAL_GetTick>
 800b5c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	2b02      	cmp	r3, #2
 800b5d2:	d008      	beq.n	800b5e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2280      	movs	r2, #128	; 0x80
 800b5d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e052      	b.n	800b68c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f022 0216 	bic.w	r2, r2, #22
 800b5f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	695a      	ldr	r2, [r3, #20]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b604:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d103      	bne.n	800b616 <HAL_DMA_Abort+0x62>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b612:	2b00      	cmp	r3, #0
 800b614:	d007      	beq.n	800b626 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 0208 	bic.w	r2, r2, #8
 800b624:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f022 0201 	bic.w	r2, r2, #1
 800b634:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b636:	e013      	b.n	800b660 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b638:	f7fe ff36 	bl	800a4a8 <HAL_GetTick>
 800b63c:	4602      	mov	r2, r0
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	1ad3      	subs	r3, r2, r3
 800b642:	2b05      	cmp	r3, #5
 800b644:	d90c      	bls.n	800b660 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2203      	movs	r2, #3
 800b650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e015      	b.n	800b68c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d1e4      	bne.n	800b638 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b672:	223f      	movs	r2, #63	; 0x3f
 800b674:	409a      	lsls	r2, r3
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2200      	movs	r2, #0
 800b686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b086      	sub	sp, #24
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b6a0:	4b92      	ldr	r3, [pc, #584]	; (800b8ec <HAL_DMA_IRQHandler+0x258>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a92      	ldr	r2, [pc, #584]	; (800b8f0 <HAL_DMA_IRQHandler+0x25c>)
 800b6a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b6aa:	0a9b      	lsrs	r3, r3, #10
 800b6ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6be:	2208      	movs	r2, #8
 800b6c0:	409a      	lsls	r2, r3
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	4013      	ands	r3, r2
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d01a      	beq.n	800b700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 0304 	and.w	r3, r3, #4
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d013      	beq.n	800b700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 0204 	bic.w	r2, r2, #4
 800b6e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ec:	2208      	movs	r2, #8
 800b6ee:	409a      	lsls	r2, r3
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f8:	f043 0201 	orr.w	r2, r3, #1
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b704:	2201      	movs	r2, #1
 800b706:	409a      	lsls	r2, r3
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	4013      	ands	r3, r2
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d012      	beq.n	800b736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b722:	2201      	movs	r2, #1
 800b724:	409a      	lsls	r2, r3
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72e:	f043 0202 	orr.w	r2, r3, #2
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73a:	2204      	movs	r2, #4
 800b73c:	409a      	lsls	r2, r3
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	4013      	ands	r3, r2
 800b742:	2b00      	cmp	r3, #0
 800b744:	d012      	beq.n	800b76c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f003 0302 	and.w	r3, r3, #2
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00b      	beq.n	800b76c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b758:	2204      	movs	r2, #4
 800b75a:	409a      	lsls	r2, r3
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b764:	f043 0204 	orr.w	r2, r3, #4
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b770:	2210      	movs	r2, #16
 800b772:	409a      	lsls	r2, r3
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4013      	ands	r3, r2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d043      	beq.n	800b804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 0308 	and.w	r3, r3, #8
 800b786:	2b00      	cmp	r3, #0
 800b788:	d03c      	beq.n	800b804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b78e:	2210      	movs	r2, #16
 800b790:	409a      	lsls	r2, r3
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d018      	beq.n	800b7d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d108      	bne.n	800b7c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d024      	beq.n	800b804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	4798      	blx	r3
 800b7c2:	e01f      	b.n	800b804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d01b      	beq.n	800b804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	4798      	blx	r3
 800b7d4:	e016      	b.n	800b804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d107      	bne.n	800b7f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	681a      	ldr	r2, [r3, #0]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f022 0208 	bic.w	r2, r2, #8
 800b7f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d003      	beq.n	800b804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b808:	2220      	movs	r2, #32
 800b80a:	409a      	lsls	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	4013      	ands	r3, r2
 800b810:	2b00      	cmp	r3, #0
 800b812:	f000 808e 	beq.w	800b932 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0310 	and.w	r3, r3, #16
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 8086 	beq.w	800b932 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b82a:	2220      	movs	r2, #32
 800b82c:	409a      	lsls	r2, r3
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	2b05      	cmp	r3, #5
 800b83c:	d136      	bne.n	800b8ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f022 0216 	bic.w	r2, r2, #22
 800b84c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	695a      	ldr	r2, [r3, #20]
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b85c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b862:	2b00      	cmp	r3, #0
 800b864:	d103      	bne.n	800b86e <HAL_DMA_IRQHandler+0x1da>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d007      	beq.n	800b87e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f022 0208 	bic.w	r2, r2, #8
 800b87c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b882:	223f      	movs	r2, #63	; 0x3f
 800b884:	409a      	lsls	r2, r3
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d07d      	beq.n	800b99e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	4798      	blx	r3
        }
        return;
 800b8aa:	e078      	b.n	800b99e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d01c      	beq.n	800b8f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d108      	bne.n	800b8da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d030      	beq.n	800b932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	4798      	blx	r3
 800b8d8:	e02b      	b.n	800b932 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d027      	beq.n	800b932 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	4798      	blx	r3
 800b8ea:	e022      	b.n	800b932 <HAL_DMA_IRQHandler+0x29e>
 800b8ec:	200002f4 	.word	0x200002f4
 800b8f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d10f      	bne.n	800b922 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f022 0210 	bic.w	r2, r2, #16
 800b910:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2201      	movs	r2, #1
 800b916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b926:	2b00      	cmp	r3, #0
 800b928:	d003      	beq.n	800b932 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b936:	2b00      	cmp	r3, #0
 800b938:	d032      	beq.n	800b9a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	2b00      	cmp	r3, #0
 800b944:	d022      	beq.n	800b98c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2205      	movs	r2, #5
 800b94a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 0201 	bic.w	r2, r2, #1
 800b95c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	3301      	adds	r3, #1
 800b962:	60bb      	str	r3, [r7, #8]
 800b964:	697a      	ldr	r2, [r7, #20]
 800b966:	429a      	cmp	r2, r3
 800b968:	d307      	bcc.n	800b97a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	2b00      	cmp	r3, #0
 800b976:	d1f2      	bne.n	800b95e <HAL_DMA_IRQHandler+0x2ca>
 800b978:	e000      	b.n	800b97c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800b97a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b990:	2b00      	cmp	r3, #0
 800b992:	d005      	beq.n	800b9a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	4798      	blx	r3
 800b99c:	e000      	b.n	800b9a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800b99e:	bf00      	nop
    }
  }
}
 800b9a0:	3718      	adds	r7, #24
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}
 800b9a6:	bf00      	nop

0800b9a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	607a      	str	r2, [r7, #4]
 800b9b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b9c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	683a      	ldr	r2, [r7, #0]
 800b9cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	689b      	ldr	r3, [r3, #8]
 800b9d2:	2b40      	cmp	r3, #64	; 0x40
 800b9d4:	d108      	bne.n	800b9e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b9e6:	e007      	b.n	800b9f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68ba      	ldr	r2, [r7, #8]
 800b9ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	60da      	str	r2, [r3, #12]
}
 800b9f8:	bf00      	nop
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b085      	sub	sp, #20
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	3b10      	subs	r3, #16
 800ba14:	4a14      	ldr	r2, [pc, #80]	; (800ba68 <DMA_CalcBaseAndBitshift+0x64>)
 800ba16:	fba2 2303 	umull	r2, r3, r2, r3
 800ba1a:	091b      	lsrs	r3, r3, #4
 800ba1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ba1e:	4a13      	ldr	r2, [pc, #76]	; (800ba6c <DMA_CalcBaseAndBitshift+0x68>)
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	4413      	add	r3, r2
 800ba24:	781b      	ldrb	r3, [r3, #0]
 800ba26:	461a      	mov	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2b03      	cmp	r3, #3
 800ba30:	d909      	bls.n	800ba46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ba3a:	f023 0303 	bic.w	r3, r3, #3
 800ba3e:	1d1a      	adds	r2, r3, #4
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	659a      	str	r2, [r3, #88]	; 0x58
 800ba44:	e007      	b.n	800ba56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ba4e:	f023 0303 	bic.w	r3, r3, #3
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	aaaaaaab 	.word	0xaaaaaaab
 800ba6c:	08013a28 	.word	0x08013a28

0800ba70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d11f      	bne.n	800baca <DMA_CheckFifoParam+0x5a>
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	2b03      	cmp	r3, #3
 800ba8e:	d856      	bhi.n	800bb3e <DMA_CheckFifoParam+0xce>
 800ba90:	a201      	add	r2, pc, #4	; (adr r2, 800ba98 <DMA_CheckFifoParam+0x28>)
 800ba92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba96:	bf00      	nop
 800ba98:	0800baa9 	.word	0x0800baa9
 800ba9c:	0800babb 	.word	0x0800babb
 800baa0:	0800baa9 	.word	0x0800baa9
 800baa4:	0800bb3f 	.word	0x0800bb3f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d046      	beq.n	800bb42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bab8:	e043      	b.n	800bb42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bac2:	d140      	bne.n	800bb46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bac8:	e03d      	b.n	800bb46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bad2:	d121      	bne.n	800bb18 <DMA_CheckFifoParam+0xa8>
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d837      	bhi.n	800bb4a <DMA_CheckFifoParam+0xda>
 800bada:	a201      	add	r2, pc, #4	; (adr r2, 800bae0 <DMA_CheckFifoParam+0x70>)
 800badc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae0:	0800baf1 	.word	0x0800baf1
 800bae4:	0800baf7 	.word	0x0800baf7
 800bae8:	0800baf1 	.word	0x0800baf1
 800baec:	0800bb09 	.word	0x0800bb09
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	73fb      	strb	r3, [r7, #15]
      break;
 800baf4:	e030      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d025      	beq.n	800bb4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bb06:	e022      	b.n	800bb4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb0c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bb10:	d11f      	bne.n	800bb52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bb12:	2301      	movs	r3, #1
 800bb14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bb16:	e01c      	b.n	800bb52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d903      	bls.n	800bb26 <DMA_CheckFifoParam+0xb6>
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b03      	cmp	r3, #3
 800bb22:	d003      	beq.n	800bb2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bb24:	e018      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	73fb      	strb	r3, [r7, #15]
      break;
 800bb2a:	e015      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00e      	beq.n	800bb56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb3c:	e00b      	b.n	800bb56 <DMA_CheckFifoParam+0xe6>
      break;
 800bb3e:	bf00      	nop
 800bb40:	e00a      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      break;
 800bb42:	bf00      	nop
 800bb44:	e008      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      break;
 800bb46:	bf00      	nop
 800bb48:	e006      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      break;
 800bb4a:	bf00      	nop
 800bb4c:	e004      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      break;
 800bb4e:	bf00      	nop
 800bb50:	e002      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      break;   
 800bb52:	bf00      	nop
 800bb54:	e000      	b.n	800bb58 <DMA_CheckFifoParam+0xe8>
      break;
 800bb56:	bf00      	nop
    }
  } 
  
  return status; 
 800bb58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3714      	adds	r7, #20
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop

0800bb68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b089      	sub	sp, #36	; 0x24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bb72:	2300      	movs	r3, #0
 800bb74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bb76:	2300      	movs	r3, #0
 800bb78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bb7e:	2300      	movs	r3, #0
 800bb80:	61fb      	str	r3, [r7, #28]
 800bb82:	e16b      	b.n	800be5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bb84:	2201      	movs	r2, #1
 800bb86:	69fb      	ldr	r3, [r7, #28]
 800bb88:	fa02 f303 	lsl.w	r3, r2, r3
 800bb8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	4013      	ands	r3, r2
 800bb96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	f040 815a 	bne.w	800be56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f003 0303 	and.w	r3, r3, #3
 800bbaa:	2b01      	cmp	r3, #1
 800bbac:	d005      	beq.n	800bbba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bbb6:	2b02      	cmp	r3, #2
 800bbb8:	d130      	bne.n	800bc1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	005b      	lsls	r3, r3, #1
 800bbc4:	2203      	movs	r2, #3
 800bbc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bbca:	43db      	mvns	r3, r3
 800bbcc:	69ba      	ldr	r2, [r7, #24]
 800bbce:	4013      	ands	r3, r2
 800bbd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	68da      	ldr	r2, [r3, #12]
 800bbd6:	69fb      	ldr	r3, [r7, #28]
 800bbd8:	005b      	lsls	r3, r3, #1
 800bbda:	fa02 f303 	lsl.w	r3, r2, r3
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf8:	43db      	mvns	r3, r3
 800bbfa:	69ba      	ldr	r2, [r7, #24]
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	685b      	ldr	r3, [r3, #4]
 800bc04:	091b      	lsrs	r3, r3, #4
 800bc06:	f003 0201 	and.w	r2, r3, #1
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc10:	69ba      	ldr	r2, [r7, #24]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	69ba      	ldr	r2, [r7, #24]
 800bc1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d017      	beq.n	800bc58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	68db      	ldr	r3, [r3, #12]
 800bc2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bc2e:	69fb      	ldr	r3, [r7, #28]
 800bc30:	005b      	lsls	r3, r3, #1
 800bc32:	2203      	movs	r2, #3
 800bc34:	fa02 f303 	lsl.w	r3, r2, r3
 800bc38:	43db      	mvns	r3, r3
 800bc3a:	69ba      	ldr	r2, [r7, #24]
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	689a      	ldr	r2, [r3, #8]
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	fa02 f303 	lsl.w	r3, r2, r3
 800bc4c:	69ba      	ldr	r2, [r7, #24]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	69ba      	ldr	r2, [r7, #24]
 800bc56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f003 0303 	and.w	r3, r3, #3
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d123      	bne.n	800bcac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bc64:	69fb      	ldr	r3, [r7, #28]
 800bc66:	08da      	lsrs	r2, r3, #3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	3208      	adds	r2, #8
 800bc6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	f003 0307 	and.w	r3, r3, #7
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	220f      	movs	r2, #15
 800bc7c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc80:	43db      	mvns	r3, r3
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	4013      	ands	r3, r2
 800bc86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	691a      	ldr	r2, [r3, #16]
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	f003 0307 	and.w	r3, r3, #7
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	fa02 f303 	lsl.w	r3, r2, r3
 800bc98:	69ba      	ldr	r2, [r7, #24]
 800bc9a:	4313      	orrs	r3, r2
 800bc9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	08da      	lsrs	r2, r3, #3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3208      	adds	r2, #8
 800bca6:	69b9      	ldr	r1, [r7, #24]
 800bca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	005b      	lsls	r3, r3, #1
 800bcb6:	2203      	movs	r2, #3
 800bcb8:	fa02 f303 	lsl.w	r3, r2, r3
 800bcbc:	43db      	mvns	r3, r3
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	685b      	ldr	r3, [r3, #4]
 800bcc8:	f003 0203 	and.w	r2, r3, #3
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	005b      	lsls	r3, r3, #1
 800bcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800bcd4:	69ba      	ldr	r2, [r7, #24]
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 80b4 	beq.w	800be56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	4b60      	ldr	r3, [pc, #384]	; (800be74 <HAL_GPIO_Init+0x30c>)
 800bcf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf6:	4a5f      	ldr	r2, [pc, #380]	; (800be74 <HAL_GPIO_Init+0x30c>)
 800bcf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bcfc:	6453      	str	r3, [r2, #68]	; 0x44
 800bcfe:	4b5d      	ldr	r3, [pc, #372]	; (800be74 <HAL_GPIO_Init+0x30c>)
 800bd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd06:	60fb      	str	r3, [r7, #12]
 800bd08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bd0a:	4a5b      	ldr	r2, [pc, #364]	; (800be78 <HAL_GPIO_Init+0x310>)
 800bd0c:	69fb      	ldr	r3, [r7, #28]
 800bd0e:	089b      	lsrs	r3, r3, #2
 800bd10:	3302      	adds	r3, #2
 800bd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bd16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	f003 0303 	and.w	r3, r3, #3
 800bd1e:	009b      	lsls	r3, r3, #2
 800bd20:	220f      	movs	r2, #15
 800bd22:	fa02 f303 	lsl.w	r3, r2, r3
 800bd26:	43db      	mvns	r3, r3
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	4a52      	ldr	r2, [pc, #328]	; (800be7c <HAL_GPIO_Init+0x314>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d02b      	beq.n	800bd8e <HAL_GPIO_Init+0x226>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a51      	ldr	r2, [pc, #324]	; (800be80 <HAL_GPIO_Init+0x318>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d025      	beq.n	800bd8a <HAL_GPIO_Init+0x222>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a50      	ldr	r2, [pc, #320]	; (800be84 <HAL_GPIO_Init+0x31c>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d01f      	beq.n	800bd86 <HAL_GPIO_Init+0x21e>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a4f      	ldr	r2, [pc, #316]	; (800be88 <HAL_GPIO_Init+0x320>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d019      	beq.n	800bd82 <HAL_GPIO_Init+0x21a>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a4e      	ldr	r2, [pc, #312]	; (800be8c <HAL_GPIO_Init+0x324>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d013      	beq.n	800bd7e <HAL_GPIO_Init+0x216>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a4d      	ldr	r2, [pc, #308]	; (800be90 <HAL_GPIO_Init+0x328>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d00d      	beq.n	800bd7a <HAL_GPIO_Init+0x212>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a4c      	ldr	r2, [pc, #304]	; (800be94 <HAL_GPIO_Init+0x32c>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d007      	beq.n	800bd76 <HAL_GPIO_Init+0x20e>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a4b      	ldr	r2, [pc, #300]	; (800be98 <HAL_GPIO_Init+0x330>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d101      	bne.n	800bd72 <HAL_GPIO_Init+0x20a>
 800bd6e:	2307      	movs	r3, #7
 800bd70:	e00e      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd72:	2308      	movs	r3, #8
 800bd74:	e00c      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd76:	2306      	movs	r3, #6
 800bd78:	e00a      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd7a:	2305      	movs	r3, #5
 800bd7c:	e008      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd7e:	2304      	movs	r3, #4
 800bd80:	e006      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd82:	2303      	movs	r3, #3
 800bd84:	e004      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd86:	2302      	movs	r3, #2
 800bd88:	e002      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e000      	b.n	800bd90 <HAL_GPIO_Init+0x228>
 800bd8e:	2300      	movs	r3, #0
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	f002 0203 	and.w	r2, r2, #3
 800bd96:	0092      	lsls	r2, r2, #2
 800bd98:	4093      	lsls	r3, r2
 800bd9a:	69ba      	ldr	r2, [r7, #24]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bda0:	4935      	ldr	r1, [pc, #212]	; (800be78 <HAL_GPIO_Init+0x310>)
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	089b      	lsrs	r3, r3, #2
 800bda6:	3302      	adds	r3, #2
 800bda8:	69ba      	ldr	r2, [r7, #24]
 800bdaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bdae:	4b3b      	ldr	r3, [pc, #236]	; (800be9c <HAL_GPIO_Init+0x334>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	43db      	mvns	r3, r3
 800bdb8:	69ba      	ldr	r2, [r7, #24]
 800bdba:	4013      	ands	r3, r2
 800bdbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	685b      	ldr	r3, [r3, #4]
 800bdc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d003      	beq.n	800bdd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bdca:	69ba      	ldr	r2, [r7, #24]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bdd2:	4a32      	ldr	r2, [pc, #200]	; (800be9c <HAL_GPIO_Init+0x334>)
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800bdd8:	4b30      	ldr	r3, [pc, #192]	; (800be9c <HAL_GPIO_Init+0x334>)
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	43db      	mvns	r3, r3
 800bde2:	69ba      	ldr	r2, [r7, #24]
 800bde4:	4013      	ands	r3, r2
 800bde6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d003      	beq.n	800bdfc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bdf4:	69ba      	ldr	r2, [r7, #24]
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bdfc:	4a27      	ldr	r2, [pc, #156]	; (800be9c <HAL_GPIO_Init+0x334>)
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800be02:	4b26      	ldr	r3, [pc, #152]	; (800be9c <HAL_GPIO_Init+0x334>)
 800be04:	689b      	ldr	r3, [r3, #8]
 800be06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	43db      	mvns	r3, r3
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	4013      	ands	r3, r2
 800be10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d003      	beq.n	800be26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800be1e:	69ba      	ldr	r2, [r7, #24]
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	4313      	orrs	r3, r2
 800be24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800be26:	4a1d      	ldr	r2, [pc, #116]	; (800be9c <HAL_GPIO_Init+0x334>)
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800be2c:	4b1b      	ldr	r3, [pc, #108]	; (800be9c <HAL_GPIO_Init+0x334>)
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	43db      	mvns	r3, r3
 800be36:	69ba      	ldr	r2, [r7, #24]
 800be38:	4013      	ands	r3, r2
 800be3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be44:	2b00      	cmp	r3, #0
 800be46:	d003      	beq.n	800be50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	4313      	orrs	r3, r2
 800be4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800be50:	4a12      	ldr	r2, [pc, #72]	; (800be9c <HAL_GPIO_Init+0x334>)
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be56:	69fb      	ldr	r3, [r7, #28]
 800be58:	3301      	adds	r3, #1
 800be5a:	61fb      	str	r3, [r7, #28]
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	2b0f      	cmp	r3, #15
 800be60:	f67f ae90 	bls.w	800bb84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	3724      	adds	r7, #36	; 0x24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be70:	4770      	bx	lr
 800be72:	bf00      	nop
 800be74:	40023800 	.word	0x40023800
 800be78:	40013800 	.word	0x40013800
 800be7c:	40020000 	.word	0x40020000
 800be80:	40020400 	.word	0x40020400
 800be84:	40020800 	.word	0x40020800
 800be88:	40020c00 	.word	0x40020c00
 800be8c:	40021000 	.word	0x40021000
 800be90:	40021400 	.word	0x40021400
 800be94:	40021800 	.word	0x40021800
 800be98:	40021c00 	.word	0x40021c00
 800be9c:	40013c00 	.word	0x40013c00

0800bea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	460b      	mov	r3, r1
 800beaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691a      	ldr	r2, [r3, #16]
 800beb0:	887b      	ldrh	r3, [r7, #2]
 800beb2:	4013      	ands	r3, r2
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d002      	beq.n	800bebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800beb8:	2301      	movs	r3, #1
 800beba:	73fb      	strb	r3, [r7, #15]
 800bebc:	e001      	b.n	800bec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	807b      	strh	r3, [r7, #2]
 800bedc:	4613      	mov	r3, r2
 800bede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800bee0:	787b      	ldrb	r3, [r7, #1]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d003      	beq.n	800beee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800bee6:	887a      	ldrh	r2, [r7, #2]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800beec:	e003      	b.n	800bef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800beee:	887b      	ldrh	r3, [r7, #2]
 800bef0:	041a      	lsls	r2, r3, #16
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	619a      	str	r2, [r3, #24]
}
 800bef6:	bf00      	nop
 800bef8:	370c      	adds	r7, #12
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
	...

0800bf04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800bf0e:	4b08      	ldr	r3, [pc, #32]	; (800bf30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bf10:	695a      	ldr	r2, [r3, #20]
 800bf12:	88fb      	ldrh	r3, [r7, #6]
 800bf14:	4013      	ands	r3, r2
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d006      	beq.n	800bf28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800bf1a:	4a05      	ldr	r2, [pc, #20]	; (800bf30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800bf1c:	88fb      	ldrh	r3, [r7, #6]
 800bf1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800bf20:	88fb      	ldrh	r3, [r7, #6]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fd f814 	bl	8008f50 <HAL_GPIO_EXTI_Callback>
  }
}
 800bf28:	bf00      	nop
 800bf2a:	3708      	adds	r7, #8
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bd80      	pop	{r7, pc}
 800bf30:	40013c00 	.word	0x40013c00

0800bf34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e12b      	b.n	800c19e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf4c:	b2db      	uxtb	r3, r3
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d106      	bne.n	800bf60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f7fd f832 	bl	8008fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2224      	movs	r2, #36	; 0x24
 800bf64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681a      	ldr	r2, [r3, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f022 0201 	bic.w	r2, r2, #1
 800bf76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bf86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800bf98:	f000 fd30 	bl	800c9fc <HAL_RCC_GetPCLK1Freq>
 800bf9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	4a81      	ldr	r2, [pc, #516]	; (800c1a8 <HAL_I2C_Init+0x274>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d807      	bhi.n	800bfb8 <HAL_I2C_Init+0x84>
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	4a80      	ldr	r2, [pc, #512]	; (800c1ac <HAL_I2C_Init+0x278>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	bf94      	ite	ls
 800bfb0:	2301      	movls	r3, #1
 800bfb2:	2300      	movhi	r3, #0
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	e006      	b.n	800bfc6 <HAL_I2C_Init+0x92>
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4a7d      	ldr	r2, [pc, #500]	; (800c1b0 <HAL_I2C_Init+0x27c>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	bf94      	ite	ls
 800bfc0:	2301      	movls	r3, #1
 800bfc2:	2300      	movhi	r3, #0
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e0e7      	b.n	800c19e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	4a78      	ldr	r2, [pc, #480]	; (800c1b4 <HAL_I2C_Init+0x280>)
 800bfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd6:	0c9b      	lsrs	r3, r3, #18
 800bfd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	685b      	ldr	r3, [r3, #4]
 800bfe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	430a      	orrs	r2, r1
 800bfec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6a1b      	ldr	r3, [r3, #32]
 800bff4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	4a6a      	ldr	r2, [pc, #424]	; (800c1a8 <HAL_I2C_Init+0x274>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d802      	bhi.n	800c008 <HAL_I2C_Init+0xd4>
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	3301      	adds	r3, #1
 800c006:	e009      	b.n	800c01c <HAL_I2C_Init+0xe8>
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	4a69      	ldr	r2, [pc, #420]	; (800c1b8 <HAL_I2C_Init+0x284>)
 800c014:	fba2 2303 	umull	r2, r3, r2, r3
 800c018:	099b      	lsrs	r3, r3, #6
 800c01a:	3301      	adds	r3, #1
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	6812      	ldr	r2, [r2, #0]
 800c020:	430b      	orrs	r3, r1
 800c022:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	69db      	ldr	r3, [r3, #28]
 800c02a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c02e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	495c      	ldr	r1, [pc, #368]	; (800c1a8 <HAL_I2C_Init+0x274>)
 800c038:	428b      	cmp	r3, r1
 800c03a:	d819      	bhi.n	800c070 <HAL_I2C_Init+0x13c>
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	1e59      	subs	r1, r3, #1
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	005b      	lsls	r3, r3, #1
 800c046:	fbb1 f3f3 	udiv	r3, r1, r3
 800c04a:	1c59      	adds	r1, r3, #1
 800c04c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c050:	400b      	ands	r3, r1
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <HAL_I2C_Init+0x138>
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	1e59      	subs	r1, r3, #1
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	005b      	lsls	r3, r3, #1
 800c060:	fbb1 f3f3 	udiv	r3, r1, r3
 800c064:	3301      	adds	r3, #1
 800c066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c06a:	e051      	b.n	800c110 <HAL_I2C_Init+0x1dc>
 800c06c:	2304      	movs	r3, #4
 800c06e:	e04f      	b.n	800c110 <HAL_I2C_Init+0x1dc>
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d111      	bne.n	800c09c <HAL_I2C_Init+0x168>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	1e58      	subs	r0, r3, #1
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6859      	ldr	r1, [r3, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	005b      	lsls	r3, r3, #1
 800c084:	440b      	add	r3, r1
 800c086:	fbb0 f3f3 	udiv	r3, r0, r3
 800c08a:	3301      	adds	r3, #1
 800c08c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c090:	2b00      	cmp	r3, #0
 800c092:	bf0c      	ite	eq
 800c094:	2301      	moveq	r3, #1
 800c096:	2300      	movne	r3, #0
 800c098:	b2db      	uxtb	r3, r3
 800c09a:	e012      	b.n	800c0c2 <HAL_I2C_Init+0x18e>
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	1e58      	subs	r0, r3, #1
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6859      	ldr	r1, [r3, #4]
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	440b      	add	r3, r1
 800c0aa:	0099      	lsls	r1, r3, #2
 800c0ac:	440b      	add	r3, r1
 800c0ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bf0c      	ite	eq
 800c0bc:	2301      	moveq	r3, #1
 800c0be:	2300      	movne	r3, #0
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d001      	beq.n	800c0ca <HAL_I2C_Init+0x196>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	e022      	b.n	800c110 <HAL_I2C_Init+0x1dc>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d10e      	bne.n	800c0f0 <HAL_I2C_Init+0x1bc>
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	1e58      	subs	r0, r3, #1
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6859      	ldr	r1, [r3, #4]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	005b      	lsls	r3, r3, #1
 800c0de:	440b      	add	r3, r1
 800c0e0:	fbb0 f3f3 	udiv	r3, r0, r3
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0ee:	e00f      	b.n	800c110 <HAL_I2C_Init+0x1dc>
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	1e58      	subs	r0, r3, #1
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6859      	ldr	r1, [r3, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	440b      	add	r3, r1
 800c0fe:	0099      	lsls	r1, r3, #2
 800c100:	440b      	add	r3, r1
 800c102:	fbb0 f3f3 	udiv	r3, r0, r3
 800c106:	3301      	adds	r3, #1
 800c108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c10c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	6809      	ldr	r1, [r1, #0]
 800c114:	4313      	orrs	r3, r2
 800c116:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	69da      	ldr	r2, [r3, #28]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	431a      	orrs	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c13e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	6911      	ldr	r1, [r2, #16]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	68d2      	ldr	r2, [r2, #12]
 800c14a:	4311      	orrs	r1, r2
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	6812      	ldr	r2, [r2, #0]
 800c150:	430b      	orrs	r3, r1
 800c152:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	695a      	ldr	r2, [r3, #20]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	431a      	orrs	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	430a      	orrs	r2, r1
 800c16e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f042 0201 	orr.w	r2, r2, #1
 800c17e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2220      	movs	r2, #32
 800c18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	2200      	movs	r2, #0
 800c192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3710      	adds	r7, #16
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bd80      	pop	{r7, pc}
 800c1a6:	bf00      	nop
 800c1a8:	000186a0 	.word	0x000186a0
 800c1ac:	001e847f 	.word	0x001e847f
 800c1b0:	003d08ff 	.word	0x003d08ff
 800c1b4:	431bde83 	.word	0x431bde83
 800c1b8:	10624dd3 	.word	0x10624dd3

0800c1bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b086      	sub	sp, #24
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d101      	bne.n	800c1ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e264      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d075      	beq.n	800c2c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c1da:	4ba3      	ldr	r3, [pc, #652]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c1dc:	689b      	ldr	r3, [r3, #8]
 800c1de:	f003 030c 	and.w	r3, r3, #12
 800c1e2:	2b04      	cmp	r3, #4
 800c1e4:	d00c      	beq.n	800c200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c1e6:	4ba0      	ldr	r3, [pc, #640]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c1ee:	2b08      	cmp	r3, #8
 800c1f0:	d112      	bne.n	800c218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c1f2:	4b9d      	ldr	r3, [pc, #628]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c1f4:	685b      	ldr	r3, [r3, #4]
 800c1f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c1fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1fe:	d10b      	bne.n	800c218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c200:	4b99      	ldr	r3, [pc, #612]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d05b      	beq.n	800c2c4 <HAL_RCC_OscConfig+0x108>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d157      	bne.n	800c2c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	e23f      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c220:	d106      	bne.n	800c230 <HAL_RCC_OscConfig+0x74>
 800c222:	4b91      	ldr	r3, [pc, #580]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	4a90      	ldr	r2, [pc, #576]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c22c:	6013      	str	r3, [r2, #0]
 800c22e:	e01d      	b.n	800c26c <HAL_RCC_OscConfig+0xb0>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c238:	d10c      	bne.n	800c254 <HAL_RCC_OscConfig+0x98>
 800c23a:	4b8b      	ldr	r3, [pc, #556]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	4a8a      	ldr	r2, [pc, #552]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	4b88      	ldr	r3, [pc, #544]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a87      	ldr	r2, [pc, #540]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c250:	6013      	str	r3, [r2, #0]
 800c252:	e00b      	b.n	800c26c <HAL_RCC_OscConfig+0xb0>
 800c254:	4b84      	ldr	r3, [pc, #528]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	4a83      	ldr	r2, [pc, #524]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c25a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c25e:	6013      	str	r3, [r2, #0]
 800c260:	4b81      	ldr	r3, [pc, #516]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a80      	ldr	r2, [pc, #512]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c26a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d013      	beq.n	800c29c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c274:	f7fe f918 	bl	800a4a8 <HAL_GetTick>
 800c278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c27a:	e008      	b.n	800c28e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c27c:	f7fe f914 	bl	800a4a8 <HAL_GetTick>
 800c280:	4602      	mov	r2, r0
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	2b64      	cmp	r3, #100	; 0x64
 800c288:	d901      	bls.n	800c28e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c28a:	2303      	movs	r3, #3
 800c28c:	e204      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c28e:	4b76      	ldr	r3, [pc, #472]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c296:	2b00      	cmp	r3, #0
 800c298:	d0f0      	beq.n	800c27c <HAL_RCC_OscConfig+0xc0>
 800c29a:	e014      	b.n	800c2c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c29c:	f7fe f904 	bl	800a4a8 <HAL_GetTick>
 800c2a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2a2:	e008      	b.n	800c2b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c2a4:	f7fe f900 	bl	800a4a8 <HAL_GetTick>
 800c2a8:	4602      	mov	r2, r0
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	1ad3      	subs	r3, r2, r3
 800c2ae:	2b64      	cmp	r3, #100	; 0x64
 800c2b0:	d901      	bls.n	800c2b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c2b2:	2303      	movs	r3, #3
 800c2b4:	e1f0      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2b6:	4b6c      	ldr	r3, [pc, #432]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1f0      	bne.n	800c2a4 <HAL_RCC_OscConfig+0xe8>
 800c2c2:	e000      	b.n	800c2c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f003 0302 	and.w	r3, r3, #2
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d063      	beq.n	800c39a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c2d2:	4b65      	ldr	r3, [pc, #404]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f003 030c 	and.w	r3, r3, #12
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d00b      	beq.n	800c2f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2de:	4b62      	ldr	r3, [pc, #392]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c2e0:	689b      	ldr	r3, [r3, #8]
 800c2e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c2e6:	2b08      	cmp	r3, #8
 800c2e8:	d11c      	bne.n	800c324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2ea:	4b5f      	ldr	r3, [pc, #380]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d116      	bne.n	800c324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2f6:	4b5c      	ldr	r3, [pc, #368]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 0302 	and.w	r3, r3, #2
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d005      	beq.n	800c30e <HAL_RCC_OscConfig+0x152>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	68db      	ldr	r3, [r3, #12]
 800c306:	2b01      	cmp	r3, #1
 800c308:	d001      	beq.n	800c30e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c30a:	2301      	movs	r3, #1
 800c30c:	e1c4      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c30e:	4b56      	ldr	r3, [pc, #344]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	4952      	ldr	r1, [pc, #328]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c31e:	4313      	orrs	r3, r2
 800c320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c322:	e03a      	b.n	800c39a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	68db      	ldr	r3, [r3, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d020      	beq.n	800c36e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c32c:	4b4f      	ldr	r3, [pc, #316]	; (800c46c <HAL_RCC_OscConfig+0x2b0>)
 800c32e:	2201      	movs	r2, #1
 800c330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c332:	f7fe f8b9 	bl	800a4a8 <HAL_GetTick>
 800c336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c338:	e008      	b.n	800c34c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c33a:	f7fe f8b5 	bl	800a4a8 <HAL_GetTick>
 800c33e:	4602      	mov	r2, r0
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	2b02      	cmp	r3, #2
 800c346:	d901      	bls.n	800c34c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c348:	2303      	movs	r3, #3
 800c34a:	e1a5      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c34c:	4b46      	ldr	r3, [pc, #280]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0302 	and.w	r3, r3, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d0f0      	beq.n	800c33a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c358:	4b43      	ldr	r3, [pc, #268]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	691b      	ldr	r3, [r3, #16]
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	4940      	ldr	r1, [pc, #256]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c368:	4313      	orrs	r3, r2
 800c36a:	600b      	str	r3, [r1, #0]
 800c36c:	e015      	b.n	800c39a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c36e:	4b3f      	ldr	r3, [pc, #252]	; (800c46c <HAL_RCC_OscConfig+0x2b0>)
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c374:	f7fe f898 	bl	800a4a8 <HAL_GetTick>
 800c378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c37a:	e008      	b.n	800c38e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c37c:	f7fe f894 	bl	800a4a8 <HAL_GetTick>
 800c380:	4602      	mov	r2, r0
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	1ad3      	subs	r3, r2, r3
 800c386:	2b02      	cmp	r3, #2
 800c388:	d901      	bls.n	800c38e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e184      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c38e:	4b36      	ldr	r3, [pc, #216]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 0302 	and.w	r3, r3, #2
 800c396:	2b00      	cmp	r3, #0
 800c398:	d1f0      	bne.n	800c37c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0308 	and.w	r3, r3, #8
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d030      	beq.n	800c408 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d016      	beq.n	800c3dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c3ae:	4b30      	ldr	r3, [pc, #192]	; (800c470 <HAL_RCC_OscConfig+0x2b4>)
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3b4:	f7fe f878 	bl	800a4a8 <HAL_GetTick>
 800c3b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3ba:	e008      	b.n	800c3ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3bc:	f7fe f874 	bl	800a4a8 <HAL_GetTick>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	1ad3      	subs	r3, r2, r3
 800c3c6:	2b02      	cmp	r3, #2
 800c3c8:	d901      	bls.n	800c3ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e164      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3ce:	4b26      	ldr	r3, [pc, #152]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3d2:	f003 0302 	and.w	r3, r3, #2
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d0f0      	beq.n	800c3bc <HAL_RCC_OscConfig+0x200>
 800c3da:	e015      	b.n	800c408 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c3dc:	4b24      	ldr	r3, [pc, #144]	; (800c470 <HAL_RCC_OscConfig+0x2b4>)
 800c3de:	2200      	movs	r2, #0
 800c3e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c3e2:	f7fe f861 	bl	800a4a8 <HAL_GetTick>
 800c3e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3e8:	e008      	b.n	800c3fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3ea:	f7fe f85d 	bl	800a4a8 <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	2b02      	cmp	r3, #2
 800c3f6:	d901      	bls.n	800c3fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e14d      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3fc:	4b1a      	ldr	r3, [pc, #104]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c400:	f003 0302 	and.w	r3, r3, #2
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1f0      	bne.n	800c3ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0304 	and.w	r3, r3, #4
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 80a0 	beq.w	800c556 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c416:	2300      	movs	r3, #0
 800c418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c41a:	4b13      	ldr	r3, [pc, #76]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c41e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10f      	bne.n	800c446 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c426:	2300      	movs	r3, #0
 800c428:	60bb      	str	r3, [r7, #8]
 800c42a:	4b0f      	ldr	r3, [pc, #60]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c42e:	4a0e      	ldr	r2, [pc, #56]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c434:	6413      	str	r3, [r2, #64]	; 0x40
 800c436:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <HAL_RCC_OscConfig+0x2ac>)
 800c438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c43e:	60bb      	str	r3, [r7, #8]
 800c440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c442:	2301      	movs	r3, #1
 800c444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c446:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <HAL_RCC_OscConfig+0x2b8>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d121      	bne.n	800c496 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c452:	4b08      	ldr	r3, [pc, #32]	; (800c474 <HAL_RCC_OscConfig+0x2b8>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a07      	ldr	r2, [pc, #28]	; (800c474 <HAL_RCC_OscConfig+0x2b8>)
 800c458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c45c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c45e:	f7fe f823 	bl	800a4a8 <HAL_GetTick>
 800c462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c464:	e011      	b.n	800c48a <HAL_RCC_OscConfig+0x2ce>
 800c466:	bf00      	nop
 800c468:	40023800 	.word	0x40023800
 800c46c:	42470000 	.word	0x42470000
 800c470:	42470e80 	.word	0x42470e80
 800c474:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c478:	f7fe f816 	bl	800a4a8 <HAL_GetTick>
 800c47c:	4602      	mov	r2, r0
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	2b02      	cmp	r3, #2
 800c484:	d901      	bls.n	800c48a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c486:	2303      	movs	r3, #3
 800c488:	e106      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c48a:	4b85      	ldr	r3, [pc, #532]	; (800c6a0 <HAL_RCC_OscConfig+0x4e4>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c492:	2b00      	cmp	r3, #0
 800c494:	d0f0      	beq.n	800c478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d106      	bne.n	800c4ac <HAL_RCC_OscConfig+0x2f0>
 800c49e:	4b81      	ldr	r3, [pc, #516]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4a2:	4a80      	ldr	r2, [pc, #512]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4a4:	f043 0301 	orr.w	r3, r3, #1
 800c4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800c4aa:	e01c      	b.n	800c4e6 <HAL_RCC_OscConfig+0x32a>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	2b05      	cmp	r3, #5
 800c4b2:	d10c      	bne.n	800c4ce <HAL_RCC_OscConfig+0x312>
 800c4b4:	4b7b      	ldr	r3, [pc, #492]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b8:	4a7a      	ldr	r2, [pc, #488]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4ba:	f043 0304 	orr.w	r3, r3, #4
 800c4be:	6713      	str	r3, [r2, #112]	; 0x70
 800c4c0:	4b78      	ldr	r3, [pc, #480]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c4:	4a77      	ldr	r2, [pc, #476]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4c6:	f043 0301 	orr.w	r3, r3, #1
 800c4ca:	6713      	str	r3, [r2, #112]	; 0x70
 800c4cc:	e00b      	b.n	800c4e6 <HAL_RCC_OscConfig+0x32a>
 800c4ce:	4b75      	ldr	r3, [pc, #468]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d2:	4a74      	ldr	r2, [pc, #464]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4d4:	f023 0301 	bic.w	r3, r3, #1
 800c4d8:	6713      	str	r3, [r2, #112]	; 0x70
 800c4da:	4b72      	ldr	r3, [pc, #456]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4de:	4a71      	ldr	r2, [pc, #452]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c4e0:	f023 0304 	bic.w	r3, r3, #4
 800c4e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d015      	beq.n	800c51a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4ee:	f7fd ffdb 	bl	800a4a8 <HAL_GetTick>
 800c4f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4f4:	e00a      	b.n	800c50c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4f6:	f7fd ffd7 	bl	800a4a8 <HAL_GetTick>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	1ad3      	subs	r3, r2, r3
 800c500:	f241 3288 	movw	r2, #5000	; 0x1388
 800c504:	4293      	cmp	r3, r2
 800c506:	d901      	bls.n	800c50c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e0c5      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c50c:	4b65      	ldr	r3, [pc, #404]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c510:	f003 0302 	and.w	r3, r3, #2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d0ee      	beq.n	800c4f6 <HAL_RCC_OscConfig+0x33a>
 800c518:	e014      	b.n	800c544 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c51a:	f7fd ffc5 	bl	800a4a8 <HAL_GetTick>
 800c51e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c520:	e00a      	b.n	800c538 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c522:	f7fd ffc1 	bl	800a4a8 <HAL_GetTick>
 800c526:	4602      	mov	r2, r0
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	1ad3      	subs	r3, r2, r3
 800c52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c530:	4293      	cmp	r3, r2
 800c532:	d901      	bls.n	800c538 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c534:	2303      	movs	r3, #3
 800c536:	e0af      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c538:	4b5a      	ldr	r3, [pc, #360]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c53c:	f003 0302 	and.w	r3, r3, #2
 800c540:	2b00      	cmp	r3, #0
 800c542:	d1ee      	bne.n	800c522 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d105      	bne.n	800c556 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c54a:	4b56      	ldr	r3, [pc, #344]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c54e:	4a55      	ldr	r2, [pc, #340]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	699b      	ldr	r3, [r3, #24]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 809b 	beq.w	800c696 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c560:	4b50      	ldr	r3, [pc, #320]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c562:	689b      	ldr	r3, [r3, #8]
 800c564:	f003 030c 	and.w	r3, r3, #12
 800c568:	2b08      	cmp	r3, #8
 800c56a:	d05c      	beq.n	800c626 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	699b      	ldr	r3, [r3, #24]
 800c570:	2b02      	cmp	r3, #2
 800c572:	d141      	bne.n	800c5f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c574:	4b4c      	ldr	r3, [pc, #304]	; (800c6a8 <HAL_RCC_OscConfig+0x4ec>)
 800c576:	2200      	movs	r2, #0
 800c578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c57a:	f7fd ff95 	bl	800a4a8 <HAL_GetTick>
 800c57e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c580:	e008      	b.n	800c594 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c582:	f7fd ff91 	bl	800a4a8 <HAL_GetTick>
 800c586:	4602      	mov	r2, r0
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	2b02      	cmp	r3, #2
 800c58e:	d901      	bls.n	800c594 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c590:	2303      	movs	r3, #3
 800c592:	e081      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c594:	4b43      	ldr	r3, [pc, #268]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1f0      	bne.n	800c582 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	69da      	ldr	r2, [r3, #28]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6a1b      	ldr	r3, [r3, #32]
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ae:	019b      	lsls	r3, r3, #6
 800c5b0:	431a      	orrs	r2, r3
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b6:	085b      	lsrs	r3, r3, #1
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	041b      	lsls	r3, r3, #16
 800c5bc:	431a      	orrs	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5c2:	061b      	lsls	r3, r3, #24
 800c5c4:	4937      	ldr	r1, [pc, #220]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c5ca:	4b37      	ldr	r3, [pc, #220]	; (800c6a8 <HAL_RCC_OscConfig+0x4ec>)
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5d0:	f7fd ff6a 	bl	800a4a8 <HAL_GetTick>
 800c5d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5d6:	e008      	b.n	800c5ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c5d8:	f7fd ff66 	bl	800a4a8 <HAL_GetTick>
 800c5dc:	4602      	mov	r2, r0
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	1ad3      	subs	r3, r2, r3
 800c5e2:	2b02      	cmp	r3, #2
 800c5e4:	d901      	bls.n	800c5ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c5e6:	2303      	movs	r3, #3
 800c5e8:	e056      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5ea:	4b2e      	ldr	r3, [pc, #184]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d0f0      	beq.n	800c5d8 <HAL_RCC_OscConfig+0x41c>
 800c5f6:	e04e      	b.n	800c696 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5f8:	4b2b      	ldr	r3, [pc, #172]	; (800c6a8 <HAL_RCC_OscConfig+0x4ec>)
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5fe:	f7fd ff53 	bl	800a4a8 <HAL_GetTick>
 800c602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c604:	e008      	b.n	800c618 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c606:	f7fd ff4f 	bl	800a4a8 <HAL_GetTick>
 800c60a:	4602      	mov	r2, r0
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	1ad3      	subs	r3, r2, r3
 800c610:	2b02      	cmp	r3, #2
 800c612:	d901      	bls.n	800c618 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c614:	2303      	movs	r3, #3
 800c616:	e03f      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c618:	4b22      	ldr	r3, [pc, #136]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c620:	2b00      	cmp	r3, #0
 800c622:	d1f0      	bne.n	800c606 <HAL_RCC_OscConfig+0x44a>
 800c624:	e037      	b.n	800c696 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	2b01      	cmp	r3, #1
 800c62c:	d101      	bne.n	800c632 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
 800c630:	e032      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c632:	4b1c      	ldr	r3, [pc, #112]	; (800c6a4 <HAL_RCC_OscConfig+0x4e8>)
 800c634:	685b      	ldr	r3, [r3, #4]
 800c636:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	699b      	ldr	r3, [r3, #24]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d028      	beq.n	800c692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d121      	bne.n	800c692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c658:	429a      	cmp	r2, r3
 800c65a:	d11a      	bne.n	800c692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c662:	4013      	ands	r3, r2
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c668:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d111      	bne.n	800c692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c678:	085b      	lsrs	r3, r3, #1
 800c67a:	3b01      	subs	r3, #1
 800c67c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c67e:	429a      	cmp	r2, r3
 800c680:	d107      	bne.n	800c692 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c68e:	429a      	cmp	r2, r3
 800c690:	d001      	beq.n	800c696 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e000      	b.n	800c698 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3718      	adds	r7, #24
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	40007000 	.word	0x40007000
 800c6a4:	40023800 	.word	0x40023800
 800c6a8:	42470060 	.word	0x42470060

0800c6ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b084      	sub	sp, #16
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e0cc      	b.n	800c85a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c6c0:	4b68      	ldr	r3, [pc, #416]	; (800c864 <HAL_RCC_ClockConfig+0x1b8>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	683a      	ldr	r2, [r7, #0]
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d90c      	bls.n	800c6e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6ce:	4b65      	ldr	r3, [pc, #404]	; (800c864 <HAL_RCC_ClockConfig+0x1b8>)
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	b2d2      	uxtb	r2, r2
 800c6d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6d6:	4b63      	ldr	r3, [pc, #396]	; (800c864 <HAL_RCC_ClockConfig+0x1b8>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 0307 	and.w	r3, r3, #7
 800c6de:	683a      	ldr	r2, [r7, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d001      	beq.n	800c6e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e0b8      	b.n	800c85a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d020      	beq.n	800c736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f003 0304 	and.w	r3, r3, #4
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d005      	beq.n	800c70c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c700:	4b59      	ldr	r3, [pc, #356]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c702:	689b      	ldr	r3, [r3, #8]
 800c704:	4a58      	ldr	r2, [pc, #352]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c70a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 0308 	and.w	r3, r3, #8
 800c714:	2b00      	cmp	r3, #0
 800c716:	d005      	beq.n	800c724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c718:	4b53      	ldr	r3, [pc, #332]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c71a:	689b      	ldr	r3, [r3, #8]
 800c71c:	4a52      	ldr	r2, [pc, #328]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c71e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c724:	4b50      	ldr	r3, [pc, #320]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	494d      	ldr	r1, [pc, #308]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c732:	4313      	orrs	r3, r2
 800c734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 0301 	and.w	r3, r3, #1
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d044      	beq.n	800c7cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d107      	bne.n	800c75a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c74a:	4b47      	ldr	r3, [pc, #284]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c752:	2b00      	cmp	r3, #0
 800c754:	d119      	bne.n	800c78a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c756:	2301      	movs	r3, #1
 800c758:	e07f      	b.n	800c85a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	2b02      	cmp	r3, #2
 800c760:	d003      	beq.n	800c76a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c766:	2b03      	cmp	r3, #3
 800c768:	d107      	bne.n	800c77a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c76a:	4b3f      	ldr	r3, [pc, #252]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c772:	2b00      	cmp	r3, #0
 800c774:	d109      	bne.n	800c78a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	e06f      	b.n	800c85a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c77a:	4b3b      	ldr	r3, [pc, #236]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0302 	and.w	r3, r3, #2
 800c782:	2b00      	cmp	r3, #0
 800c784:	d101      	bne.n	800c78a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c786:	2301      	movs	r3, #1
 800c788:	e067      	b.n	800c85a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c78a:	4b37      	ldr	r3, [pc, #220]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	f023 0203 	bic.w	r2, r3, #3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	4934      	ldr	r1, [pc, #208]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c798:	4313      	orrs	r3, r2
 800c79a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c79c:	f7fd fe84 	bl	800a4a8 <HAL_GetTick>
 800c7a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7a2:	e00a      	b.n	800c7ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7a4:	f7fd fe80 	bl	800a4a8 <HAL_GetTick>
 800c7a8:	4602      	mov	r2, r0
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	1ad3      	subs	r3, r2, r3
 800c7ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d901      	bls.n	800c7ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c7b6:	2303      	movs	r3, #3
 800c7b8:	e04f      	b.n	800c85a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7ba:	4b2b      	ldr	r3, [pc, #172]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f003 020c 	and.w	r2, r3, #12
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685b      	ldr	r3, [r3, #4]
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d1eb      	bne.n	800c7a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c7cc:	4b25      	ldr	r3, [pc, #148]	; (800c864 <HAL_RCC_ClockConfig+0x1b8>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 0307 	and.w	r3, r3, #7
 800c7d4:	683a      	ldr	r2, [r7, #0]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d20c      	bcs.n	800c7f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7da:	4b22      	ldr	r3, [pc, #136]	; (800c864 <HAL_RCC_ClockConfig+0x1b8>)
 800c7dc:	683a      	ldr	r2, [r7, #0]
 800c7de:	b2d2      	uxtb	r2, r2
 800c7e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7e2:	4b20      	ldr	r3, [pc, #128]	; (800c864 <HAL_RCC_ClockConfig+0x1b8>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 0307 	and.w	r3, r3, #7
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d001      	beq.n	800c7f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e032      	b.n	800c85a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 0304 	and.w	r3, r3, #4
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d008      	beq.n	800c812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c800:	4b19      	ldr	r3, [pc, #100]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c802:	689b      	ldr	r3, [r3, #8]
 800c804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68db      	ldr	r3, [r3, #12]
 800c80c:	4916      	ldr	r1, [pc, #88]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c80e:	4313      	orrs	r3, r2
 800c810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f003 0308 	and.w	r3, r3, #8
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d009      	beq.n	800c832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c81e:	4b12      	ldr	r3, [pc, #72]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	691b      	ldr	r3, [r3, #16]
 800c82a:	00db      	lsls	r3, r3, #3
 800c82c:	490e      	ldr	r1, [pc, #56]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c82e:	4313      	orrs	r3, r2
 800c830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c832:	f000 f821 	bl	800c878 <HAL_RCC_GetSysClockFreq>
 800c836:	4602      	mov	r2, r0
 800c838:	4b0b      	ldr	r3, [pc, #44]	; (800c868 <HAL_RCC_ClockConfig+0x1bc>)
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	091b      	lsrs	r3, r3, #4
 800c83e:	f003 030f 	and.w	r3, r3, #15
 800c842:	490a      	ldr	r1, [pc, #40]	; (800c86c <HAL_RCC_ClockConfig+0x1c0>)
 800c844:	5ccb      	ldrb	r3, [r1, r3]
 800c846:	fa22 f303 	lsr.w	r3, r2, r3
 800c84a:	4a09      	ldr	r2, [pc, #36]	; (800c870 <HAL_RCC_ClockConfig+0x1c4>)
 800c84c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c84e:	4b09      	ldr	r3, [pc, #36]	; (800c874 <HAL_RCC_ClockConfig+0x1c8>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	4618      	mov	r0, r3
 800c854:	f7fd fde4 	bl	800a420 <HAL_InitTick>

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
 800c862:	bf00      	nop
 800c864:	40023c00 	.word	0x40023c00
 800c868:	40023800 	.word	0x40023800
 800c86c:	08013a10 	.word	0x08013a10
 800c870:	200002f4 	.word	0x200002f4
 800c874:	200002f8 	.word	0x200002f8

0800c878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c878:	b5b0      	push	{r4, r5, r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c87e:	2100      	movs	r1, #0
 800c880:	6079      	str	r1, [r7, #4]
 800c882:	2100      	movs	r1, #0
 800c884:	60f9      	str	r1, [r7, #12]
 800c886:	2100      	movs	r1, #0
 800c888:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c88a:	2100      	movs	r1, #0
 800c88c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c88e:	4952      	ldr	r1, [pc, #328]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800c890:	6889      	ldr	r1, [r1, #8]
 800c892:	f001 010c 	and.w	r1, r1, #12
 800c896:	2908      	cmp	r1, #8
 800c898:	d00d      	beq.n	800c8b6 <HAL_RCC_GetSysClockFreq+0x3e>
 800c89a:	2908      	cmp	r1, #8
 800c89c:	f200 8094 	bhi.w	800c9c8 <HAL_RCC_GetSysClockFreq+0x150>
 800c8a0:	2900      	cmp	r1, #0
 800c8a2:	d002      	beq.n	800c8aa <HAL_RCC_GetSysClockFreq+0x32>
 800c8a4:	2904      	cmp	r1, #4
 800c8a6:	d003      	beq.n	800c8b0 <HAL_RCC_GetSysClockFreq+0x38>
 800c8a8:	e08e      	b.n	800c9c8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c8aa:	4b4c      	ldr	r3, [pc, #304]	; (800c9dc <HAL_RCC_GetSysClockFreq+0x164>)
 800c8ac:	60bb      	str	r3, [r7, #8]
       break;
 800c8ae:	e08e      	b.n	800c9ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c8b0:	4b4b      	ldr	r3, [pc, #300]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x168>)
 800c8b2:	60bb      	str	r3, [r7, #8]
      break;
 800c8b4:	e08b      	b.n	800c9ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c8b6:	4948      	ldr	r1, [pc, #288]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800c8b8:	6849      	ldr	r1, [r1, #4]
 800c8ba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800c8be:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c8c0:	4945      	ldr	r1, [pc, #276]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800c8c2:	6849      	ldr	r1, [r1, #4]
 800c8c4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c8c8:	2900      	cmp	r1, #0
 800c8ca:	d024      	beq.n	800c916 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c8cc:	4942      	ldr	r1, [pc, #264]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800c8ce:	6849      	ldr	r1, [r1, #4]
 800c8d0:	0989      	lsrs	r1, r1, #6
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	f04f 0100 	mov.w	r1, #0
 800c8d8:	f240 14ff 	movw	r4, #511	; 0x1ff
 800c8dc:	f04f 0500 	mov.w	r5, #0
 800c8e0:	ea00 0204 	and.w	r2, r0, r4
 800c8e4:	ea01 0305 	and.w	r3, r1, r5
 800c8e8:	493d      	ldr	r1, [pc, #244]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x168>)
 800c8ea:	fb01 f003 	mul.w	r0, r1, r3
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	fb01 f102 	mul.w	r1, r1, r2
 800c8f4:	1844      	adds	r4, r0, r1
 800c8f6:	493a      	ldr	r1, [pc, #232]	; (800c9e0 <HAL_RCC_GetSysClockFreq+0x168>)
 800c8f8:	fba2 0101 	umull	r0, r1, r2, r1
 800c8fc:	1863      	adds	r3, r4, r1
 800c8fe:	4619      	mov	r1, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	461a      	mov	r2, r3
 800c904:	f04f 0300 	mov.w	r3, #0
 800c908:	f7f4 f99e 	bl	8000c48 <__aeabi_uldivmod>
 800c90c:	4602      	mov	r2, r0
 800c90e:	460b      	mov	r3, r1
 800c910:	4613      	mov	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	e04a      	b.n	800c9ac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c916:	4b30      	ldr	r3, [pc, #192]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	099b      	lsrs	r3, r3, #6
 800c91c:	461a      	mov	r2, r3
 800c91e:	f04f 0300 	mov.w	r3, #0
 800c922:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c926:	f04f 0100 	mov.w	r1, #0
 800c92a:	ea02 0400 	and.w	r4, r2, r0
 800c92e:	ea03 0501 	and.w	r5, r3, r1
 800c932:	4620      	mov	r0, r4
 800c934:	4629      	mov	r1, r5
 800c936:	f04f 0200 	mov.w	r2, #0
 800c93a:	f04f 0300 	mov.w	r3, #0
 800c93e:	014b      	lsls	r3, r1, #5
 800c940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c944:	0142      	lsls	r2, r0, #5
 800c946:	4610      	mov	r0, r2
 800c948:	4619      	mov	r1, r3
 800c94a:	1b00      	subs	r0, r0, r4
 800c94c:	eb61 0105 	sbc.w	r1, r1, r5
 800c950:	f04f 0200 	mov.w	r2, #0
 800c954:	f04f 0300 	mov.w	r3, #0
 800c958:	018b      	lsls	r3, r1, #6
 800c95a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c95e:	0182      	lsls	r2, r0, #6
 800c960:	1a12      	subs	r2, r2, r0
 800c962:	eb63 0301 	sbc.w	r3, r3, r1
 800c966:	f04f 0000 	mov.w	r0, #0
 800c96a:	f04f 0100 	mov.w	r1, #0
 800c96e:	00d9      	lsls	r1, r3, #3
 800c970:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c974:	00d0      	lsls	r0, r2, #3
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	1912      	adds	r2, r2, r4
 800c97c:	eb45 0303 	adc.w	r3, r5, r3
 800c980:	f04f 0000 	mov.w	r0, #0
 800c984:	f04f 0100 	mov.w	r1, #0
 800c988:	0299      	lsls	r1, r3, #10
 800c98a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800c98e:	0290      	lsls	r0, r2, #10
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	4610      	mov	r0, r2
 800c996:	4619      	mov	r1, r3
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	461a      	mov	r2, r3
 800c99c:	f04f 0300 	mov.w	r3, #0
 800c9a0:	f7f4 f952 	bl	8000c48 <__aeabi_uldivmod>
 800c9a4:	4602      	mov	r2, r0
 800c9a6:	460b      	mov	r3, r1
 800c9a8:	4613      	mov	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c9ac:	4b0a      	ldr	r3, [pc, #40]	; (800c9d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	0c1b      	lsrs	r3, r3, #16
 800c9b2:	f003 0303 	and.w	r3, r3, #3
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	005b      	lsls	r3, r3, #1
 800c9ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c9bc:	68fa      	ldr	r2, [r7, #12]
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9c4:	60bb      	str	r3, [r7, #8]
      break;
 800c9c6:	e002      	b.n	800c9ce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c9c8:	4b04      	ldr	r3, [pc, #16]	; (800c9dc <HAL_RCC_GetSysClockFreq+0x164>)
 800c9ca:	60bb      	str	r3, [r7, #8]
      break;
 800c9cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c9ce:	68bb      	ldr	r3, [r7, #8]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3710      	adds	r7, #16
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bdb0      	pop	{r4, r5, r7, pc}
 800c9d8:	40023800 	.word	0x40023800
 800c9dc:	00f42400 	.word	0x00f42400
 800c9e0:	00b71b00 	.word	0x00b71b00

0800c9e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c9e8:	4b03      	ldr	r3, [pc, #12]	; (800c9f8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	200002f4 	.word	0x200002f4

0800c9fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ca00:	f7ff fff0 	bl	800c9e4 <HAL_RCC_GetHCLKFreq>
 800ca04:	4602      	mov	r2, r0
 800ca06:	4b05      	ldr	r3, [pc, #20]	; (800ca1c <HAL_RCC_GetPCLK1Freq+0x20>)
 800ca08:	689b      	ldr	r3, [r3, #8]
 800ca0a:	0a9b      	lsrs	r3, r3, #10
 800ca0c:	f003 0307 	and.w	r3, r3, #7
 800ca10:	4903      	ldr	r1, [pc, #12]	; (800ca20 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ca12:	5ccb      	ldrb	r3, [r1, r3]
 800ca14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	40023800 	.word	0x40023800
 800ca20:	08013a20 	.word	0x08013a20

0800ca24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ca28:	f7ff ffdc 	bl	800c9e4 <HAL_RCC_GetHCLKFreq>
 800ca2c:	4602      	mov	r2, r0
 800ca2e:	4b05      	ldr	r3, [pc, #20]	; (800ca44 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	0b5b      	lsrs	r3, r3, #13
 800ca34:	f003 0307 	and.w	r3, r3, #7
 800ca38:	4903      	ldr	r1, [pc, #12]	; (800ca48 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca3a:	5ccb      	ldrb	r3, [r1, r3]
 800ca3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	40023800 	.word	0x40023800
 800ca48:	08013a20 	.word	0x08013a20

0800ca4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d101      	bne.n	800ca5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e07b      	b.n	800cb56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d108      	bne.n	800ca78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca6e:	d009      	beq.n	800ca84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2200      	movs	r2, #0
 800ca74:	61da      	str	r2, [r3, #28]
 800ca76:	e005      	b.n	800ca84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	2200      	movs	r2, #0
 800ca88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d106      	bne.n	800caa4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2200      	movs	r2, #0
 800ca9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7fc fcd4 	bl	800944c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2202      	movs	r2, #2
 800caa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800caba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800cacc:	431a      	orrs	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cad6:	431a      	orrs	r2, r3
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	f003 0302 	and.w	r3, r3, #2
 800cae0:	431a      	orrs	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	695b      	ldr	r3, [r3, #20]
 800cae6:	f003 0301 	and.w	r3, r3, #1
 800caea:	431a      	orrs	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	699b      	ldr	r3, [r3, #24]
 800caf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800caf4:	431a      	orrs	r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	69db      	ldr	r3, [r3, #28]
 800cafa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cafe:	431a      	orrs	r2, r3
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb08:	ea42 0103 	orr.w	r1, r2, r3
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	430a      	orrs	r2, r1
 800cb1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	699b      	ldr	r3, [r3, #24]
 800cb20:	0c1b      	lsrs	r3, r3, #16
 800cb22:	f003 0104 	and.w	r1, r3, #4
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb2a:	f003 0210 	and.w	r2, r3, #16
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	430a      	orrs	r2, r1
 800cb34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	69da      	ldr	r2, [r3, #28]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cb44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2200      	movs	r2, #0
 800cb4a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3708      	adds	r7, #8
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}

0800cb5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b08c      	sub	sp, #48	; 0x30
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	60f8      	str	r0, [r7, #12]
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
 800cb6a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cb7c:	2b01      	cmp	r3, #1
 800cb7e:	d101      	bne.n	800cb84 <HAL_SPI_TransmitReceive+0x26>
 800cb80:	2302      	movs	r3, #2
 800cb82:	e18a      	b.n	800ce9a <HAL_SPI_TransmitReceive+0x33c>
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb8c:	f7fd fc8c 	bl	800a4a8 <HAL_GetTick>
 800cb90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	685b      	ldr	r3, [r3, #4]
 800cba0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800cba2:	887b      	ldrh	r3, [r7, #2]
 800cba4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cba6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d00f      	beq.n	800cbce <HAL_SPI_TransmitReceive+0x70>
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbb4:	d107      	bne.n	800cbc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d103      	bne.n	800cbc6 <HAL_SPI_TransmitReceive+0x68>
 800cbbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cbc2:	2b04      	cmp	r3, #4
 800cbc4:	d003      	beq.n	800cbce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cbcc:	e15b      	b.n	800ce86 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d005      	beq.n	800cbe0 <HAL_SPI_TransmitReceive+0x82>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <HAL_SPI_TransmitReceive+0x82>
 800cbda:	887b      	ldrh	r3, [r7, #2]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d103      	bne.n	800cbe8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800cbe0:	2301      	movs	r3, #1
 800cbe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800cbe6:	e14e      	b.n	800ce86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	d003      	beq.n	800cbfc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2205      	movs	r2, #5
 800cbf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	887a      	ldrh	r2, [r7, #2]
 800cc0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	887a      	ldrh	r2, [r7, #2]
 800cc12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	887a      	ldrh	r2, [r7, #2]
 800cc1e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	887a      	ldrh	r2, [r7, #2]
 800cc24:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc3c:	2b40      	cmp	r3, #64	; 0x40
 800cc3e:	d007      	beq.n	800cc50 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	681a      	ldr	r2, [r3, #0]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	68db      	ldr	r3, [r3, #12]
 800cc54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc58:	d178      	bne.n	800cd4c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <HAL_SPI_TransmitReceive+0x10a>
 800cc62:	8b7b      	ldrh	r3, [r7, #26]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d166      	bne.n	800cd36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6c:	881a      	ldrh	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc78:	1c9a      	adds	r2, r3, #2
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	3b01      	subs	r3, #1
 800cc86:	b29a      	uxth	r2, r3
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cc8c:	e053      	b.n	800cd36 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	f003 0302 	and.w	r3, r3, #2
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d11b      	bne.n	800ccd4 <HAL_SPI_TransmitReceive+0x176>
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d016      	beq.n	800ccd4 <HAL_SPI_TransmitReceive+0x176>
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d113      	bne.n	800ccd4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb0:	881a      	ldrh	r2, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccbc:	1c9a      	adds	r2, r3, #2
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	b29a      	uxth	r2, r3
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f003 0301 	and.w	r3, r3, #1
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d119      	bne.n	800cd16 <HAL_SPI_TransmitReceive+0x1b8>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d014      	beq.n	800cd16 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	68da      	ldr	r2, [r3, #12]
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccf6:	b292      	uxth	r2, r2
 800ccf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfe:	1c9a      	adds	r2, r3, #2
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	3b01      	subs	r3, #1
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cd12:	2301      	movs	r3, #1
 800cd14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cd16:	f7fd fbc7 	bl	800a4a8 <HAL_GetTick>
 800cd1a:	4602      	mov	r2, r0
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	1ad3      	subs	r3, r2, r3
 800cd20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d807      	bhi.n	800cd36 <HAL_SPI_TransmitReceive+0x1d8>
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2c:	d003      	beq.n	800cd36 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800cd34:	e0a7      	b.n	800ce86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1a6      	bne.n	800cc8e <HAL_SPI_TransmitReceive+0x130>
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d1a1      	bne.n	800cc8e <HAL_SPI_TransmitReceive+0x130>
 800cd4a:	e07c      	b.n	800ce46 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d002      	beq.n	800cd5a <HAL_SPI_TransmitReceive+0x1fc>
 800cd54:	8b7b      	ldrh	r3, [r7, #26]
 800cd56:	2b01      	cmp	r3, #1
 800cd58:	d16b      	bne.n	800ce32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	330c      	adds	r3, #12
 800cd64:	7812      	ldrb	r2, [r2, #0]
 800cd66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd6c:	1c5a      	adds	r2, r3, #1
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	3b01      	subs	r3, #1
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd80:	e057      	b.n	800ce32 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	f003 0302 	and.w	r3, r3, #2
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d11c      	bne.n	800cdca <HAL_SPI_TransmitReceive+0x26c>
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d017      	beq.n	800cdca <HAL_SPI_TransmitReceive+0x26c>
 800cd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d114      	bne.n	800cdca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	330c      	adds	r3, #12
 800cdaa:	7812      	ldrb	r2, [r2, #0]
 800cdac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdb2:	1c5a      	adds	r2, r3, #1
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	d119      	bne.n	800ce0c <HAL_SPI_TransmitReceive+0x2ae>
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d014      	beq.n	800ce0c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	68da      	ldr	r2, [r3, #12]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdec:	b2d2      	uxtb	r2, r2
 800cdee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdf4:	1c5a      	adds	r2, r3, #1
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cdfe:	b29b      	uxth	r3, r3
 800ce00:	3b01      	subs	r3, #1
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ce0c:	f7fd fb4c 	bl	800a4a8 <HAL_GetTick>
 800ce10:	4602      	mov	r2, r0
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d803      	bhi.n	800ce24 <HAL_SPI_TransmitReceive+0x2c6>
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce22:	d102      	bne.n	800ce2a <HAL_SPI_TransmitReceive+0x2cc>
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d103      	bne.n	800ce32 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ce30:	e029      	b.n	800ce86 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d1a2      	bne.n	800cd82 <HAL_SPI_TransmitReceive+0x224>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d19d      	bne.n	800cd82 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ce46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce4a:	68f8      	ldr	r0, [r7, #12]
 800ce4c:	f000 f8b2 	bl	800cfb4 <SPI_EndRxTxTransaction>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d006      	beq.n	800ce64 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ce56:	2301      	movs	r3, #1
 800ce58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2220      	movs	r2, #32
 800ce60:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ce62:	e010      	b.n	800ce86 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	689b      	ldr	r3, [r3, #8]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d10b      	bne.n	800ce84 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	617b      	str	r3, [r7, #20]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	617b      	str	r3, [r7, #20]
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	e000      	b.n	800ce86 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ce84:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ce96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3730      	adds	r7, #48	; 0x30
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
	...

0800cea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b088      	sub	sp, #32
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	603b      	str	r3, [r7, #0]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ceb4:	f7fd faf8 	bl	800a4a8 <HAL_GetTick>
 800ceb8:	4602      	mov	r2, r0
 800ceba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cebc:	1a9b      	subs	r3, r3, r2
 800cebe:	683a      	ldr	r2, [r7, #0]
 800cec0:	4413      	add	r3, r2
 800cec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cec4:	f7fd faf0 	bl	800a4a8 <HAL_GetTick>
 800cec8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ceca:	4b39      	ldr	r3, [pc, #228]	; (800cfb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	015b      	lsls	r3, r3, #5
 800ced0:	0d1b      	lsrs	r3, r3, #20
 800ced2:	69fa      	ldr	r2, [r7, #28]
 800ced4:	fb02 f303 	mul.w	r3, r2, r3
 800ced8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ceda:	e054      	b.n	800cf86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee2:	d050      	beq.n	800cf86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cee4:	f7fd fae0 	bl	800a4a8 <HAL_GetTick>
 800cee8:	4602      	mov	r2, r0
 800ceea:	69bb      	ldr	r3, [r7, #24]
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	429a      	cmp	r2, r3
 800cef2:	d902      	bls.n	800cefa <SPI_WaitFlagStateUntilTimeout+0x56>
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d13d      	bne.n	800cf76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	685a      	ldr	r2, [r3, #4]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf12:	d111      	bne.n	800cf38 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf1c:	d004      	beq.n	800cf28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf26:	d107      	bne.n	800cf38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf40:	d10f      	bne.n	800cf62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf50:	601a      	str	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e017      	b.n	800cfa6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d101      	bne.n	800cf80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	3b01      	subs	r3, #1
 800cf84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	689a      	ldr	r2, [r3, #8]
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	4013      	ands	r3, r2
 800cf90:	68ba      	ldr	r2, [r7, #8]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	bf0c      	ite	eq
 800cf96:	2301      	moveq	r3, #1
 800cf98:	2300      	movne	r3, #0
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d19b      	bne.n	800cedc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3720      	adds	r7, #32
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	200002f4 	.word	0x200002f4

0800cfb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b088      	sub	sp, #32
 800cfb8:	af02      	add	r7, sp, #8
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cfc0:	4b1b      	ldr	r3, [pc, #108]	; (800d030 <SPI_EndRxTxTransaction+0x7c>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a1b      	ldr	r2, [pc, #108]	; (800d034 <SPI_EndRxTxTransaction+0x80>)
 800cfc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cfca:	0d5b      	lsrs	r3, r3, #21
 800cfcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cfd0:	fb02 f303 	mul.w	r3, r2, r3
 800cfd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	685b      	ldr	r3, [r3, #4]
 800cfda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cfde:	d112      	bne.n	800d006 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	2180      	movs	r1, #128	; 0x80
 800cfea:	68f8      	ldr	r0, [r7, #12]
 800cfec:	f7ff ff5a 	bl	800cea4 <SPI_WaitFlagStateUntilTimeout>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d016      	beq.n	800d024 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cffa:	f043 0220 	orr.w	r2, r3, #32
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d002:	2303      	movs	r3, #3
 800d004:	e00f      	b.n	800d026 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d00a      	beq.n	800d022 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	3b01      	subs	r3, #1
 800d010:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d01c:	2b80      	cmp	r3, #128	; 0x80
 800d01e:	d0f2      	beq.n	800d006 <SPI_EndRxTxTransaction+0x52>
 800d020:	e000      	b.n	800d024 <SPI_EndRxTxTransaction+0x70>
        break;
 800d022:	bf00      	nop
  }

  return HAL_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	200002f4 	.word	0x200002f4
 800d034:	165e9f81 	.word	0x165e9f81

0800d038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e041      	b.n	800d0ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d050:	b2db      	uxtb	r3, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	d106      	bne.n	800d064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7fc fe72 	bl	8009d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2202      	movs	r2, #2
 800d068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	3304      	adds	r3, #4
 800d074:	4619      	mov	r1, r3
 800d076:	4610      	mov	r0, r2
 800d078:	f000 fba8 	bl	800d7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2201      	movs	r2, #1
 800d080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	2201      	movs	r2, #1
 800d090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2201      	movs	r2, #1
 800d098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d0cc:	2300      	movs	r3, #0
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d001      	beq.n	800d0f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d0ec:	2301      	movs	r3, #1
 800d0ee:	e04e      	b.n	800d18e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	68da      	ldr	r2, [r3, #12]
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f042 0201 	orr.w	r2, r2, #1
 800d106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a23      	ldr	r2, [pc, #140]	; (800d19c <HAL_TIM_Base_Start_IT+0xc4>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d022      	beq.n	800d158 <HAL_TIM_Base_Start_IT+0x80>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d11a:	d01d      	beq.n	800d158 <HAL_TIM_Base_Start_IT+0x80>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a1f      	ldr	r2, [pc, #124]	; (800d1a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d018      	beq.n	800d158 <HAL_TIM_Base_Start_IT+0x80>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4a1e      	ldr	r2, [pc, #120]	; (800d1a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800d12c:	4293      	cmp	r3, r2
 800d12e:	d013      	beq.n	800d158 <HAL_TIM_Base_Start_IT+0x80>
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4a1c      	ldr	r2, [pc, #112]	; (800d1a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d136:	4293      	cmp	r3, r2
 800d138:	d00e      	beq.n	800d158 <HAL_TIM_Base_Start_IT+0x80>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	4a1b      	ldr	r2, [pc, #108]	; (800d1ac <HAL_TIM_Base_Start_IT+0xd4>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d009      	beq.n	800d158 <HAL_TIM_Base_Start_IT+0x80>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	4a19      	ldr	r2, [pc, #100]	; (800d1b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d14a:	4293      	cmp	r3, r2
 800d14c:	d004      	beq.n	800d158 <HAL_TIM_Base_Start_IT+0x80>
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	4a18      	ldr	r2, [pc, #96]	; (800d1b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d154:	4293      	cmp	r3, r2
 800d156:	d111      	bne.n	800d17c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	689b      	ldr	r3, [r3, #8]
 800d15e:	f003 0307 	and.w	r3, r3, #7
 800d162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b06      	cmp	r3, #6
 800d168:	d010      	beq.n	800d18c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	681a      	ldr	r2, [r3, #0]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f042 0201 	orr.w	r2, r2, #1
 800d178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d17a:	e007      	b.n	800d18c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f042 0201 	orr.w	r2, r2, #1
 800d18a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	3714      	adds	r7, #20
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	40010000 	.word	0x40010000
 800d1a0:	40000400 	.word	0x40000400
 800d1a4:	40000800 	.word	0x40000800
 800d1a8:	40000c00 	.word	0x40000c00
 800d1ac:	40010400 	.word	0x40010400
 800d1b0:	40014000 	.word	0x40014000
 800d1b4:	40001800 	.word	0x40001800

0800d1b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d101      	bne.n	800d1ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e041      	b.n	800d24e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d106      	bne.n	800d1e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7fc fd5e 	bl	8009ca0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	2202      	movs	r2, #2
 800d1e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681a      	ldr	r2, [r3, #0]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3304      	adds	r3, #4
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	4610      	mov	r0, r2
 800d1f8:	f000 fae8 	bl	800d7cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3708      	adds	r7, #8
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
	...

0800d258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b084      	sub	sp, #16
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d109      	bne.n	800d27c <HAL_TIM_PWM_Start+0x24>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b01      	cmp	r3, #1
 800d272:	bf14      	ite	ne
 800d274:	2301      	movne	r3, #1
 800d276:	2300      	moveq	r3, #0
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	e022      	b.n	800d2c2 <HAL_TIM_PWM_Start+0x6a>
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	2b04      	cmp	r3, #4
 800d280:	d109      	bne.n	800d296 <HAL_TIM_PWM_Start+0x3e>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d288:	b2db      	uxtb	r3, r3
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	bf14      	ite	ne
 800d28e:	2301      	movne	r3, #1
 800d290:	2300      	moveq	r3, #0
 800d292:	b2db      	uxtb	r3, r3
 800d294:	e015      	b.n	800d2c2 <HAL_TIM_PWM_Start+0x6a>
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	2b08      	cmp	r3, #8
 800d29a:	d109      	bne.n	800d2b0 <HAL_TIM_PWM_Start+0x58>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	bf14      	ite	ne
 800d2a8:	2301      	movne	r3, #1
 800d2aa:	2300      	moveq	r3, #0
 800d2ac:	b2db      	uxtb	r3, r3
 800d2ae:	e008      	b.n	800d2c2 <HAL_TIM_PWM_Start+0x6a>
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2b6:	b2db      	uxtb	r3, r3
 800d2b8:	2b01      	cmp	r3, #1
 800d2ba:	bf14      	ite	ne
 800d2bc:	2301      	movne	r3, #1
 800d2be:	2300      	moveq	r3, #0
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e07c      	b.n	800d3c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d104      	bne.n	800d2da <HAL_TIM_PWM_Start+0x82>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2d8:	e013      	b.n	800d302 <HAL_TIM_PWM_Start+0xaa>
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	d104      	bne.n	800d2ea <HAL_TIM_PWM_Start+0x92>
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2202      	movs	r2, #2
 800d2e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2e8:	e00b      	b.n	800d302 <HAL_TIM_PWM_Start+0xaa>
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	2b08      	cmp	r3, #8
 800d2ee:	d104      	bne.n	800d2fa <HAL_TIM_PWM_Start+0xa2>
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2f8:	e003      	b.n	800d302 <HAL_TIM_PWM_Start+0xaa>
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2202      	movs	r2, #2
 800d2fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2201      	movs	r2, #1
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 fcae 	bl	800dc6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a2d      	ldr	r2, [pc, #180]	; (800d3cc <HAL_TIM_PWM_Start+0x174>)
 800d316:	4293      	cmp	r3, r2
 800d318:	d004      	beq.n	800d324 <HAL_TIM_PWM_Start+0xcc>
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	4a2c      	ldr	r2, [pc, #176]	; (800d3d0 <HAL_TIM_PWM_Start+0x178>)
 800d320:	4293      	cmp	r3, r2
 800d322:	d101      	bne.n	800d328 <HAL_TIM_PWM_Start+0xd0>
 800d324:	2301      	movs	r3, #1
 800d326:	e000      	b.n	800d32a <HAL_TIM_PWM_Start+0xd2>
 800d328:	2300      	movs	r3, #0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d007      	beq.n	800d33e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d33c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	4a22      	ldr	r2, [pc, #136]	; (800d3cc <HAL_TIM_PWM_Start+0x174>)
 800d344:	4293      	cmp	r3, r2
 800d346:	d022      	beq.n	800d38e <HAL_TIM_PWM_Start+0x136>
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d350:	d01d      	beq.n	800d38e <HAL_TIM_PWM_Start+0x136>
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	4a1f      	ldr	r2, [pc, #124]	; (800d3d4 <HAL_TIM_PWM_Start+0x17c>)
 800d358:	4293      	cmp	r3, r2
 800d35a:	d018      	beq.n	800d38e <HAL_TIM_PWM_Start+0x136>
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a1d      	ldr	r2, [pc, #116]	; (800d3d8 <HAL_TIM_PWM_Start+0x180>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d013      	beq.n	800d38e <HAL_TIM_PWM_Start+0x136>
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	4a1c      	ldr	r2, [pc, #112]	; (800d3dc <HAL_TIM_PWM_Start+0x184>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d00e      	beq.n	800d38e <HAL_TIM_PWM_Start+0x136>
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4a16      	ldr	r2, [pc, #88]	; (800d3d0 <HAL_TIM_PWM_Start+0x178>)
 800d376:	4293      	cmp	r3, r2
 800d378:	d009      	beq.n	800d38e <HAL_TIM_PWM_Start+0x136>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a18      	ldr	r2, [pc, #96]	; (800d3e0 <HAL_TIM_PWM_Start+0x188>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d004      	beq.n	800d38e <HAL_TIM_PWM_Start+0x136>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	4a16      	ldr	r2, [pc, #88]	; (800d3e4 <HAL_TIM_PWM_Start+0x18c>)
 800d38a:	4293      	cmp	r3, r2
 800d38c:	d111      	bne.n	800d3b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	f003 0307 	and.w	r3, r3, #7
 800d398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2b06      	cmp	r3, #6
 800d39e:	d010      	beq.n	800d3c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	681a      	ldr	r2, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	f042 0201 	orr.w	r2, r2, #1
 800d3ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d3b0:	e007      	b.n	800d3c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f042 0201 	orr.w	r2, r2, #1
 800d3c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3c2:	2300      	movs	r3, #0
}
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	3710      	adds	r7, #16
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	40010000 	.word	0x40010000
 800d3d0:	40010400 	.word	0x40010400
 800d3d4:	40000400 	.word	0x40000400
 800d3d8:	40000800 	.word	0x40000800
 800d3dc:	40000c00 	.word	0x40000c00
 800d3e0:	40014000 	.word	0x40014000
 800d3e4:	40001800 	.word	0x40001800

0800d3e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	691b      	ldr	r3, [r3, #16]
 800d3f6:	f003 0302 	and.w	r3, r3, #2
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	d122      	bne.n	800d444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	68db      	ldr	r3, [r3, #12]
 800d404:	f003 0302 	and.w	r3, r3, #2
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d11b      	bne.n	800d444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f06f 0202 	mvn.w	r2, #2
 800d414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	699b      	ldr	r3, [r3, #24]
 800d422:	f003 0303 	and.w	r3, r3, #3
 800d426:	2b00      	cmp	r3, #0
 800d428:	d003      	beq.n	800d432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f9b0 	bl	800d790 <HAL_TIM_IC_CaptureCallback>
 800d430:	e005      	b.n	800d43e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f9a2 	bl	800d77c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f9b3 	bl	800d7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2200      	movs	r2, #0
 800d442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	f003 0304 	and.w	r3, r3, #4
 800d44e:	2b04      	cmp	r3, #4
 800d450:	d122      	bne.n	800d498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	68db      	ldr	r3, [r3, #12]
 800d458:	f003 0304 	and.w	r3, r3, #4
 800d45c:	2b04      	cmp	r3, #4
 800d45e:	d11b      	bne.n	800d498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f06f 0204 	mvn.w	r2, #4
 800d468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2202      	movs	r2, #2
 800d46e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	699b      	ldr	r3, [r3, #24]
 800d476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d003      	beq.n	800d486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 f986 	bl	800d790 <HAL_TIM_IC_CaptureCallback>
 800d484:	e005      	b.n	800d492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 f978 	bl	800d77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f989 	bl	800d7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	691b      	ldr	r3, [r3, #16]
 800d49e:	f003 0308 	and.w	r3, r3, #8
 800d4a2:	2b08      	cmp	r3, #8
 800d4a4:	d122      	bne.n	800d4ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	f003 0308 	and.w	r3, r3, #8
 800d4b0:	2b08      	cmp	r3, #8
 800d4b2:	d11b      	bne.n	800d4ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f06f 0208 	mvn.w	r2, #8
 800d4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2204      	movs	r2, #4
 800d4c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	69db      	ldr	r3, [r3, #28]
 800d4ca:	f003 0303 	and.w	r3, r3, #3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d003      	beq.n	800d4da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f95c 	bl	800d790 <HAL_TIM_IC_CaptureCallback>
 800d4d8:	e005      	b.n	800d4e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f000 f94e 	bl	800d77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f95f 	bl	800d7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	f003 0310 	and.w	r3, r3, #16
 800d4f6:	2b10      	cmp	r3, #16
 800d4f8:	d122      	bne.n	800d540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	f003 0310 	and.w	r3, r3, #16
 800d504:	2b10      	cmp	r3, #16
 800d506:	d11b      	bne.n	800d540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f06f 0210 	mvn.w	r2, #16
 800d510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2208      	movs	r2, #8
 800d516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	69db      	ldr	r3, [r3, #28]
 800d51e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d522:	2b00      	cmp	r3, #0
 800d524:	d003      	beq.n	800d52e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 f932 	bl	800d790 <HAL_TIM_IC_CaptureCallback>
 800d52c:	e005      	b.n	800d53a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 f924 	bl	800d77c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 f935 	bl	800d7a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	f003 0301 	and.w	r3, r3, #1
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d10e      	bne.n	800d56c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	f003 0301 	and.w	r3, r3, #1
 800d558:	2b01      	cmp	r3, #1
 800d55a:	d107      	bne.n	800d56c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f06f 0201 	mvn.w	r2, #1
 800d564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7fb feb2 	bl	80092d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d576:	2b80      	cmp	r3, #128	; 0x80
 800d578:	d10e      	bne.n	800d598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d584:	2b80      	cmp	r3, #128	; 0x80
 800d586:	d107      	bne.n	800d598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f000 fc68 	bl	800de68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	691b      	ldr	r3, [r3, #16]
 800d59e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a2:	2b40      	cmp	r3, #64	; 0x40
 800d5a4:	d10e      	bne.n	800d5c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b0:	2b40      	cmp	r3, #64	; 0x40
 800d5b2:	d107      	bne.n	800d5c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d5bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 f8fa 	bl	800d7b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	691b      	ldr	r3, [r3, #16]
 800d5ca:	f003 0320 	and.w	r3, r3, #32
 800d5ce:	2b20      	cmp	r3, #32
 800d5d0:	d10e      	bne.n	800d5f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	68db      	ldr	r3, [r3, #12]
 800d5d8:	f003 0320 	and.w	r3, r3, #32
 800d5dc:	2b20      	cmp	r3, #32
 800d5de:	d107      	bne.n	800d5f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f06f 0220 	mvn.w	r2, #32
 800d5e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fc32 	bl	800de54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5f0:	bf00      	nop
 800d5f2:	3708      	adds	r7, #8
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	bd80      	pop	{r7, pc}

0800d5f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b086      	sub	sp, #24
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d101      	bne.n	800d616 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d612:	2302      	movs	r3, #2
 800d614:	e0ae      	b.n	800d774 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2b0c      	cmp	r3, #12
 800d622:	f200 809f 	bhi.w	800d764 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d626:	a201      	add	r2, pc, #4	; (adr r2, 800d62c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d62c:	0800d661 	.word	0x0800d661
 800d630:	0800d765 	.word	0x0800d765
 800d634:	0800d765 	.word	0x0800d765
 800d638:	0800d765 	.word	0x0800d765
 800d63c:	0800d6a1 	.word	0x0800d6a1
 800d640:	0800d765 	.word	0x0800d765
 800d644:	0800d765 	.word	0x0800d765
 800d648:	0800d765 	.word	0x0800d765
 800d64c:	0800d6e3 	.word	0x0800d6e3
 800d650:	0800d765 	.word	0x0800d765
 800d654:	0800d765 	.word	0x0800d765
 800d658:	0800d765 	.word	0x0800d765
 800d65c:	0800d723 	.word	0x0800d723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68b9      	ldr	r1, [r7, #8]
 800d666:	4618      	mov	r0, r3
 800d668:	f000 f950 	bl	800d90c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	699a      	ldr	r2, [r3, #24]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f042 0208 	orr.w	r2, r2, #8
 800d67a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	699a      	ldr	r2, [r3, #24]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f022 0204 	bic.w	r2, r2, #4
 800d68a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	6999      	ldr	r1, [r3, #24]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	691a      	ldr	r2, [r3, #16]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	430a      	orrs	r2, r1
 800d69c:	619a      	str	r2, [r3, #24]
      break;
 800d69e:	e064      	b.n	800d76a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68b9      	ldr	r1, [r7, #8]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f000 f9a0 	bl	800d9ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	699a      	ldr	r2, [r3, #24]
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	699a      	ldr	r2, [r3, #24]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d6ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6999      	ldr	r1, [r3, #24]
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	021a      	lsls	r2, r3, #8
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	430a      	orrs	r2, r1
 800d6de:	619a      	str	r2, [r3, #24]
      break;
 800d6e0:	e043      	b.n	800d76a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	68b9      	ldr	r1, [r7, #8]
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 f9f5 	bl	800dad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	69da      	ldr	r2, [r3, #28]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f042 0208 	orr.w	r2, r2, #8
 800d6fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	69da      	ldr	r2, [r3, #28]
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	f022 0204 	bic.w	r2, r2, #4
 800d70c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	69d9      	ldr	r1, [r3, #28]
 800d714:	68bb      	ldr	r3, [r7, #8]
 800d716:	691a      	ldr	r2, [r3, #16]
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	430a      	orrs	r2, r1
 800d71e:	61da      	str	r2, [r3, #28]
      break;
 800d720:	e023      	b.n	800d76a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	4618      	mov	r0, r3
 800d72a:	f000 fa49 	bl	800dbc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	69da      	ldr	r2, [r3, #28]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d73c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	69da      	ldr	r2, [r3, #28]
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d74c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	69d9      	ldr	r1, [r3, #28]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	021a      	lsls	r2, r3, #8
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	430a      	orrs	r2, r1
 800d760:	61da      	str	r2, [r3, #28]
      break;
 800d762:	e002      	b.n	800d76a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d764:	2301      	movs	r3, #1
 800d766:	75fb      	strb	r3, [r7, #23]
      break;
 800d768:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2200      	movs	r2, #0
 800d76e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d772:	7dfb      	ldrb	r3, [r7, #23]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3718      	adds	r7, #24
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d77c:	b480      	push	{r7}
 800d77e:	b083      	sub	sp, #12
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d784:	bf00      	nop
 800d786:	370c      	adds	r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d798:	bf00      	nop
 800d79a:	370c      	adds	r7, #12
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b083      	sub	sp, #12
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7ac:	bf00      	nop
 800d7ae:	370c      	adds	r7, #12
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr

0800d7b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7c0:	bf00      	nop
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr

0800d7cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	4a40      	ldr	r2, [pc, #256]	; (800d8e0 <TIM_Base_SetConfig+0x114>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d013      	beq.n	800d80c <TIM_Base_SetConfig+0x40>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ea:	d00f      	beq.n	800d80c <TIM_Base_SetConfig+0x40>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	4a3d      	ldr	r2, [pc, #244]	; (800d8e4 <TIM_Base_SetConfig+0x118>)
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d00b      	beq.n	800d80c <TIM_Base_SetConfig+0x40>
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	4a3c      	ldr	r2, [pc, #240]	; (800d8e8 <TIM_Base_SetConfig+0x11c>)
 800d7f8:	4293      	cmp	r3, r2
 800d7fa:	d007      	beq.n	800d80c <TIM_Base_SetConfig+0x40>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	4a3b      	ldr	r2, [pc, #236]	; (800d8ec <TIM_Base_SetConfig+0x120>)
 800d800:	4293      	cmp	r3, r2
 800d802:	d003      	beq.n	800d80c <TIM_Base_SetConfig+0x40>
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	4a3a      	ldr	r2, [pc, #232]	; (800d8f0 <TIM_Base_SetConfig+0x124>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d108      	bne.n	800d81e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4a2f      	ldr	r2, [pc, #188]	; (800d8e0 <TIM_Base_SetConfig+0x114>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d02b      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d82c:	d027      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	4a2c      	ldr	r2, [pc, #176]	; (800d8e4 <TIM_Base_SetConfig+0x118>)
 800d832:	4293      	cmp	r3, r2
 800d834:	d023      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	4a2b      	ldr	r2, [pc, #172]	; (800d8e8 <TIM_Base_SetConfig+0x11c>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d01f      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	4a2a      	ldr	r2, [pc, #168]	; (800d8ec <TIM_Base_SetConfig+0x120>)
 800d842:	4293      	cmp	r3, r2
 800d844:	d01b      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	4a29      	ldr	r2, [pc, #164]	; (800d8f0 <TIM_Base_SetConfig+0x124>)
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d017      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a28      	ldr	r2, [pc, #160]	; (800d8f4 <TIM_Base_SetConfig+0x128>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d013      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a27      	ldr	r2, [pc, #156]	; (800d8f8 <TIM_Base_SetConfig+0x12c>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d00f      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	4a26      	ldr	r2, [pc, #152]	; (800d8fc <TIM_Base_SetConfig+0x130>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d00b      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	4a25      	ldr	r2, [pc, #148]	; (800d900 <TIM_Base_SetConfig+0x134>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d007      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	4a24      	ldr	r2, [pc, #144]	; (800d904 <TIM_Base_SetConfig+0x138>)
 800d872:	4293      	cmp	r3, r2
 800d874:	d003      	beq.n	800d87e <TIM_Base_SetConfig+0xb2>
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	4a23      	ldr	r2, [pc, #140]	; (800d908 <TIM_Base_SetConfig+0x13c>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d108      	bne.n	800d890 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d884:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	68fa      	ldr	r2, [r7, #12]
 800d88c:	4313      	orrs	r3, r2
 800d88e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	4313      	orrs	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68fa      	ldr	r2, [r7, #12]
 800d8a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681a      	ldr	r2, [r3, #0]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a0a      	ldr	r2, [pc, #40]	; (800d8e0 <TIM_Base_SetConfig+0x114>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d003      	beq.n	800d8c4 <TIM_Base_SetConfig+0xf8>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	4a0c      	ldr	r2, [pc, #48]	; (800d8f0 <TIM_Base_SetConfig+0x124>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d103      	bne.n	800d8cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	691a      	ldr	r2, [r3, #16]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	615a      	str	r2, [r3, #20]
}
 800d8d2:	bf00      	nop
 800d8d4:	3714      	adds	r7, #20
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8dc:	4770      	bx	lr
 800d8de:	bf00      	nop
 800d8e0:	40010000 	.word	0x40010000
 800d8e4:	40000400 	.word	0x40000400
 800d8e8:	40000800 	.word	0x40000800
 800d8ec:	40000c00 	.word	0x40000c00
 800d8f0:	40010400 	.word	0x40010400
 800d8f4:	40014000 	.word	0x40014000
 800d8f8:	40014400 	.word	0x40014400
 800d8fc:	40014800 	.word	0x40014800
 800d900:	40001800 	.word	0x40001800
 800d904:	40001c00 	.word	0x40001c00
 800d908:	40002000 	.word	0x40002000

0800d90c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d90c:	b480      	push	{r7}
 800d90e:	b087      	sub	sp, #28
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a1b      	ldr	r3, [r3, #32]
 800d91a:	f023 0201 	bic.w	r2, r3, #1
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	6a1b      	ldr	r3, [r3, #32]
 800d926:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	699b      	ldr	r3, [r3, #24]
 800d932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d93a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f023 0303 	bic.w	r3, r3, #3
 800d942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	68fa      	ldr	r2, [r7, #12]
 800d94a:	4313      	orrs	r3, r2
 800d94c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f023 0302 	bic.w	r3, r3, #2
 800d954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	697a      	ldr	r2, [r7, #20]
 800d95c:	4313      	orrs	r3, r2
 800d95e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	4a20      	ldr	r2, [pc, #128]	; (800d9e4 <TIM_OC1_SetConfig+0xd8>)
 800d964:	4293      	cmp	r3, r2
 800d966:	d003      	beq.n	800d970 <TIM_OC1_SetConfig+0x64>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a1f      	ldr	r2, [pc, #124]	; (800d9e8 <TIM_OC1_SetConfig+0xdc>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d10c      	bne.n	800d98a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	f023 0308 	bic.w	r3, r3, #8
 800d976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	68db      	ldr	r3, [r3, #12]
 800d97c:	697a      	ldr	r2, [r7, #20]
 800d97e:	4313      	orrs	r3, r2
 800d980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f023 0304 	bic.w	r3, r3, #4
 800d988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4a15      	ldr	r2, [pc, #84]	; (800d9e4 <TIM_OC1_SetConfig+0xd8>)
 800d98e:	4293      	cmp	r3, r2
 800d990:	d003      	beq.n	800d99a <TIM_OC1_SetConfig+0x8e>
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	4a14      	ldr	r2, [pc, #80]	; (800d9e8 <TIM_OC1_SetConfig+0xdc>)
 800d996:	4293      	cmp	r3, r2
 800d998:	d111      	bne.n	800d9be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d99a:	693b      	ldr	r3, [r7, #16]
 800d99c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d9a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	695b      	ldr	r3, [r3, #20]
 800d9ae:	693a      	ldr	r2, [r7, #16]
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	699b      	ldr	r3, [r3, #24]
 800d9b8:	693a      	ldr	r2, [r7, #16]
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	68fa      	ldr	r2, [r7, #12]
 800d9c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	685a      	ldr	r2, [r3, #4]
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	621a      	str	r2, [r3, #32]
}
 800d9d8:	bf00      	nop
 800d9da:	371c      	adds	r7, #28
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	40010000 	.word	0x40010000
 800d9e8:	40010400 	.word	0x40010400

0800d9ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b087      	sub	sp, #28
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	f023 0210 	bic.w	r2, r3, #16
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6a1b      	ldr	r3, [r3, #32]
 800da06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	685b      	ldr	r3, [r3, #4]
 800da0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	021b      	lsls	r3, r3, #8
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	4313      	orrs	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	f023 0320 	bic.w	r3, r3, #32
 800da36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	689b      	ldr	r3, [r3, #8]
 800da3c:	011b      	lsls	r3, r3, #4
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	4313      	orrs	r3, r2
 800da42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a22      	ldr	r2, [pc, #136]	; (800dad0 <TIM_OC2_SetConfig+0xe4>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d003      	beq.n	800da54 <TIM_OC2_SetConfig+0x68>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4a21      	ldr	r2, [pc, #132]	; (800dad4 <TIM_OC2_SetConfig+0xe8>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d10d      	bne.n	800da70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800da54:	697b      	ldr	r3, [r7, #20]
 800da56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	011b      	lsls	r3, r3, #4
 800da62:	697a      	ldr	r2, [r7, #20]
 800da64:	4313      	orrs	r3, r2
 800da66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800da68:	697b      	ldr	r3, [r7, #20]
 800da6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a17      	ldr	r2, [pc, #92]	; (800dad0 <TIM_OC2_SetConfig+0xe4>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d003      	beq.n	800da80 <TIM_OC2_SetConfig+0x94>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a16      	ldr	r2, [pc, #88]	; (800dad4 <TIM_OC2_SetConfig+0xe8>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d113      	bne.n	800daa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800da8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	695b      	ldr	r3, [r3, #20]
 800da94:	009b      	lsls	r3, r3, #2
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	4313      	orrs	r3, r2
 800da9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	699b      	ldr	r3, [r3, #24]
 800daa0:	009b      	lsls	r3, r3, #2
 800daa2:	693a      	ldr	r2, [r7, #16]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	693a      	ldr	r2, [r7, #16]
 800daac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	68fa      	ldr	r2, [r7, #12]
 800dab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	685a      	ldr	r2, [r3, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	697a      	ldr	r2, [r7, #20]
 800dac0:	621a      	str	r2, [r3, #32]
}
 800dac2:	bf00      	nop
 800dac4:	371c      	adds	r7, #28
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop
 800dad0:	40010000 	.word	0x40010000
 800dad4:	40010400 	.word	0x40010400

0800dad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dad8:	b480      	push	{r7}
 800dada:	b087      	sub	sp, #28
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6a1b      	ldr	r3, [r3, #32]
 800dae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6a1b      	ldr	r3, [r3, #32]
 800daf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	69db      	ldr	r3, [r3, #28]
 800dafe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f023 0303 	bic.w	r3, r3, #3
 800db0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	68fa      	ldr	r2, [r7, #12]
 800db16:	4313      	orrs	r3, r2
 800db18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800db1a:	697b      	ldr	r3, [r7, #20]
 800db1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800db20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	689b      	ldr	r3, [r3, #8]
 800db26:	021b      	lsls	r3, r3, #8
 800db28:	697a      	ldr	r2, [r7, #20]
 800db2a:	4313      	orrs	r3, r2
 800db2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	4a21      	ldr	r2, [pc, #132]	; (800dbb8 <TIM_OC3_SetConfig+0xe0>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d003      	beq.n	800db3e <TIM_OC3_SetConfig+0x66>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	4a20      	ldr	r2, [pc, #128]	; (800dbbc <TIM_OC3_SetConfig+0xe4>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d10d      	bne.n	800db5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800db3e:	697b      	ldr	r3, [r7, #20]
 800db40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	021b      	lsls	r3, r3, #8
 800db4c:	697a      	ldr	r2, [r7, #20]
 800db4e:	4313      	orrs	r3, r2
 800db50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800db58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	4a16      	ldr	r2, [pc, #88]	; (800dbb8 <TIM_OC3_SetConfig+0xe0>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	d003      	beq.n	800db6a <TIM_OC3_SetConfig+0x92>
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	4a15      	ldr	r2, [pc, #84]	; (800dbbc <TIM_OC3_SetConfig+0xe4>)
 800db66:	4293      	cmp	r3, r2
 800db68:	d113      	bne.n	800db92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800db70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800db78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	695b      	ldr	r3, [r3, #20]
 800db7e:	011b      	lsls	r3, r3, #4
 800db80:	693a      	ldr	r2, [r7, #16]
 800db82:	4313      	orrs	r3, r2
 800db84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	699b      	ldr	r3, [r3, #24]
 800db8a:	011b      	lsls	r3, r3, #4
 800db8c:	693a      	ldr	r2, [r7, #16]
 800db8e:	4313      	orrs	r3, r2
 800db90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	693a      	ldr	r2, [r7, #16]
 800db96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	697a      	ldr	r2, [r7, #20]
 800dbaa:	621a      	str	r2, [r3, #32]
}
 800dbac:	bf00      	nop
 800dbae:	371c      	adds	r7, #28
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	40010000 	.word	0x40010000
 800dbbc:	40010400 	.word	0x40010400

0800dbc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b087      	sub	sp, #28
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a1b      	ldr	r3, [r3, #32]
 800dbce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	69db      	ldr	r3, [r3, #28]
 800dbe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dbee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dbf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	021b      	lsls	r3, r3, #8
 800dbfe:	68fa      	ldr	r2, [r7, #12]
 800dc00:	4313      	orrs	r3, r2
 800dc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dc0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	031b      	lsls	r3, r3, #12
 800dc12:	693a      	ldr	r2, [r7, #16]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	4a12      	ldr	r2, [pc, #72]	; (800dc64 <TIM_OC4_SetConfig+0xa4>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d003      	beq.n	800dc28 <TIM_OC4_SetConfig+0x68>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	4a11      	ldr	r2, [pc, #68]	; (800dc68 <TIM_OC4_SetConfig+0xa8>)
 800dc24:	4293      	cmp	r3, r2
 800dc26:	d109      	bne.n	800dc3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800dc28:	697b      	ldr	r3, [r7, #20]
 800dc2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dc2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	695b      	ldr	r3, [r3, #20]
 800dc34:	019b      	lsls	r3, r3, #6
 800dc36:	697a      	ldr	r2, [r7, #20]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	697a      	ldr	r2, [r7, #20]
 800dc40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68fa      	ldr	r2, [r7, #12]
 800dc46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	693a      	ldr	r2, [r7, #16]
 800dc54:	621a      	str	r2, [r3, #32]
}
 800dc56:	bf00      	nop
 800dc58:	371c      	adds	r7, #28
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr
 800dc62:	bf00      	nop
 800dc64:	40010000 	.word	0x40010000
 800dc68:	40010400 	.word	0x40010400

0800dc6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b087      	sub	sp, #28
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	60f8      	str	r0, [r7, #12]
 800dc74:	60b9      	str	r1, [r7, #8]
 800dc76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	f003 031f 	and.w	r3, r3, #31
 800dc7e:	2201      	movs	r2, #1
 800dc80:	fa02 f303 	lsl.w	r3, r2, r3
 800dc84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	6a1a      	ldr	r2, [r3, #32]
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	43db      	mvns	r3, r3
 800dc8e:	401a      	ands	r2, r3
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6a1a      	ldr	r2, [r3, #32]
 800dc98:	68bb      	ldr	r3, [r7, #8]
 800dc9a:	f003 031f 	and.w	r3, r3, #31
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	fa01 f303 	lsl.w	r3, r1, r3
 800dca4:	431a      	orrs	r2, r3
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	621a      	str	r2, [r3, #32]
}
 800dcaa:	bf00      	nop
 800dcac:	371c      	adds	r7, #28
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr
	...

0800dcb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d101      	bne.n	800dcd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dccc:	2302      	movs	r3, #2
 800dcce:	e05a      	b.n	800dd86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2202      	movs	r2, #2
 800dcdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	689b      	ldr	r3, [r3, #8]
 800dcee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	68fa      	ldr	r2, [r7, #12]
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	4a21      	ldr	r2, [pc, #132]	; (800dd94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d022      	beq.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd1c:	d01d      	beq.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	4a1d      	ldr	r2, [pc, #116]	; (800dd98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d018      	beq.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a1b      	ldr	r2, [pc, #108]	; (800dd9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d013      	beq.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a1a      	ldr	r2, [pc, #104]	; (800dda0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d00e      	beq.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4a18      	ldr	r2, [pc, #96]	; (800dda4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d009      	beq.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a17      	ldr	r2, [pc, #92]	; (800dda8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d004      	beq.n	800dd5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a15      	ldr	r2, [pc, #84]	; (800ddac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d10c      	bne.n	800dd74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	40010000 	.word	0x40010000
 800dd98:	40000400 	.word	0x40000400
 800dd9c:	40000800 	.word	0x40000800
 800dda0:	40000c00 	.word	0x40000c00
 800dda4:	40010400 	.word	0x40010400
 800dda8:	40014000 	.word	0x40014000
 800ddac:	40001800 	.word	0x40001800

0800ddb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d101      	bne.n	800ddcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ddc8:	2302      	movs	r3, #2
 800ddca:	e03d      	b.n	800de48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	4313      	orrs	r3, r2
 800dde0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	4313      	orrs	r3, r2
 800ddfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4313      	orrs	r3, r2
 800de0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	691b      	ldr	r3, [r3, #16]
 800de16:	4313      	orrs	r3, r2
 800de18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	695b      	ldr	r3, [r3, #20]
 800de24:	4313      	orrs	r3, r2
 800de26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800de2e:	683b      	ldr	r3, [r7, #0]
 800de30:	69db      	ldr	r3, [r3, #28]
 800de32:	4313      	orrs	r3, r2
 800de34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	68fa      	ldr	r2, [r7, #12]
 800de3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3714      	adds	r7, #20
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800de5c:	bf00      	nop
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de70:	bf00      	nop
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr

0800de7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d101      	bne.n	800de8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de8a:	2301      	movs	r3, #1
 800de8c:	e03f      	b.n	800df0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800de94:	b2db      	uxtb	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d106      	bne.n	800dea8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2200      	movs	r2, #0
 800de9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7fc f8c8 	bl	800a038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2224      	movs	r2, #36	; 0x24
 800deac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68da      	ldr	r2, [r3, #12]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800debe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f000 fb15 	bl	800e4f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	691a      	ldr	r2, [r3, #16]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ded4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	695a      	ldr	r2, [r3, #20]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dee4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	68da      	ldr	r2, [r3, #12]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800def4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2200      	movs	r2, #0
 800defa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2220      	movs	r2, #32
 800df00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2220      	movs	r2, #32
 800df08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b084      	sub	sp, #16
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	4613      	mov	r3, r2
 800df22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	2b20      	cmp	r3, #32
 800df2e:	d11d      	bne.n	800df6c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d002      	beq.n	800df3c <HAL_UART_Receive_DMA+0x26>
 800df36:	88fb      	ldrh	r3, [r7, #6]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800df3c:	2301      	movs	r3, #1
 800df3e:	e016      	b.n	800df6e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df46:	2b01      	cmp	r3, #1
 800df48:	d101      	bne.n	800df4e <HAL_UART_Receive_DMA+0x38>
 800df4a:	2302      	movs	r3, #2
 800df4c:	e00f      	b.n	800df6e <HAL_UART_Receive_DMA+0x58>
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2201      	movs	r2, #1
 800df52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	2200      	movs	r2, #0
 800df5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800df5c:	88fb      	ldrh	r3, [r7, #6]
 800df5e:	461a      	mov	r2, r3
 800df60:	68b9      	ldr	r1, [r7, #8]
 800df62:	68f8      	ldr	r0, [r7, #12]
 800df64:	f000 f99e 	bl	800e2a4 <UART_Start_Receive_DMA>
 800df68:	4603      	mov	r3, r0
 800df6a:	e000      	b.n	800df6e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800df6c:	2302      	movs	r3, #2
  }
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}

0800df76 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800df76:	b580      	push	{r7, lr}
 800df78:	b090      	sub	sp, #64	; 0x40
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800df7e:	2300      	movs	r3, #0
 800df80:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	695b      	ldr	r3, [r3, #20]
 800df88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df8c:	2b80      	cmp	r3, #128	; 0x80
 800df8e:	bf0c      	ite	eq
 800df90:	2301      	moveq	r3, #1
 800df92:	2300      	movne	r3, #0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df9e:	b2db      	uxtb	r3, r3
 800dfa0:	2b21      	cmp	r3, #33	; 0x21
 800dfa2:	d128      	bne.n	800dff6 <HAL_UART_DMAStop+0x80>
 800dfa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d025      	beq.n	800dff6 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	3314      	adds	r3, #20
 800dfb0:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb4:	e853 3f00 	ldrex	r3, [r3]
 800dfb8:	623b      	str	r3, [r7, #32]
   return(result);
 800dfba:	6a3b      	ldr	r3, [r7, #32]
 800dfbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfc0:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	3314      	adds	r3, #20
 800dfc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfca:	633a      	str	r2, [r7, #48]	; 0x30
 800dfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfd2:	e841 2300 	strex	r3, r2, [r1]
 800dfd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1e5      	bne.n	800dfaa <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d004      	beq.n	800dff0 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fd fae2 	bl	800b5b4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f000 f9f1 	bl	800e3d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e000:	2b40      	cmp	r3, #64	; 0x40
 800e002:	bf0c      	ite	eq
 800e004:	2301      	moveq	r3, #1
 800e006:	2300      	movne	r3, #0
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e012:	b2db      	uxtb	r3, r3
 800e014:	2b22      	cmp	r3, #34	; 0x22
 800e016:	d128      	bne.n	800e06a <HAL_UART_DMAStop+0xf4>
 800e018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d025      	beq.n	800e06a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	3314      	adds	r3, #20
 800e024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	e853 3f00 	ldrex	r3, [r3]
 800e02c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e034:	637b      	str	r3, [r7, #52]	; 0x34
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	3314      	adds	r3, #20
 800e03c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e03e:	61fa      	str	r2, [r7, #28]
 800e040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e042:	69b9      	ldr	r1, [r7, #24]
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	e841 2300 	strex	r3, r2, [r1]
 800e04a:	617b      	str	r3, [r7, #20]
   return(result);
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d1e5      	bne.n	800e01e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e056:	2b00      	cmp	r3, #0
 800e058:	d004      	beq.n	800e064 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fd faa8 	bl	800b5b4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f000 f9df 	bl	800e428 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e06a:	2300      	movs	r3, #0
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3740      	adds	r7, #64	; 0x40
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}

0800e074 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800e07c:	bf00      	nop
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	460b      	mov	r3, r1
 800e0a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e0a8:	bf00      	nop
 800e0aa:	370c      	adds	r7, #12
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b09c      	sub	sp, #112	; 0x70
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d172      	bne.n	800e1b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e0d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e0d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	330c      	adds	r3, #12
 800e0dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e0e0:	e853 3f00 	ldrex	r3, [r3]
 800e0e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e0e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e0e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e0ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	330c      	adds	r3, #12
 800e0f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e0f6:	65ba      	str	r2, [r7, #88]	; 0x58
 800e0f8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e0fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e0fe:	e841 2300 	strex	r3, r2, [r1]
 800e102:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1e5      	bne.n	800e0d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e10a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	3314      	adds	r3, #20
 800e110:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e114:	e853 3f00 	ldrex	r3, [r3]
 800e118:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e11c:	f023 0301 	bic.w	r3, r3, #1
 800e120:	667b      	str	r3, [r7, #100]	; 0x64
 800e122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	3314      	adds	r3, #20
 800e128:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e12a:	647a      	str	r2, [r7, #68]	; 0x44
 800e12c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e12e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e132:	e841 2300 	strex	r3, r2, [r1]
 800e136:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d1e5      	bne.n	800e10a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e13e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	3314      	adds	r3, #20
 800e144:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e148:	e853 3f00 	ldrex	r3, [r3]
 800e14c:	623b      	str	r3, [r7, #32]
   return(result);
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e154:	663b      	str	r3, [r7, #96]	; 0x60
 800e156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3314      	adds	r3, #20
 800e15c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e15e:	633a      	str	r2, [r7, #48]	; 0x30
 800e160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e166:	e841 2300 	strex	r3, r2, [r1]
 800e16a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1e5      	bne.n	800e13e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e174:	2220      	movs	r2, #32
 800e176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e17a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d119      	bne.n	800e1b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	330c      	adds	r3, #12
 800e188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	e853 3f00 	ldrex	r3, [r3]
 800e190:	60fb      	str	r3, [r7, #12]
   return(result);
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f023 0310 	bic.w	r3, r3, #16
 800e198:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e19a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	330c      	adds	r3, #12
 800e1a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1a2:	61fa      	str	r2, [r7, #28]
 800e1a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1a6:	69b9      	ldr	r1, [r7, #24]
 800e1a8:	69fa      	ldr	r2, [r7, #28]
 800e1aa:	e841 2300 	strex	r3, r2, [r1]
 800e1ae:	617b      	str	r3, [r7, #20]
   return(result);
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d1e5      	bne.n	800e182 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ba:	2b01      	cmp	r3, #1
 800e1bc:	d106      	bne.n	800e1cc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e1c6:	f7ff ff69 	bl	800e09c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e1ca:	e002      	b.n	800e1d2 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800e1cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e1ce:	f7fb f8c1 	bl	8009354 <HAL_UART_RxCpltCallback>
}
 800e1d2:	bf00      	nop
 800e1d4:	3770      	adds	r7, #112	; 0x70
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b084      	sub	sp, #16
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1e6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d108      	bne.n	800e202 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e1f4:	085b      	lsrs	r3, r3, #1
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	4619      	mov	r1, r3
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f7ff ff4e 	bl	800e09c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e200:	e002      	b.n	800e208 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f7ff ff36 	bl	800e074 <HAL_UART_RxHalfCpltCallback>
}
 800e208:	bf00      	nop
 800e20a:	3710      	adds	r7, #16
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e218:	2300      	movs	r3, #0
 800e21a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e220:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	695b      	ldr	r3, [r3, #20]
 800e228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e22c:	2b80      	cmp	r3, #128	; 0x80
 800e22e:	bf0c      	ite	eq
 800e230:	2301      	moveq	r3, #1
 800e232:	2300      	movne	r3, #0
 800e234:	b2db      	uxtb	r3, r3
 800e236:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e23e:	b2db      	uxtb	r3, r3
 800e240:	2b21      	cmp	r3, #33	; 0x21
 800e242:	d108      	bne.n	800e256 <UART_DMAError+0x46>
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d005      	beq.n	800e256 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2200      	movs	r2, #0
 800e24e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800e250:	68b8      	ldr	r0, [r7, #8]
 800e252:	f000 f8c1 	bl	800e3d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	695b      	ldr	r3, [r3, #20]
 800e25c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e260:	2b40      	cmp	r3, #64	; 0x40
 800e262:	bf0c      	ite	eq
 800e264:	2301      	moveq	r3, #1
 800e266:	2300      	movne	r3, #0
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e272:	b2db      	uxtb	r3, r3
 800e274:	2b22      	cmp	r3, #34	; 0x22
 800e276:	d108      	bne.n	800e28a <UART_DMAError+0x7a>
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d005      	beq.n	800e28a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	2200      	movs	r2, #0
 800e282:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800e284:	68b8      	ldr	r0, [r7, #8]
 800e286:	f000 f8cf 	bl	800e428 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e28a:	68bb      	ldr	r3, [r7, #8]
 800e28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e28e:	f043 0210 	orr.w	r2, r3, #16
 800e292:	68bb      	ldr	r3, [r7, #8]
 800e294:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e296:	68b8      	ldr	r0, [r7, #8]
 800e298:	f7ff fef6 	bl	800e088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e29c:	bf00      	nop
 800e29e:	3710      	adds	r7, #16
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b098      	sub	sp, #96	; 0x60
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	88fa      	ldrh	r2, [r7, #6]
 800e2bc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2222      	movs	r2, #34	; 0x22
 800e2c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d0:	4a3e      	ldr	r2, [pc, #248]	; (800e3cc <UART_Start_Receive_DMA+0x128>)
 800e2d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2d8:	4a3d      	ldr	r2, [pc, #244]	; (800e3d0 <UART_Start_Receive_DMA+0x12c>)
 800e2da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e0:	4a3c      	ldr	r2, [pc, #240]	; (800e3d4 <UART_Start_Receive_DMA+0x130>)
 800e2e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2e8:	2200      	movs	r2, #0
 800e2ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e2ec:	f107 0308 	add.w	r3, r7, #8
 800e2f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	3304      	adds	r3, #4
 800e2fc:	4619      	mov	r1, r3
 800e2fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	88fb      	ldrh	r3, [r7, #6]
 800e304:	f7fd f8fe 	bl	800b504 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e308:	2300      	movs	r3, #0
 800e30a:	613b      	str	r3, [r7, #16]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	613b      	str	r3, [r7, #16]
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	613b      	str	r3, [r7, #16]
 800e31c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2200      	movs	r2, #0
 800e322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	330c      	adds	r3, #12
 800e32c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e32e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e330:	e853 3f00 	ldrex	r3, [r3]
 800e334:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e33c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	330c      	adds	r3, #12
 800e344:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e346:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e348:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e34a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e34c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e34e:	e841 2300 	strex	r3, r2, [r1]
 800e352:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1e5      	bne.n	800e326 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	3314      	adds	r3, #20
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e364:	e853 3f00 	ldrex	r3, [r3]
 800e368:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36c:	f043 0301 	orr.w	r3, r3, #1
 800e370:	657b      	str	r3, [r7, #84]	; 0x54
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3314      	adds	r3, #20
 800e378:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e37a:	63ba      	str	r2, [r7, #56]	; 0x38
 800e37c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e382:	e841 2300 	strex	r3, r2, [r1]
 800e386:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d1e5      	bne.n	800e35a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	3314      	adds	r3, #20
 800e394:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	e853 3f00 	ldrex	r3, [r3]
 800e39c:	617b      	str	r3, [r7, #20]
   return(result);
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3a4:	653b      	str	r3, [r7, #80]	; 0x50
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	3314      	adds	r3, #20
 800e3ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3ae:	627a      	str	r2, [r7, #36]	; 0x24
 800e3b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3b2:	6a39      	ldr	r1, [r7, #32]
 800e3b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b6:	e841 2300 	strex	r3, r2, [r1]
 800e3ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d1e5      	bne.n	800e38e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800e3c2:	2300      	movs	r3, #0
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	3760      	adds	r7, #96	; 0x60
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	0800e0b5 	.word	0x0800e0b5
 800e3d0:	0800e1db 	.word	0x0800e1db
 800e3d4:	0800e211 	.word	0x0800e211

0800e3d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b089      	sub	sp, #36	; 0x24
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	330c      	adds	r3, #12
 800e3e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	e853 3f00 	ldrex	r3, [r3]
 800e3ee:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e3f6:	61fb      	str	r3, [r7, #28]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	330c      	adds	r3, #12
 800e3fe:	69fa      	ldr	r2, [r7, #28]
 800e400:	61ba      	str	r2, [r7, #24]
 800e402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e404:	6979      	ldr	r1, [r7, #20]
 800e406:	69ba      	ldr	r2, [r7, #24]
 800e408:	e841 2300 	strex	r3, r2, [r1]
 800e40c:	613b      	str	r3, [r7, #16]
   return(result);
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d1e5      	bne.n	800e3e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2220      	movs	r2, #32
 800e418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800e41c:	bf00      	nop
 800e41e:	3724      	adds	r7, #36	; 0x24
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e428:	b480      	push	{r7}
 800e42a:	b095      	sub	sp, #84	; 0x54
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	330c      	adds	r3, #12
 800e436:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e43a:	e853 3f00 	ldrex	r3, [r3]
 800e43e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e442:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e446:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	330c      	adds	r3, #12
 800e44e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e450:	643a      	str	r2, [r7, #64]	; 0x40
 800e452:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e454:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e456:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e458:	e841 2300 	strex	r3, r2, [r1]
 800e45c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1e5      	bne.n	800e430 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	3314      	adds	r3, #20
 800e46a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e46c:	6a3b      	ldr	r3, [r7, #32]
 800e46e:	e853 3f00 	ldrex	r3, [r3]
 800e472:	61fb      	str	r3, [r7, #28]
   return(result);
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	f023 0301 	bic.w	r3, r3, #1
 800e47a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	3314      	adds	r3, #20
 800e482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e484:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e486:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e488:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e48c:	e841 2300 	strex	r3, r2, [r1]
 800e490:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	2b00      	cmp	r3, #0
 800e496:	d1e5      	bne.n	800e464 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d119      	bne.n	800e4d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	330c      	adds	r3, #12
 800e4a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	e853 3f00 	ldrex	r3, [r3]
 800e4ae:	60bb      	str	r3, [r7, #8]
   return(result);
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	f023 0310 	bic.w	r3, r3, #16
 800e4b6:	647b      	str	r3, [r7, #68]	; 0x44
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	330c      	adds	r3, #12
 800e4be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4c0:	61ba      	str	r2, [r7, #24]
 800e4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c4:	6979      	ldr	r1, [r7, #20]
 800e4c6:	69ba      	ldr	r2, [r7, #24]
 800e4c8:	e841 2300 	strex	r3, r2, [r1]
 800e4cc:	613b      	str	r3, [r7, #16]
   return(result);
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d1e5      	bne.n	800e4a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2220      	movs	r2, #32
 800e4d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800e4e2:	bf00      	nop
 800e4e4:	3754      	adds	r7, #84	; 0x54
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ec:	4770      	bx	lr
	...

0800e4f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f4:	b09f      	sub	sp, #124	; 0x7c
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e4fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e506:	68d9      	ldr	r1, [r3, #12]
 800e508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	ea40 0301 	orr.w	r3, r0, r1
 800e510:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e514:	689a      	ldr	r2, [r3, #8]
 800e516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e518:	691b      	ldr	r3, [r3, #16]
 800e51a:	431a      	orrs	r2, r3
 800e51c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e51e:	695b      	ldr	r3, [r3, #20]
 800e520:	431a      	orrs	r2, r3
 800e522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e524:	69db      	ldr	r3, [r3, #28]
 800e526:	4313      	orrs	r3, r2
 800e528:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800e52a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e534:	f021 010c 	bic.w	r1, r1, #12
 800e538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e53a:	681a      	ldr	r2, [r3, #0]
 800e53c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e53e:	430b      	orrs	r3, r1
 800e540:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e542:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	695b      	ldr	r3, [r3, #20]
 800e548:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e54e:	6999      	ldr	r1, [r3, #24]
 800e550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	ea40 0301 	orr.w	r3, r0, r1
 800e558:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e55a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	4bc5      	ldr	r3, [pc, #788]	; (800e874 <UART_SetConfig+0x384>)
 800e560:	429a      	cmp	r2, r3
 800e562:	d004      	beq.n	800e56e <UART_SetConfig+0x7e>
 800e564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e566:	681a      	ldr	r2, [r3, #0]
 800e568:	4bc3      	ldr	r3, [pc, #780]	; (800e878 <UART_SetConfig+0x388>)
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d103      	bne.n	800e576 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e56e:	f7fe fa59 	bl	800ca24 <HAL_RCC_GetPCLK2Freq>
 800e572:	6778      	str	r0, [r7, #116]	; 0x74
 800e574:	e002      	b.n	800e57c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e576:	f7fe fa41 	bl	800c9fc <HAL_RCC_GetPCLK1Freq>
 800e57a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e57e:	69db      	ldr	r3, [r3, #28]
 800e580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e584:	f040 80b6 	bne.w	800e6f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e588:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e58a:	461c      	mov	r4, r3
 800e58c:	f04f 0500 	mov.w	r5, #0
 800e590:	4622      	mov	r2, r4
 800e592:	462b      	mov	r3, r5
 800e594:	1891      	adds	r1, r2, r2
 800e596:	6439      	str	r1, [r7, #64]	; 0x40
 800e598:	415b      	adcs	r3, r3
 800e59a:	647b      	str	r3, [r7, #68]	; 0x44
 800e59c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e5a0:	1912      	adds	r2, r2, r4
 800e5a2:	eb45 0303 	adc.w	r3, r5, r3
 800e5a6:	f04f 0000 	mov.w	r0, #0
 800e5aa:	f04f 0100 	mov.w	r1, #0
 800e5ae:	00d9      	lsls	r1, r3, #3
 800e5b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e5b4:	00d0      	lsls	r0, r2, #3
 800e5b6:	4602      	mov	r2, r0
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	1911      	adds	r1, r2, r4
 800e5bc:	6639      	str	r1, [r7, #96]	; 0x60
 800e5be:	416b      	adcs	r3, r5
 800e5c0:	667b      	str	r3, [r7, #100]	; 0x64
 800e5c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	f04f 0300 	mov.w	r3, #0
 800e5cc:	1891      	adds	r1, r2, r2
 800e5ce:	63b9      	str	r1, [r7, #56]	; 0x38
 800e5d0:	415b      	adcs	r3, r3
 800e5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e5d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e5d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800e5dc:	f7f2 fb34 	bl	8000c48 <__aeabi_uldivmod>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4ba5      	ldr	r3, [pc, #660]	; (800e87c <UART_SetConfig+0x38c>)
 800e5e6:	fba3 2302 	umull	r2, r3, r3, r2
 800e5ea:	095b      	lsrs	r3, r3, #5
 800e5ec:	011e      	lsls	r6, r3, #4
 800e5ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e5f0:	461c      	mov	r4, r3
 800e5f2:	f04f 0500 	mov.w	r5, #0
 800e5f6:	4622      	mov	r2, r4
 800e5f8:	462b      	mov	r3, r5
 800e5fa:	1891      	adds	r1, r2, r2
 800e5fc:	6339      	str	r1, [r7, #48]	; 0x30
 800e5fe:	415b      	adcs	r3, r3
 800e600:	637b      	str	r3, [r7, #52]	; 0x34
 800e602:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800e606:	1912      	adds	r2, r2, r4
 800e608:	eb45 0303 	adc.w	r3, r5, r3
 800e60c:	f04f 0000 	mov.w	r0, #0
 800e610:	f04f 0100 	mov.w	r1, #0
 800e614:	00d9      	lsls	r1, r3, #3
 800e616:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e61a:	00d0      	lsls	r0, r2, #3
 800e61c:	4602      	mov	r2, r0
 800e61e:	460b      	mov	r3, r1
 800e620:	1911      	adds	r1, r2, r4
 800e622:	65b9      	str	r1, [r7, #88]	; 0x58
 800e624:	416b      	adcs	r3, r5
 800e626:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e628:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	461a      	mov	r2, r3
 800e62e:	f04f 0300 	mov.w	r3, #0
 800e632:	1891      	adds	r1, r2, r2
 800e634:	62b9      	str	r1, [r7, #40]	; 0x28
 800e636:	415b      	adcs	r3, r3
 800e638:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e63a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e63e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800e642:	f7f2 fb01 	bl	8000c48 <__aeabi_uldivmod>
 800e646:	4602      	mov	r2, r0
 800e648:	460b      	mov	r3, r1
 800e64a:	4b8c      	ldr	r3, [pc, #560]	; (800e87c <UART_SetConfig+0x38c>)
 800e64c:	fba3 1302 	umull	r1, r3, r3, r2
 800e650:	095b      	lsrs	r3, r3, #5
 800e652:	2164      	movs	r1, #100	; 0x64
 800e654:	fb01 f303 	mul.w	r3, r1, r3
 800e658:	1ad3      	subs	r3, r2, r3
 800e65a:	00db      	lsls	r3, r3, #3
 800e65c:	3332      	adds	r3, #50	; 0x32
 800e65e:	4a87      	ldr	r2, [pc, #540]	; (800e87c <UART_SetConfig+0x38c>)
 800e660:	fba2 2303 	umull	r2, r3, r2, r3
 800e664:	095b      	lsrs	r3, r3, #5
 800e666:	005b      	lsls	r3, r3, #1
 800e668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e66c:	441e      	add	r6, r3
 800e66e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e670:	4618      	mov	r0, r3
 800e672:	f04f 0100 	mov.w	r1, #0
 800e676:	4602      	mov	r2, r0
 800e678:	460b      	mov	r3, r1
 800e67a:	1894      	adds	r4, r2, r2
 800e67c:	623c      	str	r4, [r7, #32]
 800e67e:	415b      	adcs	r3, r3
 800e680:	627b      	str	r3, [r7, #36]	; 0x24
 800e682:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e686:	1812      	adds	r2, r2, r0
 800e688:	eb41 0303 	adc.w	r3, r1, r3
 800e68c:	f04f 0400 	mov.w	r4, #0
 800e690:	f04f 0500 	mov.w	r5, #0
 800e694:	00dd      	lsls	r5, r3, #3
 800e696:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e69a:	00d4      	lsls	r4, r2, #3
 800e69c:	4622      	mov	r2, r4
 800e69e:	462b      	mov	r3, r5
 800e6a0:	1814      	adds	r4, r2, r0
 800e6a2:	653c      	str	r4, [r7, #80]	; 0x50
 800e6a4:	414b      	adcs	r3, r1
 800e6a6:	657b      	str	r3, [r7, #84]	; 0x54
 800e6a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	461a      	mov	r2, r3
 800e6ae:	f04f 0300 	mov.w	r3, #0
 800e6b2:	1891      	adds	r1, r2, r2
 800e6b4:	61b9      	str	r1, [r7, #24]
 800e6b6:	415b      	adcs	r3, r3
 800e6b8:	61fb      	str	r3, [r7, #28]
 800e6ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e6be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800e6c2:	f7f2 fac1 	bl	8000c48 <__aeabi_uldivmod>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4b6c      	ldr	r3, [pc, #432]	; (800e87c <UART_SetConfig+0x38c>)
 800e6cc:	fba3 1302 	umull	r1, r3, r3, r2
 800e6d0:	095b      	lsrs	r3, r3, #5
 800e6d2:	2164      	movs	r1, #100	; 0x64
 800e6d4:	fb01 f303 	mul.w	r3, r1, r3
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	00db      	lsls	r3, r3, #3
 800e6dc:	3332      	adds	r3, #50	; 0x32
 800e6de:	4a67      	ldr	r2, [pc, #412]	; (800e87c <UART_SetConfig+0x38c>)
 800e6e0:	fba2 2303 	umull	r2, r3, r2, r3
 800e6e4:	095b      	lsrs	r3, r3, #5
 800e6e6:	f003 0207 	and.w	r2, r3, #7
 800e6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	4432      	add	r2, r6
 800e6f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e6f2:	e0b9      	b.n	800e868 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e6f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e6f6:	461c      	mov	r4, r3
 800e6f8:	f04f 0500 	mov.w	r5, #0
 800e6fc:	4622      	mov	r2, r4
 800e6fe:	462b      	mov	r3, r5
 800e700:	1891      	adds	r1, r2, r2
 800e702:	6139      	str	r1, [r7, #16]
 800e704:	415b      	adcs	r3, r3
 800e706:	617b      	str	r3, [r7, #20]
 800e708:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e70c:	1912      	adds	r2, r2, r4
 800e70e:	eb45 0303 	adc.w	r3, r5, r3
 800e712:	f04f 0000 	mov.w	r0, #0
 800e716:	f04f 0100 	mov.w	r1, #0
 800e71a:	00d9      	lsls	r1, r3, #3
 800e71c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800e720:	00d0      	lsls	r0, r2, #3
 800e722:	4602      	mov	r2, r0
 800e724:	460b      	mov	r3, r1
 800e726:	eb12 0804 	adds.w	r8, r2, r4
 800e72a:	eb43 0905 	adc.w	r9, r3, r5
 800e72e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e730:	685b      	ldr	r3, [r3, #4]
 800e732:	4618      	mov	r0, r3
 800e734:	f04f 0100 	mov.w	r1, #0
 800e738:	f04f 0200 	mov.w	r2, #0
 800e73c:	f04f 0300 	mov.w	r3, #0
 800e740:	008b      	lsls	r3, r1, #2
 800e742:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e746:	0082      	lsls	r2, r0, #2
 800e748:	4640      	mov	r0, r8
 800e74a:	4649      	mov	r1, r9
 800e74c:	f7f2 fa7c 	bl	8000c48 <__aeabi_uldivmod>
 800e750:	4602      	mov	r2, r0
 800e752:	460b      	mov	r3, r1
 800e754:	4b49      	ldr	r3, [pc, #292]	; (800e87c <UART_SetConfig+0x38c>)
 800e756:	fba3 2302 	umull	r2, r3, r3, r2
 800e75a:	095b      	lsrs	r3, r3, #5
 800e75c:	011e      	lsls	r6, r3, #4
 800e75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e760:	4618      	mov	r0, r3
 800e762:	f04f 0100 	mov.w	r1, #0
 800e766:	4602      	mov	r2, r0
 800e768:	460b      	mov	r3, r1
 800e76a:	1894      	adds	r4, r2, r2
 800e76c:	60bc      	str	r4, [r7, #8]
 800e76e:	415b      	adcs	r3, r3
 800e770:	60fb      	str	r3, [r7, #12]
 800e772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e776:	1812      	adds	r2, r2, r0
 800e778:	eb41 0303 	adc.w	r3, r1, r3
 800e77c:	f04f 0400 	mov.w	r4, #0
 800e780:	f04f 0500 	mov.w	r5, #0
 800e784:	00dd      	lsls	r5, r3, #3
 800e786:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e78a:	00d4      	lsls	r4, r2, #3
 800e78c:	4622      	mov	r2, r4
 800e78e:	462b      	mov	r3, r5
 800e790:	1814      	adds	r4, r2, r0
 800e792:	64bc      	str	r4, [r7, #72]	; 0x48
 800e794:	414b      	adcs	r3, r1
 800e796:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e798:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e79a:	685b      	ldr	r3, [r3, #4]
 800e79c:	4618      	mov	r0, r3
 800e79e:	f04f 0100 	mov.w	r1, #0
 800e7a2:	f04f 0200 	mov.w	r2, #0
 800e7a6:	f04f 0300 	mov.w	r3, #0
 800e7aa:	008b      	lsls	r3, r1, #2
 800e7ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e7b0:	0082      	lsls	r2, r0, #2
 800e7b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800e7b6:	f7f2 fa47 	bl	8000c48 <__aeabi_uldivmod>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4b2f      	ldr	r3, [pc, #188]	; (800e87c <UART_SetConfig+0x38c>)
 800e7c0:	fba3 1302 	umull	r1, r3, r3, r2
 800e7c4:	095b      	lsrs	r3, r3, #5
 800e7c6:	2164      	movs	r1, #100	; 0x64
 800e7c8:	fb01 f303 	mul.w	r3, r1, r3
 800e7cc:	1ad3      	subs	r3, r2, r3
 800e7ce:	011b      	lsls	r3, r3, #4
 800e7d0:	3332      	adds	r3, #50	; 0x32
 800e7d2:	4a2a      	ldr	r2, [pc, #168]	; (800e87c <UART_SetConfig+0x38c>)
 800e7d4:	fba2 2303 	umull	r2, r3, r2, r3
 800e7d8:	095b      	lsrs	r3, r3, #5
 800e7da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7de:	441e      	add	r6, r3
 800e7e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f04f 0100 	mov.w	r1, #0
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	1894      	adds	r4, r2, r2
 800e7ee:	603c      	str	r4, [r7, #0]
 800e7f0:	415b      	adcs	r3, r3
 800e7f2:	607b      	str	r3, [r7, #4]
 800e7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7f8:	1812      	adds	r2, r2, r0
 800e7fa:	eb41 0303 	adc.w	r3, r1, r3
 800e7fe:	f04f 0400 	mov.w	r4, #0
 800e802:	f04f 0500 	mov.w	r5, #0
 800e806:	00dd      	lsls	r5, r3, #3
 800e808:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800e80c:	00d4      	lsls	r4, r2, #3
 800e80e:	4622      	mov	r2, r4
 800e810:	462b      	mov	r3, r5
 800e812:	eb12 0a00 	adds.w	sl, r2, r0
 800e816:	eb43 0b01 	adc.w	fp, r3, r1
 800e81a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	4618      	mov	r0, r3
 800e820:	f04f 0100 	mov.w	r1, #0
 800e824:	f04f 0200 	mov.w	r2, #0
 800e828:	f04f 0300 	mov.w	r3, #0
 800e82c:	008b      	lsls	r3, r1, #2
 800e82e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800e832:	0082      	lsls	r2, r0, #2
 800e834:	4650      	mov	r0, sl
 800e836:	4659      	mov	r1, fp
 800e838:	f7f2 fa06 	bl	8000c48 <__aeabi_uldivmod>
 800e83c:	4602      	mov	r2, r0
 800e83e:	460b      	mov	r3, r1
 800e840:	4b0e      	ldr	r3, [pc, #56]	; (800e87c <UART_SetConfig+0x38c>)
 800e842:	fba3 1302 	umull	r1, r3, r3, r2
 800e846:	095b      	lsrs	r3, r3, #5
 800e848:	2164      	movs	r1, #100	; 0x64
 800e84a:	fb01 f303 	mul.w	r3, r1, r3
 800e84e:	1ad3      	subs	r3, r2, r3
 800e850:	011b      	lsls	r3, r3, #4
 800e852:	3332      	adds	r3, #50	; 0x32
 800e854:	4a09      	ldr	r2, [pc, #36]	; (800e87c <UART_SetConfig+0x38c>)
 800e856:	fba2 2303 	umull	r2, r3, r2, r3
 800e85a:	095b      	lsrs	r3, r3, #5
 800e85c:	f003 020f 	and.w	r2, r3, #15
 800e860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4432      	add	r2, r6
 800e866:	609a      	str	r2, [r3, #8]
}
 800e868:	bf00      	nop
 800e86a:	377c      	adds	r7, #124	; 0x7c
 800e86c:	46bd      	mov	sp, r7
 800e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e872:	bf00      	nop
 800e874:	40011000 	.word	0x40011000
 800e878:	40011400 	.word	0x40011400
 800e87c:	51eb851f 	.word	0x51eb851f

0800e880 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e880:	b480      	push	{r7}
 800e882:	b085      	sub	sp, #20
 800e884:	af00      	add	r7, sp, #0
 800e886:	4603      	mov	r3, r0
 800e888:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e88a:	2300      	movs	r3, #0
 800e88c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e88e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e892:	2b84      	cmp	r3, #132	; 0x84
 800e894:	d005      	beq.n	800e8a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e896:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	4413      	add	r3, r2
 800e89e:	3303      	adds	r3, #3
 800e8a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e8b4:	f000 fc2a 	bl	800f10c <vTaskStartScheduler>
  
  return osOK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e8be:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8c0:	b089      	sub	sp, #36	; 0x24
 800e8c2:	af04      	add	r7, sp, #16
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	695b      	ldr	r3, [r3, #20]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d020      	beq.n	800e912 <osThreadCreate+0x54>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	699b      	ldr	r3, [r3, #24]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d01c      	beq.n	800e912 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	685c      	ldr	r4, [r3, #4]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681d      	ldr	r5, [r3, #0]
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	691e      	ldr	r6, [r3, #16]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7ff ffc8 	bl	800e880 <makeFreeRtosPriority>
 800e8f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	695b      	ldr	r3, [r3, #20]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e8fa:	9202      	str	r2, [sp, #8]
 800e8fc:	9301      	str	r3, [sp, #4]
 800e8fe:	9100      	str	r1, [sp, #0]
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	4632      	mov	r2, r6
 800e904:	4629      	mov	r1, r5
 800e906:	4620      	mov	r0, r4
 800e908:	f000 f9af 	bl	800ec6a <xTaskCreateStatic>
 800e90c:	4603      	mov	r3, r0
 800e90e:	60fb      	str	r3, [r7, #12]
 800e910:	e01c      	b.n	800e94c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	685c      	ldr	r4, [r3, #4]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e91e:	b29e      	uxth	r6, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff ffaa 	bl	800e880 <makeFreeRtosPriority>
 800e92c:	4602      	mov	r2, r0
 800e92e:	f107 030c 	add.w	r3, r7, #12
 800e932:	9301      	str	r3, [sp, #4]
 800e934:	9200      	str	r2, [sp, #0]
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	4632      	mov	r2, r6
 800e93a:	4629      	mov	r1, r5
 800e93c:	4620      	mov	r0, r4
 800e93e:	f000 f9f1 	bl	800ed24 <xTaskCreate>
 800e942:	4603      	mov	r3, r0
 800e944:	2b01      	cmp	r3, #1
 800e946:	d001      	beq.n	800e94c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e948:	2300      	movs	r3, #0
 800e94a:	e000      	b.n	800e94e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e94c:	68fb      	ldr	r3, [r7, #12]
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3714      	adds	r7, #20
 800e952:	46bd      	mov	sp, r7
 800e954:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e956 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b084      	sub	sp, #16
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d001      	beq.n	800e96c <osDelay+0x16>
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	e000      	b.n	800e96e <osDelay+0x18>
 800e96c:	2301      	movs	r3, #1
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 fb98 	bl	800f0a4 <vTaskDelay>
  
  return osOK;
 800e974:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e976:	4618      	mov	r0, r3
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e97e:	b480      	push	{r7}
 800e980:	b083      	sub	sp, #12
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f103 0208 	add.w	r2, r3, #8
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f04f 32ff 	mov.w	r2, #4294967295
 800e996:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f103 0208 	add.w	r2, r3, #8
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f103 0208 	add.w	r2, r3, #8
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e9b2:	bf00      	nop
 800e9b4:	370c      	adds	r7, #12
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e9be:	b480      	push	{r7}
 800e9c0:	b083      	sub	sp, #12
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e9cc:	bf00      	nop
 800e9ce:	370c      	adds	r7, #12
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
 800e9e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	689a      	ldr	r2, [r3, #8]
 800e9f2:	683b      	ldr	r3, [r7, #0]
 800e9f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	689b      	ldr	r3, [r3, #8]
 800e9fa:	683a      	ldr	r2, [r7, #0]
 800e9fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ea04:	683b      	ldr	r3, [r7, #0]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	1c5a      	adds	r2, r3, #1
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	601a      	str	r2, [r3, #0]
}
 800ea14:	bf00      	nop
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ea20:	b480      	push	{r7}
 800ea22:	b085      	sub	sp, #20
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea36:	d103      	bne.n	800ea40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	691b      	ldr	r3, [r3, #16]
 800ea3c:	60fb      	str	r3, [r7, #12]
 800ea3e:	e00c      	b.n	800ea5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3308      	adds	r3, #8
 800ea44:	60fb      	str	r3, [r7, #12]
 800ea46:	e002      	b.n	800ea4e <vListInsert+0x2e>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	60fb      	str	r3, [r7, #12]
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	685b      	ldr	r3, [r3, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	68ba      	ldr	r2, [r7, #8]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d2f6      	bcs.n	800ea48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	685a      	ldr	r2, [r3, #4]
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	685b      	ldr	r3, [r3, #4]
 800ea66:	683a      	ldr	r2, [r7, #0]
 800ea68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	68fa      	ldr	r2, [r7, #12]
 800ea6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	683a      	ldr	r2, [r7, #0]
 800ea74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	687a      	ldr	r2, [r7, #4]
 800ea7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	1c5a      	adds	r2, r3, #1
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	601a      	str	r2, [r3, #0]
}
 800ea86:	bf00      	nop
 800ea88:	3714      	adds	r7, #20
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ea92:	b480      	push	{r7}
 800ea94:	b085      	sub	sp, #20
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	691b      	ldr	r3, [r3, #16]
 800ea9e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	687a      	ldr	r2, [r7, #4]
 800eaa6:	6892      	ldr	r2, [r2, #8]
 800eaa8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	689b      	ldr	r3, [r3, #8]
 800eaae:	687a      	ldr	r2, [r7, #4]
 800eab0:	6852      	ldr	r2, [r2, #4]
 800eab2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	687a      	ldr	r2, [r7, #4]
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d103      	bne.n	800eac6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	689a      	ldr	r2, [r3, #8]
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	1e5a      	subs	r2, r3, #1
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr
	...

0800eae8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b084      	sub	sp, #16
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10a      	bne.n	800eb12 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800eafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800eb0e:	bf00      	nop
 800eb10:	e7fe      	b.n	800eb10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800eb12:	f001 f817 	bl	800fb44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb1e:	68f9      	ldr	r1, [r7, #12]
 800eb20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb22:	fb01 f303 	mul.w	r3, r1, r3
 800eb26:	441a      	add	r2, r3
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb42:	3b01      	subs	r3, #1
 800eb44:	68f9      	ldr	r1, [r7, #12]
 800eb46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800eb48:	fb01 f303 	mul.w	r3, r1, r3
 800eb4c:	441a      	add	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	22ff      	movs	r2, #255	; 0xff
 800eb56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	22ff      	movs	r2, #255	; 0xff
 800eb5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d114      	bne.n	800eb92 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	691b      	ldr	r3, [r3, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d01a      	beq.n	800eba6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	3310      	adds	r3, #16
 800eb74:	4618      	mov	r0, r3
 800eb76:	f000 fcf7 	bl	800f568 <xTaskRemoveFromEventList>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d012      	beq.n	800eba6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800eb80:	4b0c      	ldr	r3, [pc, #48]	; (800ebb4 <xQueueGenericReset+0xcc>)
 800eb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	f3bf 8f4f 	dsb	sy
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	e009      	b.n	800eba6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	3310      	adds	r3, #16
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7ff fef1 	bl	800e97e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	3324      	adds	r3, #36	; 0x24
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7ff feec 	bl	800e97e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800eba6:	f000 fffd 	bl	800fba4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ebaa:	2301      	movs	r3, #1
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3710      	adds	r7, #16
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bd80      	pop	{r7, pc}
 800ebb4:	e000ed04 	.word	0xe000ed04

0800ebb8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b08a      	sub	sp, #40	; 0x28
 800ebbc:	af02      	add	r7, sp, #8
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d10a      	bne.n	800ebe2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ebcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebd0:	f383 8811 	msr	BASEPRI, r3
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	f3bf 8f4f 	dsb	sy
 800ebdc:	613b      	str	r3, [r7, #16]
}
 800ebde:	bf00      	nop
 800ebe0:	e7fe      	b.n	800ebe0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	68ba      	ldr	r2, [r7, #8]
 800ebe6:	fb02 f303 	mul.w	r3, r2, r3
 800ebea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	3348      	adds	r3, #72	; 0x48
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f001 f889 	bl	800fd08 <pvPortMalloc>
 800ebf6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d011      	beq.n	800ec22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	3348      	adds	r3, #72	; 0x48
 800ec06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ec10:	79fa      	ldrb	r2, [r7, #7]
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	9300      	str	r3, [sp, #0]
 800ec16:	4613      	mov	r3, r2
 800ec18:	697a      	ldr	r2, [r7, #20]
 800ec1a:	68b9      	ldr	r1, [r7, #8]
 800ec1c:	68f8      	ldr	r0, [r7, #12]
 800ec1e:	f000 f805 	bl	800ec2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ec22:	69bb      	ldr	r3, [r7, #24]
	}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3720      	adds	r7, #32
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd80      	pop	{r7, pc}

0800ec2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b084      	sub	sp, #16
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	60f8      	str	r0, [r7, #12]
 800ec34:	60b9      	str	r1, [r7, #8]
 800ec36:	607a      	str	r2, [r7, #4]
 800ec38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d103      	bne.n	800ec48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ec40:	69bb      	ldr	r3, [r7, #24]
 800ec42:	69ba      	ldr	r2, [r7, #24]
 800ec44:	601a      	str	r2, [r3, #0]
 800ec46:	e002      	b.n	800ec4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ec48:	69bb      	ldr	r3, [r7, #24]
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ec4e:	69bb      	ldr	r3, [r7, #24]
 800ec50:	68fa      	ldr	r2, [r7, #12]
 800ec52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	68ba      	ldr	r2, [r7, #8]
 800ec58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ec5a:	2101      	movs	r1, #1
 800ec5c:	69b8      	ldr	r0, [r7, #24]
 800ec5e:	f7ff ff43 	bl	800eae8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ec62:	bf00      	nop
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b08e      	sub	sp, #56	; 0x38
 800ec6e:	af04      	add	r7, sp, #16
 800ec70:	60f8      	str	r0, [r7, #12]
 800ec72:	60b9      	str	r1, [r7, #8]
 800ec74:	607a      	str	r2, [r7, #4]
 800ec76:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ec78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d10a      	bne.n	800ec94 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ec7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec82:	f383 8811 	msr	BASEPRI, r3
 800ec86:	f3bf 8f6f 	isb	sy
 800ec8a:	f3bf 8f4f 	dsb	sy
 800ec8e:	623b      	str	r3, [r7, #32]
}
 800ec90:	bf00      	nop
 800ec92:	e7fe      	b.n	800ec92 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d10a      	bne.n	800ecb0 <xTaskCreateStatic+0x46>
	__asm volatile
 800ec9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec9e:	f383 8811 	msr	BASEPRI, r3
 800eca2:	f3bf 8f6f 	isb	sy
 800eca6:	f3bf 8f4f 	dsb	sy
 800ecaa:	61fb      	str	r3, [r7, #28]
}
 800ecac:	bf00      	nop
 800ecae:	e7fe      	b.n	800ecae <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ecb0:	2354      	movs	r3, #84	; 0x54
 800ecb2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	2b54      	cmp	r3, #84	; 0x54
 800ecb8:	d00a      	beq.n	800ecd0 <xTaskCreateStatic+0x66>
	__asm volatile
 800ecba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecbe:	f383 8811 	msr	BASEPRI, r3
 800ecc2:	f3bf 8f6f 	isb	sy
 800ecc6:	f3bf 8f4f 	dsb	sy
 800ecca:	61bb      	str	r3, [r7, #24]
}
 800eccc:	bf00      	nop
 800ecce:	e7fe      	b.n	800ecce <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ecd0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ecd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d01e      	beq.n	800ed16 <xTaskCreateStatic+0xac>
 800ecd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d01b      	beq.n	800ed16 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ecde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ece6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ece8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecea:	2202      	movs	r2, #2
 800ecec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	9303      	str	r3, [sp, #12]
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf6:	9302      	str	r3, [sp, #8]
 800ecf8:	f107 0314 	add.w	r3, r7, #20
 800ecfc:	9301      	str	r3, [sp, #4]
 800ecfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed00:	9300      	str	r3, [sp, #0]
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	687a      	ldr	r2, [r7, #4]
 800ed06:	68b9      	ldr	r1, [r7, #8]
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f000 f850 	bl	800edae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed10:	f000 f8e0 	bl	800eed4 <prvAddNewTaskToReadyList>
 800ed14:	e001      	b.n	800ed1a <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ed16:	2300      	movs	r3, #0
 800ed18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ed1a:	697b      	ldr	r3, [r7, #20]
	}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3728      	adds	r7, #40	; 0x28
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b08c      	sub	sp, #48	; 0x30
 800ed28:	af04      	add	r7, sp, #16
 800ed2a:	60f8      	str	r0, [r7, #12]
 800ed2c:	60b9      	str	r1, [r7, #8]
 800ed2e:	603b      	str	r3, [r7, #0]
 800ed30:	4613      	mov	r3, r2
 800ed32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ed34:	88fb      	ldrh	r3, [r7, #6]
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f000 ffe5 	bl	800fd08 <pvPortMalloc>
 800ed3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d00e      	beq.n	800ed64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ed46:	2054      	movs	r0, #84	; 0x54
 800ed48:	f000 ffde 	bl	800fd08 <pvPortMalloc>
 800ed4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ed4e:	69fb      	ldr	r3, [r7, #28]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d003      	beq.n	800ed5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ed54:	69fb      	ldr	r3, [r7, #28]
 800ed56:	697a      	ldr	r2, [r7, #20]
 800ed58:	631a      	str	r2, [r3, #48]	; 0x30
 800ed5a:	e005      	b.n	800ed68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ed5c:	6978      	ldr	r0, [r7, #20]
 800ed5e:	f001 f89f 	bl	800fea0 <vPortFree>
 800ed62:	e001      	b.n	800ed68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ed64:	2300      	movs	r3, #0
 800ed66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ed68:	69fb      	ldr	r3, [r7, #28]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d017      	beq.n	800ed9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	2200      	movs	r2, #0
 800ed72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed76:	88fa      	ldrh	r2, [r7, #6]
 800ed78:	2300      	movs	r3, #0
 800ed7a:	9303      	str	r3, [sp, #12]
 800ed7c:	69fb      	ldr	r3, [r7, #28]
 800ed7e:	9302      	str	r3, [sp, #8]
 800ed80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	68b9      	ldr	r1, [r7, #8]
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f000 f80e 	bl	800edae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed92:	69f8      	ldr	r0, [r7, #28]
 800ed94:	f000 f89e 	bl	800eed4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	61bb      	str	r3, [r7, #24]
 800ed9c:	e002      	b.n	800eda4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eda2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800eda4:	69bb      	ldr	r3, [r7, #24]
	}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3720      	adds	r7, #32
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b088      	sub	sp, #32
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	60f8      	str	r0, [r7, #12]
 800edb6:	60b9      	str	r1, [r7, #8]
 800edb8:	607a      	str	r2, [r7, #4]
 800edba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	009b      	lsls	r3, r3, #2
 800edc4:	461a      	mov	r2, r3
 800edc6:	21a5      	movs	r1, #165	; 0xa5
 800edc8:	f001 fa7e 	bl	80102c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800edcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800edd6:	3b01      	subs	r3, #1
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	4413      	add	r3, r2
 800eddc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	f023 0307 	bic.w	r3, r3, #7
 800ede4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	f003 0307 	and.w	r3, r3, #7
 800edec:	2b00      	cmp	r3, #0
 800edee:	d00a      	beq.n	800ee06 <prvInitialiseNewTask+0x58>
	__asm volatile
 800edf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edf4:	f383 8811 	msr	BASEPRI, r3
 800edf8:	f3bf 8f6f 	isb	sy
 800edfc:	f3bf 8f4f 	dsb	sy
 800ee00:	617b      	str	r3, [r7, #20]
}
 800ee02:	bf00      	nop
 800ee04:	e7fe      	b.n	800ee04 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ee06:	68bb      	ldr	r3, [r7, #8]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d01f      	beq.n	800ee4c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	61fb      	str	r3, [r7, #28]
 800ee10:	e012      	b.n	800ee38 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ee12:	68ba      	ldr	r2, [r7, #8]
 800ee14:	69fb      	ldr	r3, [r7, #28]
 800ee16:	4413      	add	r3, r2
 800ee18:	7819      	ldrb	r1, [r3, #0]
 800ee1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee1c:	69fb      	ldr	r3, [r7, #28]
 800ee1e:	4413      	add	r3, r2
 800ee20:	3334      	adds	r3, #52	; 0x34
 800ee22:	460a      	mov	r2, r1
 800ee24:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ee26:	68ba      	ldr	r2, [r7, #8]
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	4413      	add	r3, r2
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d006      	beq.n	800ee40 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ee32:	69fb      	ldr	r3, [r7, #28]
 800ee34:	3301      	adds	r3, #1
 800ee36:	61fb      	str	r3, [r7, #28]
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	2b0f      	cmp	r3, #15
 800ee3c:	d9e9      	bls.n	800ee12 <prvInitialiseNewTask+0x64>
 800ee3e:	e000      	b.n	800ee42 <prvInitialiseNewTask+0x94>
			{
				break;
 800ee40:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	2200      	movs	r2, #0
 800ee46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee4a:	e003      	b.n	800ee54 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	2200      	movs	r2, #0
 800ee50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	2b06      	cmp	r3, #6
 800ee58:	d901      	bls.n	800ee5e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ee5a:	2306      	movs	r3, #6
 800ee5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ee5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ee64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee68:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ee6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ee70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee72:	3304      	adds	r3, #4
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff fda2 	bl	800e9be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee7c:	3318      	adds	r3, #24
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7ff fd9d 	bl	800e9be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8c:	f1c3 0207 	rsb	r2, r3, #7
 800ee90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eea2:	2200      	movs	r2, #0
 800eea4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 800eea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeaa:	2200      	movs	r2, #0
 800eeac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800eeb0:	683a      	ldr	r2, [r7, #0]
 800eeb2:	68f9      	ldr	r1, [r7, #12]
 800eeb4:	69b8      	ldr	r0, [r7, #24]
 800eeb6:	f000 fd17 	bl	800f8e8 <pxPortInitialiseStack>
 800eeba:	4602      	mov	r2, r0
 800eebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eebe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800eec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d002      	beq.n	800eecc <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eeca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eecc:	bf00      	nop
 800eece:	3720      	adds	r7, #32
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}

0800eed4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eedc:	f000 fe32 	bl	800fb44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eee0:	4b2a      	ldr	r3, [pc, #168]	; (800ef8c <prvAddNewTaskToReadyList+0xb8>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	3301      	adds	r3, #1
 800eee6:	4a29      	ldr	r2, [pc, #164]	; (800ef8c <prvAddNewTaskToReadyList+0xb8>)
 800eee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eeea:	4b29      	ldr	r3, [pc, #164]	; (800ef90 <prvAddNewTaskToReadyList+0xbc>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d109      	bne.n	800ef06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eef2:	4a27      	ldr	r2, [pc, #156]	; (800ef90 <prvAddNewTaskToReadyList+0xbc>)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eef8:	4b24      	ldr	r3, [pc, #144]	; (800ef8c <prvAddNewTaskToReadyList+0xb8>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d110      	bne.n	800ef22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ef00:	f000 fbac 	bl	800f65c <prvInitialiseTaskLists>
 800ef04:	e00d      	b.n	800ef22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ef06:	4b23      	ldr	r3, [pc, #140]	; (800ef94 <prvAddNewTaskToReadyList+0xc0>)
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d109      	bne.n	800ef22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ef0e:	4b20      	ldr	r3, [pc, #128]	; (800ef90 <prvAddNewTaskToReadyList+0xbc>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d802      	bhi.n	800ef22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ef1c:	4a1c      	ldr	r2, [pc, #112]	; (800ef90 <prvAddNewTaskToReadyList+0xbc>)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ef22:	4b1d      	ldr	r3, [pc, #116]	; (800ef98 <prvAddNewTaskToReadyList+0xc4>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	3301      	adds	r3, #1
 800ef28:	4a1b      	ldr	r2, [pc, #108]	; (800ef98 <prvAddNewTaskToReadyList+0xc4>)
 800ef2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef30:	2201      	movs	r2, #1
 800ef32:	409a      	lsls	r2, r3
 800ef34:	4b19      	ldr	r3, [pc, #100]	; (800ef9c <prvAddNewTaskToReadyList+0xc8>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4313      	orrs	r3, r2
 800ef3a:	4a18      	ldr	r2, [pc, #96]	; (800ef9c <prvAddNewTaskToReadyList+0xc8>)
 800ef3c:	6013      	str	r3, [r2, #0]
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef42:	4613      	mov	r3, r2
 800ef44:	009b      	lsls	r3, r3, #2
 800ef46:	4413      	add	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4a15      	ldr	r2, [pc, #84]	; (800efa0 <prvAddNewTaskToReadyList+0xcc>)
 800ef4c:	441a      	add	r2, r3
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3304      	adds	r3, #4
 800ef52:	4619      	mov	r1, r3
 800ef54:	4610      	mov	r0, r2
 800ef56:	f7ff fd3f 	bl	800e9d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ef5a:	f000 fe23 	bl	800fba4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ef5e:	4b0d      	ldr	r3, [pc, #52]	; (800ef94 <prvAddNewTaskToReadyList+0xc0>)
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00e      	beq.n	800ef84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ef66:	4b0a      	ldr	r3, [pc, #40]	; (800ef90 <prvAddNewTaskToReadyList+0xbc>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d207      	bcs.n	800ef84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef74:	4b0b      	ldr	r3, [pc, #44]	; (800efa4 <prvAddNewTaskToReadyList+0xd0>)
 800ef76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef84:	bf00      	nop
 800ef86:	3708      	adds	r7, #8
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	20000a14 	.word	0x20000a14
 800ef90:	20000914 	.word	0x20000914
 800ef94:	20000a20 	.word	0x20000a20
 800ef98:	20000a30 	.word	0x20000a30
 800ef9c:	20000a1c 	.word	0x20000a1c
 800efa0:	20000918 	.word	0x20000918
 800efa4:	e000ed04 	.word	0xe000ed04

0800efa8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b08a      	sub	sp, #40	; 0x28
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800efb2:	2300      	movs	r3, #0
 800efb4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d10a      	bne.n	800efd2 <vTaskDelayUntil+0x2a>
	__asm volatile
 800efbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc0:	f383 8811 	msr	BASEPRI, r3
 800efc4:	f3bf 8f6f 	isb	sy
 800efc8:	f3bf 8f4f 	dsb	sy
 800efcc:	617b      	str	r3, [r7, #20]
}
 800efce:	bf00      	nop
 800efd0:	e7fe      	b.n	800efd0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d10a      	bne.n	800efee <vTaskDelayUntil+0x46>
	__asm volatile
 800efd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efdc:	f383 8811 	msr	BASEPRI, r3
 800efe0:	f3bf 8f6f 	isb	sy
 800efe4:	f3bf 8f4f 	dsb	sy
 800efe8:	613b      	str	r3, [r7, #16]
}
 800efea:	bf00      	nop
 800efec:	e7fe      	b.n	800efec <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800efee:	4b2a      	ldr	r3, [pc, #168]	; (800f098 <vTaskDelayUntil+0xf0>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00a      	beq.n	800f00c <vTaskDelayUntil+0x64>
	__asm volatile
 800eff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effa:	f383 8811 	msr	BASEPRI, r3
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	60fb      	str	r3, [r7, #12]
}
 800f008:	bf00      	nop
 800f00a:	e7fe      	b.n	800f00a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800f00c:	f000 f8de 	bl	800f1cc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800f010:	4b22      	ldr	r3, [pc, #136]	; (800f09c <vTaskDelayUntil+0xf4>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	4413      	add	r3, r2
 800f01e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	6a3a      	ldr	r2, [r7, #32]
 800f026:	429a      	cmp	r2, r3
 800f028:	d20b      	bcs.n	800f042 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	69fa      	ldr	r2, [r7, #28]
 800f030:	429a      	cmp	r2, r3
 800f032:	d211      	bcs.n	800f058 <vTaskDelayUntil+0xb0>
 800f034:	69fa      	ldr	r2, [r7, #28]
 800f036:	6a3b      	ldr	r3, [r7, #32]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d90d      	bls.n	800f058 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f03c:	2301      	movs	r3, #1
 800f03e:	627b      	str	r3, [r7, #36]	; 0x24
 800f040:	e00a      	b.n	800f058 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	69fa      	ldr	r2, [r7, #28]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d303      	bcc.n	800f054 <vTaskDelayUntil+0xac>
 800f04c:	69fa      	ldr	r2, [r7, #28]
 800f04e:	6a3b      	ldr	r3, [r7, #32]
 800f050:	429a      	cmp	r2, r3
 800f052:	d901      	bls.n	800f058 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800f054:	2301      	movs	r3, #1
 800f056:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	69fa      	ldr	r2, [r7, #28]
 800f05c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800f05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f060:	2b00      	cmp	r3, #0
 800f062:	d006      	beq.n	800f072 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800f064:	69fa      	ldr	r2, [r7, #28]
 800f066:	6a3b      	ldr	r3, [r7, #32]
 800f068:	1ad3      	subs	r3, r2, r3
 800f06a:	2100      	movs	r1, #0
 800f06c:	4618      	mov	r0, r3
 800f06e:	f000 fbd1 	bl	800f814 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800f072:	f000 f8b9 	bl	800f1e8 <xTaskResumeAll>
 800f076:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f078:	69bb      	ldr	r3, [r7, #24]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d107      	bne.n	800f08e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800f07e:	4b08      	ldr	r3, [pc, #32]	; (800f0a0 <vTaskDelayUntil+0xf8>)
 800f080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f084:	601a      	str	r2, [r3, #0]
 800f086:	f3bf 8f4f 	dsb	sy
 800f08a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f08e:	bf00      	nop
 800f090:	3728      	adds	r7, #40	; 0x28
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}
 800f096:	bf00      	nop
 800f098:	20000a3c 	.word	0x20000a3c
 800f09c:	20000a18 	.word	0x20000a18
 800f0a0:	e000ed04 	.word	0xe000ed04

0800f0a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d017      	beq.n	800f0e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f0b6:	4b13      	ldr	r3, [pc, #76]	; (800f104 <vTaskDelay+0x60>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d00a      	beq.n	800f0d4 <vTaskDelay+0x30>
	__asm volatile
 800f0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0c2:	f383 8811 	msr	BASEPRI, r3
 800f0c6:	f3bf 8f6f 	isb	sy
 800f0ca:	f3bf 8f4f 	dsb	sy
 800f0ce:	60bb      	str	r3, [r7, #8]
}
 800f0d0:	bf00      	nop
 800f0d2:	e7fe      	b.n	800f0d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f0d4:	f000 f87a 	bl	800f1cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0d8:	2100      	movs	r1, #0
 800f0da:	6878      	ldr	r0, [r7, #4]
 800f0dc:	f000 fb9a 	bl	800f814 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0e0:	f000 f882 	bl	800f1e8 <xTaskResumeAll>
 800f0e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d107      	bne.n	800f0fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f0ec:	4b06      	ldr	r3, [pc, #24]	; (800f108 <vTaskDelay+0x64>)
 800f0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f2:	601a      	str	r2, [r3, #0]
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f0fc:	bf00      	nop
 800f0fe:	3710      	adds	r7, #16
 800f100:	46bd      	mov	sp, r7
 800f102:	bd80      	pop	{r7, pc}
 800f104:	20000a3c 	.word	0x20000a3c
 800f108:	e000ed04 	.word	0xe000ed04

0800f10c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b08a      	sub	sp, #40	; 0x28
 800f110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f116:	2300      	movs	r3, #0
 800f118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f11a:	463a      	mov	r2, r7
 800f11c:	1d39      	adds	r1, r7, #4
 800f11e:	f107 0308 	add.w	r3, r7, #8
 800f122:	4618      	mov	r0, r3
 800f124:	f7f9 fce4 	bl	8008af0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	9202      	str	r2, [sp, #8]
 800f130:	9301      	str	r3, [sp, #4]
 800f132:	2300      	movs	r3, #0
 800f134:	9300      	str	r3, [sp, #0]
 800f136:	2300      	movs	r3, #0
 800f138:	460a      	mov	r2, r1
 800f13a:	491e      	ldr	r1, [pc, #120]	; (800f1b4 <vTaskStartScheduler+0xa8>)
 800f13c:	481e      	ldr	r0, [pc, #120]	; (800f1b8 <vTaskStartScheduler+0xac>)
 800f13e:	f7ff fd94 	bl	800ec6a <xTaskCreateStatic>
 800f142:	4603      	mov	r3, r0
 800f144:	4a1d      	ldr	r2, [pc, #116]	; (800f1bc <vTaskStartScheduler+0xb0>)
 800f146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f148:	4b1c      	ldr	r3, [pc, #112]	; (800f1bc <vTaskStartScheduler+0xb0>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d002      	beq.n	800f156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f150:	2301      	movs	r3, #1
 800f152:	617b      	str	r3, [r7, #20]
 800f154:	e001      	b.n	800f15a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f156:	2300      	movs	r3, #0
 800f158:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	2b01      	cmp	r3, #1
 800f15e:	d116      	bne.n	800f18e <vTaskStartScheduler+0x82>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	613b      	str	r3, [r7, #16]
}
 800f172:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f174:	4b12      	ldr	r3, [pc, #72]	; (800f1c0 <vTaskStartScheduler+0xb4>)
 800f176:	f04f 32ff 	mov.w	r2, #4294967295
 800f17a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f17c:	4b11      	ldr	r3, [pc, #68]	; (800f1c4 <vTaskStartScheduler+0xb8>)
 800f17e:	2201      	movs	r2, #1
 800f180:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f182:	4b11      	ldr	r3, [pc, #68]	; (800f1c8 <vTaskStartScheduler+0xbc>)
 800f184:	2200      	movs	r2, #0
 800f186:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f188:	f000 fc3a 	bl	800fa00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f18c:	e00e      	b.n	800f1ac <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f194:	d10a      	bne.n	800f1ac <vTaskStartScheduler+0xa0>
	__asm volatile
 800f196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	60fb      	str	r3, [r7, #12]
}
 800f1a8:	bf00      	nop
 800f1aa:	e7fe      	b.n	800f1aa <vTaskStartScheduler+0x9e>
}
 800f1ac:	bf00      	nop
 800f1ae:	3718      	adds	r7, #24
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}
 800f1b4:	080138f4 	.word	0x080138f4
 800f1b8:	0800f62d 	.word	0x0800f62d
 800f1bc:	20000a38 	.word	0x20000a38
 800f1c0:	20000a34 	.word	0x20000a34
 800f1c4:	20000a20 	.word	0x20000a20
 800f1c8:	20000a18 	.word	0x20000a18

0800f1cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <vTaskSuspendAll+0x18>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	4a03      	ldr	r2, [pc, #12]	; (800f1e4 <vTaskSuspendAll+0x18>)
 800f1d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f1da:	bf00      	nop
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	20000a3c 	.word	0x20000a3c

0800f1e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f1f6:	4b41      	ldr	r3, [pc, #260]	; (800f2fc <xTaskResumeAll+0x114>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d10a      	bne.n	800f214 <xTaskResumeAll+0x2c>
	__asm volatile
 800f1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f202:	f383 8811 	msr	BASEPRI, r3
 800f206:	f3bf 8f6f 	isb	sy
 800f20a:	f3bf 8f4f 	dsb	sy
 800f20e:	603b      	str	r3, [r7, #0]
}
 800f210:	bf00      	nop
 800f212:	e7fe      	b.n	800f212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f214:	f000 fc96 	bl	800fb44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f218:	4b38      	ldr	r3, [pc, #224]	; (800f2fc <xTaskResumeAll+0x114>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	4a37      	ldr	r2, [pc, #220]	; (800f2fc <xTaskResumeAll+0x114>)
 800f220:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f222:	4b36      	ldr	r3, [pc, #216]	; (800f2fc <xTaskResumeAll+0x114>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d161      	bne.n	800f2ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f22a:	4b35      	ldr	r3, [pc, #212]	; (800f300 <xTaskResumeAll+0x118>)
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d05d      	beq.n	800f2ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f232:	e02e      	b.n	800f292 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f234:	4b33      	ldr	r3, [pc, #204]	; (800f304 <xTaskResumeAll+0x11c>)
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	3318      	adds	r3, #24
 800f240:	4618      	mov	r0, r3
 800f242:	f7ff fc26 	bl	800ea92 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	3304      	adds	r3, #4
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff fc21 	bl	800ea92 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	2201      	movs	r2, #1
 800f256:	409a      	lsls	r2, r3
 800f258:	4b2b      	ldr	r3, [pc, #172]	; (800f308 <xTaskResumeAll+0x120>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4313      	orrs	r3, r2
 800f25e:	4a2a      	ldr	r2, [pc, #168]	; (800f308 <xTaskResumeAll+0x120>)
 800f260:	6013      	str	r3, [r2, #0]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f266:	4613      	mov	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4413      	add	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4a27      	ldr	r2, [pc, #156]	; (800f30c <xTaskResumeAll+0x124>)
 800f270:	441a      	add	r2, r3
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	3304      	adds	r3, #4
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7ff fbad 	bl	800e9d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f282:	4b23      	ldr	r3, [pc, #140]	; (800f310 <xTaskResumeAll+0x128>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f288:	429a      	cmp	r2, r3
 800f28a:	d302      	bcc.n	800f292 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f28c:	4b21      	ldr	r3, [pc, #132]	; (800f314 <xTaskResumeAll+0x12c>)
 800f28e:	2201      	movs	r2, #1
 800f290:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f292:	4b1c      	ldr	r3, [pc, #112]	; (800f304 <xTaskResumeAll+0x11c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d1cc      	bne.n	800f234 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d001      	beq.n	800f2a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f2a0:	f000 fa7a 	bl	800f798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f2a4:	4b1c      	ldr	r3, [pc, #112]	; (800f318 <xTaskResumeAll+0x130>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d010      	beq.n	800f2d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f2b0:	f000 f846 	bl	800f340 <xTaskIncrementTick>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d002      	beq.n	800f2c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f2ba:	4b16      	ldr	r3, [pc, #88]	; (800f314 <xTaskResumeAll+0x12c>)
 800f2bc:	2201      	movs	r2, #1
 800f2be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	3b01      	subs	r3, #1
 800f2c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d1f1      	bne.n	800f2b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f2cc:	4b12      	ldr	r3, [pc, #72]	; (800f318 <xTaskResumeAll+0x130>)
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2d2:	4b10      	ldr	r3, [pc, #64]	; (800f314 <xTaskResumeAll+0x12c>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d009      	beq.n	800f2ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2de:	4b0f      	ldr	r3, [pc, #60]	; (800f31c <xTaskResumeAll+0x134>)
 800f2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f2e4:	601a      	str	r2, [r3, #0]
 800f2e6:	f3bf 8f4f 	dsb	sy
 800f2ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f2ee:	f000 fc59 	bl	800fba4 <vPortExitCritical>

	return xAlreadyYielded;
 800f2f2:	68bb      	ldr	r3, [r7, #8]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3710      	adds	r7, #16
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}
 800f2fc:	20000a3c 	.word	0x20000a3c
 800f300:	20000a14 	.word	0x20000a14
 800f304:	200009d4 	.word	0x200009d4
 800f308:	20000a1c 	.word	0x20000a1c
 800f30c:	20000918 	.word	0x20000918
 800f310:	20000914 	.word	0x20000914
 800f314:	20000a28 	.word	0x20000a28
 800f318:	20000a24 	.word	0x20000a24
 800f31c:	e000ed04 	.word	0xe000ed04

0800f320 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f326:	4b05      	ldr	r3, [pc, #20]	; (800f33c <xTaskGetTickCount+0x1c>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f32c:	687b      	ldr	r3, [r7, #4]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	370c      	adds	r7, #12
 800f332:	46bd      	mov	sp, r7
 800f334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f338:	4770      	bx	lr
 800f33a:	bf00      	nop
 800f33c:	20000a18 	.word	0x20000a18

0800f340 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f346:	2300      	movs	r3, #0
 800f348:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f34a:	4b4e      	ldr	r3, [pc, #312]	; (800f484 <xTaskIncrementTick+0x144>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	f040 808e 	bne.w	800f470 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f354:	4b4c      	ldr	r3, [pc, #304]	; (800f488 <xTaskIncrementTick+0x148>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3301      	adds	r3, #1
 800f35a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f35c:	4a4a      	ldr	r2, [pc, #296]	; (800f488 <xTaskIncrementTick+0x148>)
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f362:	693b      	ldr	r3, [r7, #16]
 800f364:	2b00      	cmp	r3, #0
 800f366:	d120      	bne.n	800f3aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f368:	4b48      	ldr	r3, [pc, #288]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00a      	beq.n	800f388 <xTaskIncrementTick+0x48>
	__asm volatile
 800f372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f376:	f383 8811 	msr	BASEPRI, r3
 800f37a:	f3bf 8f6f 	isb	sy
 800f37e:	f3bf 8f4f 	dsb	sy
 800f382:	603b      	str	r3, [r7, #0]
}
 800f384:	bf00      	nop
 800f386:	e7fe      	b.n	800f386 <xTaskIncrementTick+0x46>
 800f388:	4b40      	ldr	r3, [pc, #256]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	60fb      	str	r3, [r7, #12]
 800f38e:	4b40      	ldr	r3, [pc, #256]	; (800f490 <xTaskIncrementTick+0x150>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a3e      	ldr	r2, [pc, #248]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f394:	6013      	str	r3, [r2, #0]
 800f396:	4a3e      	ldr	r2, [pc, #248]	; (800f490 <xTaskIncrementTick+0x150>)
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	6013      	str	r3, [r2, #0]
 800f39c:	4b3d      	ldr	r3, [pc, #244]	; (800f494 <xTaskIncrementTick+0x154>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	3301      	adds	r3, #1
 800f3a2:	4a3c      	ldr	r2, [pc, #240]	; (800f494 <xTaskIncrementTick+0x154>)
 800f3a4:	6013      	str	r3, [r2, #0]
 800f3a6:	f000 f9f7 	bl	800f798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3aa:	4b3b      	ldr	r3, [pc, #236]	; (800f498 <xTaskIncrementTick+0x158>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	693a      	ldr	r2, [r7, #16]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d348      	bcc.n	800f446 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3b4:	4b35      	ldr	r3, [pc, #212]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d104      	bne.n	800f3c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3be:	4b36      	ldr	r3, [pc, #216]	; (800f498 <xTaskIncrementTick+0x158>)
 800f3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800f3c4:	601a      	str	r2, [r3, #0]
					break;
 800f3c6:	e03e      	b.n	800f446 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3c8:	4b30      	ldr	r3, [pc, #192]	; (800f48c <xTaskIncrementTick+0x14c>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f3d8:	693a      	ldr	r2, [r7, #16]
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d203      	bcs.n	800f3e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f3e0:	4a2d      	ldr	r2, [pc, #180]	; (800f498 <xTaskIncrementTick+0x158>)
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f3e6:	e02e      	b.n	800f446 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	3304      	adds	r3, #4
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	f7ff fb50 	bl	800ea92 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	3318      	adds	r3, #24
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7ff fb47 	bl	800ea92 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f408:	2201      	movs	r2, #1
 800f40a:	409a      	lsls	r2, r3
 800f40c:	4b23      	ldr	r3, [pc, #140]	; (800f49c <xTaskIncrementTick+0x15c>)
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4313      	orrs	r3, r2
 800f412:	4a22      	ldr	r2, [pc, #136]	; (800f49c <xTaskIncrementTick+0x15c>)
 800f414:	6013      	str	r3, [r2, #0]
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f41a:	4613      	mov	r3, r2
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4413      	add	r3, r2
 800f420:	009b      	lsls	r3, r3, #2
 800f422:	4a1f      	ldr	r2, [pc, #124]	; (800f4a0 <xTaskIncrementTick+0x160>)
 800f424:	441a      	add	r2, r3
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	3304      	adds	r3, #4
 800f42a:	4619      	mov	r1, r3
 800f42c:	4610      	mov	r0, r2
 800f42e:	f7ff fad3 	bl	800e9d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f432:	68bb      	ldr	r3, [r7, #8]
 800f434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f436:	4b1b      	ldr	r3, [pc, #108]	; (800f4a4 <xTaskIncrementTick+0x164>)
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d3b9      	bcc.n	800f3b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f440:	2301      	movs	r3, #1
 800f442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f444:	e7b6      	b.n	800f3b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f446:	4b17      	ldr	r3, [pc, #92]	; (800f4a4 <xTaskIncrementTick+0x164>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f44c:	4914      	ldr	r1, [pc, #80]	; (800f4a0 <xTaskIncrementTick+0x160>)
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	440b      	add	r3, r1
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	d901      	bls.n	800f462 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f45e:	2301      	movs	r3, #1
 800f460:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f462:	4b11      	ldr	r3, [pc, #68]	; (800f4a8 <xTaskIncrementTick+0x168>)
 800f464:	681b      	ldr	r3, [r3, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d007      	beq.n	800f47a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f46a:	2301      	movs	r3, #1
 800f46c:	617b      	str	r3, [r7, #20]
 800f46e:	e004      	b.n	800f47a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f470:	4b0e      	ldr	r3, [pc, #56]	; (800f4ac <xTaskIncrementTick+0x16c>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3301      	adds	r3, #1
 800f476:	4a0d      	ldr	r2, [pc, #52]	; (800f4ac <xTaskIncrementTick+0x16c>)
 800f478:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f47a:	697b      	ldr	r3, [r7, #20]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3718      	adds	r7, #24
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	20000a3c 	.word	0x20000a3c
 800f488:	20000a18 	.word	0x20000a18
 800f48c:	200009cc 	.word	0x200009cc
 800f490:	200009d0 	.word	0x200009d0
 800f494:	20000a2c 	.word	0x20000a2c
 800f498:	20000a34 	.word	0x20000a34
 800f49c:	20000a1c 	.word	0x20000a1c
 800f4a0:	20000918 	.word	0x20000918
 800f4a4:	20000914 	.word	0x20000914
 800f4a8:	20000a28 	.word	0x20000a28
 800f4ac:	20000a24 	.word	0x20000a24

0800f4b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4b6:	4b27      	ldr	r3, [pc, #156]	; (800f554 <vTaskSwitchContext+0xa4>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d003      	beq.n	800f4c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f4be:	4b26      	ldr	r3, [pc, #152]	; (800f558 <vTaskSwitchContext+0xa8>)
 800f4c0:	2201      	movs	r2, #1
 800f4c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f4c4:	e03f      	b.n	800f546 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800f4c6:	4b24      	ldr	r3, [pc, #144]	; (800f558 <vTaskSwitchContext+0xa8>)
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4cc:	4b23      	ldr	r3, [pc, #140]	; (800f55c <vTaskSwitchContext+0xac>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	fab3 f383 	clz	r3, r3
 800f4d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f4da:	7afb      	ldrb	r3, [r7, #11]
 800f4dc:	f1c3 031f 	rsb	r3, r3, #31
 800f4e0:	617b      	str	r3, [r7, #20]
 800f4e2:	491f      	ldr	r1, [pc, #124]	; (800f560 <vTaskSwitchContext+0xb0>)
 800f4e4:	697a      	ldr	r2, [r7, #20]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	4413      	add	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	440b      	add	r3, r1
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d10a      	bne.n	800f50c <vTaskSwitchContext+0x5c>
	__asm volatile
 800f4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4fa:	f383 8811 	msr	BASEPRI, r3
 800f4fe:	f3bf 8f6f 	isb	sy
 800f502:	f3bf 8f4f 	dsb	sy
 800f506:	607b      	str	r3, [r7, #4]
}
 800f508:	bf00      	nop
 800f50a:	e7fe      	b.n	800f50a <vTaskSwitchContext+0x5a>
 800f50c:	697a      	ldr	r2, [r7, #20]
 800f50e:	4613      	mov	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	4413      	add	r3, r2
 800f514:	009b      	lsls	r3, r3, #2
 800f516:	4a12      	ldr	r2, [pc, #72]	; (800f560 <vTaskSwitchContext+0xb0>)
 800f518:	4413      	add	r3, r2
 800f51a:	613b      	str	r3, [r7, #16]
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	685b      	ldr	r3, [r3, #4]
 800f520:	685a      	ldr	r2, [r3, #4]
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	605a      	str	r2, [r3, #4]
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	685a      	ldr	r2, [r3, #4]
 800f52a:	693b      	ldr	r3, [r7, #16]
 800f52c:	3308      	adds	r3, #8
 800f52e:	429a      	cmp	r2, r3
 800f530:	d104      	bne.n	800f53c <vTaskSwitchContext+0x8c>
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	685b      	ldr	r3, [r3, #4]
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	605a      	str	r2, [r3, #4]
 800f53c:	693b      	ldr	r3, [r7, #16]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	68db      	ldr	r3, [r3, #12]
 800f542:	4a08      	ldr	r2, [pc, #32]	; (800f564 <vTaskSwitchContext+0xb4>)
 800f544:	6013      	str	r3, [r2, #0]
}
 800f546:	bf00      	nop
 800f548:	371c      	adds	r7, #28
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr
 800f552:	bf00      	nop
 800f554:	20000a3c 	.word	0x20000a3c
 800f558:	20000a28 	.word	0x20000a28
 800f55c:	20000a1c 	.word	0x20000a1c
 800f560:	20000918 	.word	0x20000918
 800f564:	20000914 	.word	0x20000914

0800f568 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b086      	sub	sp, #24
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d10a      	bne.n	800f594 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f582:	f383 8811 	msr	BASEPRI, r3
 800f586:	f3bf 8f6f 	isb	sy
 800f58a:	f3bf 8f4f 	dsb	sy
 800f58e:	60fb      	str	r3, [r7, #12]
}
 800f590:	bf00      	nop
 800f592:	e7fe      	b.n	800f592 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	3318      	adds	r3, #24
 800f598:	4618      	mov	r0, r3
 800f59a:	f7ff fa7a 	bl	800ea92 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f59e:	4b1d      	ldr	r3, [pc, #116]	; (800f614 <xTaskRemoveFromEventList+0xac>)
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d11c      	bne.n	800f5e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	3304      	adds	r3, #4
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff fa71 	bl	800ea92 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	409a      	lsls	r2, r3
 800f5b8:	4b17      	ldr	r3, [pc, #92]	; (800f618 <xTaskRemoveFromEventList+0xb0>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	4a16      	ldr	r2, [pc, #88]	; (800f618 <xTaskRemoveFromEventList+0xb0>)
 800f5c0:	6013      	str	r3, [r2, #0]
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5c6:	4613      	mov	r3, r2
 800f5c8:	009b      	lsls	r3, r3, #2
 800f5ca:	4413      	add	r3, r2
 800f5cc:	009b      	lsls	r3, r3, #2
 800f5ce:	4a13      	ldr	r2, [pc, #76]	; (800f61c <xTaskRemoveFromEventList+0xb4>)
 800f5d0:	441a      	add	r2, r3
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	3304      	adds	r3, #4
 800f5d6:	4619      	mov	r1, r3
 800f5d8:	4610      	mov	r0, r2
 800f5da:	f7ff f9fd 	bl	800e9d8 <vListInsertEnd>
 800f5de:	e005      	b.n	800f5ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	3318      	adds	r3, #24
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	480e      	ldr	r0, [pc, #56]	; (800f620 <xTaskRemoveFromEventList+0xb8>)
 800f5e8:	f7ff f9f6 	bl	800e9d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5f0:	4b0c      	ldr	r3, [pc, #48]	; (800f624 <xTaskRemoveFromEventList+0xbc>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d905      	bls.n	800f606 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f5fa:	2301      	movs	r3, #1
 800f5fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f5fe:	4b0a      	ldr	r3, [pc, #40]	; (800f628 <xTaskRemoveFromEventList+0xc0>)
 800f600:	2201      	movs	r2, #1
 800f602:	601a      	str	r2, [r3, #0]
 800f604:	e001      	b.n	800f60a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f606:	2300      	movs	r3, #0
 800f608:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f60a:	697b      	ldr	r3, [r7, #20]
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3718      	adds	r7, #24
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}
 800f614:	20000a3c 	.word	0x20000a3c
 800f618:	20000a1c 	.word	0x20000a1c
 800f61c:	20000918 	.word	0x20000918
 800f620:	200009d4 	.word	0x200009d4
 800f624:	20000914 	.word	0x20000914
 800f628:	20000a28 	.word	0x20000a28

0800f62c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f634:	f000 f852 	bl	800f6dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f638:	4b06      	ldr	r3, [pc, #24]	; (800f654 <prvIdleTask+0x28>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d9f9      	bls.n	800f634 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f640:	4b05      	ldr	r3, [pc, #20]	; (800f658 <prvIdleTask+0x2c>)
 800f642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f646:	601a      	str	r2, [r3, #0]
 800f648:	f3bf 8f4f 	dsb	sy
 800f64c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f650:	e7f0      	b.n	800f634 <prvIdleTask+0x8>
 800f652:	bf00      	nop
 800f654:	20000918 	.word	0x20000918
 800f658:	e000ed04 	.word	0xe000ed04

0800f65c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b082      	sub	sp, #8
 800f660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f662:	2300      	movs	r3, #0
 800f664:	607b      	str	r3, [r7, #4]
 800f666:	e00c      	b.n	800f682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	4613      	mov	r3, r2
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	4413      	add	r3, r2
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	4a12      	ldr	r2, [pc, #72]	; (800f6bc <prvInitialiseTaskLists+0x60>)
 800f674:	4413      	add	r3, r2
 800f676:	4618      	mov	r0, r3
 800f678:	f7ff f981 	bl	800e97e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	3301      	adds	r3, #1
 800f680:	607b      	str	r3, [r7, #4]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2b06      	cmp	r3, #6
 800f686:	d9ef      	bls.n	800f668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f688:	480d      	ldr	r0, [pc, #52]	; (800f6c0 <prvInitialiseTaskLists+0x64>)
 800f68a:	f7ff f978 	bl	800e97e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f68e:	480d      	ldr	r0, [pc, #52]	; (800f6c4 <prvInitialiseTaskLists+0x68>)
 800f690:	f7ff f975 	bl	800e97e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f694:	480c      	ldr	r0, [pc, #48]	; (800f6c8 <prvInitialiseTaskLists+0x6c>)
 800f696:	f7ff f972 	bl	800e97e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f69a:	480c      	ldr	r0, [pc, #48]	; (800f6cc <prvInitialiseTaskLists+0x70>)
 800f69c:	f7ff f96f 	bl	800e97e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f6a0:	480b      	ldr	r0, [pc, #44]	; (800f6d0 <prvInitialiseTaskLists+0x74>)
 800f6a2:	f7ff f96c 	bl	800e97e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f6a6:	4b0b      	ldr	r3, [pc, #44]	; (800f6d4 <prvInitialiseTaskLists+0x78>)
 800f6a8:	4a05      	ldr	r2, [pc, #20]	; (800f6c0 <prvInitialiseTaskLists+0x64>)
 800f6aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f6ac:	4b0a      	ldr	r3, [pc, #40]	; (800f6d8 <prvInitialiseTaskLists+0x7c>)
 800f6ae:	4a05      	ldr	r2, [pc, #20]	; (800f6c4 <prvInitialiseTaskLists+0x68>)
 800f6b0:	601a      	str	r2, [r3, #0]
}
 800f6b2:	bf00      	nop
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20000918 	.word	0x20000918
 800f6c0:	200009a4 	.word	0x200009a4
 800f6c4:	200009b8 	.word	0x200009b8
 800f6c8:	200009d4 	.word	0x200009d4
 800f6cc:	200009e8 	.word	0x200009e8
 800f6d0:	20000a00 	.word	0x20000a00
 800f6d4:	200009cc 	.word	0x200009cc
 800f6d8:	200009d0 	.word	0x200009d0

0800f6dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6e2:	e019      	b.n	800f718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f6e4:	f000 fa2e 	bl	800fb44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6e8:	4b10      	ldr	r3, [pc, #64]	; (800f72c <prvCheckTasksWaitingTermination+0x50>)
 800f6ea:	68db      	ldr	r3, [r3, #12]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f7ff f9cc 	bl	800ea92 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f6fa:	4b0d      	ldr	r3, [pc, #52]	; (800f730 <prvCheckTasksWaitingTermination+0x54>)
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	3b01      	subs	r3, #1
 800f700:	4a0b      	ldr	r2, [pc, #44]	; (800f730 <prvCheckTasksWaitingTermination+0x54>)
 800f702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f704:	4b0b      	ldr	r3, [pc, #44]	; (800f734 <prvCheckTasksWaitingTermination+0x58>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	3b01      	subs	r3, #1
 800f70a:	4a0a      	ldr	r2, [pc, #40]	; (800f734 <prvCheckTasksWaitingTermination+0x58>)
 800f70c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f70e:	f000 fa49 	bl	800fba4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f810 	bl	800f738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f718:	4b06      	ldr	r3, [pc, #24]	; (800f734 <prvCheckTasksWaitingTermination+0x58>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1e1      	bne.n	800f6e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f720:	bf00      	nop
 800f722:	bf00      	nop
 800f724:	3708      	adds	r7, #8
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop
 800f72c:	200009e8 	.word	0x200009e8
 800f730:	20000a14 	.word	0x20000a14
 800f734:	200009fc 	.word	0x200009fc

0800f738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f738:	b580      	push	{r7, lr}
 800f73a:	b084      	sub	sp, #16
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f746:	2b00      	cmp	r3, #0
 800f748:	d108      	bne.n	800f75c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f74e:	4618      	mov	r0, r3
 800f750:	f000 fba6 	bl	800fea0 <vPortFree>
				vPortFree( pxTCB );
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f000 fba3 	bl	800fea0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f75a:	e018      	b.n	800f78e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f762:	2b01      	cmp	r3, #1
 800f764:	d103      	bne.n	800f76e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f000 fb9a 	bl	800fea0 <vPortFree>
	}
 800f76c:	e00f      	b.n	800f78e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f774:	2b02      	cmp	r3, #2
 800f776:	d00a      	beq.n	800f78e <prvDeleteTCB+0x56>
	__asm volatile
 800f778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f77c:	f383 8811 	msr	BASEPRI, r3
 800f780:	f3bf 8f6f 	isb	sy
 800f784:	f3bf 8f4f 	dsb	sy
 800f788:	60fb      	str	r3, [r7, #12]
}
 800f78a:	bf00      	nop
 800f78c:	e7fe      	b.n	800f78c <prvDeleteTCB+0x54>
	}
 800f78e:	bf00      	nop
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
	...

0800f798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f79e:	4b0c      	ldr	r3, [pc, #48]	; (800f7d0 <prvResetNextTaskUnblockTime+0x38>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d104      	bne.n	800f7b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f7a8:	4b0a      	ldr	r3, [pc, #40]	; (800f7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800f7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f7ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f7b0:	e008      	b.n	800f7c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7b2:	4b07      	ldr	r3, [pc, #28]	; (800f7d0 <prvResetNextTaskUnblockTime+0x38>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	68db      	ldr	r3, [r3, #12]
 800f7ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	4a04      	ldr	r2, [pc, #16]	; (800f7d4 <prvResetNextTaskUnblockTime+0x3c>)
 800f7c2:	6013      	str	r3, [r2, #0]
}
 800f7c4:	bf00      	nop
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	200009cc 	.word	0x200009cc
 800f7d4:	20000a34 	.word	0x20000a34

0800f7d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f7de:	4b0b      	ldr	r3, [pc, #44]	; (800f80c <xTaskGetSchedulerState+0x34>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d102      	bne.n	800f7ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	607b      	str	r3, [r7, #4]
 800f7ea:	e008      	b.n	800f7fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7ec:	4b08      	ldr	r3, [pc, #32]	; (800f810 <xTaskGetSchedulerState+0x38>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f7f4:	2302      	movs	r3, #2
 800f7f6:	607b      	str	r3, [r7, #4]
 800f7f8:	e001      	b.n	800f7fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f7fe:	687b      	ldr	r3, [r7, #4]
	}
 800f800:	4618      	mov	r0, r3
 800f802:	370c      	adds	r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80a:	4770      	bx	lr
 800f80c:	20000a20 	.word	0x20000a20
 800f810:	20000a3c 	.word	0x20000a3c

0800f814 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f81e:	4b2b      	ldr	r3, [pc, #172]	; (800f8cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 800f824:	4b2a      	ldr	r3, [pc, #168]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	2200      	movs	r2, #0
 800f82a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f82e:	4b28      	ldr	r3, [pc, #160]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	3304      	adds	r3, #4
 800f834:	4618      	mov	r0, r3
 800f836:	f7ff f92c 	bl	800ea92 <uxListRemove>
 800f83a:	4603      	mov	r3, r0
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10b      	bne.n	800f858 <prvAddCurrentTaskToDelayedList+0x44>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f840:	4b23      	ldr	r3, [pc, #140]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f846:	2201      	movs	r2, #1
 800f848:	fa02 f303 	lsl.w	r3, r2, r3
 800f84c:	43da      	mvns	r2, r3
 800f84e:	4b21      	ldr	r3, [pc, #132]	; (800f8d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	4013      	ands	r3, r2
 800f854:	4a1f      	ldr	r2, [pc, #124]	; (800f8d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f856:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f85e:	d10a      	bne.n	800f876 <prvAddCurrentTaskToDelayedList+0x62>
 800f860:	683b      	ldr	r3, [r7, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d007      	beq.n	800f876 <prvAddCurrentTaskToDelayedList+0x62>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f866:	4b1a      	ldr	r3, [pc, #104]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3304      	adds	r3, #4
 800f86c:	4619      	mov	r1, r3
 800f86e:	481a      	ldr	r0, [pc, #104]	; (800f8d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f870:	f7ff f8b2 	bl	800e9d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f874:	e026      	b.n	800f8c4 <prvAddCurrentTaskToDelayedList+0xb0>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4413      	add	r3, r2
 800f87c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f87e:	4b14      	ldr	r3, [pc, #80]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	68ba      	ldr	r2, [r7, #8]
 800f884:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f886:	68ba      	ldr	r2, [r7, #8]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d209      	bcs.n	800f8a2 <prvAddCurrentTaskToDelayedList+0x8e>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f88e:	4b13      	ldr	r3, [pc, #76]	; (800f8dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800f890:	681a      	ldr	r2, [r3, #0]
 800f892:	4b0f      	ldr	r3, [pc, #60]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	3304      	adds	r3, #4
 800f898:	4619      	mov	r1, r3
 800f89a:	4610      	mov	r0, r2
 800f89c:	f7ff f8c0 	bl	800ea20 <vListInsert>
}
 800f8a0:	e010      	b.n	800f8c4 <prvAddCurrentTaskToDelayedList+0xb0>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f8a2:	4b0f      	ldr	r3, [pc, #60]	; (800f8e0 <prvAddCurrentTaskToDelayedList+0xcc>)
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	4b0a      	ldr	r3, [pc, #40]	; (800f8d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	3304      	adds	r3, #4
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4610      	mov	r0, r2
 800f8b0:	f7ff f8b6 	bl	800ea20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f8b4:	4b0b      	ldr	r3, [pc, #44]	; (800f8e4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68ba      	ldr	r2, [r7, #8]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d202      	bcs.n	800f8c4 <prvAddCurrentTaskToDelayedList+0xb0>
					xNextTaskUnblockTime = xTimeToWake;
 800f8be:	4a09      	ldr	r2, [pc, #36]	; (800f8e4 <prvAddCurrentTaskToDelayedList+0xd0>)
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	6013      	str	r3, [r2, #0]
}
 800f8c4:	bf00      	nop
 800f8c6:	3710      	adds	r7, #16
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	20000a18 	.word	0x20000a18
 800f8d0:	20000914 	.word	0x20000914
 800f8d4:	20000a1c 	.word	0x20000a1c
 800f8d8:	20000a00 	.word	0x20000a00
 800f8dc:	200009d0 	.word	0x200009d0
 800f8e0:	200009cc 	.word	0x200009cc
 800f8e4:	20000a34 	.word	0x20000a34

0800f8e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b085      	sub	sp, #20
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	60f8      	str	r0, [r7, #12]
 800f8f0:	60b9      	str	r1, [r7, #8]
 800f8f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	3b04      	subs	r3, #4
 800f8f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	3b04      	subs	r3, #4
 800f906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f908:	68bb      	ldr	r3, [r7, #8]
 800f90a:	f023 0201 	bic.w	r2, r3, #1
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	3b04      	subs	r3, #4
 800f916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f918:	4a0c      	ldr	r2, [pc, #48]	; (800f94c <pxPortInitialiseStack+0x64>)
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	3b14      	subs	r3, #20
 800f922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f924:	687a      	ldr	r2, [r7, #4]
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	3b04      	subs	r3, #4
 800f92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f06f 0202 	mvn.w	r2, #2
 800f936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	3b20      	subs	r3, #32
 800f93c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f93e:	68fb      	ldr	r3, [r7, #12]
}
 800f940:	4618      	mov	r0, r3
 800f942:	3714      	adds	r7, #20
 800f944:	46bd      	mov	sp, r7
 800f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94a:	4770      	bx	lr
 800f94c:	0800f951 	.word	0x0800f951

0800f950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f950:	b480      	push	{r7}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f956:	2300      	movs	r3, #0
 800f958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f95a:	4b12      	ldr	r3, [pc, #72]	; (800f9a4 <prvTaskExitError+0x54>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f962:	d00a      	beq.n	800f97a <prvTaskExitError+0x2a>
	__asm volatile
 800f964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f968:	f383 8811 	msr	BASEPRI, r3
 800f96c:	f3bf 8f6f 	isb	sy
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	60fb      	str	r3, [r7, #12]
}
 800f976:	bf00      	nop
 800f978:	e7fe      	b.n	800f978 <prvTaskExitError+0x28>
	__asm volatile
 800f97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f97e:	f383 8811 	msr	BASEPRI, r3
 800f982:	f3bf 8f6f 	isb	sy
 800f986:	f3bf 8f4f 	dsb	sy
 800f98a:	60bb      	str	r3, [r7, #8]
}
 800f98c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f98e:	bf00      	nop
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d0fc      	beq.n	800f990 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f996:	bf00      	nop
 800f998:	bf00      	nop
 800f99a:	3714      	adds	r7, #20
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr
 800f9a4:	20000300 	.word	0x20000300
	...

0800f9b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f9b0:	4b07      	ldr	r3, [pc, #28]	; (800f9d0 <pxCurrentTCBConst2>)
 800f9b2:	6819      	ldr	r1, [r3, #0]
 800f9b4:	6808      	ldr	r0, [r1, #0]
 800f9b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ba:	f380 8809 	msr	PSP, r0
 800f9be:	f3bf 8f6f 	isb	sy
 800f9c2:	f04f 0000 	mov.w	r0, #0
 800f9c6:	f380 8811 	msr	BASEPRI, r0
 800f9ca:	4770      	bx	lr
 800f9cc:	f3af 8000 	nop.w

0800f9d0 <pxCurrentTCBConst2>:
 800f9d0:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f9d4:	bf00      	nop
 800f9d6:	bf00      	nop

0800f9d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f9d8:	4808      	ldr	r0, [pc, #32]	; (800f9fc <prvPortStartFirstTask+0x24>)
 800f9da:	6800      	ldr	r0, [r0, #0]
 800f9dc:	6800      	ldr	r0, [r0, #0]
 800f9de:	f380 8808 	msr	MSP, r0
 800f9e2:	f04f 0000 	mov.w	r0, #0
 800f9e6:	f380 8814 	msr	CONTROL, r0
 800f9ea:	b662      	cpsie	i
 800f9ec:	b661      	cpsie	f
 800f9ee:	f3bf 8f4f 	dsb	sy
 800f9f2:	f3bf 8f6f 	isb	sy
 800f9f6:	df00      	svc	0
 800f9f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f9fa:	bf00      	nop
 800f9fc:	e000ed08 	.word	0xe000ed08

0800fa00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa06:	4b46      	ldr	r3, [pc, #280]	; (800fb20 <xPortStartScheduler+0x120>)
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	4a46      	ldr	r2, [pc, #280]	; (800fb24 <xPortStartScheduler+0x124>)
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	d10a      	bne.n	800fa26 <xPortStartScheduler+0x26>
	__asm volatile
 800fa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa14:	f383 8811 	msr	BASEPRI, r3
 800fa18:	f3bf 8f6f 	isb	sy
 800fa1c:	f3bf 8f4f 	dsb	sy
 800fa20:	613b      	str	r3, [r7, #16]
}
 800fa22:	bf00      	nop
 800fa24:	e7fe      	b.n	800fa24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fa26:	4b3e      	ldr	r3, [pc, #248]	; (800fb20 <xPortStartScheduler+0x120>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	4a3f      	ldr	r2, [pc, #252]	; (800fb28 <xPortStartScheduler+0x128>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d10a      	bne.n	800fa46 <xPortStartScheduler+0x46>
	__asm volatile
 800fa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa34:	f383 8811 	msr	BASEPRI, r3
 800fa38:	f3bf 8f6f 	isb	sy
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	60fb      	str	r3, [r7, #12]
}
 800fa42:	bf00      	nop
 800fa44:	e7fe      	b.n	800fa44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fa46:	4b39      	ldr	r3, [pc, #228]	; (800fb2c <xPortStartScheduler+0x12c>)
 800fa48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	781b      	ldrb	r3, [r3, #0]
 800fa4e:	b2db      	uxtb	r3, r3
 800fa50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	22ff      	movs	r2, #255	; 0xff
 800fa56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	b2db      	uxtb	r3, r3
 800fa5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fa60:	78fb      	ldrb	r3, [r7, #3]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fa68:	b2da      	uxtb	r2, r3
 800fa6a:	4b31      	ldr	r3, [pc, #196]	; (800fb30 <xPortStartScheduler+0x130>)
 800fa6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fa6e:	4b31      	ldr	r3, [pc, #196]	; (800fb34 <xPortStartScheduler+0x134>)
 800fa70:	2207      	movs	r2, #7
 800fa72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa74:	e009      	b.n	800fa8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fa76:	4b2f      	ldr	r3, [pc, #188]	; (800fb34 <xPortStartScheduler+0x134>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	3b01      	subs	r3, #1
 800fa7c:	4a2d      	ldr	r2, [pc, #180]	; (800fb34 <xPortStartScheduler+0x134>)
 800fa7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fa80:	78fb      	ldrb	r3, [r7, #3]
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	005b      	lsls	r3, r3, #1
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fa8a:	78fb      	ldrb	r3, [r7, #3]
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa92:	2b80      	cmp	r3, #128	; 0x80
 800fa94:	d0ef      	beq.n	800fa76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fa96:	4b27      	ldr	r3, [pc, #156]	; (800fb34 <xPortStartScheduler+0x134>)
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	f1c3 0307 	rsb	r3, r3, #7
 800fa9e:	2b04      	cmp	r3, #4
 800faa0:	d00a      	beq.n	800fab8 <xPortStartScheduler+0xb8>
	__asm volatile
 800faa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa6:	f383 8811 	msr	BASEPRI, r3
 800faaa:	f3bf 8f6f 	isb	sy
 800faae:	f3bf 8f4f 	dsb	sy
 800fab2:	60bb      	str	r3, [r7, #8]
}
 800fab4:	bf00      	nop
 800fab6:	e7fe      	b.n	800fab6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fab8:	4b1e      	ldr	r3, [pc, #120]	; (800fb34 <xPortStartScheduler+0x134>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	021b      	lsls	r3, r3, #8
 800fabe:	4a1d      	ldr	r2, [pc, #116]	; (800fb34 <xPortStartScheduler+0x134>)
 800fac0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fac2:	4b1c      	ldr	r3, [pc, #112]	; (800fb34 <xPortStartScheduler+0x134>)
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800faca:	4a1a      	ldr	r2, [pc, #104]	; (800fb34 <xPortStartScheduler+0x134>)
 800facc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fad6:	4b18      	ldr	r3, [pc, #96]	; (800fb38 <xPortStartScheduler+0x138>)
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a17      	ldr	r2, [pc, #92]	; (800fb38 <xPortStartScheduler+0x138>)
 800fadc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fae0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fae2:	4b15      	ldr	r3, [pc, #84]	; (800fb38 <xPortStartScheduler+0x138>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4a14      	ldr	r2, [pc, #80]	; (800fb38 <xPortStartScheduler+0x138>)
 800fae8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800faec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800faee:	f000 f8dd 	bl	800fcac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800faf2:	4b12      	ldr	r3, [pc, #72]	; (800fb3c <xPortStartScheduler+0x13c>)
 800faf4:	2200      	movs	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800faf8:	f000 f8fc 	bl	800fcf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fafc:	4b10      	ldr	r3, [pc, #64]	; (800fb40 <xPortStartScheduler+0x140>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	4a0f      	ldr	r2, [pc, #60]	; (800fb40 <xPortStartScheduler+0x140>)
 800fb02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fb06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb08:	f7ff ff66 	bl	800f9d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb0c:	f7ff fcd0 	bl	800f4b0 <vTaskSwitchContext>
	prvTaskExitError();
 800fb10:	f7ff ff1e 	bl	800f950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3718      	adds	r7, #24
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
 800fb1e:	bf00      	nop
 800fb20:	e000ed00 	.word	0xe000ed00
 800fb24:	410fc271 	.word	0x410fc271
 800fb28:	410fc270 	.word	0x410fc270
 800fb2c:	e000e400 	.word	0xe000e400
 800fb30:	20000a40 	.word	0x20000a40
 800fb34:	20000a44 	.word	0x20000a44
 800fb38:	e000ed20 	.word	0xe000ed20
 800fb3c:	20000300 	.word	0x20000300
 800fb40:	e000ef34 	.word	0xe000ef34

0800fb44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fb44:	b480      	push	{r7}
 800fb46:	b083      	sub	sp, #12
 800fb48:	af00      	add	r7, sp, #0
	__asm volatile
 800fb4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb4e:	f383 8811 	msr	BASEPRI, r3
 800fb52:	f3bf 8f6f 	isb	sy
 800fb56:	f3bf 8f4f 	dsb	sy
 800fb5a:	607b      	str	r3, [r7, #4]
}
 800fb5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fb5e:	4b0f      	ldr	r3, [pc, #60]	; (800fb9c <vPortEnterCritical+0x58>)
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	3301      	adds	r3, #1
 800fb64:	4a0d      	ldr	r2, [pc, #52]	; (800fb9c <vPortEnterCritical+0x58>)
 800fb66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fb68:	4b0c      	ldr	r3, [pc, #48]	; (800fb9c <vPortEnterCritical+0x58>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	2b01      	cmp	r3, #1
 800fb6e:	d10f      	bne.n	800fb90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fb70:	4b0b      	ldr	r3, [pc, #44]	; (800fba0 <vPortEnterCritical+0x5c>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	b2db      	uxtb	r3, r3
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00a      	beq.n	800fb90 <vPortEnterCritical+0x4c>
	__asm volatile
 800fb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb7e:	f383 8811 	msr	BASEPRI, r3
 800fb82:	f3bf 8f6f 	isb	sy
 800fb86:	f3bf 8f4f 	dsb	sy
 800fb8a:	603b      	str	r3, [r7, #0]
}
 800fb8c:	bf00      	nop
 800fb8e:	e7fe      	b.n	800fb8e <vPortEnterCritical+0x4a>
	}
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	20000300 	.word	0x20000300
 800fba0:	e000ed04 	.word	0xe000ed04

0800fba4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fbaa:	4b12      	ldr	r3, [pc, #72]	; (800fbf4 <vPortExitCritical+0x50>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d10a      	bne.n	800fbc8 <vPortExitCritical+0x24>
	__asm volatile
 800fbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb6:	f383 8811 	msr	BASEPRI, r3
 800fbba:	f3bf 8f6f 	isb	sy
 800fbbe:	f3bf 8f4f 	dsb	sy
 800fbc2:	607b      	str	r3, [r7, #4]
}
 800fbc4:	bf00      	nop
 800fbc6:	e7fe      	b.n	800fbc6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fbc8:	4b0a      	ldr	r3, [pc, #40]	; (800fbf4 <vPortExitCritical+0x50>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	3b01      	subs	r3, #1
 800fbce:	4a09      	ldr	r2, [pc, #36]	; (800fbf4 <vPortExitCritical+0x50>)
 800fbd0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fbd2:	4b08      	ldr	r3, [pc, #32]	; (800fbf4 <vPortExitCritical+0x50>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d105      	bne.n	800fbe6 <vPortExitCritical+0x42>
 800fbda:	2300      	movs	r3, #0
 800fbdc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fbe4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fbe6:	bf00      	nop
 800fbe8:	370c      	adds	r7, #12
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	20000300 	.word	0x20000300
	...

0800fc00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc00:	f3ef 8009 	mrs	r0, PSP
 800fc04:	f3bf 8f6f 	isb	sy
 800fc08:	4b15      	ldr	r3, [pc, #84]	; (800fc60 <pxCurrentTCBConst>)
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	f01e 0f10 	tst.w	lr, #16
 800fc10:	bf08      	it	eq
 800fc12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc1a:	6010      	str	r0, [r2, #0]
 800fc1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fc20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fc24:	f380 8811 	msr	BASEPRI, r0
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	f3bf 8f6f 	isb	sy
 800fc30:	f7ff fc3e 	bl	800f4b0 <vTaskSwitchContext>
 800fc34:	f04f 0000 	mov.w	r0, #0
 800fc38:	f380 8811 	msr	BASEPRI, r0
 800fc3c:	bc09      	pop	{r0, r3}
 800fc3e:	6819      	ldr	r1, [r3, #0]
 800fc40:	6808      	ldr	r0, [r1, #0]
 800fc42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc46:	f01e 0f10 	tst.w	lr, #16
 800fc4a:	bf08      	it	eq
 800fc4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fc50:	f380 8809 	msr	PSP, r0
 800fc54:	f3bf 8f6f 	isb	sy
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	f3af 8000 	nop.w

0800fc60 <pxCurrentTCBConst>:
 800fc60:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fc64:	bf00      	nop
 800fc66:	bf00      	nop

0800fc68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
	__asm volatile
 800fc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc72:	f383 8811 	msr	BASEPRI, r3
 800fc76:	f3bf 8f6f 	isb	sy
 800fc7a:	f3bf 8f4f 	dsb	sy
 800fc7e:	607b      	str	r3, [r7, #4]
}
 800fc80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fc82:	f7ff fb5d 	bl	800f340 <xTaskIncrementTick>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d003      	beq.n	800fc94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fc8c:	4b06      	ldr	r3, [pc, #24]	; (800fca8 <xPortSysTickHandler+0x40>)
 800fc8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc92:	601a      	str	r2, [r3, #0]
 800fc94:	2300      	movs	r3, #0
 800fc96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	f383 8811 	msr	BASEPRI, r3
}
 800fc9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fca0:	bf00      	nop
 800fca2:	3708      	adds	r7, #8
 800fca4:	46bd      	mov	sp, r7
 800fca6:	bd80      	pop	{r7, pc}
 800fca8:	e000ed04 	.word	0xe000ed04

0800fcac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fcac:	b480      	push	{r7}
 800fcae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fcb0:	4b0b      	ldr	r3, [pc, #44]	; (800fce0 <vPortSetupTimerInterrupt+0x34>)
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fcb6:	4b0b      	ldr	r3, [pc, #44]	; (800fce4 <vPortSetupTimerInterrupt+0x38>)
 800fcb8:	2200      	movs	r2, #0
 800fcba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fcbc:	4b0a      	ldr	r3, [pc, #40]	; (800fce8 <vPortSetupTimerInterrupt+0x3c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a0a      	ldr	r2, [pc, #40]	; (800fcec <vPortSetupTimerInterrupt+0x40>)
 800fcc2:	fba2 2303 	umull	r2, r3, r2, r3
 800fcc6:	099b      	lsrs	r3, r3, #6
 800fcc8:	4a09      	ldr	r2, [pc, #36]	; (800fcf0 <vPortSetupTimerInterrupt+0x44>)
 800fcca:	3b01      	subs	r3, #1
 800fccc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fcce:	4b04      	ldr	r3, [pc, #16]	; (800fce0 <vPortSetupTimerInterrupt+0x34>)
 800fcd0:	2207      	movs	r2, #7
 800fcd2:	601a      	str	r2, [r3, #0]
}
 800fcd4:	bf00      	nop
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	bf00      	nop
 800fce0:	e000e010 	.word	0xe000e010
 800fce4:	e000e018 	.word	0xe000e018
 800fce8:	200002f4 	.word	0x200002f4
 800fcec:	10624dd3 	.word	0x10624dd3
 800fcf0:	e000e014 	.word	0xe000e014

0800fcf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fcf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fd04 <vPortEnableVFP+0x10>
 800fcf8:	6801      	ldr	r1, [r0, #0]
 800fcfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fcfe:	6001      	str	r1, [r0, #0]
 800fd00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd02:	bf00      	nop
 800fd04:	e000ed88 	.word	0xe000ed88

0800fd08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b08a      	sub	sp, #40	; 0x28
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fd10:	2300      	movs	r3, #0
 800fd12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fd14:	f7ff fa5a 	bl	800f1cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fd18:	4b5b      	ldr	r3, [pc, #364]	; (800fe88 <pvPortMalloc+0x180>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d101      	bne.n	800fd24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fd20:	f000 f920 	bl	800ff64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fd24:	4b59      	ldr	r3, [pc, #356]	; (800fe8c <pvPortMalloc+0x184>)
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	4013      	ands	r3, r2
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f040 8093 	bne.w	800fe58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d01d      	beq.n	800fd74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fd38:	2208      	movs	r2, #8
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f003 0307 	and.w	r3, r3, #7
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d014      	beq.n	800fd74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f023 0307 	bic.w	r3, r3, #7
 800fd50:	3308      	adds	r3, #8
 800fd52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f003 0307 	and.w	r3, r3, #7
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00a      	beq.n	800fd74 <pvPortMalloc+0x6c>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	617b      	str	r3, [r7, #20]
}
 800fd70:	bf00      	nop
 800fd72:	e7fe      	b.n	800fd72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d06e      	beq.n	800fe58 <pvPortMalloc+0x150>
 800fd7a:	4b45      	ldr	r3, [pc, #276]	; (800fe90 <pvPortMalloc+0x188>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	687a      	ldr	r2, [r7, #4]
 800fd80:	429a      	cmp	r2, r3
 800fd82:	d869      	bhi.n	800fe58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fd84:	4b43      	ldr	r3, [pc, #268]	; (800fe94 <pvPortMalloc+0x18c>)
 800fd86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fd88:	4b42      	ldr	r3, [pc, #264]	; (800fe94 <pvPortMalloc+0x18c>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd8e:	e004      	b.n	800fd9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d903      	bls.n	800fdac <pvPortMalloc+0xa4>
 800fda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d1f1      	bne.n	800fd90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fdac:	4b36      	ldr	r3, [pc, #216]	; (800fe88 <pvPortMalloc+0x180>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d050      	beq.n	800fe58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fdb6:	6a3b      	ldr	r3, [r7, #32]
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2208      	movs	r2, #8
 800fdbc:	4413      	add	r3, r2
 800fdbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	1ad2      	subs	r2, r2, r3
 800fdd0:	2308      	movs	r3, #8
 800fdd2:	005b      	lsls	r3, r3, #1
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d91f      	bls.n	800fe18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fdd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4413      	add	r3, r2
 800fdde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	f003 0307 	and.w	r3, r3, #7
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d00a      	beq.n	800fe00 <pvPortMalloc+0xf8>
	__asm volatile
 800fdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdee:	f383 8811 	msr	BASEPRI, r3
 800fdf2:	f3bf 8f6f 	isb	sy
 800fdf6:	f3bf 8f4f 	dsb	sy
 800fdfa:	613b      	str	r3, [r7, #16]
}
 800fdfc:	bf00      	nop
 800fdfe:	e7fe      	b.n	800fdfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fe00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe02:	685a      	ldr	r2, [r3, #4]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	1ad2      	subs	r2, r2, r3
 800fe08:	69bb      	ldr	r3, [r7, #24]
 800fe0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fe0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fe12:	69b8      	ldr	r0, [r7, #24]
 800fe14:	f000 f908 	bl	8010028 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fe18:	4b1d      	ldr	r3, [pc, #116]	; (800fe90 <pvPortMalloc+0x188>)
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	4a1b      	ldr	r2, [pc, #108]	; (800fe90 <pvPortMalloc+0x188>)
 800fe24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fe26:	4b1a      	ldr	r3, [pc, #104]	; (800fe90 <pvPortMalloc+0x188>)
 800fe28:	681a      	ldr	r2, [r3, #0]
 800fe2a:	4b1b      	ldr	r3, [pc, #108]	; (800fe98 <pvPortMalloc+0x190>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d203      	bcs.n	800fe3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fe32:	4b17      	ldr	r3, [pc, #92]	; (800fe90 <pvPortMalloc+0x188>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	4a18      	ldr	r2, [pc, #96]	; (800fe98 <pvPortMalloc+0x190>)
 800fe38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fe3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3c:	685a      	ldr	r2, [r3, #4]
 800fe3e:	4b13      	ldr	r3, [pc, #76]	; (800fe8c <pvPortMalloc+0x184>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	431a      	orrs	r2, r3
 800fe44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fe48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fe4e:	4b13      	ldr	r3, [pc, #76]	; (800fe9c <pvPortMalloc+0x194>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	3301      	adds	r3, #1
 800fe54:	4a11      	ldr	r2, [pc, #68]	; (800fe9c <pvPortMalloc+0x194>)
 800fe56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fe58:	f7ff f9c6 	bl	800f1e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	f003 0307 	and.w	r3, r3, #7
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d00a      	beq.n	800fe7c <pvPortMalloc+0x174>
	__asm volatile
 800fe66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe6a:	f383 8811 	msr	BASEPRI, r3
 800fe6e:	f3bf 8f6f 	isb	sy
 800fe72:	f3bf 8f4f 	dsb	sy
 800fe76:	60fb      	str	r3, [r7, #12]
}
 800fe78:	bf00      	nop
 800fe7a:	e7fe      	b.n	800fe7a <pvPortMalloc+0x172>
	return pvReturn;
 800fe7c:	69fb      	ldr	r3, [r7, #28]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3728      	adds	r7, #40	; 0x28
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	20004650 	.word	0x20004650
 800fe8c:	20004664 	.word	0x20004664
 800fe90:	20004654 	.word	0x20004654
 800fe94:	20004648 	.word	0x20004648
 800fe98:	20004658 	.word	0x20004658
 800fe9c:	2000465c 	.word	0x2000465c

0800fea0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b086      	sub	sp, #24
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d04d      	beq.n	800ff4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800feb2:	2308      	movs	r3, #8
 800feb4:	425b      	negs	r3, r3
 800feb6:	697a      	ldr	r2, [r7, #20]
 800feb8:	4413      	add	r3, r2
 800feba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800febc:	697b      	ldr	r3, [r7, #20]
 800febe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	685a      	ldr	r2, [r3, #4]
 800fec4:	4b24      	ldr	r3, [pc, #144]	; (800ff58 <vPortFree+0xb8>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	4013      	ands	r3, r2
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d10a      	bne.n	800fee4 <vPortFree+0x44>
	__asm volatile
 800fece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fed2:	f383 8811 	msr	BASEPRI, r3
 800fed6:	f3bf 8f6f 	isb	sy
 800feda:	f3bf 8f4f 	dsb	sy
 800fede:	60fb      	str	r3, [r7, #12]
}
 800fee0:	bf00      	nop
 800fee2:	e7fe      	b.n	800fee2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fee4:	693b      	ldr	r3, [r7, #16]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d00a      	beq.n	800ff02 <vPortFree+0x62>
	__asm volatile
 800feec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef0:	f383 8811 	msr	BASEPRI, r3
 800fef4:	f3bf 8f6f 	isb	sy
 800fef8:	f3bf 8f4f 	dsb	sy
 800fefc:	60bb      	str	r3, [r7, #8]
}
 800fefe:	bf00      	nop
 800ff00:	e7fe      	b.n	800ff00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	685a      	ldr	r2, [r3, #4]
 800ff06:	4b14      	ldr	r3, [pc, #80]	; (800ff58 <vPortFree+0xb8>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	4013      	ands	r3, r2
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d01e      	beq.n	800ff4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d11a      	bne.n	800ff4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	685a      	ldr	r2, [r3, #4]
 800ff1c:	4b0e      	ldr	r3, [pc, #56]	; (800ff58 <vPortFree+0xb8>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	43db      	mvns	r3, r3
 800ff22:	401a      	ands	r2, r3
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ff28:	f7ff f950 	bl	800f1cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	685a      	ldr	r2, [r3, #4]
 800ff30:	4b0a      	ldr	r3, [pc, #40]	; (800ff5c <vPortFree+0xbc>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	4413      	add	r3, r2
 800ff36:	4a09      	ldr	r2, [pc, #36]	; (800ff5c <vPortFree+0xbc>)
 800ff38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ff3a:	6938      	ldr	r0, [r7, #16]
 800ff3c:	f000 f874 	bl	8010028 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ff40:	4b07      	ldr	r3, [pc, #28]	; (800ff60 <vPortFree+0xc0>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	3301      	adds	r3, #1
 800ff46:	4a06      	ldr	r2, [pc, #24]	; (800ff60 <vPortFree+0xc0>)
 800ff48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ff4a:	f7ff f94d 	bl	800f1e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ff4e:	bf00      	nop
 800ff50:	3718      	adds	r7, #24
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	20004664 	.word	0x20004664
 800ff5c:	20004654 	.word	0x20004654
 800ff60:	20004660 	.word	0x20004660

0800ff64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ff64:	b480      	push	{r7}
 800ff66:	b085      	sub	sp, #20
 800ff68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ff6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ff6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ff70:	4b27      	ldr	r3, [pc, #156]	; (8010010 <prvHeapInit+0xac>)
 800ff72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	f003 0307 	and.w	r3, r3, #7
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d00c      	beq.n	800ff98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	3307      	adds	r3, #7
 800ff82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	f023 0307 	bic.w	r3, r3, #7
 800ff8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ff8c:	68ba      	ldr	r2, [r7, #8]
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	1ad3      	subs	r3, r2, r3
 800ff92:	4a1f      	ldr	r2, [pc, #124]	; (8010010 <prvHeapInit+0xac>)
 800ff94:	4413      	add	r3, r2
 800ff96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ff9c:	4a1d      	ldr	r2, [pc, #116]	; (8010014 <prvHeapInit+0xb0>)
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ffa2:	4b1c      	ldr	r3, [pc, #112]	; (8010014 <prvHeapInit+0xb0>)
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	4413      	add	r3, r2
 800ffae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ffb0:	2208      	movs	r2, #8
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	1a9b      	subs	r3, r3, r2
 800ffb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	f023 0307 	bic.w	r3, r3, #7
 800ffbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	4a15      	ldr	r2, [pc, #84]	; (8010018 <prvHeapInit+0xb4>)
 800ffc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ffc6:	4b14      	ldr	r3, [pc, #80]	; (8010018 <prvHeapInit+0xb4>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ffce:	4b12      	ldr	r3, [pc, #72]	; (8010018 <prvHeapInit+0xb4>)
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	68fa      	ldr	r2, [r7, #12]
 800ffde:	1ad2      	subs	r2, r2, r3
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ffe4:	4b0c      	ldr	r3, [pc, #48]	; (8010018 <prvHeapInit+0xb4>)
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	685b      	ldr	r3, [r3, #4]
 800fff0:	4a0a      	ldr	r2, [pc, #40]	; (801001c <prvHeapInit+0xb8>)
 800fff2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	4a09      	ldr	r2, [pc, #36]	; (8010020 <prvHeapInit+0xbc>)
 800fffa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800fffc:	4b09      	ldr	r3, [pc, #36]	; (8010024 <prvHeapInit+0xc0>)
 800fffe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010002:	601a      	str	r2, [r3, #0]
}
 8010004:	bf00      	nop
 8010006:	3714      	adds	r7, #20
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr
 8010010:	20000a48 	.word	0x20000a48
 8010014:	20004648 	.word	0x20004648
 8010018:	20004650 	.word	0x20004650
 801001c:	20004658 	.word	0x20004658
 8010020:	20004654 	.word	0x20004654
 8010024:	20004664 	.word	0x20004664

08010028 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010028:	b480      	push	{r7}
 801002a:	b085      	sub	sp, #20
 801002c:	af00      	add	r7, sp, #0
 801002e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010030:	4b28      	ldr	r3, [pc, #160]	; (80100d4 <prvInsertBlockIntoFreeList+0xac>)
 8010032:	60fb      	str	r3, [r7, #12]
 8010034:	e002      	b.n	801003c <prvInsertBlockIntoFreeList+0x14>
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	60fb      	str	r3, [r7, #12]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	687a      	ldr	r2, [r7, #4]
 8010042:	429a      	cmp	r2, r3
 8010044:	d8f7      	bhi.n	8010036 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	685b      	ldr	r3, [r3, #4]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	4413      	add	r3, r2
 8010052:	687a      	ldr	r2, [r7, #4]
 8010054:	429a      	cmp	r2, r3
 8010056:	d108      	bne.n	801006a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	685a      	ldr	r2, [r3, #4]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	441a      	add	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	68ba      	ldr	r2, [r7, #8]
 8010074:	441a      	add	r2, r3
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	429a      	cmp	r2, r3
 801007c:	d118      	bne.n	80100b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	681a      	ldr	r2, [r3, #0]
 8010082:	4b15      	ldr	r3, [pc, #84]	; (80100d8 <prvInsertBlockIntoFreeList+0xb0>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	429a      	cmp	r2, r3
 8010088:	d00d      	beq.n	80100a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	685a      	ldr	r2, [r3, #4]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	441a      	add	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	601a      	str	r2, [r3, #0]
 80100a4:	e008      	b.n	80100b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80100a6:	4b0c      	ldr	r3, [pc, #48]	; (80100d8 <prvInsertBlockIntoFreeList+0xb0>)
 80100a8:	681a      	ldr	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	601a      	str	r2, [r3, #0]
 80100ae:	e003      	b.n	80100b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	681a      	ldr	r2, [r3, #0]
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80100b8:	68fa      	ldr	r2, [r7, #12]
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d002      	beq.n	80100c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80100c6:	bf00      	nop
 80100c8:	3714      	adds	r7, #20
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop
 80100d4:	20004648 	.word	0x20004648
 80100d8:	20004650 	.word	0x20004650

080100dc <arm_sin_f32>:
 80100dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80100e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e4:	d42c      	bmi.n	8010140 <arm_sin_f32+0x64>
 80100e6:	eddf 7a20 	vldr	s15, [pc, #128]	; 8010168 <arm_sin_f32+0x8c>
 80100ea:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80100f2:	d432      	bmi.n	801015a <arm_sin_f32+0x7e>
 80100f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100f8:	eddf 6a1c 	vldr	s13, [pc, #112]	; 801016c <arm_sin_f32+0x90>
 80100fc:	4a1c      	ldr	r2, [pc, #112]	; (8010170 <arm_sin_f32+0x94>)
 80100fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010102:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010106:	ee20 0a26 	vmul.f32	s0, s0, s13
 801010a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801010e:	ee17 3a90 	vmov	r3, s15
 8010112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010116:	ee07 3a90 	vmov	s15, r3
 801011a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801011e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8010122:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010126:	edd1 6a01 	vldr	s13, [r1, #4]
 801012a:	ed91 0a00 	vldr	s0, [r1]
 801012e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010132:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010136:	ee27 0a00 	vmul.f32	s0, s14, s0
 801013a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801013e:	4770      	bx	lr
 8010140:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8010174 <arm_sin_f32+0x98>
 8010144:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801014c:	da0b      	bge.n	8010166 <arm_sin_f32+0x8a>
 801014e:	eddf 7a06 	vldr	s15, [pc, #24]	; 8010168 <arm_sin_f32+0x8c>
 8010152:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010156:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801015a:	ee17 3a90 	vmov	r3, s15
 801015e:	3b01      	subs	r3, #1
 8010160:	ee07 3a90 	vmov	s15, r3
 8010164:	e7c6      	b.n	80100f4 <arm_sin_f32+0x18>
 8010166:	4770      	bx	lr
 8010168:	3e22f983 	.word	0x3e22f983
 801016c:	44000000 	.word	0x44000000
 8010170:	08013a30 	.word	0x08013a30
 8010174:	b44c02cd 	.word	0xb44c02cd

08010178 <arm_cos_f32>:
 8010178:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80101ec <arm_cos_f32+0x74>
 801017c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010180:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8010184:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010188:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801018c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010190:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010194:	d504      	bpl.n	80101a0 <arm_cos_f32+0x28>
 8010196:	ee17 3a90 	vmov	r3, s15
 801019a:	3b01      	subs	r3, #1
 801019c:	ee07 3a90 	vmov	s15, r3
 80101a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101a4:	eddf 6a12 	vldr	s13, [pc, #72]	; 80101f0 <arm_cos_f32+0x78>
 80101a8:	4a12      	ldr	r2, [pc, #72]	; (80101f4 <arm_cos_f32+0x7c>)
 80101aa:	ee30 0a67 	vsub.f32	s0, s0, s15
 80101ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80101b2:	ee20 0a26 	vmul.f32	s0, s0, s13
 80101b6:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80101ba:	ee17 3a90 	vmov	r3, s15
 80101be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101c2:	ee07 3a90 	vmov	s15, r3
 80101c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80101ca:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80101ce:	ee70 7a67 	vsub.f32	s15, s0, s15
 80101d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80101d6:	ed91 0a00 	vldr	s0, [r1]
 80101da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80101de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80101e2:	ee27 0a00 	vmul.f32	s0, s14, s0
 80101e6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80101ea:	4770      	bx	lr
 80101ec:	3e22f983 	.word	0x3e22f983
 80101f0:	44000000 	.word	0x44000000
 80101f4:	08013a30 	.word	0x08013a30

080101f8 <__assert_func>:
 80101f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80101fa:	4614      	mov	r4, r2
 80101fc:	461a      	mov	r2, r3
 80101fe:	4b09      	ldr	r3, [pc, #36]	; (8010224 <__assert_func+0x2c>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4605      	mov	r5, r0
 8010204:	68d8      	ldr	r0, [r3, #12]
 8010206:	b14c      	cbz	r4, 801021c <__assert_func+0x24>
 8010208:	4b07      	ldr	r3, [pc, #28]	; (8010228 <__assert_func+0x30>)
 801020a:	9100      	str	r1, [sp, #0]
 801020c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010210:	4906      	ldr	r1, [pc, #24]	; (801022c <__assert_func+0x34>)
 8010212:	462b      	mov	r3, r5
 8010214:	f000 f814 	bl	8010240 <fiprintf>
 8010218:	f000 fee2 	bl	8010fe0 <abort>
 801021c:	4b04      	ldr	r3, [pc, #16]	; (8010230 <__assert_func+0x38>)
 801021e:	461c      	mov	r4, r3
 8010220:	e7f3      	b.n	801020a <__assert_func+0x12>
 8010222:	bf00      	nop
 8010224:	20000304 	.word	0x20000304
 8010228:	08014234 	.word	0x08014234
 801022c:	08014241 	.word	0x08014241
 8010230:	0801426f 	.word	0x0801426f

08010234 <__errno>:
 8010234:	4b01      	ldr	r3, [pc, #4]	; (801023c <__errno+0x8>)
 8010236:	6818      	ldr	r0, [r3, #0]
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop
 801023c:	20000304 	.word	0x20000304

08010240 <fiprintf>:
 8010240:	b40e      	push	{r1, r2, r3}
 8010242:	b503      	push	{r0, r1, lr}
 8010244:	4601      	mov	r1, r0
 8010246:	ab03      	add	r3, sp, #12
 8010248:	4805      	ldr	r0, [pc, #20]	; (8010260 <fiprintf+0x20>)
 801024a:	f853 2b04 	ldr.w	r2, [r3], #4
 801024e:	6800      	ldr	r0, [r0, #0]
 8010250:	9301      	str	r3, [sp, #4]
 8010252:	f000 f86b 	bl	801032c <_vfiprintf_r>
 8010256:	b002      	add	sp, #8
 8010258:	f85d eb04 	ldr.w	lr, [sp], #4
 801025c:	b003      	add	sp, #12
 801025e:	4770      	bx	lr
 8010260:	20000304 	.word	0x20000304

08010264 <__libc_init_array>:
 8010264:	b570      	push	{r4, r5, r6, lr}
 8010266:	4d0d      	ldr	r5, [pc, #52]	; (801029c <__libc_init_array+0x38>)
 8010268:	4c0d      	ldr	r4, [pc, #52]	; (80102a0 <__libc_init_array+0x3c>)
 801026a:	1b64      	subs	r4, r4, r5
 801026c:	10a4      	asrs	r4, r4, #2
 801026e:	2600      	movs	r6, #0
 8010270:	42a6      	cmp	r6, r4
 8010272:	d109      	bne.n	8010288 <__libc_init_array+0x24>
 8010274:	4d0b      	ldr	r5, [pc, #44]	; (80102a4 <__libc_init_array+0x40>)
 8010276:	4c0c      	ldr	r4, [pc, #48]	; (80102a8 <__libc_init_array+0x44>)
 8010278:	f003 fa7a 	bl	8013770 <_init>
 801027c:	1b64      	subs	r4, r4, r5
 801027e:	10a4      	asrs	r4, r4, #2
 8010280:	2600      	movs	r6, #0
 8010282:	42a6      	cmp	r6, r4
 8010284:	d105      	bne.n	8010292 <__libc_init_array+0x2e>
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	f855 3b04 	ldr.w	r3, [r5], #4
 801028c:	4798      	blx	r3
 801028e:	3601      	adds	r6, #1
 8010290:	e7ee      	b.n	8010270 <__libc_init_array+0xc>
 8010292:	f855 3b04 	ldr.w	r3, [r5], #4
 8010296:	4798      	blx	r3
 8010298:	3601      	adds	r6, #1
 801029a:	e7f2      	b.n	8010282 <__libc_init_array+0x1e>
 801029c:	08014690 	.word	0x08014690
 80102a0:	08014690 	.word	0x08014690
 80102a4:	08014690 	.word	0x08014690
 80102a8:	08014694 	.word	0x08014694

080102ac <memcpy>:
 80102ac:	440a      	add	r2, r1
 80102ae:	4291      	cmp	r1, r2
 80102b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80102b4:	d100      	bne.n	80102b8 <memcpy+0xc>
 80102b6:	4770      	bx	lr
 80102b8:	b510      	push	{r4, lr}
 80102ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102c2:	4291      	cmp	r1, r2
 80102c4:	d1f9      	bne.n	80102ba <memcpy+0xe>
 80102c6:	bd10      	pop	{r4, pc}

080102c8 <memset>:
 80102c8:	4402      	add	r2, r0
 80102ca:	4603      	mov	r3, r0
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d100      	bne.n	80102d2 <memset+0xa>
 80102d0:	4770      	bx	lr
 80102d2:	f803 1b01 	strb.w	r1, [r3], #1
 80102d6:	e7f9      	b.n	80102cc <memset+0x4>

080102d8 <__sfputc_r>:
 80102d8:	6893      	ldr	r3, [r2, #8]
 80102da:	3b01      	subs	r3, #1
 80102dc:	2b00      	cmp	r3, #0
 80102de:	b410      	push	{r4}
 80102e0:	6093      	str	r3, [r2, #8]
 80102e2:	da08      	bge.n	80102f6 <__sfputc_r+0x1e>
 80102e4:	6994      	ldr	r4, [r2, #24]
 80102e6:	42a3      	cmp	r3, r4
 80102e8:	db01      	blt.n	80102ee <__sfputc_r+0x16>
 80102ea:	290a      	cmp	r1, #10
 80102ec:	d103      	bne.n	80102f6 <__sfputc_r+0x1e>
 80102ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80102f2:	f000 bdb5 	b.w	8010e60 <__swbuf_r>
 80102f6:	6813      	ldr	r3, [r2, #0]
 80102f8:	1c58      	adds	r0, r3, #1
 80102fa:	6010      	str	r0, [r2, #0]
 80102fc:	7019      	strb	r1, [r3, #0]
 80102fe:	4608      	mov	r0, r1
 8010300:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010304:	4770      	bx	lr

08010306 <__sfputs_r>:
 8010306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010308:	4606      	mov	r6, r0
 801030a:	460f      	mov	r7, r1
 801030c:	4614      	mov	r4, r2
 801030e:	18d5      	adds	r5, r2, r3
 8010310:	42ac      	cmp	r4, r5
 8010312:	d101      	bne.n	8010318 <__sfputs_r+0x12>
 8010314:	2000      	movs	r0, #0
 8010316:	e007      	b.n	8010328 <__sfputs_r+0x22>
 8010318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801031c:	463a      	mov	r2, r7
 801031e:	4630      	mov	r0, r6
 8010320:	f7ff ffda 	bl	80102d8 <__sfputc_r>
 8010324:	1c43      	adds	r3, r0, #1
 8010326:	d1f3      	bne.n	8010310 <__sfputs_r+0xa>
 8010328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801032c <_vfiprintf_r>:
 801032c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010330:	460d      	mov	r5, r1
 8010332:	b09d      	sub	sp, #116	; 0x74
 8010334:	4614      	mov	r4, r2
 8010336:	4698      	mov	r8, r3
 8010338:	4606      	mov	r6, r0
 801033a:	b118      	cbz	r0, 8010344 <_vfiprintf_r+0x18>
 801033c:	6983      	ldr	r3, [r0, #24]
 801033e:	b90b      	cbnz	r3, 8010344 <_vfiprintf_r+0x18>
 8010340:	f001 fde8 	bl	8011f14 <__sinit>
 8010344:	4b89      	ldr	r3, [pc, #548]	; (801056c <_vfiprintf_r+0x240>)
 8010346:	429d      	cmp	r5, r3
 8010348:	d11b      	bne.n	8010382 <_vfiprintf_r+0x56>
 801034a:	6875      	ldr	r5, [r6, #4]
 801034c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801034e:	07d9      	lsls	r1, r3, #31
 8010350:	d405      	bmi.n	801035e <_vfiprintf_r+0x32>
 8010352:	89ab      	ldrh	r3, [r5, #12]
 8010354:	059a      	lsls	r2, r3, #22
 8010356:	d402      	bmi.n	801035e <_vfiprintf_r+0x32>
 8010358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801035a:	f001 fe7e 	bl	801205a <__retarget_lock_acquire_recursive>
 801035e:	89ab      	ldrh	r3, [r5, #12]
 8010360:	071b      	lsls	r3, r3, #28
 8010362:	d501      	bpl.n	8010368 <_vfiprintf_r+0x3c>
 8010364:	692b      	ldr	r3, [r5, #16]
 8010366:	b9eb      	cbnz	r3, 80103a4 <_vfiprintf_r+0x78>
 8010368:	4629      	mov	r1, r5
 801036a:	4630      	mov	r0, r6
 801036c:	f000 fdca 	bl	8010f04 <__swsetup_r>
 8010370:	b1c0      	cbz	r0, 80103a4 <_vfiprintf_r+0x78>
 8010372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010374:	07dc      	lsls	r4, r3, #31
 8010376:	d50e      	bpl.n	8010396 <_vfiprintf_r+0x6a>
 8010378:	f04f 30ff 	mov.w	r0, #4294967295
 801037c:	b01d      	add	sp, #116	; 0x74
 801037e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010382:	4b7b      	ldr	r3, [pc, #492]	; (8010570 <_vfiprintf_r+0x244>)
 8010384:	429d      	cmp	r5, r3
 8010386:	d101      	bne.n	801038c <_vfiprintf_r+0x60>
 8010388:	68b5      	ldr	r5, [r6, #8]
 801038a:	e7df      	b.n	801034c <_vfiprintf_r+0x20>
 801038c:	4b79      	ldr	r3, [pc, #484]	; (8010574 <_vfiprintf_r+0x248>)
 801038e:	429d      	cmp	r5, r3
 8010390:	bf08      	it	eq
 8010392:	68f5      	ldreq	r5, [r6, #12]
 8010394:	e7da      	b.n	801034c <_vfiprintf_r+0x20>
 8010396:	89ab      	ldrh	r3, [r5, #12]
 8010398:	0598      	lsls	r0, r3, #22
 801039a:	d4ed      	bmi.n	8010378 <_vfiprintf_r+0x4c>
 801039c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801039e:	f001 fe5d 	bl	801205c <__retarget_lock_release_recursive>
 80103a2:	e7e9      	b.n	8010378 <_vfiprintf_r+0x4c>
 80103a4:	2300      	movs	r3, #0
 80103a6:	9309      	str	r3, [sp, #36]	; 0x24
 80103a8:	2320      	movs	r3, #32
 80103aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80103b2:	2330      	movs	r3, #48	; 0x30
 80103b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010578 <_vfiprintf_r+0x24c>
 80103b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103bc:	f04f 0901 	mov.w	r9, #1
 80103c0:	4623      	mov	r3, r4
 80103c2:	469a      	mov	sl, r3
 80103c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103c8:	b10a      	cbz	r2, 80103ce <_vfiprintf_r+0xa2>
 80103ca:	2a25      	cmp	r2, #37	; 0x25
 80103cc:	d1f9      	bne.n	80103c2 <_vfiprintf_r+0x96>
 80103ce:	ebba 0b04 	subs.w	fp, sl, r4
 80103d2:	d00b      	beq.n	80103ec <_vfiprintf_r+0xc0>
 80103d4:	465b      	mov	r3, fp
 80103d6:	4622      	mov	r2, r4
 80103d8:	4629      	mov	r1, r5
 80103da:	4630      	mov	r0, r6
 80103dc:	f7ff ff93 	bl	8010306 <__sfputs_r>
 80103e0:	3001      	adds	r0, #1
 80103e2:	f000 80aa 	beq.w	801053a <_vfiprintf_r+0x20e>
 80103e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80103e8:	445a      	add	r2, fp
 80103ea:	9209      	str	r2, [sp, #36]	; 0x24
 80103ec:	f89a 3000 	ldrb.w	r3, [sl]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f000 80a2 	beq.w	801053a <_vfiprintf_r+0x20e>
 80103f6:	2300      	movs	r3, #0
 80103f8:	f04f 32ff 	mov.w	r2, #4294967295
 80103fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010400:	f10a 0a01 	add.w	sl, sl, #1
 8010404:	9304      	str	r3, [sp, #16]
 8010406:	9307      	str	r3, [sp, #28]
 8010408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801040c:	931a      	str	r3, [sp, #104]	; 0x68
 801040e:	4654      	mov	r4, sl
 8010410:	2205      	movs	r2, #5
 8010412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010416:	4858      	ldr	r0, [pc, #352]	; (8010578 <_vfiprintf_r+0x24c>)
 8010418:	f7ef fee2 	bl	80001e0 <memchr>
 801041c:	9a04      	ldr	r2, [sp, #16]
 801041e:	b9d8      	cbnz	r0, 8010458 <_vfiprintf_r+0x12c>
 8010420:	06d1      	lsls	r1, r2, #27
 8010422:	bf44      	itt	mi
 8010424:	2320      	movmi	r3, #32
 8010426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801042a:	0713      	lsls	r3, r2, #28
 801042c:	bf44      	itt	mi
 801042e:	232b      	movmi	r3, #43	; 0x2b
 8010430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010434:	f89a 3000 	ldrb.w	r3, [sl]
 8010438:	2b2a      	cmp	r3, #42	; 0x2a
 801043a:	d015      	beq.n	8010468 <_vfiprintf_r+0x13c>
 801043c:	9a07      	ldr	r2, [sp, #28]
 801043e:	4654      	mov	r4, sl
 8010440:	2000      	movs	r0, #0
 8010442:	f04f 0c0a 	mov.w	ip, #10
 8010446:	4621      	mov	r1, r4
 8010448:	f811 3b01 	ldrb.w	r3, [r1], #1
 801044c:	3b30      	subs	r3, #48	; 0x30
 801044e:	2b09      	cmp	r3, #9
 8010450:	d94e      	bls.n	80104f0 <_vfiprintf_r+0x1c4>
 8010452:	b1b0      	cbz	r0, 8010482 <_vfiprintf_r+0x156>
 8010454:	9207      	str	r2, [sp, #28]
 8010456:	e014      	b.n	8010482 <_vfiprintf_r+0x156>
 8010458:	eba0 0308 	sub.w	r3, r0, r8
 801045c:	fa09 f303 	lsl.w	r3, r9, r3
 8010460:	4313      	orrs	r3, r2
 8010462:	9304      	str	r3, [sp, #16]
 8010464:	46a2      	mov	sl, r4
 8010466:	e7d2      	b.n	801040e <_vfiprintf_r+0xe2>
 8010468:	9b03      	ldr	r3, [sp, #12]
 801046a:	1d19      	adds	r1, r3, #4
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	9103      	str	r1, [sp, #12]
 8010470:	2b00      	cmp	r3, #0
 8010472:	bfbb      	ittet	lt
 8010474:	425b      	neglt	r3, r3
 8010476:	f042 0202 	orrlt.w	r2, r2, #2
 801047a:	9307      	strge	r3, [sp, #28]
 801047c:	9307      	strlt	r3, [sp, #28]
 801047e:	bfb8      	it	lt
 8010480:	9204      	strlt	r2, [sp, #16]
 8010482:	7823      	ldrb	r3, [r4, #0]
 8010484:	2b2e      	cmp	r3, #46	; 0x2e
 8010486:	d10c      	bne.n	80104a2 <_vfiprintf_r+0x176>
 8010488:	7863      	ldrb	r3, [r4, #1]
 801048a:	2b2a      	cmp	r3, #42	; 0x2a
 801048c:	d135      	bne.n	80104fa <_vfiprintf_r+0x1ce>
 801048e:	9b03      	ldr	r3, [sp, #12]
 8010490:	1d1a      	adds	r2, r3, #4
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	9203      	str	r2, [sp, #12]
 8010496:	2b00      	cmp	r3, #0
 8010498:	bfb8      	it	lt
 801049a:	f04f 33ff 	movlt.w	r3, #4294967295
 801049e:	3402      	adds	r4, #2
 80104a0:	9305      	str	r3, [sp, #20]
 80104a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010588 <_vfiprintf_r+0x25c>
 80104a6:	7821      	ldrb	r1, [r4, #0]
 80104a8:	2203      	movs	r2, #3
 80104aa:	4650      	mov	r0, sl
 80104ac:	f7ef fe98 	bl	80001e0 <memchr>
 80104b0:	b140      	cbz	r0, 80104c4 <_vfiprintf_r+0x198>
 80104b2:	2340      	movs	r3, #64	; 0x40
 80104b4:	eba0 000a 	sub.w	r0, r0, sl
 80104b8:	fa03 f000 	lsl.w	r0, r3, r0
 80104bc:	9b04      	ldr	r3, [sp, #16]
 80104be:	4303      	orrs	r3, r0
 80104c0:	3401      	adds	r4, #1
 80104c2:	9304      	str	r3, [sp, #16]
 80104c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104c8:	482c      	ldr	r0, [pc, #176]	; (801057c <_vfiprintf_r+0x250>)
 80104ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80104ce:	2206      	movs	r2, #6
 80104d0:	f7ef fe86 	bl	80001e0 <memchr>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d03f      	beq.n	8010558 <_vfiprintf_r+0x22c>
 80104d8:	4b29      	ldr	r3, [pc, #164]	; (8010580 <_vfiprintf_r+0x254>)
 80104da:	bb1b      	cbnz	r3, 8010524 <_vfiprintf_r+0x1f8>
 80104dc:	9b03      	ldr	r3, [sp, #12]
 80104de:	3307      	adds	r3, #7
 80104e0:	f023 0307 	bic.w	r3, r3, #7
 80104e4:	3308      	adds	r3, #8
 80104e6:	9303      	str	r3, [sp, #12]
 80104e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104ea:	443b      	add	r3, r7
 80104ec:	9309      	str	r3, [sp, #36]	; 0x24
 80104ee:	e767      	b.n	80103c0 <_vfiprintf_r+0x94>
 80104f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80104f4:	460c      	mov	r4, r1
 80104f6:	2001      	movs	r0, #1
 80104f8:	e7a5      	b.n	8010446 <_vfiprintf_r+0x11a>
 80104fa:	2300      	movs	r3, #0
 80104fc:	3401      	adds	r4, #1
 80104fe:	9305      	str	r3, [sp, #20]
 8010500:	4619      	mov	r1, r3
 8010502:	f04f 0c0a 	mov.w	ip, #10
 8010506:	4620      	mov	r0, r4
 8010508:	f810 2b01 	ldrb.w	r2, [r0], #1
 801050c:	3a30      	subs	r2, #48	; 0x30
 801050e:	2a09      	cmp	r2, #9
 8010510:	d903      	bls.n	801051a <_vfiprintf_r+0x1ee>
 8010512:	2b00      	cmp	r3, #0
 8010514:	d0c5      	beq.n	80104a2 <_vfiprintf_r+0x176>
 8010516:	9105      	str	r1, [sp, #20]
 8010518:	e7c3      	b.n	80104a2 <_vfiprintf_r+0x176>
 801051a:	fb0c 2101 	mla	r1, ip, r1, r2
 801051e:	4604      	mov	r4, r0
 8010520:	2301      	movs	r3, #1
 8010522:	e7f0      	b.n	8010506 <_vfiprintf_r+0x1da>
 8010524:	ab03      	add	r3, sp, #12
 8010526:	9300      	str	r3, [sp, #0]
 8010528:	462a      	mov	r2, r5
 801052a:	4b16      	ldr	r3, [pc, #88]	; (8010584 <_vfiprintf_r+0x258>)
 801052c:	a904      	add	r1, sp, #16
 801052e:	4630      	mov	r0, r6
 8010530:	f000 f8cc 	bl	80106cc <_printf_float>
 8010534:	4607      	mov	r7, r0
 8010536:	1c78      	adds	r0, r7, #1
 8010538:	d1d6      	bne.n	80104e8 <_vfiprintf_r+0x1bc>
 801053a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801053c:	07d9      	lsls	r1, r3, #31
 801053e:	d405      	bmi.n	801054c <_vfiprintf_r+0x220>
 8010540:	89ab      	ldrh	r3, [r5, #12]
 8010542:	059a      	lsls	r2, r3, #22
 8010544:	d402      	bmi.n	801054c <_vfiprintf_r+0x220>
 8010546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010548:	f001 fd88 	bl	801205c <__retarget_lock_release_recursive>
 801054c:	89ab      	ldrh	r3, [r5, #12]
 801054e:	065b      	lsls	r3, r3, #25
 8010550:	f53f af12 	bmi.w	8010378 <_vfiprintf_r+0x4c>
 8010554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010556:	e711      	b.n	801037c <_vfiprintf_r+0x50>
 8010558:	ab03      	add	r3, sp, #12
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	462a      	mov	r2, r5
 801055e:	4b09      	ldr	r3, [pc, #36]	; (8010584 <_vfiprintf_r+0x258>)
 8010560:	a904      	add	r1, sp, #16
 8010562:	4630      	mov	r0, r6
 8010564:	f000 fb56 	bl	8010c14 <_printf_i>
 8010568:	e7e4      	b.n	8010534 <_vfiprintf_r+0x208>
 801056a:	bf00      	nop
 801056c:	08014370 	.word	0x08014370
 8010570:	08014390 	.word	0x08014390
 8010574:	08014350 	.word	0x08014350
 8010578:	08014274 	.word	0x08014274
 801057c:	0801427e 	.word	0x0801427e
 8010580:	080106cd 	.word	0x080106cd
 8010584:	08010307 	.word	0x08010307
 8010588:	0801427a 	.word	0x0801427a

0801058c <__cvt>:
 801058c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010590:	ec55 4b10 	vmov	r4, r5, d0
 8010594:	2d00      	cmp	r5, #0
 8010596:	460e      	mov	r6, r1
 8010598:	4619      	mov	r1, r3
 801059a:	462b      	mov	r3, r5
 801059c:	bfbb      	ittet	lt
 801059e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80105a2:	461d      	movlt	r5, r3
 80105a4:	2300      	movge	r3, #0
 80105a6:	232d      	movlt	r3, #45	; 0x2d
 80105a8:	700b      	strb	r3, [r1, #0]
 80105aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80105ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105b0:	4691      	mov	r9, r2
 80105b2:	f023 0820 	bic.w	r8, r3, #32
 80105b6:	bfbc      	itt	lt
 80105b8:	4622      	movlt	r2, r4
 80105ba:	4614      	movlt	r4, r2
 80105bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80105c0:	d005      	beq.n	80105ce <__cvt+0x42>
 80105c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80105c6:	d100      	bne.n	80105ca <__cvt+0x3e>
 80105c8:	3601      	adds	r6, #1
 80105ca:	2102      	movs	r1, #2
 80105cc:	e000      	b.n	80105d0 <__cvt+0x44>
 80105ce:	2103      	movs	r1, #3
 80105d0:	ab03      	add	r3, sp, #12
 80105d2:	9301      	str	r3, [sp, #4]
 80105d4:	ab02      	add	r3, sp, #8
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	ec45 4b10 	vmov	d0, r4, r5
 80105dc:	4653      	mov	r3, sl
 80105de:	4632      	mov	r2, r6
 80105e0:	f000 fd92 	bl	8011108 <_dtoa_r>
 80105e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80105e8:	4607      	mov	r7, r0
 80105ea:	d102      	bne.n	80105f2 <__cvt+0x66>
 80105ec:	f019 0f01 	tst.w	r9, #1
 80105f0:	d022      	beq.n	8010638 <__cvt+0xac>
 80105f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80105f6:	eb07 0906 	add.w	r9, r7, r6
 80105fa:	d110      	bne.n	801061e <__cvt+0x92>
 80105fc:	783b      	ldrb	r3, [r7, #0]
 80105fe:	2b30      	cmp	r3, #48	; 0x30
 8010600:	d10a      	bne.n	8010618 <__cvt+0x8c>
 8010602:	2200      	movs	r2, #0
 8010604:	2300      	movs	r3, #0
 8010606:	4620      	mov	r0, r4
 8010608:	4629      	mov	r1, r5
 801060a:	f7f0 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801060e:	b918      	cbnz	r0, 8010618 <__cvt+0x8c>
 8010610:	f1c6 0601 	rsb	r6, r6, #1
 8010614:	f8ca 6000 	str.w	r6, [sl]
 8010618:	f8da 3000 	ldr.w	r3, [sl]
 801061c:	4499      	add	r9, r3
 801061e:	2200      	movs	r2, #0
 8010620:	2300      	movs	r3, #0
 8010622:	4620      	mov	r0, r4
 8010624:	4629      	mov	r1, r5
 8010626:	f7f0 fa4f 	bl	8000ac8 <__aeabi_dcmpeq>
 801062a:	b108      	cbz	r0, 8010630 <__cvt+0xa4>
 801062c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010630:	2230      	movs	r2, #48	; 0x30
 8010632:	9b03      	ldr	r3, [sp, #12]
 8010634:	454b      	cmp	r3, r9
 8010636:	d307      	bcc.n	8010648 <__cvt+0xbc>
 8010638:	9b03      	ldr	r3, [sp, #12]
 801063a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801063c:	1bdb      	subs	r3, r3, r7
 801063e:	4638      	mov	r0, r7
 8010640:	6013      	str	r3, [r2, #0]
 8010642:	b004      	add	sp, #16
 8010644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010648:	1c59      	adds	r1, r3, #1
 801064a:	9103      	str	r1, [sp, #12]
 801064c:	701a      	strb	r2, [r3, #0]
 801064e:	e7f0      	b.n	8010632 <__cvt+0xa6>

08010650 <__exponent>:
 8010650:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010652:	4603      	mov	r3, r0
 8010654:	2900      	cmp	r1, #0
 8010656:	bfb8      	it	lt
 8010658:	4249      	neglt	r1, r1
 801065a:	f803 2b02 	strb.w	r2, [r3], #2
 801065e:	bfb4      	ite	lt
 8010660:	222d      	movlt	r2, #45	; 0x2d
 8010662:	222b      	movge	r2, #43	; 0x2b
 8010664:	2909      	cmp	r1, #9
 8010666:	7042      	strb	r2, [r0, #1]
 8010668:	dd2a      	ble.n	80106c0 <__exponent+0x70>
 801066a:	f10d 0407 	add.w	r4, sp, #7
 801066e:	46a4      	mov	ip, r4
 8010670:	270a      	movs	r7, #10
 8010672:	46a6      	mov	lr, r4
 8010674:	460a      	mov	r2, r1
 8010676:	fb91 f6f7 	sdiv	r6, r1, r7
 801067a:	fb07 1516 	mls	r5, r7, r6, r1
 801067e:	3530      	adds	r5, #48	; 0x30
 8010680:	2a63      	cmp	r2, #99	; 0x63
 8010682:	f104 34ff 	add.w	r4, r4, #4294967295
 8010686:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801068a:	4631      	mov	r1, r6
 801068c:	dcf1      	bgt.n	8010672 <__exponent+0x22>
 801068e:	3130      	adds	r1, #48	; 0x30
 8010690:	f1ae 0502 	sub.w	r5, lr, #2
 8010694:	f804 1c01 	strb.w	r1, [r4, #-1]
 8010698:	1c44      	adds	r4, r0, #1
 801069a:	4629      	mov	r1, r5
 801069c:	4561      	cmp	r1, ip
 801069e:	d30a      	bcc.n	80106b6 <__exponent+0x66>
 80106a0:	f10d 0209 	add.w	r2, sp, #9
 80106a4:	eba2 020e 	sub.w	r2, r2, lr
 80106a8:	4565      	cmp	r5, ip
 80106aa:	bf88      	it	hi
 80106ac:	2200      	movhi	r2, #0
 80106ae:	4413      	add	r3, r2
 80106b0:	1a18      	subs	r0, r3, r0
 80106b2:	b003      	add	sp, #12
 80106b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80106be:	e7ed      	b.n	801069c <__exponent+0x4c>
 80106c0:	2330      	movs	r3, #48	; 0x30
 80106c2:	3130      	adds	r1, #48	; 0x30
 80106c4:	7083      	strb	r3, [r0, #2]
 80106c6:	70c1      	strb	r1, [r0, #3]
 80106c8:	1d03      	adds	r3, r0, #4
 80106ca:	e7f1      	b.n	80106b0 <__exponent+0x60>

080106cc <_printf_float>:
 80106cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d0:	ed2d 8b02 	vpush	{d8}
 80106d4:	b08d      	sub	sp, #52	; 0x34
 80106d6:	460c      	mov	r4, r1
 80106d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80106dc:	4616      	mov	r6, r2
 80106de:	461f      	mov	r7, r3
 80106e0:	4605      	mov	r5, r0
 80106e2:	f001 fcb5 	bl	8012050 <_localeconv_r>
 80106e6:	f8d0 a000 	ldr.w	sl, [r0]
 80106ea:	4650      	mov	r0, sl
 80106ec:	f7ef fd70 	bl	80001d0 <strlen>
 80106f0:	2300      	movs	r3, #0
 80106f2:	930a      	str	r3, [sp, #40]	; 0x28
 80106f4:	6823      	ldr	r3, [r4, #0]
 80106f6:	9305      	str	r3, [sp, #20]
 80106f8:	f8d8 3000 	ldr.w	r3, [r8]
 80106fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010700:	3307      	adds	r3, #7
 8010702:	f023 0307 	bic.w	r3, r3, #7
 8010706:	f103 0208 	add.w	r2, r3, #8
 801070a:	f8c8 2000 	str.w	r2, [r8]
 801070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010712:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010716:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801071a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801071e:	9307      	str	r3, [sp, #28]
 8010720:	f8cd 8018 	str.w	r8, [sp, #24]
 8010724:	ee08 0a10 	vmov	s16, r0
 8010728:	4b9f      	ldr	r3, [pc, #636]	; (80109a8 <_printf_float+0x2dc>)
 801072a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801072e:	f04f 32ff 	mov.w	r2, #4294967295
 8010732:	f7f0 f9fb 	bl	8000b2c <__aeabi_dcmpun>
 8010736:	bb88      	cbnz	r0, 801079c <_printf_float+0xd0>
 8010738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801073c:	4b9a      	ldr	r3, [pc, #616]	; (80109a8 <_printf_float+0x2dc>)
 801073e:	f04f 32ff 	mov.w	r2, #4294967295
 8010742:	f7f0 f9d5 	bl	8000af0 <__aeabi_dcmple>
 8010746:	bb48      	cbnz	r0, 801079c <_printf_float+0xd0>
 8010748:	2200      	movs	r2, #0
 801074a:	2300      	movs	r3, #0
 801074c:	4640      	mov	r0, r8
 801074e:	4649      	mov	r1, r9
 8010750:	f7f0 f9c4 	bl	8000adc <__aeabi_dcmplt>
 8010754:	b110      	cbz	r0, 801075c <_printf_float+0x90>
 8010756:	232d      	movs	r3, #45	; 0x2d
 8010758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801075c:	4b93      	ldr	r3, [pc, #588]	; (80109ac <_printf_float+0x2e0>)
 801075e:	4894      	ldr	r0, [pc, #592]	; (80109b0 <_printf_float+0x2e4>)
 8010760:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010764:	bf94      	ite	ls
 8010766:	4698      	movls	r8, r3
 8010768:	4680      	movhi	r8, r0
 801076a:	2303      	movs	r3, #3
 801076c:	6123      	str	r3, [r4, #16]
 801076e:	9b05      	ldr	r3, [sp, #20]
 8010770:	f023 0204 	bic.w	r2, r3, #4
 8010774:	6022      	str	r2, [r4, #0]
 8010776:	f04f 0900 	mov.w	r9, #0
 801077a:	9700      	str	r7, [sp, #0]
 801077c:	4633      	mov	r3, r6
 801077e:	aa0b      	add	r2, sp, #44	; 0x2c
 8010780:	4621      	mov	r1, r4
 8010782:	4628      	mov	r0, r5
 8010784:	f000 f9d8 	bl	8010b38 <_printf_common>
 8010788:	3001      	adds	r0, #1
 801078a:	f040 8090 	bne.w	80108ae <_printf_float+0x1e2>
 801078e:	f04f 30ff 	mov.w	r0, #4294967295
 8010792:	b00d      	add	sp, #52	; 0x34
 8010794:	ecbd 8b02 	vpop	{d8}
 8010798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079c:	4642      	mov	r2, r8
 801079e:	464b      	mov	r3, r9
 80107a0:	4640      	mov	r0, r8
 80107a2:	4649      	mov	r1, r9
 80107a4:	f7f0 f9c2 	bl	8000b2c <__aeabi_dcmpun>
 80107a8:	b140      	cbz	r0, 80107bc <_printf_float+0xf0>
 80107aa:	464b      	mov	r3, r9
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	bfbc      	itt	lt
 80107b0:	232d      	movlt	r3, #45	; 0x2d
 80107b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80107b6:	487f      	ldr	r0, [pc, #508]	; (80109b4 <_printf_float+0x2e8>)
 80107b8:	4b7f      	ldr	r3, [pc, #508]	; (80109b8 <_printf_float+0x2ec>)
 80107ba:	e7d1      	b.n	8010760 <_printf_float+0x94>
 80107bc:	6863      	ldr	r3, [r4, #4]
 80107be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80107c2:	9206      	str	r2, [sp, #24]
 80107c4:	1c5a      	adds	r2, r3, #1
 80107c6:	d13f      	bne.n	8010848 <_printf_float+0x17c>
 80107c8:	2306      	movs	r3, #6
 80107ca:	6063      	str	r3, [r4, #4]
 80107cc:	9b05      	ldr	r3, [sp, #20]
 80107ce:	6861      	ldr	r1, [r4, #4]
 80107d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80107d4:	2300      	movs	r3, #0
 80107d6:	9303      	str	r3, [sp, #12]
 80107d8:	ab0a      	add	r3, sp, #40	; 0x28
 80107da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80107de:	ab09      	add	r3, sp, #36	; 0x24
 80107e0:	ec49 8b10 	vmov	d0, r8, r9
 80107e4:	9300      	str	r3, [sp, #0]
 80107e6:	6022      	str	r2, [r4, #0]
 80107e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107ec:	4628      	mov	r0, r5
 80107ee:	f7ff fecd 	bl	801058c <__cvt>
 80107f2:	9b06      	ldr	r3, [sp, #24]
 80107f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107f6:	2b47      	cmp	r3, #71	; 0x47
 80107f8:	4680      	mov	r8, r0
 80107fa:	d108      	bne.n	801080e <_printf_float+0x142>
 80107fc:	1cc8      	adds	r0, r1, #3
 80107fe:	db02      	blt.n	8010806 <_printf_float+0x13a>
 8010800:	6863      	ldr	r3, [r4, #4]
 8010802:	4299      	cmp	r1, r3
 8010804:	dd41      	ble.n	801088a <_printf_float+0x1be>
 8010806:	f1ab 0b02 	sub.w	fp, fp, #2
 801080a:	fa5f fb8b 	uxtb.w	fp, fp
 801080e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8010812:	d820      	bhi.n	8010856 <_printf_float+0x18a>
 8010814:	3901      	subs	r1, #1
 8010816:	465a      	mov	r2, fp
 8010818:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801081c:	9109      	str	r1, [sp, #36]	; 0x24
 801081e:	f7ff ff17 	bl	8010650 <__exponent>
 8010822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010824:	1813      	adds	r3, r2, r0
 8010826:	2a01      	cmp	r2, #1
 8010828:	4681      	mov	r9, r0
 801082a:	6123      	str	r3, [r4, #16]
 801082c:	dc02      	bgt.n	8010834 <_printf_float+0x168>
 801082e:	6822      	ldr	r2, [r4, #0]
 8010830:	07d2      	lsls	r2, r2, #31
 8010832:	d501      	bpl.n	8010838 <_printf_float+0x16c>
 8010834:	3301      	adds	r3, #1
 8010836:	6123      	str	r3, [r4, #16]
 8010838:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801083c:	2b00      	cmp	r3, #0
 801083e:	d09c      	beq.n	801077a <_printf_float+0xae>
 8010840:	232d      	movs	r3, #45	; 0x2d
 8010842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010846:	e798      	b.n	801077a <_printf_float+0xae>
 8010848:	9a06      	ldr	r2, [sp, #24]
 801084a:	2a47      	cmp	r2, #71	; 0x47
 801084c:	d1be      	bne.n	80107cc <_printf_float+0x100>
 801084e:	2b00      	cmp	r3, #0
 8010850:	d1bc      	bne.n	80107cc <_printf_float+0x100>
 8010852:	2301      	movs	r3, #1
 8010854:	e7b9      	b.n	80107ca <_printf_float+0xfe>
 8010856:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801085a:	d118      	bne.n	801088e <_printf_float+0x1c2>
 801085c:	2900      	cmp	r1, #0
 801085e:	6863      	ldr	r3, [r4, #4]
 8010860:	dd0b      	ble.n	801087a <_printf_float+0x1ae>
 8010862:	6121      	str	r1, [r4, #16]
 8010864:	b913      	cbnz	r3, 801086c <_printf_float+0x1a0>
 8010866:	6822      	ldr	r2, [r4, #0]
 8010868:	07d0      	lsls	r0, r2, #31
 801086a:	d502      	bpl.n	8010872 <_printf_float+0x1a6>
 801086c:	3301      	adds	r3, #1
 801086e:	440b      	add	r3, r1
 8010870:	6123      	str	r3, [r4, #16]
 8010872:	65a1      	str	r1, [r4, #88]	; 0x58
 8010874:	f04f 0900 	mov.w	r9, #0
 8010878:	e7de      	b.n	8010838 <_printf_float+0x16c>
 801087a:	b913      	cbnz	r3, 8010882 <_printf_float+0x1b6>
 801087c:	6822      	ldr	r2, [r4, #0]
 801087e:	07d2      	lsls	r2, r2, #31
 8010880:	d501      	bpl.n	8010886 <_printf_float+0x1ba>
 8010882:	3302      	adds	r3, #2
 8010884:	e7f4      	b.n	8010870 <_printf_float+0x1a4>
 8010886:	2301      	movs	r3, #1
 8010888:	e7f2      	b.n	8010870 <_printf_float+0x1a4>
 801088a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801088e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010890:	4299      	cmp	r1, r3
 8010892:	db05      	blt.n	80108a0 <_printf_float+0x1d4>
 8010894:	6823      	ldr	r3, [r4, #0]
 8010896:	6121      	str	r1, [r4, #16]
 8010898:	07d8      	lsls	r0, r3, #31
 801089a:	d5ea      	bpl.n	8010872 <_printf_float+0x1a6>
 801089c:	1c4b      	adds	r3, r1, #1
 801089e:	e7e7      	b.n	8010870 <_printf_float+0x1a4>
 80108a0:	2900      	cmp	r1, #0
 80108a2:	bfd4      	ite	le
 80108a4:	f1c1 0202 	rsble	r2, r1, #2
 80108a8:	2201      	movgt	r2, #1
 80108aa:	4413      	add	r3, r2
 80108ac:	e7e0      	b.n	8010870 <_printf_float+0x1a4>
 80108ae:	6823      	ldr	r3, [r4, #0]
 80108b0:	055a      	lsls	r2, r3, #21
 80108b2:	d407      	bmi.n	80108c4 <_printf_float+0x1f8>
 80108b4:	6923      	ldr	r3, [r4, #16]
 80108b6:	4642      	mov	r2, r8
 80108b8:	4631      	mov	r1, r6
 80108ba:	4628      	mov	r0, r5
 80108bc:	47b8      	blx	r7
 80108be:	3001      	adds	r0, #1
 80108c0:	d12c      	bne.n	801091c <_printf_float+0x250>
 80108c2:	e764      	b.n	801078e <_printf_float+0xc2>
 80108c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80108c8:	f240 80e0 	bls.w	8010a8c <_printf_float+0x3c0>
 80108cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108d0:	2200      	movs	r2, #0
 80108d2:	2300      	movs	r3, #0
 80108d4:	f7f0 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80108d8:	2800      	cmp	r0, #0
 80108da:	d034      	beq.n	8010946 <_printf_float+0x27a>
 80108dc:	4a37      	ldr	r2, [pc, #220]	; (80109bc <_printf_float+0x2f0>)
 80108de:	2301      	movs	r3, #1
 80108e0:	4631      	mov	r1, r6
 80108e2:	4628      	mov	r0, r5
 80108e4:	47b8      	blx	r7
 80108e6:	3001      	adds	r0, #1
 80108e8:	f43f af51 	beq.w	801078e <_printf_float+0xc2>
 80108ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108f0:	429a      	cmp	r2, r3
 80108f2:	db02      	blt.n	80108fa <_printf_float+0x22e>
 80108f4:	6823      	ldr	r3, [r4, #0]
 80108f6:	07d8      	lsls	r0, r3, #31
 80108f8:	d510      	bpl.n	801091c <_printf_float+0x250>
 80108fa:	ee18 3a10 	vmov	r3, s16
 80108fe:	4652      	mov	r2, sl
 8010900:	4631      	mov	r1, r6
 8010902:	4628      	mov	r0, r5
 8010904:	47b8      	blx	r7
 8010906:	3001      	adds	r0, #1
 8010908:	f43f af41 	beq.w	801078e <_printf_float+0xc2>
 801090c:	f04f 0800 	mov.w	r8, #0
 8010910:	f104 091a 	add.w	r9, r4, #26
 8010914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010916:	3b01      	subs	r3, #1
 8010918:	4543      	cmp	r3, r8
 801091a:	dc09      	bgt.n	8010930 <_printf_float+0x264>
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	079b      	lsls	r3, r3, #30
 8010920:	f100 8105 	bmi.w	8010b2e <_printf_float+0x462>
 8010924:	68e0      	ldr	r0, [r4, #12]
 8010926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010928:	4298      	cmp	r0, r3
 801092a:	bfb8      	it	lt
 801092c:	4618      	movlt	r0, r3
 801092e:	e730      	b.n	8010792 <_printf_float+0xc6>
 8010930:	2301      	movs	r3, #1
 8010932:	464a      	mov	r2, r9
 8010934:	4631      	mov	r1, r6
 8010936:	4628      	mov	r0, r5
 8010938:	47b8      	blx	r7
 801093a:	3001      	adds	r0, #1
 801093c:	f43f af27 	beq.w	801078e <_printf_float+0xc2>
 8010940:	f108 0801 	add.w	r8, r8, #1
 8010944:	e7e6      	b.n	8010914 <_printf_float+0x248>
 8010946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010948:	2b00      	cmp	r3, #0
 801094a:	dc39      	bgt.n	80109c0 <_printf_float+0x2f4>
 801094c:	4a1b      	ldr	r2, [pc, #108]	; (80109bc <_printf_float+0x2f0>)
 801094e:	2301      	movs	r3, #1
 8010950:	4631      	mov	r1, r6
 8010952:	4628      	mov	r0, r5
 8010954:	47b8      	blx	r7
 8010956:	3001      	adds	r0, #1
 8010958:	f43f af19 	beq.w	801078e <_printf_float+0xc2>
 801095c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010960:	4313      	orrs	r3, r2
 8010962:	d102      	bne.n	801096a <_printf_float+0x29e>
 8010964:	6823      	ldr	r3, [r4, #0]
 8010966:	07d9      	lsls	r1, r3, #31
 8010968:	d5d8      	bpl.n	801091c <_printf_float+0x250>
 801096a:	ee18 3a10 	vmov	r3, s16
 801096e:	4652      	mov	r2, sl
 8010970:	4631      	mov	r1, r6
 8010972:	4628      	mov	r0, r5
 8010974:	47b8      	blx	r7
 8010976:	3001      	adds	r0, #1
 8010978:	f43f af09 	beq.w	801078e <_printf_float+0xc2>
 801097c:	f04f 0900 	mov.w	r9, #0
 8010980:	f104 0a1a 	add.w	sl, r4, #26
 8010984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010986:	425b      	negs	r3, r3
 8010988:	454b      	cmp	r3, r9
 801098a:	dc01      	bgt.n	8010990 <_printf_float+0x2c4>
 801098c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801098e:	e792      	b.n	80108b6 <_printf_float+0x1ea>
 8010990:	2301      	movs	r3, #1
 8010992:	4652      	mov	r2, sl
 8010994:	4631      	mov	r1, r6
 8010996:	4628      	mov	r0, r5
 8010998:	47b8      	blx	r7
 801099a:	3001      	adds	r0, #1
 801099c:	f43f aef7 	beq.w	801078e <_printf_float+0xc2>
 80109a0:	f109 0901 	add.w	r9, r9, #1
 80109a4:	e7ee      	b.n	8010984 <_printf_float+0x2b8>
 80109a6:	bf00      	nop
 80109a8:	7fefffff 	.word	0x7fefffff
 80109ac:	08014285 	.word	0x08014285
 80109b0:	08014289 	.word	0x08014289
 80109b4:	08014291 	.word	0x08014291
 80109b8:	0801428d 	.word	0x0801428d
 80109bc:	08014295 	.word	0x08014295
 80109c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109c4:	429a      	cmp	r2, r3
 80109c6:	bfa8      	it	ge
 80109c8:	461a      	movge	r2, r3
 80109ca:	2a00      	cmp	r2, #0
 80109cc:	4691      	mov	r9, r2
 80109ce:	dc37      	bgt.n	8010a40 <_printf_float+0x374>
 80109d0:	f04f 0b00 	mov.w	fp, #0
 80109d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109d8:	f104 021a 	add.w	r2, r4, #26
 80109dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109de:	9305      	str	r3, [sp, #20]
 80109e0:	eba3 0309 	sub.w	r3, r3, r9
 80109e4:	455b      	cmp	r3, fp
 80109e6:	dc33      	bgt.n	8010a50 <_printf_float+0x384>
 80109e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109ec:	429a      	cmp	r2, r3
 80109ee:	db3b      	blt.n	8010a68 <_printf_float+0x39c>
 80109f0:	6823      	ldr	r3, [r4, #0]
 80109f2:	07da      	lsls	r2, r3, #31
 80109f4:	d438      	bmi.n	8010a68 <_printf_float+0x39c>
 80109f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109f8:	9b05      	ldr	r3, [sp, #20]
 80109fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	eba2 0901 	sub.w	r9, r2, r1
 8010a02:	4599      	cmp	r9, r3
 8010a04:	bfa8      	it	ge
 8010a06:	4699      	movge	r9, r3
 8010a08:	f1b9 0f00 	cmp.w	r9, #0
 8010a0c:	dc35      	bgt.n	8010a7a <_printf_float+0x3ae>
 8010a0e:	f04f 0800 	mov.w	r8, #0
 8010a12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a16:	f104 0a1a 	add.w	sl, r4, #26
 8010a1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a1e:	1a9b      	subs	r3, r3, r2
 8010a20:	eba3 0309 	sub.w	r3, r3, r9
 8010a24:	4543      	cmp	r3, r8
 8010a26:	f77f af79 	ble.w	801091c <_printf_float+0x250>
 8010a2a:	2301      	movs	r3, #1
 8010a2c:	4652      	mov	r2, sl
 8010a2e:	4631      	mov	r1, r6
 8010a30:	4628      	mov	r0, r5
 8010a32:	47b8      	blx	r7
 8010a34:	3001      	adds	r0, #1
 8010a36:	f43f aeaa 	beq.w	801078e <_printf_float+0xc2>
 8010a3a:	f108 0801 	add.w	r8, r8, #1
 8010a3e:	e7ec      	b.n	8010a1a <_printf_float+0x34e>
 8010a40:	4613      	mov	r3, r2
 8010a42:	4631      	mov	r1, r6
 8010a44:	4642      	mov	r2, r8
 8010a46:	4628      	mov	r0, r5
 8010a48:	47b8      	blx	r7
 8010a4a:	3001      	adds	r0, #1
 8010a4c:	d1c0      	bne.n	80109d0 <_printf_float+0x304>
 8010a4e:	e69e      	b.n	801078e <_printf_float+0xc2>
 8010a50:	2301      	movs	r3, #1
 8010a52:	4631      	mov	r1, r6
 8010a54:	4628      	mov	r0, r5
 8010a56:	9205      	str	r2, [sp, #20]
 8010a58:	47b8      	blx	r7
 8010a5a:	3001      	adds	r0, #1
 8010a5c:	f43f ae97 	beq.w	801078e <_printf_float+0xc2>
 8010a60:	9a05      	ldr	r2, [sp, #20]
 8010a62:	f10b 0b01 	add.w	fp, fp, #1
 8010a66:	e7b9      	b.n	80109dc <_printf_float+0x310>
 8010a68:	ee18 3a10 	vmov	r3, s16
 8010a6c:	4652      	mov	r2, sl
 8010a6e:	4631      	mov	r1, r6
 8010a70:	4628      	mov	r0, r5
 8010a72:	47b8      	blx	r7
 8010a74:	3001      	adds	r0, #1
 8010a76:	d1be      	bne.n	80109f6 <_printf_float+0x32a>
 8010a78:	e689      	b.n	801078e <_printf_float+0xc2>
 8010a7a:	9a05      	ldr	r2, [sp, #20]
 8010a7c:	464b      	mov	r3, r9
 8010a7e:	4442      	add	r2, r8
 8010a80:	4631      	mov	r1, r6
 8010a82:	4628      	mov	r0, r5
 8010a84:	47b8      	blx	r7
 8010a86:	3001      	adds	r0, #1
 8010a88:	d1c1      	bne.n	8010a0e <_printf_float+0x342>
 8010a8a:	e680      	b.n	801078e <_printf_float+0xc2>
 8010a8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a8e:	2a01      	cmp	r2, #1
 8010a90:	dc01      	bgt.n	8010a96 <_printf_float+0x3ca>
 8010a92:	07db      	lsls	r3, r3, #31
 8010a94:	d538      	bpl.n	8010b08 <_printf_float+0x43c>
 8010a96:	2301      	movs	r3, #1
 8010a98:	4642      	mov	r2, r8
 8010a9a:	4631      	mov	r1, r6
 8010a9c:	4628      	mov	r0, r5
 8010a9e:	47b8      	blx	r7
 8010aa0:	3001      	adds	r0, #1
 8010aa2:	f43f ae74 	beq.w	801078e <_printf_float+0xc2>
 8010aa6:	ee18 3a10 	vmov	r3, s16
 8010aaa:	4652      	mov	r2, sl
 8010aac:	4631      	mov	r1, r6
 8010aae:	4628      	mov	r0, r5
 8010ab0:	47b8      	blx	r7
 8010ab2:	3001      	adds	r0, #1
 8010ab4:	f43f ae6b 	beq.w	801078e <_printf_float+0xc2>
 8010ab8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010abc:	2200      	movs	r2, #0
 8010abe:	2300      	movs	r3, #0
 8010ac0:	f7f0 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ac4:	b9d8      	cbnz	r0, 8010afe <_printf_float+0x432>
 8010ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ac8:	f108 0201 	add.w	r2, r8, #1
 8010acc:	3b01      	subs	r3, #1
 8010ace:	4631      	mov	r1, r6
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	47b8      	blx	r7
 8010ad4:	3001      	adds	r0, #1
 8010ad6:	d10e      	bne.n	8010af6 <_printf_float+0x42a>
 8010ad8:	e659      	b.n	801078e <_printf_float+0xc2>
 8010ada:	2301      	movs	r3, #1
 8010adc:	4652      	mov	r2, sl
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	47b8      	blx	r7
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	f43f ae52 	beq.w	801078e <_printf_float+0xc2>
 8010aea:	f108 0801 	add.w	r8, r8, #1
 8010aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010af0:	3b01      	subs	r3, #1
 8010af2:	4543      	cmp	r3, r8
 8010af4:	dcf1      	bgt.n	8010ada <_printf_float+0x40e>
 8010af6:	464b      	mov	r3, r9
 8010af8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010afc:	e6dc      	b.n	80108b8 <_printf_float+0x1ec>
 8010afe:	f04f 0800 	mov.w	r8, #0
 8010b02:	f104 0a1a 	add.w	sl, r4, #26
 8010b06:	e7f2      	b.n	8010aee <_printf_float+0x422>
 8010b08:	2301      	movs	r3, #1
 8010b0a:	4642      	mov	r2, r8
 8010b0c:	e7df      	b.n	8010ace <_printf_float+0x402>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	464a      	mov	r2, r9
 8010b12:	4631      	mov	r1, r6
 8010b14:	4628      	mov	r0, r5
 8010b16:	47b8      	blx	r7
 8010b18:	3001      	adds	r0, #1
 8010b1a:	f43f ae38 	beq.w	801078e <_printf_float+0xc2>
 8010b1e:	f108 0801 	add.w	r8, r8, #1
 8010b22:	68e3      	ldr	r3, [r4, #12]
 8010b24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010b26:	1a5b      	subs	r3, r3, r1
 8010b28:	4543      	cmp	r3, r8
 8010b2a:	dcf0      	bgt.n	8010b0e <_printf_float+0x442>
 8010b2c:	e6fa      	b.n	8010924 <_printf_float+0x258>
 8010b2e:	f04f 0800 	mov.w	r8, #0
 8010b32:	f104 0919 	add.w	r9, r4, #25
 8010b36:	e7f4      	b.n	8010b22 <_printf_float+0x456>

08010b38 <_printf_common>:
 8010b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b3c:	4616      	mov	r6, r2
 8010b3e:	4699      	mov	r9, r3
 8010b40:	688a      	ldr	r2, [r1, #8]
 8010b42:	690b      	ldr	r3, [r1, #16]
 8010b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b48:	4293      	cmp	r3, r2
 8010b4a:	bfb8      	it	lt
 8010b4c:	4613      	movlt	r3, r2
 8010b4e:	6033      	str	r3, [r6, #0]
 8010b50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b54:	4607      	mov	r7, r0
 8010b56:	460c      	mov	r4, r1
 8010b58:	b10a      	cbz	r2, 8010b5e <_printf_common+0x26>
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	6033      	str	r3, [r6, #0]
 8010b5e:	6823      	ldr	r3, [r4, #0]
 8010b60:	0699      	lsls	r1, r3, #26
 8010b62:	bf42      	ittt	mi
 8010b64:	6833      	ldrmi	r3, [r6, #0]
 8010b66:	3302      	addmi	r3, #2
 8010b68:	6033      	strmi	r3, [r6, #0]
 8010b6a:	6825      	ldr	r5, [r4, #0]
 8010b6c:	f015 0506 	ands.w	r5, r5, #6
 8010b70:	d106      	bne.n	8010b80 <_printf_common+0x48>
 8010b72:	f104 0a19 	add.w	sl, r4, #25
 8010b76:	68e3      	ldr	r3, [r4, #12]
 8010b78:	6832      	ldr	r2, [r6, #0]
 8010b7a:	1a9b      	subs	r3, r3, r2
 8010b7c:	42ab      	cmp	r3, r5
 8010b7e:	dc26      	bgt.n	8010bce <_printf_common+0x96>
 8010b80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010b84:	1e13      	subs	r3, r2, #0
 8010b86:	6822      	ldr	r2, [r4, #0]
 8010b88:	bf18      	it	ne
 8010b8a:	2301      	movne	r3, #1
 8010b8c:	0692      	lsls	r2, r2, #26
 8010b8e:	d42b      	bmi.n	8010be8 <_printf_common+0xb0>
 8010b90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b94:	4649      	mov	r1, r9
 8010b96:	4638      	mov	r0, r7
 8010b98:	47c0      	blx	r8
 8010b9a:	3001      	adds	r0, #1
 8010b9c:	d01e      	beq.n	8010bdc <_printf_common+0xa4>
 8010b9e:	6823      	ldr	r3, [r4, #0]
 8010ba0:	68e5      	ldr	r5, [r4, #12]
 8010ba2:	6832      	ldr	r2, [r6, #0]
 8010ba4:	f003 0306 	and.w	r3, r3, #6
 8010ba8:	2b04      	cmp	r3, #4
 8010baa:	bf08      	it	eq
 8010bac:	1aad      	subeq	r5, r5, r2
 8010bae:	68a3      	ldr	r3, [r4, #8]
 8010bb0:	6922      	ldr	r2, [r4, #16]
 8010bb2:	bf0c      	ite	eq
 8010bb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bb8:	2500      	movne	r5, #0
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	bfc4      	itt	gt
 8010bbe:	1a9b      	subgt	r3, r3, r2
 8010bc0:	18ed      	addgt	r5, r5, r3
 8010bc2:	2600      	movs	r6, #0
 8010bc4:	341a      	adds	r4, #26
 8010bc6:	42b5      	cmp	r5, r6
 8010bc8:	d11a      	bne.n	8010c00 <_printf_common+0xc8>
 8010bca:	2000      	movs	r0, #0
 8010bcc:	e008      	b.n	8010be0 <_printf_common+0xa8>
 8010bce:	2301      	movs	r3, #1
 8010bd0:	4652      	mov	r2, sl
 8010bd2:	4649      	mov	r1, r9
 8010bd4:	4638      	mov	r0, r7
 8010bd6:	47c0      	blx	r8
 8010bd8:	3001      	adds	r0, #1
 8010bda:	d103      	bne.n	8010be4 <_printf_common+0xac>
 8010bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8010be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010be4:	3501      	adds	r5, #1
 8010be6:	e7c6      	b.n	8010b76 <_printf_common+0x3e>
 8010be8:	18e1      	adds	r1, r4, r3
 8010bea:	1c5a      	adds	r2, r3, #1
 8010bec:	2030      	movs	r0, #48	; 0x30
 8010bee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010bf2:	4422      	add	r2, r4
 8010bf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010bf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010bfc:	3302      	adds	r3, #2
 8010bfe:	e7c7      	b.n	8010b90 <_printf_common+0x58>
 8010c00:	2301      	movs	r3, #1
 8010c02:	4622      	mov	r2, r4
 8010c04:	4649      	mov	r1, r9
 8010c06:	4638      	mov	r0, r7
 8010c08:	47c0      	blx	r8
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	d0e6      	beq.n	8010bdc <_printf_common+0xa4>
 8010c0e:	3601      	adds	r6, #1
 8010c10:	e7d9      	b.n	8010bc6 <_printf_common+0x8e>
	...

08010c14 <_printf_i>:
 8010c14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c18:	460c      	mov	r4, r1
 8010c1a:	4691      	mov	r9, r2
 8010c1c:	7e27      	ldrb	r7, [r4, #24]
 8010c1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010c20:	2f78      	cmp	r7, #120	; 0x78
 8010c22:	4680      	mov	r8, r0
 8010c24:	469a      	mov	sl, r3
 8010c26:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c2a:	d807      	bhi.n	8010c3c <_printf_i+0x28>
 8010c2c:	2f62      	cmp	r7, #98	; 0x62
 8010c2e:	d80a      	bhi.n	8010c46 <_printf_i+0x32>
 8010c30:	2f00      	cmp	r7, #0
 8010c32:	f000 80d8 	beq.w	8010de6 <_printf_i+0x1d2>
 8010c36:	2f58      	cmp	r7, #88	; 0x58
 8010c38:	f000 80a3 	beq.w	8010d82 <_printf_i+0x16e>
 8010c3c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010c40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010c44:	e03a      	b.n	8010cbc <_printf_i+0xa8>
 8010c46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010c4a:	2b15      	cmp	r3, #21
 8010c4c:	d8f6      	bhi.n	8010c3c <_printf_i+0x28>
 8010c4e:	a001      	add	r0, pc, #4	; (adr r0, 8010c54 <_printf_i+0x40>)
 8010c50:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010c54:	08010cad 	.word	0x08010cad
 8010c58:	08010cc1 	.word	0x08010cc1
 8010c5c:	08010c3d 	.word	0x08010c3d
 8010c60:	08010c3d 	.word	0x08010c3d
 8010c64:	08010c3d 	.word	0x08010c3d
 8010c68:	08010c3d 	.word	0x08010c3d
 8010c6c:	08010cc1 	.word	0x08010cc1
 8010c70:	08010c3d 	.word	0x08010c3d
 8010c74:	08010c3d 	.word	0x08010c3d
 8010c78:	08010c3d 	.word	0x08010c3d
 8010c7c:	08010c3d 	.word	0x08010c3d
 8010c80:	08010dcd 	.word	0x08010dcd
 8010c84:	08010cf1 	.word	0x08010cf1
 8010c88:	08010daf 	.word	0x08010daf
 8010c8c:	08010c3d 	.word	0x08010c3d
 8010c90:	08010c3d 	.word	0x08010c3d
 8010c94:	08010def 	.word	0x08010def
 8010c98:	08010c3d 	.word	0x08010c3d
 8010c9c:	08010cf1 	.word	0x08010cf1
 8010ca0:	08010c3d 	.word	0x08010c3d
 8010ca4:	08010c3d 	.word	0x08010c3d
 8010ca8:	08010db7 	.word	0x08010db7
 8010cac:	680b      	ldr	r3, [r1, #0]
 8010cae:	1d1a      	adds	r2, r3, #4
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	600a      	str	r2, [r1, #0]
 8010cb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010cb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cbc:	2301      	movs	r3, #1
 8010cbe:	e0a3      	b.n	8010e08 <_printf_i+0x1f4>
 8010cc0:	6825      	ldr	r5, [r4, #0]
 8010cc2:	6808      	ldr	r0, [r1, #0]
 8010cc4:	062e      	lsls	r6, r5, #24
 8010cc6:	f100 0304 	add.w	r3, r0, #4
 8010cca:	d50a      	bpl.n	8010ce2 <_printf_i+0xce>
 8010ccc:	6805      	ldr	r5, [r0, #0]
 8010cce:	600b      	str	r3, [r1, #0]
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	da03      	bge.n	8010cdc <_printf_i+0xc8>
 8010cd4:	232d      	movs	r3, #45	; 0x2d
 8010cd6:	426d      	negs	r5, r5
 8010cd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010cdc:	485e      	ldr	r0, [pc, #376]	; (8010e58 <_printf_i+0x244>)
 8010cde:	230a      	movs	r3, #10
 8010ce0:	e019      	b.n	8010d16 <_printf_i+0x102>
 8010ce2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010ce6:	6805      	ldr	r5, [r0, #0]
 8010ce8:	600b      	str	r3, [r1, #0]
 8010cea:	bf18      	it	ne
 8010cec:	b22d      	sxthne	r5, r5
 8010cee:	e7ef      	b.n	8010cd0 <_printf_i+0xbc>
 8010cf0:	680b      	ldr	r3, [r1, #0]
 8010cf2:	6825      	ldr	r5, [r4, #0]
 8010cf4:	1d18      	adds	r0, r3, #4
 8010cf6:	6008      	str	r0, [r1, #0]
 8010cf8:	0628      	lsls	r0, r5, #24
 8010cfa:	d501      	bpl.n	8010d00 <_printf_i+0xec>
 8010cfc:	681d      	ldr	r5, [r3, #0]
 8010cfe:	e002      	b.n	8010d06 <_printf_i+0xf2>
 8010d00:	0669      	lsls	r1, r5, #25
 8010d02:	d5fb      	bpl.n	8010cfc <_printf_i+0xe8>
 8010d04:	881d      	ldrh	r5, [r3, #0]
 8010d06:	4854      	ldr	r0, [pc, #336]	; (8010e58 <_printf_i+0x244>)
 8010d08:	2f6f      	cmp	r7, #111	; 0x6f
 8010d0a:	bf0c      	ite	eq
 8010d0c:	2308      	moveq	r3, #8
 8010d0e:	230a      	movne	r3, #10
 8010d10:	2100      	movs	r1, #0
 8010d12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d16:	6866      	ldr	r6, [r4, #4]
 8010d18:	60a6      	str	r6, [r4, #8]
 8010d1a:	2e00      	cmp	r6, #0
 8010d1c:	bfa2      	ittt	ge
 8010d1e:	6821      	ldrge	r1, [r4, #0]
 8010d20:	f021 0104 	bicge.w	r1, r1, #4
 8010d24:	6021      	strge	r1, [r4, #0]
 8010d26:	b90d      	cbnz	r5, 8010d2c <_printf_i+0x118>
 8010d28:	2e00      	cmp	r6, #0
 8010d2a:	d04d      	beq.n	8010dc8 <_printf_i+0x1b4>
 8010d2c:	4616      	mov	r6, r2
 8010d2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010d32:	fb03 5711 	mls	r7, r3, r1, r5
 8010d36:	5dc7      	ldrb	r7, [r0, r7]
 8010d38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010d3c:	462f      	mov	r7, r5
 8010d3e:	42bb      	cmp	r3, r7
 8010d40:	460d      	mov	r5, r1
 8010d42:	d9f4      	bls.n	8010d2e <_printf_i+0x11a>
 8010d44:	2b08      	cmp	r3, #8
 8010d46:	d10b      	bne.n	8010d60 <_printf_i+0x14c>
 8010d48:	6823      	ldr	r3, [r4, #0]
 8010d4a:	07df      	lsls	r7, r3, #31
 8010d4c:	d508      	bpl.n	8010d60 <_printf_i+0x14c>
 8010d4e:	6923      	ldr	r3, [r4, #16]
 8010d50:	6861      	ldr	r1, [r4, #4]
 8010d52:	4299      	cmp	r1, r3
 8010d54:	bfde      	ittt	le
 8010d56:	2330      	movle	r3, #48	; 0x30
 8010d58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010d5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010d60:	1b92      	subs	r2, r2, r6
 8010d62:	6122      	str	r2, [r4, #16]
 8010d64:	f8cd a000 	str.w	sl, [sp]
 8010d68:	464b      	mov	r3, r9
 8010d6a:	aa03      	add	r2, sp, #12
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	4640      	mov	r0, r8
 8010d70:	f7ff fee2 	bl	8010b38 <_printf_common>
 8010d74:	3001      	adds	r0, #1
 8010d76:	d14c      	bne.n	8010e12 <_printf_i+0x1fe>
 8010d78:	f04f 30ff 	mov.w	r0, #4294967295
 8010d7c:	b004      	add	sp, #16
 8010d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d82:	4835      	ldr	r0, [pc, #212]	; (8010e58 <_printf_i+0x244>)
 8010d84:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010d88:	6823      	ldr	r3, [r4, #0]
 8010d8a:	680e      	ldr	r6, [r1, #0]
 8010d8c:	061f      	lsls	r7, r3, #24
 8010d8e:	f856 5b04 	ldr.w	r5, [r6], #4
 8010d92:	600e      	str	r6, [r1, #0]
 8010d94:	d514      	bpl.n	8010dc0 <_printf_i+0x1ac>
 8010d96:	07d9      	lsls	r1, r3, #31
 8010d98:	bf44      	itt	mi
 8010d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8010d9e:	6023      	strmi	r3, [r4, #0]
 8010da0:	b91d      	cbnz	r5, 8010daa <_printf_i+0x196>
 8010da2:	6823      	ldr	r3, [r4, #0]
 8010da4:	f023 0320 	bic.w	r3, r3, #32
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	2310      	movs	r3, #16
 8010dac:	e7b0      	b.n	8010d10 <_printf_i+0xfc>
 8010dae:	6823      	ldr	r3, [r4, #0]
 8010db0:	f043 0320 	orr.w	r3, r3, #32
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	2378      	movs	r3, #120	; 0x78
 8010db8:	4828      	ldr	r0, [pc, #160]	; (8010e5c <_printf_i+0x248>)
 8010dba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010dbe:	e7e3      	b.n	8010d88 <_printf_i+0x174>
 8010dc0:	065e      	lsls	r6, r3, #25
 8010dc2:	bf48      	it	mi
 8010dc4:	b2ad      	uxthmi	r5, r5
 8010dc6:	e7e6      	b.n	8010d96 <_printf_i+0x182>
 8010dc8:	4616      	mov	r6, r2
 8010dca:	e7bb      	b.n	8010d44 <_printf_i+0x130>
 8010dcc:	680b      	ldr	r3, [r1, #0]
 8010dce:	6826      	ldr	r6, [r4, #0]
 8010dd0:	6960      	ldr	r0, [r4, #20]
 8010dd2:	1d1d      	adds	r5, r3, #4
 8010dd4:	600d      	str	r5, [r1, #0]
 8010dd6:	0635      	lsls	r5, r6, #24
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	d501      	bpl.n	8010de0 <_printf_i+0x1cc>
 8010ddc:	6018      	str	r0, [r3, #0]
 8010dde:	e002      	b.n	8010de6 <_printf_i+0x1d2>
 8010de0:	0671      	lsls	r1, r6, #25
 8010de2:	d5fb      	bpl.n	8010ddc <_printf_i+0x1c8>
 8010de4:	8018      	strh	r0, [r3, #0]
 8010de6:	2300      	movs	r3, #0
 8010de8:	6123      	str	r3, [r4, #16]
 8010dea:	4616      	mov	r6, r2
 8010dec:	e7ba      	b.n	8010d64 <_printf_i+0x150>
 8010dee:	680b      	ldr	r3, [r1, #0]
 8010df0:	1d1a      	adds	r2, r3, #4
 8010df2:	600a      	str	r2, [r1, #0]
 8010df4:	681e      	ldr	r6, [r3, #0]
 8010df6:	6862      	ldr	r2, [r4, #4]
 8010df8:	2100      	movs	r1, #0
 8010dfa:	4630      	mov	r0, r6
 8010dfc:	f7ef f9f0 	bl	80001e0 <memchr>
 8010e00:	b108      	cbz	r0, 8010e06 <_printf_i+0x1f2>
 8010e02:	1b80      	subs	r0, r0, r6
 8010e04:	6060      	str	r0, [r4, #4]
 8010e06:	6863      	ldr	r3, [r4, #4]
 8010e08:	6123      	str	r3, [r4, #16]
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e10:	e7a8      	b.n	8010d64 <_printf_i+0x150>
 8010e12:	6923      	ldr	r3, [r4, #16]
 8010e14:	4632      	mov	r2, r6
 8010e16:	4649      	mov	r1, r9
 8010e18:	4640      	mov	r0, r8
 8010e1a:	47d0      	blx	sl
 8010e1c:	3001      	adds	r0, #1
 8010e1e:	d0ab      	beq.n	8010d78 <_printf_i+0x164>
 8010e20:	6823      	ldr	r3, [r4, #0]
 8010e22:	079b      	lsls	r3, r3, #30
 8010e24:	d413      	bmi.n	8010e4e <_printf_i+0x23a>
 8010e26:	68e0      	ldr	r0, [r4, #12]
 8010e28:	9b03      	ldr	r3, [sp, #12]
 8010e2a:	4298      	cmp	r0, r3
 8010e2c:	bfb8      	it	lt
 8010e2e:	4618      	movlt	r0, r3
 8010e30:	e7a4      	b.n	8010d7c <_printf_i+0x168>
 8010e32:	2301      	movs	r3, #1
 8010e34:	4632      	mov	r2, r6
 8010e36:	4649      	mov	r1, r9
 8010e38:	4640      	mov	r0, r8
 8010e3a:	47d0      	blx	sl
 8010e3c:	3001      	adds	r0, #1
 8010e3e:	d09b      	beq.n	8010d78 <_printf_i+0x164>
 8010e40:	3501      	adds	r5, #1
 8010e42:	68e3      	ldr	r3, [r4, #12]
 8010e44:	9903      	ldr	r1, [sp, #12]
 8010e46:	1a5b      	subs	r3, r3, r1
 8010e48:	42ab      	cmp	r3, r5
 8010e4a:	dcf2      	bgt.n	8010e32 <_printf_i+0x21e>
 8010e4c:	e7eb      	b.n	8010e26 <_printf_i+0x212>
 8010e4e:	2500      	movs	r5, #0
 8010e50:	f104 0619 	add.w	r6, r4, #25
 8010e54:	e7f5      	b.n	8010e42 <_printf_i+0x22e>
 8010e56:	bf00      	nop
 8010e58:	08014297 	.word	0x08014297
 8010e5c:	080142a8 	.word	0x080142a8

08010e60 <__swbuf_r>:
 8010e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e62:	460e      	mov	r6, r1
 8010e64:	4614      	mov	r4, r2
 8010e66:	4605      	mov	r5, r0
 8010e68:	b118      	cbz	r0, 8010e72 <__swbuf_r+0x12>
 8010e6a:	6983      	ldr	r3, [r0, #24]
 8010e6c:	b90b      	cbnz	r3, 8010e72 <__swbuf_r+0x12>
 8010e6e:	f001 f851 	bl	8011f14 <__sinit>
 8010e72:	4b21      	ldr	r3, [pc, #132]	; (8010ef8 <__swbuf_r+0x98>)
 8010e74:	429c      	cmp	r4, r3
 8010e76:	d12b      	bne.n	8010ed0 <__swbuf_r+0x70>
 8010e78:	686c      	ldr	r4, [r5, #4]
 8010e7a:	69a3      	ldr	r3, [r4, #24]
 8010e7c:	60a3      	str	r3, [r4, #8]
 8010e7e:	89a3      	ldrh	r3, [r4, #12]
 8010e80:	071a      	lsls	r2, r3, #28
 8010e82:	d52f      	bpl.n	8010ee4 <__swbuf_r+0x84>
 8010e84:	6923      	ldr	r3, [r4, #16]
 8010e86:	b36b      	cbz	r3, 8010ee4 <__swbuf_r+0x84>
 8010e88:	6923      	ldr	r3, [r4, #16]
 8010e8a:	6820      	ldr	r0, [r4, #0]
 8010e8c:	1ac0      	subs	r0, r0, r3
 8010e8e:	6963      	ldr	r3, [r4, #20]
 8010e90:	b2f6      	uxtb	r6, r6
 8010e92:	4283      	cmp	r3, r0
 8010e94:	4637      	mov	r7, r6
 8010e96:	dc04      	bgt.n	8010ea2 <__swbuf_r+0x42>
 8010e98:	4621      	mov	r1, r4
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f000 ffa6 	bl	8011dec <_fflush_r>
 8010ea0:	bb30      	cbnz	r0, 8010ef0 <__swbuf_r+0x90>
 8010ea2:	68a3      	ldr	r3, [r4, #8]
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	60a3      	str	r3, [r4, #8]
 8010ea8:	6823      	ldr	r3, [r4, #0]
 8010eaa:	1c5a      	adds	r2, r3, #1
 8010eac:	6022      	str	r2, [r4, #0]
 8010eae:	701e      	strb	r6, [r3, #0]
 8010eb0:	6963      	ldr	r3, [r4, #20]
 8010eb2:	3001      	adds	r0, #1
 8010eb4:	4283      	cmp	r3, r0
 8010eb6:	d004      	beq.n	8010ec2 <__swbuf_r+0x62>
 8010eb8:	89a3      	ldrh	r3, [r4, #12]
 8010eba:	07db      	lsls	r3, r3, #31
 8010ebc:	d506      	bpl.n	8010ecc <__swbuf_r+0x6c>
 8010ebe:	2e0a      	cmp	r6, #10
 8010ec0:	d104      	bne.n	8010ecc <__swbuf_r+0x6c>
 8010ec2:	4621      	mov	r1, r4
 8010ec4:	4628      	mov	r0, r5
 8010ec6:	f000 ff91 	bl	8011dec <_fflush_r>
 8010eca:	b988      	cbnz	r0, 8010ef0 <__swbuf_r+0x90>
 8010ecc:	4638      	mov	r0, r7
 8010ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ed0:	4b0a      	ldr	r3, [pc, #40]	; (8010efc <__swbuf_r+0x9c>)
 8010ed2:	429c      	cmp	r4, r3
 8010ed4:	d101      	bne.n	8010eda <__swbuf_r+0x7a>
 8010ed6:	68ac      	ldr	r4, [r5, #8]
 8010ed8:	e7cf      	b.n	8010e7a <__swbuf_r+0x1a>
 8010eda:	4b09      	ldr	r3, [pc, #36]	; (8010f00 <__swbuf_r+0xa0>)
 8010edc:	429c      	cmp	r4, r3
 8010ede:	bf08      	it	eq
 8010ee0:	68ec      	ldreq	r4, [r5, #12]
 8010ee2:	e7ca      	b.n	8010e7a <__swbuf_r+0x1a>
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4628      	mov	r0, r5
 8010ee8:	f000 f80c 	bl	8010f04 <__swsetup_r>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d0cb      	beq.n	8010e88 <__swbuf_r+0x28>
 8010ef0:	f04f 37ff 	mov.w	r7, #4294967295
 8010ef4:	e7ea      	b.n	8010ecc <__swbuf_r+0x6c>
 8010ef6:	bf00      	nop
 8010ef8:	08014370 	.word	0x08014370
 8010efc:	08014390 	.word	0x08014390
 8010f00:	08014350 	.word	0x08014350

08010f04 <__swsetup_r>:
 8010f04:	4b32      	ldr	r3, [pc, #200]	; (8010fd0 <__swsetup_r+0xcc>)
 8010f06:	b570      	push	{r4, r5, r6, lr}
 8010f08:	681d      	ldr	r5, [r3, #0]
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	460c      	mov	r4, r1
 8010f0e:	b125      	cbz	r5, 8010f1a <__swsetup_r+0x16>
 8010f10:	69ab      	ldr	r3, [r5, #24]
 8010f12:	b913      	cbnz	r3, 8010f1a <__swsetup_r+0x16>
 8010f14:	4628      	mov	r0, r5
 8010f16:	f000 fffd 	bl	8011f14 <__sinit>
 8010f1a:	4b2e      	ldr	r3, [pc, #184]	; (8010fd4 <__swsetup_r+0xd0>)
 8010f1c:	429c      	cmp	r4, r3
 8010f1e:	d10f      	bne.n	8010f40 <__swsetup_r+0x3c>
 8010f20:	686c      	ldr	r4, [r5, #4]
 8010f22:	89a3      	ldrh	r3, [r4, #12]
 8010f24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f28:	0719      	lsls	r1, r3, #28
 8010f2a:	d42c      	bmi.n	8010f86 <__swsetup_r+0x82>
 8010f2c:	06dd      	lsls	r5, r3, #27
 8010f2e:	d411      	bmi.n	8010f54 <__swsetup_r+0x50>
 8010f30:	2309      	movs	r3, #9
 8010f32:	6033      	str	r3, [r6, #0]
 8010f34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010f38:	81a3      	strh	r3, [r4, #12]
 8010f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3e:	e03e      	b.n	8010fbe <__swsetup_r+0xba>
 8010f40:	4b25      	ldr	r3, [pc, #148]	; (8010fd8 <__swsetup_r+0xd4>)
 8010f42:	429c      	cmp	r4, r3
 8010f44:	d101      	bne.n	8010f4a <__swsetup_r+0x46>
 8010f46:	68ac      	ldr	r4, [r5, #8]
 8010f48:	e7eb      	b.n	8010f22 <__swsetup_r+0x1e>
 8010f4a:	4b24      	ldr	r3, [pc, #144]	; (8010fdc <__swsetup_r+0xd8>)
 8010f4c:	429c      	cmp	r4, r3
 8010f4e:	bf08      	it	eq
 8010f50:	68ec      	ldreq	r4, [r5, #12]
 8010f52:	e7e6      	b.n	8010f22 <__swsetup_r+0x1e>
 8010f54:	0758      	lsls	r0, r3, #29
 8010f56:	d512      	bpl.n	8010f7e <__swsetup_r+0x7a>
 8010f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f5a:	b141      	cbz	r1, 8010f6e <__swsetup_r+0x6a>
 8010f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010f60:	4299      	cmp	r1, r3
 8010f62:	d002      	beq.n	8010f6a <__swsetup_r+0x66>
 8010f64:	4630      	mov	r0, r6
 8010f66:	f001 fc75 	bl	8012854 <_free_r>
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	6363      	str	r3, [r4, #52]	; 0x34
 8010f6e:	89a3      	ldrh	r3, [r4, #12]
 8010f70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010f74:	81a3      	strh	r3, [r4, #12]
 8010f76:	2300      	movs	r3, #0
 8010f78:	6063      	str	r3, [r4, #4]
 8010f7a:	6923      	ldr	r3, [r4, #16]
 8010f7c:	6023      	str	r3, [r4, #0]
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	f043 0308 	orr.w	r3, r3, #8
 8010f84:	81a3      	strh	r3, [r4, #12]
 8010f86:	6923      	ldr	r3, [r4, #16]
 8010f88:	b94b      	cbnz	r3, 8010f9e <__swsetup_r+0x9a>
 8010f8a:	89a3      	ldrh	r3, [r4, #12]
 8010f8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f94:	d003      	beq.n	8010f9e <__swsetup_r+0x9a>
 8010f96:	4621      	mov	r1, r4
 8010f98:	4630      	mov	r0, r6
 8010f9a:	f001 f885 	bl	80120a8 <__smakebuf_r>
 8010f9e:	89a0      	ldrh	r0, [r4, #12]
 8010fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010fa4:	f010 0301 	ands.w	r3, r0, #1
 8010fa8:	d00a      	beq.n	8010fc0 <__swsetup_r+0xbc>
 8010faa:	2300      	movs	r3, #0
 8010fac:	60a3      	str	r3, [r4, #8]
 8010fae:	6963      	ldr	r3, [r4, #20]
 8010fb0:	425b      	negs	r3, r3
 8010fb2:	61a3      	str	r3, [r4, #24]
 8010fb4:	6923      	ldr	r3, [r4, #16]
 8010fb6:	b943      	cbnz	r3, 8010fca <__swsetup_r+0xc6>
 8010fb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010fbc:	d1ba      	bne.n	8010f34 <__swsetup_r+0x30>
 8010fbe:	bd70      	pop	{r4, r5, r6, pc}
 8010fc0:	0781      	lsls	r1, r0, #30
 8010fc2:	bf58      	it	pl
 8010fc4:	6963      	ldrpl	r3, [r4, #20]
 8010fc6:	60a3      	str	r3, [r4, #8]
 8010fc8:	e7f4      	b.n	8010fb4 <__swsetup_r+0xb0>
 8010fca:	2000      	movs	r0, #0
 8010fcc:	e7f7      	b.n	8010fbe <__swsetup_r+0xba>
 8010fce:	bf00      	nop
 8010fd0:	20000304 	.word	0x20000304
 8010fd4:	08014370 	.word	0x08014370
 8010fd8:	08014390 	.word	0x08014390
 8010fdc:	08014350 	.word	0x08014350

08010fe0 <abort>:
 8010fe0:	b508      	push	{r3, lr}
 8010fe2:	2006      	movs	r0, #6
 8010fe4:	f001 fd18 	bl	8012a18 <raise>
 8010fe8:	2001      	movs	r0, #1
 8010fea:	f7f8 fbd9 	bl	80097a0 <_exit>

08010fee <quorem>:
 8010fee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff2:	6903      	ldr	r3, [r0, #16]
 8010ff4:	690c      	ldr	r4, [r1, #16]
 8010ff6:	42a3      	cmp	r3, r4
 8010ff8:	4607      	mov	r7, r0
 8010ffa:	f2c0 8081 	blt.w	8011100 <quorem+0x112>
 8010ffe:	3c01      	subs	r4, #1
 8011000:	f101 0814 	add.w	r8, r1, #20
 8011004:	f100 0514 	add.w	r5, r0, #20
 8011008:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801100c:	9301      	str	r3, [sp, #4]
 801100e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011012:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011016:	3301      	adds	r3, #1
 8011018:	429a      	cmp	r2, r3
 801101a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801101e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011022:	fbb2 f6f3 	udiv	r6, r2, r3
 8011026:	d331      	bcc.n	801108c <quorem+0x9e>
 8011028:	f04f 0e00 	mov.w	lr, #0
 801102c:	4640      	mov	r0, r8
 801102e:	46ac      	mov	ip, r5
 8011030:	46f2      	mov	sl, lr
 8011032:	f850 2b04 	ldr.w	r2, [r0], #4
 8011036:	b293      	uxth	r3, r2
 8011038:	fb06 e303 	mla	r3, r6, r3, lr
 801103c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011040:	b29b      	uxth	r3, r3
 8011042:	ebaa 0303 	sub.w	r3, sl, r3
 8011046:	0c12      	lsrs	r2, r2, #16
 8011048:	f8dc a000 	ldr.w	sl, [ip]
 801104c:	fb06 e202 	mla	r2, r6, r2, lr
 8011050:	fa13 f38a 	uxtah	r3, r3, sl
 8011054:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011058:	fa1f fa82 	uxth.w	sl, r2
 801105c:	f8dc 2000 	ldr.w	r2, [ip]
 8011060:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8011064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011068:	b29b      	uxth	r3, r3
 801106a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801106e:	4581      	cmp	r9, r0
 8011070:	f84c 3b04 	str.w	r3, [ip], #4
 8011074:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011078:	d2db      	bcs.n	8011032 <quorem+0x44>
 801107a:	f855 300b 	ldr.w	r3, [r5, fp]
 801107e:	b92b      	cbnz	r3, 801108c <quorem+0x9e>
 8011080:	9b01      	ldr	r3, [sp, #4]
 8011082:	3b04      	subs	r3, #4
 8011084:	429d      	cmp	r5, r3
 8011086:	461a      	mov	r2, r3
 8011088:	d32e      	bcc.n	80110e8 <quorem+0xfa>
 801108a:	613c      	str	r4, [r7, #16]
 801108c:	4638      	mov	r0, r7
 801108e:	f001 fad1 	bl	8012634 <__mcmp>
 8011092:	2800      	cmp	r0, #0
 8011094:	db24      	blt.n	80110e0 <quorem+0xf2>
 8011096:	3601      	adds	r6, #1
 8011098:	4628      	mov	r0, r5
 801109a:	f04f 0c00 	mov.w	ip, #0
 801109e:	f858 2b04 	ldr.w	r2, [r8], #4
 80110a2:	f8d0 e000 	ldr.w	lr, [r0]
 80110a6:	b293      	uxth	r3, r2
 80110a8:	ebac 0303 	sub.w	r3, ip, r3
 80110ac:	0c12      	lsrs	r2, r2, #16
 80110ae:	fa13 f38e 	uxtah	r3, r3, lr
 80110b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80110b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80110ba:	b29b      	uxth	r3, r3
 80110bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80110c0:	45c1      	cmp	r9, r8
 80110c2:	f840 3b04 	str.w	r3, [r0], #4
 80110c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80110ca:	d2e8      	bcs.n	801109e <quorem+0xb0>
 80110cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80110d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80110d4:	b922      	cbnz	r2, 80110e0 <quorem+0xf2>
 80110d6:	3b04      	subs	r3, #4
 80110d8:	429d      	cmp	r5, r3
 80110da:	461a      	mov	r2, r3
 80110dc:	d30a      	bcc.n	80110f4 <quorem+0x106>
 80110de:	613c      	str	r4, [r7, #16]
 80110e0:	4630      	mov	r0, r6
 80110e2:	b003      	add	sp, #12
 80110e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110e8:	6812      	ldr	r2, [r2, #0]
 80110ea:	3b04      	subs	r3, #4
 80110ec:	2a00      	cmp	r2, #0
 80110ee:	d1cc      	bne.n	801108a <quorem+0x9c>
 80110f0:	3c01      	subs	r4, #1
 80110f2:	e7c7      	b.n	8011084 <quorem+0x96>
 80110f4:	6812      	ldr	r2, [r2, #0]
 80110f6:	3b04      	subs	r3, #4
 80110f8:	2a00      	cmp	r2, #0
 80110fa:	d1f0      	bne.n	80110de <quorem+0xf0>
 80110fc:	3c01      	subs	r4, #1
 80110fe:	e7eb      	b.n	80110d8 <quorem+0xea>
 8011100:	2000      	movs	r0, #0
 8011102:	e7ee      	b.n	80110e2 <quorem+0xf4>
 8011104:	0000      	movs	r0, r0
	...

08011108 <_dtoa_r>:
 8011108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110c:	ed2d 8b02 	vpush	{d8}
 8011110:	ec57 6b10 	vmov	r6, r7, d0
 8011114:	b095      	sub	sp, #84	; 0x54
 8011116:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011118:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801111c:	9105      	str	r1, [sp, #20]
 801111e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011122:	4604      	mov	r4, r0
 8011124:	9209      	str	r2, [sp, #36]	; 0x24
 8011126:	930f      	str	r3, [sp, #60]	; 0x3c
 8011128:	b975      	cbnz	r5, 8011148 <_dtoa_r+0x40>
 801112a:	2010      	movs	r0, #16
 801112c:	f000 fffc 	bl	8012128 <malloc>
 8011130:	4602      	mov	r2, r0
 8011132:	6260      	str	r0, [r4, #36]	; 0x24
 8011134:	b920      	cbnz	r0, 8011140 <_dtoa_r+0x38>
 8011136:	4bb2      	ldr	r3, [pc, #712]	; (8011400 <_dtoa_r+0x2f8>)
 8011138:	21ea      	movs	r1, #234	; 0xea
 801113a:	48b2      	ldr	r0, [pc, #712]	; (8011404 <_dtoa_r+0x2fc>)
 801113c:	f7ff f85c 	bl	80101f8 <__assert_func>
 8011140:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011144:	6005      	str	r5, [r0, #0]
 8011146:	60c5      	str	r5, [r0, #12]
 8011148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801114a:	6819      	ldr	r1, [r3, #0]
 801114c:	b151      	cbz	r1, 8011164 <_dtoa_r+0x5c>
 801114e:	685a      	ldr	r2, [r3, #4]
 8011150:	604a      	str	r2, [r1, #4]
 8011152:	2301      	movs	r3, #1
 8011154:	4093      	lsls	r3, r2
 8011156:	608b      	str	r3, [r1, #8]
 8011158:	4620      	mov	r0, r4
 801115a:	f001 f82d 	bl	80121b8 <_Bfree>
 801115e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011160:	2200      	movs	r2, #0
 8011162:	601a      	str	r2, [r3, #0]
 8011164:	1e3b      	subs	r3, r7, #0
 8011166:	bfb9      	ittee	lt
 8011168:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801116c:	9303      	strlt	r3, [sp, #12]
 801116e:	2300      	movge	r3, #0
 8011170:	f8c8 3000 	strge.w	r3, [r8]
 8011174:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8011178:	4ba3      	ldr	r3, [pc, #652]	; (8011408 <_dtoa_r+0x300>)
 801117a:	bfbc      	itt	lt
 801117c:	2201      	movlt	r2, #1
 801117e:	f8c8 2000 	strlt.w	r2, [r8]
 8011182:	ea33 0309 	bics.w	r3, r3, r9
 8011186:	d11b      	bne.n	80111c0 <_dtoa_r+0xb8>
 8011188:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801118a:	f242 730f 	movw	r3, #9999	; 0x270f
 801118e:	6013      	str	r3, [r2, #0]
 8011190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011194:	4333      	orrs	r3, r6
 8011196:	f000 857a 	beq.w	8011c8e <_dtoa_r+0xb86>
 801119a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801119c:	b963      	cbnz	r3, 80111b8 <_dtoa_r+0xb0>
 801119e:	4b9b      	ldr	r3, [pc, #620]	; (801140c <_dtoa_r+0x304>)
 80111a0:	e024      	b.n	80111ec <_dtoa_r+0xe4>
 80111a2:	4b9b      	ldr	r3, [pc, #620]	; (8011410 <_dtoa_r+0x308>)
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	3308      	adds	r3, #8
 80111a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80111aa:	6013      	str	r3, [r2, #0]
 80111ac:	9800      	ldr	r0, [sp, #0]
 80111ae:	b015      	add	sp, #84	; 0x54
 80111b0:	ecbd 8b02 	vpop	{d8}
 80111b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b8:	4b94      	ldr	r3, [pc, #592]	; (801140c <_dtoa_r+0x304>)
 80111ba:	9300      	str	r3, [sp, #0]
 80111bc:	3303      	adds	r3, #3
 80111be:	e7f3      	b.n	80111a8 <_dtoa_r+0xa0>
 80111c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80111c4:	2200      	movs	r2, #0
 80111c6:	ec51 0b17 	vmov	r0, r1, d7
 80111ca:	2300      	movs	r3, #0
 80111cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80111d0:	f7ef fc7a 	bl	8000ac8 <__aeabi_dcmpeq>
 80111d4:	4680      	mov	r8, r0
 80111d6:	b158      	cbz	r0, 80111f0 <_dtoa_r+0xe8>
 80111d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80111da:	2301      	movs	r3, #1
 80111dc:	6013      	str	r3, [r2, #0]
 80111de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 8551 	beq.w	8011c88 <_dtoa_r+0xb80>
 80111e6:	488b      	ldr	r0, [pc, #556]	; (8011414 <_dtoa_r+0x30c>)
 80111e8:	6018      	str	r0, [r3, #0]
 80111ea:	1e43      	subs	r3, r0, #1
 80111ec:	9300      	str	r3, [sp, #0]
 80111ee:	e7dd      	b.n	80111ac <_dtoa_r+0xa4>
 80111f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80111f4:	aa12      	add	r2, sp, #72	; 0x48
 80111f6:	a913      	add	r1, sp, #76	; 0x4c
 80111f8:	4620      	mov	r0, r4
 80111fa:	f001 fabf 	bl	801277c <__d2b>
 80111fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011202:	4683      	mov	fp, r0
 8011204:	2d00      	cmp	r5, #0
 8011206:	d07c      	beq.n	8011302 <_dtoa_r+0x1fa>
 8011208:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801120a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801120e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011212:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8011216:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801121a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801121e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011222:	4b7d      	ldr	r3, [pc, #500]	; (8011418 <_dtoa_r+0x310>)
 8011224:	2200      	movs	r2, #0
 8011226:	4630      	mov	r0, r6
 8011228:	4639      	mov	r1, r7
 801122a:	f7ef f82d 	bl	8000288 <__aeabi_dsub>
 801122e:	a36e      	add	r3, pc, #440	; (adr r3, 80113e8 <_dtoa_r+0x2e0>)
 8011230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011234:	f7ef f9e0 	bl	80005f8 <__aeabi_dmul>
 8011238:	a36d      	add	r3, pc, #436	; (adr r3, 80113f0 <_dtoa_r+0x2e8>)
 801123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123e:	f7ef f825 	bl	800028c <__adddf3>
 8011242:	4606      	mov	r6, r0
 8011244:	4628      	mov	r0, r5
 8011246:	460f      	mov	r7, r1
 8011248:	f7ef f96c 	bl	8000524 <__aeabi_i2d>
 801124c:	a36a      	add	r3, pc, #424	; (adr r3, 80113f8 <_dtoa_r+0x2f0>)
 801124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011252:	f7ef f9d1 	bl	80005f8 <__aeabi_dmul>
 8011256:	4602      	mov	r2, r0
 8011258:	460b      	mov	r3, r1
 801125a:	4630      	mov	r0, r6
 801125c:	4639      	mov	r1, r7
 801125e:	f7ef f815 	bl	800028c <__adddf3>
 8011262:	4606      	mov	r6, r0
 8011264:	460f      	mov	r7, r1
 8011266:	f7ef fc77 	bl	8000b58 <__aeabi_d2iz>
 801126a:	2200      	movs	r2, #0
 801126c:	4682      	mov	sl, r0
 801126e:	2300      	movs	r3, #0
 8011270:	4630      	mov	r0, r6
 8011272:	4639      	mov	r1, r7
 8011274:	f7ef fc32 	bl	8000adc <__aeabi_dcmplt>
 8011278:	b148      	cbz	r0, 801128e <_dtoa_r+0x186>
 801127a:	4650      	mov	r0, sl
 801127c:	f7ef f952 	bl	8000524 <__aeabi_i2d>
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	f7ef fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8011288:	b908      	cbnz	r0, 801128e <_dtoa_r+0x186>
 801128a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801128e:	f1ba 0f16 	cmp.w	sl, #22
 8011292:	d854      	bhi.n	801133e <_dtoa_r+0x236>
 8011294:	4b61      	ldr	r3, [pc, #388]	; (801141c <_dtoa_r+0x314>)
 8011296:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80112a2:	f7ef fc1b 	bl	8000adc <__aeabi_dcmplt>
 80112a6:	2800      	cmp	r0, #0
 80112a8:	d04b      	beq.n	8011342 <_dtoa_r+0x23a>
 80112aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112ae:	2300      	movs	r3, #0
 80112b0:	930e      	str	r3, [sp, #56]	; 0x38
 80112b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80112b4:	1b5d      	subs	r5, r3, r5
 80112b6:	1e6b      	subs	r3, r5, #1
 80112b8:	9304      	str	r3, [sp, #16]
 80112ba:	bf43      	ittte	mi
 80112bc:	2300      	movmi	r3, #0
 80112be:	f1c5 0801 	rsbmi	r8, r5, #1
 80112c2:	9304      	strmi	r3, [sp, #16]
 80112c4:	f04f 0800 	movpl.w	r8, #0
 80112c8:	f1ba 0f00 	cmp.w	sl, #0
 80112cc:	db3b      	blt.n	8011346 <_dtoa_r+0x23e>
 80112ce:	9b04      	ldr	r3, [sp, #16]
 80112d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80112d4:	4453      	add	r3, sl
 80112d6:	9304      	str	r3, [sp, #16]
 80112d8:	2300      	movs	r3, #0
 80112da:	9306      	str	r3, [sp, #24]
 80112dc:	9b05      	ldr	r3, [sp, #20]
 80112de:	2b09      	cmp	r3, #9
 80112e0:	d869      	bhi.n	80113b6 <_dtoa_r+0x2ae>
 80112e2:	2b05      	cmp	r3, #5
 80112e4:	bfc4      	itt	gt
 80112e6:	3b04      	subgt	r3, #4
 80112e8:	9305      	strgt	r3, [sp, #20]
 80112ea:	9b05      	ldr	r3, [sp, #20]
 80112ec:	f1a3 0302 	sub.w	r3, r3, #2
 80112f0:	bfcc      	ite	gt
 80112f2:	2500      	movgt	r5, #0
 80112f4:	2501      	movle	r5, #1
 80112f6:	2b03      	cmp	r3, #3
 80112f8:	d869      	bhi.n	80113ce <_dtoa_r+0x2c6>
 80112fa:	e8df f003 	tbb	[pc, r3]
 80112fe:	4e2c      	.short	0x4e2c
 8011300:	5a4c      	.short	0x5a4c
 8011302:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8011306:	441d      	add	r5, r3
 8011308:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801130c:	2b20      	cmp	r3, #32
 801130e:	bfc1      	itttt	gt
 8011310:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011314:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8011318:	fa09 f303 	lslgt.w	r3, r9, r3
 801131c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011320:	bfda      	itte	le
 8011322:	f1c3 0320 	rsble	r3, r3, #32
 8011326:	fa06 f003 	lslle.w	r0, r6, r3
 801132a:	4318      	orrgt	r0, r3
 801132c:	f7ef f8ea 	bl	8000504 <__aeabi_ui2d>
 8011330:	2301      	movs	r3, #1
 8011332:	4606      	mov	r6, r0
 8011334:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8011338:	3d01      	subs	r5, #1
 801133a:	9310      	str	r3, [sp, #64]	; 0x40
 801133c:	e771      	b.n	8011222 <_dtoa_r+0x11a>
 801133e:	2301      	movs	r3, #1
 8011340:	e7b6      	b.n	80112b0 <_dtoa_r+0x1a8>
 8011342:	900e      	str	r0, [sp, #56]	; 0x38
 8011344:	e7b5      	b.n	80112b2 <_dtoa_r+0x1aa>
 8011346:	f1ca 0300 	rsb	r3, sl, #0
 801134a:	9306      	str	r3, [sp, #24]
 801134c:	2300      	movs	r3, #0
 801134e:	eba8 080a 	sub.w	r8, r8, sl
 8011352:	930d      	str	r3, [sp, #52]	; 0x34
 8011354:	e7c2      	b.n	80112dc <_dtoa_r+0x1d4>
 8011356:	2300      	movs	r3, #0
 8011358:	9308      	str	r3, [sp, #32]
 801135a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801135c:	2b00      	cmp	r3, #0
 801135e:	dc39      	bgt.n	80113d4 <_dtoa_r+0x2cc>
 8011360:	f04f 0901 	mov.w	r9, #1
 8011364:	f8cd 9004 	str.w	r9, [sp, #4]
 8011368:	464b      	mov	r3, r9
 801136a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801136e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011370:	2200      	movs	r2, #0
 8011372:	6042      	str	r2, [r0, #4]
 8011374:	2204      	movs	r2, #4
 8011376:	f102 0614 	add.w	r6, r2, #20
 801137a:	429e      	cmp	r6, r3
 801137c:	6841      	ldr	r1, [r0, #4]
 801137e:	d92f      	bls.n	80113e0 <_dtoa_r+0x2d8>
 8011380:	4620      	mov	r0, r4
 8011382:	f000 fed9 	bl	8012138 <_Balloc>
 8011386:	9000      	str	r0, [sp, #0]
 8011388:	2800      	cmp	r0, #0
 801138a:	d14b      	bne.n	8011424 <_dtoa_r+0x31c>
 801138c:	4b24      	ldr	r3, [pc, #144]	; (8011420 <_dtoa_r+0x318>)
 801138e:	4602      	mov	r2, r0
 8011390:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8011394:	e6d1      	b.n	801113a <_dtoa_r+0x32>
 8011396:	2301      	movs	r3, #1
 8011398:	e7de      	b.n	8011358 <_dtoa_r+0x250>
 801139a:	2300      	movs	r3, #0
 801139c:	9308      	str	r3, [sp, #32]
 801139e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113a0:	eb0a 0903 	add.w	r9, sl, r3
 80113a4:	f109 0301 	add.w	r3, r9, #1
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	9301      	str	r3, [sp, #4]
 80113ac:	bfb8      	it	lt
 80113ae:	2301      	movlt	r3, #1
 80113b0:	e7dd      	b.n	801136e <_dtoa_r+0x266>
 80113b2:	2301      	movs	r3, #1
 80113b4:	e7f2      	b.n	801139c <_dtoa_r+0x294>
 80113b6:	2501      	movs	r5, #1
 80113b8:	2300      	movs	r3, #0
 80113ba:	9305      	str	r3, [sp, #20]
 80113bc:	9508      	str	r5, [sp, #32]
 80113be:	f04f 39ff 	mov.w	r9, #4294967295
 80113c2:	2200      	movs	r2, #0
 80113c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80113c8:	2312      	movs	r3, #18
 80113ca:	9209      	str	r2, [sp, #36]	; 0x24
 80113cc:	e7cf      	b.n	801136e <_dtoa_r+0x266>
 80113ce:	2301      	movs	r3, #1
 80113d0:	9308      	str	r3, [sp, #32]
 80113d2:	e7f4      	b.n	80113be <_dtoa_r+0x2b6>
 80113d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80113d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80113dc:	464b      	mov	r3, r9
 80113de:	e7c6      	b.n	801136e <_dtoa_r+0x266>
 80113e0:	3101      	adds	r1, #1
 80113e2:	6041      	str	r1, [r0, #4]
 80113e4:	0052      	lsls	r2, r2, #1
 80113e6:	e7c6      	b.n	8011376 <_dtoa_r+0x26e>
 80113e8:	636f4361 	.word	0x636f4361
 80113ec:	3fd287a7 	.word	0x3fd287a7
 80113f0:	8b60c8b3 	.word	0x8b60c8b3
 80113f4:	3fc68a28 	.word	0x3fc68a28
 80113f8:	509f79fb 	.word	0x509f79fb
 80113fc:	3fd34413 	.word	0x3fd34413
 8011400:	080142c6 	.word	0x080142c6
 8011404:	080142dd 	.word	0x080142dd
 8011408:	7ff00000 	.word	0x7ff00000
 801140c:	080142c2 	.word	0x080142c2
 8011410:	080142b9 	.word	0x080142b9
 8011414:	08014296 	.word	0x08014296
 8011418:	3ff80000 	.word	0x3ff80000
 801141c:	08014438 	.word	0x08014438
 8011420:	0801433c 	.word	0x0801433c
 8011424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011426:	9a00      	ldr	r2, [sp, #0]
 8011428:	601a      	str	r2, [r3, #0]
 801142a:	9b01      	ldr	r3, [sp, #4]
 801142c:	2b0e      	cmp	r3, #14
 801142e:	f200 80ad 	bhi.w	801158c <_dtoa_r+0x484>
 8011432:	2d00      	cmp	r5, #0
 8011434:	f000 80aa 	beq.w	801158c <_dtoa_r+0x484>
 8011438:	f1ba 0f00 	cmp.w	sl, #0
 801143c:	dd36      	ble.n	80114ac <_dtoa_r+0x3a4>
 801143e:	4ac3      	ldr	r2, [pc, #780]	; (801174c <_dtoa_r+0x644>)
 8011440:	f00a 030f 	and.w	r3, sl, #15
 8011444:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011448:	ed93 7b00 	vldr	d7, [r3]
 801144c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8011450:	ea4f 172a 	mov.w	r7, sl, asr #4
 8011454:	eeb0 8a47 	vmov.f32	s16, s14
 8011458:	eef0 8a67 	vmov.f32	s17, s15
 801145c:	d016      	beq.n	801148c <_dtoa_r+0x384>
 801145e:	4bbc      	ldr	r3, [pc, #752]	; (8011750 <_dtoa_r+0x648>)
 8011460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011468:	f7ef f9f0 	bl	800084c <__aeabi_ddiv>
 801146c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011470:	f007 070f 	and.w	r7, r7, #15
 8011474:	2503      	movs	r5, #3
 8011476:	4eb6      	ldr	r6, [pc, #728]	; (8011750 <_dtoa_r+0x648>)
 8011478:	b957      	cbnz	r7, 8011490 <_dtoa_r+0x388>
 801147a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801147e:	ec53 2b18 	vmov	r2, r3, d8
 8011482:	f7ef f9e3 	bl	800084c <__aeabi_ddiv>
 8011486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801148a:	e029      	b.n	80114e0 <_dtoa_r+0x3d8>
 801148c:	2502      	movs	r5, #2
 801148e:	e7f2      	b.n	8011476 <_dtoa_r+0x36e>
 8011490:	07f9      	lsls	r1, r7, #31
 8011492:	d508      	bpl.n	80114a6 <_dtoa_r+0x39e>
 8011494:	ec51 0b18 	vmov	r0, r1, d8
 8011498:	e9d6 2300 	ldrd	r2, r3, [r6]
 801149c:	f7ef f8ac 	bl	80005f8 <__aeabi_dmul>
 80114a0:	ec41 0b18 	vmov	d8, r0, r1
 80114a4:	3501      	adds	r5, #1
 80114a6:	107f      	asrs	r7, r7, #1
 80114a8:	3608      	adds	r6, #8
 80114aa:	e7e5      	b.n	8011478 <_dtoa_r+0x370>
 80114ac:	f000 80a6 	beq.w	80115fc <_dtoa_r+0x4f4>
 80114b0:	f1ca 0600 	rsb	r6, sl, #0
 80114b4:	4ba5      	ldr	r3, [pc, #660]	; (801174c <_dtoa_r+0x644>)
 80114b6:	4fa6      	ldr	r7, [pc, #664]	; (8011750 <_dtoa_r+0x648>)
 80114b8:	f006 020f 	and.w	r2, r6, #15
 80114bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80114c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80114c8:	f7ef f896 	bl	80005f8 <__aeabi_dmul>
 80114cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80114d0:	1136      	asrs	r6, r6, #4
 80114d2:	2300      	movs	r3, #0
 80114d4:	2502      	movs	r5, #2
 80114d6:	2e00      	cmp	r6, #0
 80114d8:	f040 8085 	bne.w	80115e6 <_dtoa_r+0x4de>
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d1d2      	bne.n	8011486 <_dtoa_r+0x37e>
 80114e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f000 808c 	beq.w	8011600 <_dtoa_r+0x4f8>
 80114e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80114ec:	4b99      	ldr	r3, [pc, #612]	; (8011754 <_dtoa_r+0x64c>)
 80114ee:	2200      	movs	r2, #0
 80114f0:	4630      	mov	r0, r6
 80114f2:	4639      	mov	r1, r7
 80114f4:	f7ef faf2 	bl	8000adc <__aeabi_dcmplt>
 80114f8:	2800      	cmp	r0, #0
 80114fa:	f000 8081 	beq.w	8011600 <_dtoa_r+0x4f8>
 80114fe:	9b01      	ldr	r3, [sp, #4]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d07d      	beq.n	8011600 <_dtoa_r+0x4f8>
 8011504:	f1b9 0f00 	cmp.w	r9, #0
 8011508:	dd3c      	ble.n	8011584 <_dtoa_r+0x47c>
 801150a:	f10a 33ff 	add.w	r3, sl, #4294967295
 801150e:	9307      	str	r3, [sp, #28]
 8011510:	2200      	movs	r2, #0
 8011512:	4b91      	ldr	r3, [pc, #580]	; (8011758 <_dtoa_r+0x650>)
 8011514:	4630      	mov	r0, r6
 8011516:	4639      	mov	r1, r7
 8011518:	f7ef f86e 	bl	80005f8 <__aeabi_dmul>
 801151c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011520:	3501      	adds	r5, #1
 8011522:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8011526:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801152a:	4628      	mov	r0, r5
 801152c:	f7ee fffa 	bl	8000524 <__aeabi_i2d>
 8011530:	4632      	mov	r2, r6
 8011532:	463b      	mov	r3, r7
 8011534:	f7ef f860 	bl	80005f8 <__aeabi_dmul>
 8011538:	4b88      	ldr	r3, [pc, #544]	; (801175c <_dtoa_r+0x654>)
 801153a:	2200      	movs	r2, #0
 801153c:	f7ee fea6 	bl	800028c <__adddf3>
 8011540:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8011544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011548:	9303      	str	r3, [sp, #12]
 801154a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801154c:	2b00      	cmp	r3, #0
 801154e:	d15c      	bne.n	801160a <_dtoa_r+0x502>
 8011550:	4b83      	ldr	r3, [pc, #524]	; (8011760 <_dtoa_r+0x658>)
 8011552:	2200      	movs	r2, #0
 8011554:	4630      	mov	r0, r6
 8011556:	4639      	mov	r1, r7
 8011558:	f7ee fe96 	bl	8000288 <__aeabi_dsub>
 801155c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011560:	4606      	mov	r6, r0
 8011562:	460f      	mov	r7, r1
 8011564:	f7ef fad8 	bl	8000b18 <__aeabi_dcmpgt>
 8011568:	2800      	cmp	r0, #0
 801156a:	f040 8296 	bne.w	8011a9a <_dtoa_r+0x992>
 801156e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8011572:	4630      	mov	r0, r6
 8011574:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011578:	4639      	mov	r1, r7
 801157a:	f7ef faaf 	bl	8000adc <__aeabi_dcmplt>
 801157e:	2800      	cmp	r0, #0
 8011580:	f040 8288 	bne.w	8011a94 <_dtoa_r+0x98c>
 8011584:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011588:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801158c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801158e:	2b00      	cmp	r3, #0
 8011590:	f2c0 8158 	blt.w	8011844 <_dtoa_r+0x73c>
 8011594:	f1ba 0f0e 	cmp.w	sl, #14
 8011598:	f300 8154 	bgt.w	8011844 <_dtoa_r+0x73c>
 801159c:	4b6b      	ldr	r3, [pc, #428]	; (801174c <_dtoa_r+0x644>)
 801159e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80115a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80115a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f280 80e3 	bge.w	8011774 <_dtoa_r+0x66c>
 80115ae:	9b01      	ldr	r3, [sp, #4]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	f300 80df 	bgt.w	8011774 <_dtoa_r+0x66c>
 80115b6:	f040 826d 	bne.w	8011a94 <_dtoa_r+0x98c>
 80115ba:	4b69      	ldr	r3, [pc, #420]	; (8011760 <_dtoa_r+0x658>)
 80115bc:	2200      	movs	r2, #0
 80115be:	4640      	mov	r0, r8
 80115c0:	4649      	mov	r1, r9
 80115c2:	f7ef f819 	bl	80005f8 <__aeabi_dmul>
 80115c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80115ca:	f7ef fa9b 	bl	8000b04 <__aeabi_dcmpge>
 80115ce:	9e01      	ldr	r6, [sp, #4]
 80115d0:	4637      	mov	r7, r6
 80115d2:	2800      	cmp	r0, #0
 80115d4:	f040 8243 	bne.w	8011a5e <_dtoa_r+0x956>
 80115d8:	9d00      	ldr	r5, [sp, #0]
 80115da:	2331      	movs	r3, #49	; 0x31
 80115dc:	f805 3b01 	strb.w	r3, [r5], #1
 80115e0:	f10a 0a01 	add.w	sl, sl, #1
 80115e4:	e23f      	b.n	8011a66 <_dtoa_r+0x95e>
 80115e6:	07f2      	lsls	r2, r6, #31
 80115e8:	d505      	bpl.n	80115f6 <_dtoa_r+0x4ee>
 80115ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115ee:	f7ef f803 	bl	80005f8 <__aeabi_dmul>
 80115f2:	3501      	adds	r5, #1
 80115f4:	2301      	movs	r3, #1
 80115f6:	1076      	asrs	r6, r6, #1
 80115f8:	3708      	adds	r7, #8
 80115fa:	e76c      	b.n	80114d6 <_dtoa_r+0x3ce>
 80115fc:	2502      	movs	r5, #2
 80115fe:	e76f      	b.n	80114e0 <_dtoa_r+0x3d8>
 8011600:	9b01      	ldr	r3, [sp, #4]
 8011602:	f8cd a01c 	str.w	sl, [sp, #28]
 8011606:	930c      	str	r3, [sp, #48]	; 0x30
 8011608:	e78d      	b.n	8011526 <_dtoa_r+0x41e>
 801160a:	9900      	ldr	r1, [sp, #0]
 801160c:	980c      	ldr	r0, [sp, #48]	; 0x30
 801160e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011610:	4b4e      	ldr	r3, [pc, #312]	; (801174c <_dtoa_r+0x644>)
 8011612:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011616:	4401      	add	r1, r0
 8011618:	9102      	str	r1, [sp, #8]
 801161a:	9908      	ldr	r1, [sp, #32]
 801161c:	eeb0 8a47 	vmov.f32	s16, s14
 8011620:	eef0 8a67 	vmov.f32	s17, s15
 8011624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011628:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801162c:	2900      	cmp	r1, #0
 801162e:	d045      	beq.n	80116bc <_dtoa_r+0x5b4>
 8011630:	494c      	ldr	r1, [pc, #304]	; (8011764 <_dtoa_r+0x65c>)
 8011632:	2000      	movs	r0, #0
 8011634:	f7ef f90a 	bl	800084c <__aeabi_ddiv>
 8011638:	ec53 2b18 	vmov	r2, r3, d8
 801163c:	f7ee fe24 	bl	8000288 <__aeabi_dsub>
 8011640:	9d00      	ldr	r5, [sp, #0]
 8011642:	ec41 0b18 	vmov	d8, r0, r1
 8011646:	4639      	mov	r1, r7
 8011648:	4630      	mov	r0, r6
 801164a:	f7ef fa85 	bl	8000b58 <__aeabi_d2iz>
 801164e:	900c      	str	r0, [sp, #48]	; 0x30
 8011650:	f7ee ff68 	bl	8000524 <__aeabi_i2d>
 8011654:	4602      	mov	r2, r0
 8011656:	460b      	mov	r3, r1
 8011658:	4630      	mov	r0, r6
 801165a:	4639      	mov	r1, r7
 801165c:	f7ee fe14 	bl	8000288 <__aeabi_dsub>
 8011660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011662:	3330      	adds	r3, #48	; 0x30
 8011664:	f805 3b01 	strb.w	r3, [r5], #1
 8011668:	ec53 2b18 	vmov	r2, r3, d8
 801166c:	4606      	mov	r6, r0
 801166e:	460f      	mov	r7, r1
 8011670:	f7ef fa34 	bl	8000adc <__aeabi_dcmplt>
 8011674:	2800      	cmp	r0, #0
 8011676:	d165      	bne.n	8011744 <_dtoa_r+0x63c>
 8011678:	4632      	mov	r2, r6
 801167a:	463b      	mov	r3, r7
 801167c:	4935      	ldr	r1, [pc, #212]	; (8011754 <_dtoa_r+0x64c>)
 801167e:	2000      	movs	r0, #0
 8011680:	f7ee fe02 	bl	8000288 <__aeabi_dsub>
 8011684:	ec53 2b18 	vmov	r2, r3, d8
 8011688:	f7ef fa28 	bl	8000adc <__aeabi_dcmplt>
 801168c:	2800      	cmp	r0, #0
 801168e:	f040 80b9 	bne.w	8011804 <_dtoa_r+0x6fc>
 8011692:	9b02      	ldr	r3, [sp, #8]
 8011694:	429d      	cmp	r5, r3
 8011696:	f43f af75 	beq.w	8011584 <_dtoa_r+0x47c>
 801169a:	4b2f      	ldr	r3, [pc, #188]	; (8011758 <_dtoa_r+0x650>)
 801169c:	ec51 0b18 	vmov	r0, r1, d8
 80116a0:	2200      	movs	r2, #0
 80116a2:	f7ee ffa9 	bl	80005f8 <__aeabi_dmul>
 80116a6:	4b2c      	ldr	r3, [pc, #176]	; (8011758 <_dtoa_r+0x650>)
 80116a8:	ec41 0b18 	vmov	d8, r0, r1
 80116ac:	2200      	movs	r2, #0
 80116ae:	4630      	mov	r0, r6
 80116b0:	4639      	mov	r1, r7
 80116b2:	f7ee ffa1 	bl	80005f8 <__aeabi_dmul>
 80116b6:	4606      	mov	r6, r0
 80116b8:	460f      	mov	r7, r1
 80116ba:	e7c4      	b.n	8011646 <_dtoa_r+0x53e>
 80116bc:	ec51 0b17 	vmov	r0, r1, d7
 80116c0:	f7ee ff9a 	bl	80005f8 <__aeabi_dmul>
 80116c4:	9b02      	ldr	r3, [sp, #8]
 80116c6:	9d00      	ldr	r5, [sp, #0]
 80116c8:	930c      	str	r3, [sp, #48]	; 0x30
 80116ca:	ec41 0b18 	vmov	d8, r0, r1
 80116ce:	4639      	mov	r1, r7
 80116d0:	4630      	mov	r0, r6
 80116d2:	f7ef fa41 	bl	8000b58 <__aeabi_d2iz>
 80116d6:	9011      	str	r0, [sp, #68]	; 0x44
 80116d8:	f7ee ff24 	bl	8000524 <__aeabi_i2d>
 80116dc:	4602      	mov	r2, r0
 80116de:	460b      	mov	r3, r1
 80116e0:	4630      	mov	r0, r6
 80116e2:	4639      	mov	r1, r7
 80116e4:	f7ee fdd0 	bl	8000288 <__aeabi_dsub>
 80116e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80116ea:	3330      	adds	r3, #48	; 0x30
 80116ec:	f805 3b01 	strb.w	r3, [r5], #1
 80116f0:	9b02      	ldr	r3, [sp, #8]
 80116f2:	429d      	cmp	r5, r3
 80116f4:	4606      	mov	r6, r0
 80116f6:	460f      	mov	r7, r1
 80116f8:	f04f 0200 	mov.w	r2, #0
 80116fc:	d134      	bne.n	8011768 <_dtoa_r+0x660>
 80116fe:	4b19      	ldr	r3, [pc, #100]	; (8011764 <_dtoa_r+0x65c>)
 8011700:	ec51 0b18 	vmov	r0, r1, d8
 8011704:	f7ee fdc2 	bl	800028c <__adddf3>
 8011708:	4602      	mov	r2, r0
 801170a:	460b      	mov	r3, r1
 801170c:	4630      	mov	r0, r6
 801170e:	4639      	mov	r1, r7
 8011710:	f7ef fa02 	bl	8000b18 <__aeabi_dcmpgt>
 8011714:	2800      	cmp	r0, #0
 8011716:	d175      	bne.n	8011804 <_dtoa_r+0x6fc>
 8011718:	ec53 2b18 	vmov	r2, r3, d8
 801171c:	4911      	ldr	r1, [pc, #68]	; (8011764 <_dtoa_r+0x65c>)
 801171e:	2000      	movs	r0, #0
 8011720:	f7ee fdb2 	bl	8000288 <__aeabi_dsub>
 8011724:	4602      	mov	r2, r0
 8011726:	460b      	mov	r3, r1
 8011728:	4630      	mov	r0, r6
 801172a:	4639      	mov	r1, r7
 801172c:	f7ef f9d6 	bl	8000adc <__aeabi_dcmplt>
 8011730:	2800      	cmp	r0, #0
 8011732:	f43f af27 	beq.w	8011584 <_dtoa_r+0x47c>
 8011736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011738:	1e6b      	subs	r3, r5, #1
 801173a:	930c      	str	r3, [sp, #48]	; 0x30
 801173c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011740:	2b30      	cmp	r3, #48	; 0x30
 8011742:	d0f8      	beq.n	8011736 <_dtoa_r+0x62e>
 8011744:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011748:	e04a      	b.n	80117e0 <_dtoa_r+0x6d8>
 801174a:	bf00      	nop
 801174c:	08014438 	.word	0x08014438
 8011750:	08014410 	.word	0x08014410
 8011754:	3ff00000 	.word	0x3ff00000
 8011758:	40240000 	.word	0x40240000
 801175c:	401c0000 	.word	0x401c0000
 8011760:	40140000 	.word	0x40140000
 8011764:	3fe00000 	.word	0x3fe00000
 8011768:	4baf      	ldr	r3, [pc, #700]	; (8011a28 <_dtoa_r+0x920>)
 801176a:	f7ee ff45 	bl	80005f8 <__aeabi_dmul>
 801176e:	4606      	mov	r6, r0
 8011770:	460f      	mov	r7, r1
 8011772:	e7ac      	b.n	80116ce <_dtoa_r+0x5c6>
 8011774:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8011778:	9d00      	ldr	r5, [sp, #0]
 801177a:	4642      	mov	r2, r8
 801177c:	464b      	mov	r3, r9
 801177e:	4630      	mov	r0, r6
 8011780:	4639      	mov	r1, r7
 8011782:	f7ef f863 	bl	800084c <__aeabi_ddiv>
 8011786:	f7ef f9e7 	bl	8000b58 <__aeabi_d2iz>
 801178a:	9002      	str	r0, [sp, #8]
 801178c:	f7ee feca 	bl	8000524 <__aeabi_i2d>
 8011790:	4642      	mov	r2, r8
 8011792:	464b      	mov	r3, r9
 8011794:	f7ee ff30 	bl	80005f8 <__aeabi_dmul>
 8011798:	4602      	mov	r2, r0
 801179a:	460b      	mov	r3, r1
 801179c:	4630      	mov	r0, r6
 801179e:	4639      	mov	r1, r7
 80117a0:	f7ee fd72 	bl	8000288 <__aeabi_dsub>
 80117a4:	9e02      	ldr	r6, [sp, #8]
 80117a6:	9f01      	ldr	r7, [sp, #4]
 80117a8:	3630      	adds	r6, #48	; 0x30
 80117aa:	f805 6b01 	strb.w	r6, [r5], #1
 80117ae:	9e00      	ldr	r6, [sp, #0]
 80117b0:	1bae      	subs	r6, r5, r6
 80117b2:	42b7      	cmp	r7, r6
 80117b4:	4602      	mov	r2, r0
 80117b6:	460b      	mov	r3, r1
 80117b8:	d137      	bne.n	801182a <_dtoa_r+0x722>
 80117ba:	f7ee fd67 	bl	800028c <__adddf3>
 80117be:	4642      	mov	r2, r8
 80117c0:	464b      	mov	r3, r9
 80117c2:	4606      	mov	r6, r0
 80117c4:	460f      	mov	r7, r1
 80117c6:	f7ef f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80117ca:	b9c8      	cbnz	r0, 8011800 <_dtoa_r+0x6f8>
 80117cc:	4642      	mov	r2, r8
 80117ce:	464b      	mov	r3, r9
 80117d0:	4630      	mov	r0, r6
 80117d2:	4639      	mov	r1, r7
 80117d4:	f7ef f978 	bl	8000ac8 <__aeabi_dcmpeq>
 80117d8:	b110      	cbz	r0, 80117e0 <_dtoa_r+0x6d8>
 80117da:	9b02      	ldr	r3, [sp, #8]
 80117dc:	07d9      	lsls	r1, r3, #31
 80117de:	d40f      	bmi.n	8011800 <_dtoa_r+0x6f8>
 80117e0:	4620      	mov	r0, r4
 80117e2:	4659      	mov	r1, fp
 80117e4:	f000 fce8 	bl	80121b8 <_Bfree>
 80117e8:	2300      	movs	r3, #0
 80117ea:	702b      	strb	r3, [r5, #0]
 80117ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80117ee:	f10a 0001 	add.w	r0, sl, #1
 80117f2:	6018      	str	r0, [r3, #0]
 80117f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	f43f acd8 	beq.w	80111ac <_dtoa_r+0xa4>
 80117fc:	601d      	str	r5, [r3, #0]
 80117fe:	e4d5      	b.n	80111ac <_dtoa_r+0xa4>
 8011800:	f8cd a01c 	str.w	sl, [sp, #28]
 8011804:	462b      	mov	r3, r5
 8011806:	461d      	mov	r5, r3
 8011808:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801180c:	2a39      	cmp	r2, #57	; 0x39
 801180e:	d108      	bne.n	8011822 <_dtoa_r+0x71a>
 8011810:	9a00      	ldr	r2, [sp, #0]
 8011812:	429a      	cmp	r2, r3
 8011814:	d1f7      	bne.n	8011806 <_dtoa_r+0x6fe>
 8011816:	9a07      	ldr	r2, [sp, #28]
 8011818:	9900      	ldr	r1, [sp, #0]
 801181a:	3201      	adds	r2, #1
 801181c:	9207      	str	r2, [sp, #28]
 801181e:	2230      	movs	r2, #48	; 0x30
 8011820:	700a      	strb	r2, [r1, #0]
 8011822:	781a      	ldrb	r2, [r3, #0]
 8011824:	3201      	adds	r2, #1
 8011826:	701a      	strb	r2, [r3, #0]
 8011828:	e78c      	b.n	8011744 <_dtoa_r+0x63c>
 801182a:	4b7f      	ldr	r3, [pc, #508]	; (8011a28 <_dtoa_r+0x920>)
 801182c:	2200      	movs	r2, #0
 801182e:	f7ee fee3 	bl	80005f8 <__aeabi_dmul>
 8011832:	2200      	movs	r2, #0
 8011834:	2300      	movs	r3, #0
 8011836:	4606      	mov	r6, r0
 8011838:	460f      	mov	r7, r1
 801183a:	f7ef f945 	bl	8000ac8 <__aeabi_dcmpeq>
 801183e:	2800      	cmp	r0, #0
 8011840:	d09b      	beq.n	801177a <_dtoa_r+0x672>
 8011842:	e7cd      	b.n	80117e0 <_dtoa_r+0x6d8>
 8011844:	9a08      	ldr	r2, [sp, #32]
 8011846:	2a00      	cmp	r2, #0
 8011848:	f000 80c4 	beq.w	80119d4 <_dtoa_r+0x8cc>
 801184c:	9a05      	ldr	r2, [sp, #20]
 801184e:	2a01      	cmp	r2, #1
 8011850:	f300 80a8 	bgt.w	80119a4 <_dtoa_r+0x89c>
 8011854:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011856:	2a00      	cmp	r2, #0
 8011858:	f000 80a0 	beq.w	801199c <_dtoa_r+0x894>
 801185c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011860:	9e06      	ldr	r6, [sp, #24]
 8011862:	4645      	mov	r5, r8
 8011864:	9a04      	ldr	r2, [sp, #16]
 8011866:	2101      	movs	r1, #1
 8011868:	441a      	add	r2, r3
 801186a:	4620      	mov	r0, r4
 801186c:	4498      	add	r8, r3
 801186e:	9204      	str	r2, [sp, #16]
 8011870:	f000 fd5e 	bl	8012330 <__i2b>
 8011874:	4607      	mov	r7, r0
 8011876:	2d00      	cmp	r5, #0
 8011878:	dd0b      	ble.n	8011892 <_dtoa_r+0x78a>
 801187a:	9b04      	ldr	r3, [sp, #16]
 801187c:	2b00      	cmp	r3, #0
 801187e:	dd08      	ble.n	8011892 <_dtoa_r+0x78a>
 8011880:	42ab      	cmp	r3, r5
 8011882:	9a04      	ldr	r2, [sp, #16]
 8011884:	bfa8      	it	ge
 8011886:	462b      	movge	r3, r5
 8011888:	eba8 0803 	sub.w	r8, r8, r3
 801188c:	1aed      	subs	r5, r5, r3
 801188e:	1ad3      	subs	r3, r2, r3
 8011890:	9304      	str	r3, [sp, #16]
 8011892:	9b06      	ldr	r3, [sp, #24]
 8011894:	b1fb      	cbz	r3, 80118d6 <_dtoa_r+0x7ce>
 8011896:	9b08      	ldr	r3, [sp, #32]
 8011898:	2b00      	cmp	r3, #0
 801189a:	f000 809f 	beq.w	80119dc <_dtoa_r+0x8d4>
 801189e:	2e00      	cmp	r6, #0
 80118a0:	dd11      	ble.n	80118c6 <_dtoa_r+0x7be>
 80118a2:	4639      	mov	r1, r7
 80118a4:	4632      	mov	r2, r6
 80118a6:	4620      	mov	r0, r4
 80118a8:	f000 fdfe 	bl	80124a8 <__pow5mult>
 80118ac:	465a      	mov	r2, fp
 80118ae:	4601      	mov	r1, r0
 80118b0:	4607      	mov	r7, r0
 80118b2:	4620      	mov	r0, r4
 80118b4:	f000 fd52 	bl	801235c <__multiply>
 80118b8:	4659      	mov	r1, fp
 80118ba:	9007      	str	r0, [sp, #28]
 80118bc:	4620      	mov	r0, r4
 80118be:	f000 fc7b 	bl	80121b8 <_Bfree>
 80118c2:	9b07      	ldr	r3, [sp, #28]
 80118c4:	469b      	mov	fp, r3
 80118c6:	9b06      	ldr	r3, [sp, #24]
 80118c8:	1b9a      	subs	r2, r3, r6
 80118ca:	d004      	beq.n	80118d6 <_dtoa_r+0x7ce>
 80118cc:	4659      	mov	r1, fp
 80118ce:	4620      	mov	r0, r4
 80118d0:	f000 fdea 	bl	80124a8 <__pow5mult>
 80118d4:	4683      	mov	fp, r0
 80118d6:	2101      	movs	r1, #1
 80118d8:	4620      	mov	r0, r4
 80118da:	f000 fd29 	bl	8012330 <__i2b>
 80118de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	4606      	mov	r6, r0
 80118e4:	dd7c      	ble.n	80119e0 <_dtoa_r+0x8d8>
 80118e6:	461a      	mov	r2, r3
 80118e8:	4601      	mov	r1, r0
 80118ea:	4620      	mov	r0, r4
 80118ec:	f000 fddc 	bl	80124a8 <__pow5mult>
 80118f0:	9b05      	ldr	r3, [sp, #20]
 80118f2:	2b01      	cmp	r3, #1
 80118f4:	4606      	mov	r6, r0
 80118f6:	dd76      	ble.n	80119e6 <_dtoa_r+0x8de>
 80118f8:	2300      	movs	r3, #0
 80118fa:	9306      	str	r3, [sp, #24]
 80118fc:	6933      	ldr	r3, [r6, #16]
 80118fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011902:	6918      	ldr	r0, [r3, #16]
 8011904:	f000 fcc4 	bl	8012290 <__hi0bits>
 8011908:	f1c0 0020 	rsb	r0, r0, #32
 801190c:	9b04      	ldr	r3, [sp, #16]
 801190e:	4418      	add	r0, r3
 8011910:	f010 001f 	ands.w	r0, r0, #31
 8011914:	f000 8086 	beq.w	8011a24 <_dtoa_r+0x91c>
 8011918:	f1c0 0320 	rsb	r3, r0, #32
 801191c:	2b04      	cmp	r3, #4
 801191e:	dd7f      	ble.n	8011a20 <_dtoa_r+0x918>
 8011920:	f1c0 001c 	rsb	r0, r0, #28
 8011924:	9b04      	ldr	r3, [sp, #16]
 8011926:	4403      	add	r3, r0
 8011928:	4480      	add	r8, r0
 801192a:	4405      	add	r5, r0
 801192c:	9304      	str	r3, [sp, #16]
 801192e:	f1b8 0f00 	cmp.w	r8, #0
 8011932:	dd05      	ble.n	8011940 <_dtoa_r+0x838>
 8011934:	4659      	mov	r1, fp
 8011936:	4642      	mov	r2, r8
 8011938:	4620      	mov	r0, r4
 801193a:	f000 fe0f 	bl	801255c <__lshift>
 801193e:	4683      	mov	fp, r0
 8011940:	9b04      	ldr	r3, [sp, #16]
 8011942:	2b00      	cmp	r3, #0
 8011944:	dd05      	ble.n	8011952 <_dtoa_r+0x84a>
 8011946:	4631      	mov	r1, r6
 8011948:	461a      	mov	r2, r3
 801194a:	4620      	mov	r0, r4
 801194c:	f000 fe06 	bl	801255c <__lshift>
 8011950:	4606      	mov	r6, r0
 8011952:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011954:	2b00      	cmp	r3, #0
 8011956:	d069      	beq.n	8011a2c <_dtoa_r+0x924>
 8011958:	4631      	mov	r1, r6
 801195a:	4658      	mov	r0, fp
 801195c:	f000 fe6a 	bl	8012634 <__mcmp>
 8011960:	2800      	cmp	r0, #0
 8011962:	da63      	bge.n	8011a2c <_dtoa_r+0x924>
 8011964:	2300      	movs	r3, #0
 8011966:	4659      	mov	r1, fp
 8011968:	220a      	movs	r2, #10
 801196a:	4620      	mov	r0, r4
 801196c:	f000 fc46 	bl	80121fc <__multadd>
 8011970:	9b08      	ldr	r3, [sp, #32]
 8011972:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011976:	4683      	mov	fp, r0
 8011978:	2b00      	cmp	r3, #0
 801197a:	f000 818f 	beq.w	8011c9c <_dtoa_r+0xb94>
 801197e:	4639      	mov	r1, r7
 8011980:	2300      	movs	r3, #0
 8011982:	220a      	movs	r2, #10
 8011984:	4620      	mov	r0, r4
 8011986:	f000 fc39 	bl	80121fc <__multadd>
 801198a:	f1b9 0f00 	cmp.w	r9, #0
 801198e:	4607      	mov	r7, r0
 8011990:	f300 808e 	bgt.w	8011ab0 <_dtoa_r+0x9a8>
 8011994:	9b05      	ldr	r3, [sp, #20]
 8011996:	2b02      	cmp	r3, #2
 8011998:	dc50      	bgt.n	8011a3c <_dtoa_r+0x934>
 801199a:	e089      	b.n	8011ab0 <_dtoa_r+0x9a8>
 801199c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801199e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80119a2:	e75d      	b.n	8011860 <_dtoa_r+0x758>
 80119a4:	9b01      	ldr	r3, [sp, #4]
 80119a6:	1e5e      	subs	r6, r3, #1
 80119a8:	9b06      	ldr	r3, [sp, #24]
 80119aa:	42b3      	cmp	r3, r6
 80119ac:	bfbf      	itttt	lt
 80119ae:	9b06      	ldrlt	r3, [sp, #24]
 80119b0:	9606      	strlt	r6, [sp, #24]
 80119b2:	1af2      	sublt	r2, r6, r3
 80119b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80119b6:	bfb6      	itet	lt
 80119b8:	189b      	addlt	r3, r3, r2
 80119ba:	1b9e      	subge	r6, r3, r6
 80119bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80119be:	9b01      	ldr	r3, [sp, #4]
 80119c0:	bfb8      	it	lt
 80119c2:	2600      	movlt	r6, #0
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	bfb5      	itete	lt
 80119c8:	eba8 0503 	sublt.w	r5, r8, r3
 80119cc:	9b01      	ldrge	r3, [sp, #4]
 80119ce:	2300      	movlt	r3, #0
 80119d0:	4645      	movge	r5, r8
 80119d2:	e747      	b.n	8011864 <_dtoa_r+0x75c>
 80119d4:	9e06      	ldr	r6, [sp, #24]
 80119d6:	9f08      	ldr	r7, [sp, #32]
 80119d8:	4645      	mov	r5, r8
 80119da:	e74c      	b.n	8011876 <_dtoa_r+0x76e>
 80119dc:	9a06      	ldr	r2, [sp, #24]
 80119de:	e775      	b.n	80118cc <_dtoa_r+0x7c4>
 80119e0:	9b05      	ldr	r3, [sp, #20]
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	dc18      	bgt.n	8011a18 <_dtoa_r+0x910>
 80119e6:	9b02      	ldr	r3, [sp, #8]
 80119e8:	b9b3      	cbnz	r3, 8011a18 <_dtoa_r+0x910>
 80119ea:	9b03      	ldr	r3, [sp, #12]
 80119ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119f0:	b9a3      	cbnz	r3, 8011a1c <_dtoa_r+0x914>
 80119f2:	9b03      	ldr	r3, [sp, #12]
 80119f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119f8:	0d1b      	lsrs	r3, r3, #20
 80119fa:	051b      	lsls	r3, r3, #20
 80119fc:	b12b      	cbz	r3, 8011a0a <_dtoa_r+0x902>
 80119fe:	9b04      	ldr	r3, [sp, #16]
 8011a00:	3301      	adds	r3, #1
 8011a02:	9304      	str	r3, [sp, #16]
 8011a04:	f108 0801 	add.w	r8, r8, #1
 8011a08:	2301      	movs	r3, #1
 8011a0a:	9306      	str	r3, [sp, #24]
 8011a0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f47f af74 	bne.w	80118fc <_dtoa_r+0x7f4>
 8011a14:	2001      	movs	r0, #1
 8011a16:	e779      	b.n	801190c <_dtoa_r+0x804>
 8011a18:	2300      	movs	r3, #0
 8011a1a:	e7f6      	b.n	8011a0a <_dtoa_r+0x902>
 8011a1c:	9b02      	ldr	r3, [sp, #8]
 8011a1e:	e7f4      	b.n	8011a0a <_dtoa_r+0x902>
 8011a20:	d085      	beq.n	801192e <_dtoa_r+0x826>
 8011a22:	4618      	mov	r0, r3
 8011a24:	301c      	adds	r0, #28
 8011a26:	e77d      	b.n	8011924 <_dtoa_r+0x81c>
 8011a28:	40240000 	.word	0x40240000
 8011a2c:	9b01      	ldr	r3, [sp, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	dc38      	bgt.n	8011aa4 <_dtoa_r+0x99c>
 8011a32:	9b05      	ldr	r3, [sp, #20]
 8011a34:	2b02      	cmp	r3, #2
 8011a36:	dd35      	ble.n	8011aa4 <_dtoa_r+0x99c>
 8011a38:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011a3c:	f1b9 0f00 	cmp.w	r9, #0
 8011a40:	d10d      	bne.n	8011a5e <_dtoa_r+0x956>
 8011a42:	4631      	mov	r1, r6
 8011a44:	464b      	mov	r3, r9
 8011a46:	2205      	movs	r2, #5
 8011a48:	4620      	mov	r0, r4
 8011a4a:	f000 fbd7 	bl	80121fc <__multadd>
 8011a4e:	4601      	mov	r1, r0
 8011a50:	4606      	mov	r6, r0
 8011a52:	4658      	mov	r0, fp
 8011a54:	f000 fdee 	bl	8012634 <__mcmp>
 8011a58:	2800      	cmp	r0, #0
 8011a5a:	f73f adbd 	bgt.w	80115d8 <_dtoa_r+0x4d0>
 8011a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a60:	9d00      	ldr	r5, [sp, #0]
 8011a62:	ea6f 0a03 	mvn.w	sl, r3
 8011a66:	f04f 0800 	mov.w	r8, #0
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	f000 fba3 	bl	80121b8 <_Bfree>
 8011a72:	2f00      	cmp	r7, #0
 8011a74:	f43f aeb4 	beq.w	80117e0 <_dtoa_r+0x6d8>
 8011a78:	f1b8 0f00 	cmp.w	r8, #0
 8011a7c:	d005      	beq.n	8011a8a <_dtoa_r+0x982>
 8011a7e:	45b8      	cmp	r8, r7
 8011a80:	d003      	beq.n	8011a8a <_dtoa_r+0x982>
 8011a82:	4641      	mov	r1, r8
 8011a84:	4620      	mov	r0, r4
 8011a86:	f000 fb97 	bl	80121b8 <_Bfree>
 8011a8a:	4639      	mov	r1, r7
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	f000 fb93 	bl	80121b8 <_Bfree>
 8011a92:	e6a5      	b.n	80117e0 <_dtoa_r+0x6d8>
 8011a94:	2600      	movs	r6, #0
 8011a96:	4637      	mov	r7, r6
 8011a98:	e7e1      	b.n	8011a5e <_dtoa_r+0x956>
 8011a9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011a9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011aa0:	4637      	mov	r7, r6
 8011aa2:	e599      	b.n	80115d8 <_dtoa_r+0x4d0>
 8011aa4:	9b08      	ldr	r3, [sp, #32]
 8011aa6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	f000 80fd 	beq.w	8011caa <_dtoa_r+0xba2>
 8011ab0:	2d00      	cmp	r5, #0
 8011ab2:	dd05      	ble.n	8011ac0 <_dtoa_r+0x9b8>
 8011ab4:	4639      	mov	r1, r7
 8011ab6:	462a      	mov	r2, r5
 8011ab8:	4620      	mov	r0, r4
 8011aba:	f000 fd4f 	bl	801255c <__lshift>
 8011abe:	4607      	mov	r7, r0
 8011ac0:	9b06      	ldr	r3, [sp, #24]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d05c      	beq.n	8011b80 <_dtoa_r+0xa78>
 8011ac6:	6879      	ldr	r1, [r7, #4]
 8011ac8:	4620      	mov	r0, r4
 8011aca:	f000 fb35 	bl	8012138 <_Balloc>
 8011ace:	4605      	mov	r5, r0
 8011ad0:	b928      	cbnz	r0, 8011ade <_dtoa_r+0x9d6>
 8011ad2:	4b80      	ldr	r3, [pc, #512]	; (8011cd4 <_dtoa_r+0xbcc>)
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011ada:	f7ff bb2e 	b.w	801113a <_dtoa_r+0x32>
 8011ade:	693a      	ldr	r2, [r7, #16]
 8011ae0:	3202      	adds	r2, #2
 8011ae2:	0092      	lsls	r2, r2, #2
 8011ae4:	f107 010c 	add.w	r1, r7, #12
 8011ae8:	300c      	adds	r0, #12
 8011aea:	f7fe fbdf 	bl	80102ac <memcpy>
 8011aee:	2201      	movs	r2, #1
 8011af0:	4629      	mov	r1, r5
 8011af2:	4620      	mov	r0, r4
 8011af4:	f000 fd32 	bl	801255c <__lshift>
 8011af8:	9b00      	ldr	r3, [sp, #0]
 8011afa:	3301      	adds	r3, #1
 8011afc:	9301      	str	r3, [sp, #4]
 8011afe:	9b00      	ldr	r3, [sp, #0]
 8011b00:	444b      	add	r3, r9
 8011b02:	9307      	str	r3, [sp, #28]
 8011b04:	9b02      	ldr	r3, [sp, #8]
 8011b06:	f003 0301 	and.w	r3, r3, #1
 8011b0a:	46b8      	mov	r8, r7
 8011b0c:	9306      	str	r3, [sp, #24]
 8011b0e:	4607      	mov	r7, r0
 8011b10:	9b01      	ldr	r3, [sp, #4]
 8011b12:	4631      	mov	r1, r6
 8011b14:	3b01      	subs	r3, #1
 8011b16:	4658      	mov	r0, fp
 8011b18:	9302      	str	r3, [sp, #8]
 8011b1a:	f7ff fa68 	bl	8010fee <quorem>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	3330      	adds	r3, #48	; 0x30
 8011b22:	9004      	str	r0, [sp, #16]
 8011b24:	4641      	mov	r1, r8
 8011b26:	4658      	mov	r0, fp
 8011b28:	9308      	str	r3, [sp, #32]
 8011b2a:	f000 fd83 	bl	8012634 <__mcmp>
 8011b2e:	463a      	mov	r2, r7
 8011b30:	4681      	mov	r9, r0
 8011b32:	4631      	mov	r1, r6
 8011b34:	4620      	mov	r0, r4
 8011b36:	f000 fd99 	bl	801266c <__mdiff>
 8011b3a:	68c2      	ldr	r2, [r0, #12]
 8011b3c:	9b08      	ldr	r3, [sp, #32]
 8011b3e:	4605      	mov	r5, r0
 8011b40:	bb02      	cbnz	r2, 8011b84 <_dtoa_r+0xa7c>
 8011b42:	4601      	mov	r1, r0
 8011b44:	4658      	mov	r0, fp
 8011b46:	f000 fd75 	bl	8012634 <__mcmp>
 8011b4a:	9b08      	ldr	r3, [sp, #32]
 8011b4c:	4602      	mov	r2, r0
 8011b4e:	4629      	mov	r1, r5
 8011b50:	4620      	mov	r0, r4
 8011b52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8011b56:	f000 fb2f 	bl	80121b8 <_Bfree>
 8011b5a:	9b05      	ldr	r3, [sp, #20]
 8011b5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011b5e:	9d01      	ldr	r5, [sp, #4]
 8011b60:	ea43 0102 	orr.w	r1, r3, r2
 8011b64:	9b06      	ldr	r3, [sp, #24]
 8011b66:	430b      	orrs	r3, r1
 8011b68:	9b08      	ldr	r3, [sp, #32]
 8011b6a:	d10d      	bne.n	8011b88 <_dtoa_r+0xa80>
 8011b6c:	2b39      	cmp	r3, #57	; 0x39
 8011b6e:	d029      	beq.n	8011bc4 <_dtoa_r+0xabc>
 8011b70:	f1b9 0f00 	cmp.w	r9, #0
 8011b74:	dd01      	ble.n	8011b7a <_dtoa_r+0xa72>
 8011b76:	9b04      	ldr	r3, [sp, #16]
 8011b78:	3331      	adds	r3, #49	; 0x31
 8011b7a:	9a02      	ldr	r2, [sp, #8]
 8011b7c:	7013      	strb	r3, [r2, #0]
 8011b7e:	e774      	b.n	8011a6a <_dtoa_r+0x962>
 8011b80:	4638      	mov	r0, r7
 8011b82:	e7b9      	b.n	8011af8 <_dtoa_r+0x9f0>
 8011b84:	2201      	movs	r2, #1
 8011b86:	e7e2      	b.n	8011b4e <_dtoa_r+0xa46>
 8011b88:	f1b9 0f00 	cmp.w	r9, #0
 8011b8c:	db06      	blt.n	8011b9c <_dtoa_r+0xa94>
 8011b8e:	9905      	ldr	r1, [sp, #20]
 8011b90:	ea41 0909 	orr.w	r9, r1, r9
 8011b94:	9906      	ldr	r1, [sp, #24]
 8011b96:	ea59 0101 	orrs.w	r1, r9, r1
 8011b9a:	d120      	bne.n	8011bde <_dtoa_r+0xad6>
 8011b9c:	2a00      	cmp	r2, #0
 8011b9e:	ddec      	ble.n	8011b7a <_dtoa_r+0xa72>
 8011ba0:	4659      	mov	r1, fp
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	9301      	str	r3, [sp, #4]
 8011ba8:	f000 fcd8 	bl	801255c <__lshift>
 8011bac:	4631      	mov	r1, r6
 8011bae:	4683      	mov	fp, r0
 8011bb0:	f000 fd40 	bl	8012634 <__mcmp>
 8011bb4:	2800      	cmp	r0, #0
 8011bb6:	9b01      	ldr	r3, [sp, #4]
 8011bb8:	dc02      	bgt.n	8011bc0 <_dtoa_r+0xab8>
 8011bba:	d1de      	bne.n	8011b7a <_dtoa_r+0xa72>
 8011bbc:	07da      	lsls	r2, r3, #31
 8011bbe:	d5dc      	bpl.n	8011b7a <_dtoa_r+0xa72>
 8011bc0:	2b39      	cmp	r3, #57	; 0x39
 8011bc2:	d1d8      	bne.n	8011b76 <_dtoa_r+0xa6e>
 8011bc4:	9a02      	ldr	r2, [sp, #8]
 8011bc6:	2339      	movs	r3, #57	; 0x39
 8011bc8:	7013      	strb	r3, [r2, #0]
 8011bca:	462b      	mov	r3, r5
 8011bcc:	461d      	mov	r5, r3
 8011bce:	3b01      	subs	r3, #1
 8011bd0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011bd4:	2a39      	cmp	r2, #57	; 0x39
 8011bd6:	d050      	beq.n	8011c7a <_dtoa_r+0xb72>
 8011bd8:	3201      	adds	r2, #1
 8011bda:	701a      	strb	r2, [r3, #0]
 8011bdc:	e745      	b.n	8011a6a <_dtoa_r+0x962>
 8011bde:	2a00      	cmp	r2, #0
 8011be0:	dd03      	ble.n	8011bea <_dtoa_r+0xae2>
 8011be2:	2b39      	cmp	r3, #57	; 0x39
 8011be4:	d0ee      	beq.n	8011bc4 <_dtoa_r+0xabc>
 8011be6:	3301      	adds	r3, #1
 8011be8:	e7c7      	b.n	8011b7a <_dtoa_r+0xa72>
 8011bea:	9a01      	ldr	r2, [sp, #4]
 8011bec:	9907      	ldr	r1, [sp, #28]
 8011bee:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011bf2:	428a      	cmp	r2, r1
 8011bf4:	d02a      	beq.n	8011c4c <_dtoa_r+0xb44>
 8011bf6:	4659      	mov	r1, fp
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	220a      	movs	r2, #10
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	f000 fafd 	bl	80121fc <__multadd>
 8011c02:	45b8      	cmp	r8, r7
 8011c04:	4683      	mov	fp, r0
 8011c06:	f04f 0300 	mov.w	r3, #0
 8011c0a:	f04f 020a 	mov.w	r2, #10
 8011c0e:	4641      	mov	r1, r8
 8011c10:	4620      	mov	r0, r4
 8011c12:	d107      	bne.n	8011c24 <_dtoa_r+0xb1c>
 8011c14:	f000 faf2 	bl	80121fc <__multadd>
 8011c18:	4680      	mov	r8, r0
 8011c1a:	4607      	mov	r7, r0
 8011c1c:	9b01      	ldr	r3, [sp, #4]
 8011c1e:	3301      	adds	r3, #1
 8011c20:	9301      	str	r3, [sp, #4]
 8011c22:	e775      	b.n	8011b10 <_dtoa_r+0xa08>
 8011c24:	f000 faea 	bl	80121fc <__multadd>
 8011c28:	4639      	mov	r1, r7
 8011c2a:	4680      	mov	r8, r0
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	220a      	movs	r2, #10
 8011c30:	4620      	mov	r0, r4
 8011c32:	f000 fae3 	bl	80121fc <__multadd>
 8011c36:	4607      	mov	r7, r0
 8011c38:	e7f0      	b.n	8011c1c <_dtoa_r+0xb14>
 8011c3a:	f1b9 0f00 	cmp.w	r9, #0
 8011c3e:	9a00      	ldr	r2, [sp, #0]
 8011c40:	bfcc      	ite	gt
 8011c42:	464d      	movgt	r5, r9
 8011c44:	2501      	movle	r5, #1
 8011c46:	4415      	add	r5, r2
 8011c48:	f04f 0800 	mov.w	r8, #0
 8011c4c:	4659      	mov	r1, fp
 8011c4e:	2201      	movs	r2, #1
 8011c50:	4620      	mov	r0, r4
 8011c52:	9301      	str	r3, [sp, #4]
 8011c54:	f000 fc82 	bl	801255c <__lshift>
 8011c58:	4631      	mov	r1, r6
 8011c5a:	4683      	mov	fp, r0
 8011c5c:	f000 fcea 	bl	8012634 <__mcmp>
 8011c60:	2800      	cmp	r0, #0
 8011c62:	dcb2      	bgt.n	8011bca <_dtoa_r+0xac2>
 8011c64:	d102      	bne.n	8011c6c <_dtoa_r+0xb64>
 8011c66:	9b01      	ldr	r3, [sp, #4]
 8011c68:	07db      	lsls	r3, r3, #31
 8011c6a:	d4ae      	bmi.n	8011bca <_dtoa_r+0xac2>
 8011c6c:	462b      	mov	r3, r5
 8011c6e:	461d      	mov	r5, r3
 8011c70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011c74:	2a30      	cmp	r2, #48	; 0x30
 8011c76:	d0fa      	beq.n	8011c6e <_dtoa_r+0xb66>
 8011c78:	e6f7      	b.n	8011a6a <_dtoa_r+0x962>
 8011c7a:	9a00      	ldr	r2, [sp, #0]
 8011c7c:	429a      	cmp	r2, r3
 8011c7e:	d1a5      	bne.n	8011bcc <_dtoa_r+0xac4>
 8011c80:	f10a 0a01 	add.w	sl, sl, #1
 8011c84:	2331      	movs	r3, #49	; 0x31
 8011c86:	e779      	b.n	8011b7c <_dtoa_r+0xa74>
 8011c88:	4b13      	ldr	r3, [pc, #76]	; (8011cd8 <_dtoa_r+0xbd0>)
 8011c8a:	f7ff baaf 	b.w	80111ec <_dtoa_r+0xe4>
 8011c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	f47f aa86 	bne.w	80111a2 <_dtoa_r+0x9a>
 8011c96:	4b11      	ldr	r3, [pc, #68]	; (8011cdc <_dtoa_r+0xbd4>)
 8011c98:	f7ff baa8 	b.w	80111ec <_dtoa_r+0xe4>
 8011c9c:	f1b9 0f00 	cmp.w	r9, #0
 8011ca0:	dc03      	bgt.n	8011caa <_dtoa_r+0xba2>
 8011ca2:	9b05      	ldr	r3, [sp, #20]
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	f73f aec9 	bgt.w	8011a3c <_dtoa_r+0x934>
 8011caa:	9d00      	ldr	r5, [sp, #0]
 8011cac:	4631      	mov	r1, r6
 8011cae:	4658      	mov	r0, fp
 8011cb0:	f7ff f99d 	bl	8010fee <quorem>
 8011cb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011cb8:	f805 3b01 	strb.w	r3, [r5], #1
 8011cbc:	9a00      	ldr	r2, [sp, #0]
 8011cbe:	1aaa      	subs	r2, r5, r2
 8011cc0:	4591      	cmp	r9, r2
 8011cc2:	ddba      	ble.n	8011c3a <_dtoa_r+0xb32>
 8011cc4:	4659      	mov	r1, fp
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	220a      	movs	r2, #10
 8011cca:	4620      	mov	r0, r4
 8011ccc:	f000 fa96 	bl	80121fc <__multadd>
 8011cd0:	4683      	mov	fp, r0
 8011cd2:	e7eb      	b.n	8011cac <_dtoa_r+0xba4>
 8011cd4:	0801433c 	.word	0x0801433c
 8011cd8:	08014295 	.word	0x08014295
 8011cdc:	080142b9 	.word	0x080142b9

08011ce0 <__sflush_r>:
 8011ce0:	898a      	ldrh	r2, [r1, #12]
 8011ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce6:	4605      	mov	r5, r0
 8011ce8:	0710      	lsls	r0, r2, #28
 8011cea:	460c      	mov	r4, r1
 8011cec:	d458      	bmi.n	8011da0 <__sflush_r+0xc0>
 8011cee:	684b      	ldr	r3, [r1, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	dc05      	bgt.n	8011d00 <__sflush_r+0x20>
 8011cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	dc02      	bgt.n	8011d00 <__sflush_r+0x20>
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d02:	2e00      	cmp	r6, #0
 8011d04:	d0f9      	beq.n	8011cfa <__sflush_r+0x1a>
 8011d06:	2300      	movs	r3, #0
 8011d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011d0c:	682f      	ldr	r7, [r5, #0]
 8011d0e:	602b      	str	r3, [r5, #0]
 8011d10:	d032      	beq.n	8011d78 <__sflush_r+0x98>
 8011d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011d14:	89a3      	ldrh	r3, [r4, #12]
 8011d16:	075a      	lsls	r2, r3, #29
 8011d18:	d505      	bpl.n	8011d26 <__sflush_r+0x46>
 8011d1a:	6863      	ldr	r3, [r4, #4]
 8011d1c:	1ac0      	subs	r0, r0, r3
 8011d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011d20:	b10b      	cbz	r3, 8011d26 <__sflush_r+0x46>
 8011d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d24:	1ac0      	subs	r0, r0, r3
 8011d26:	2300      	movs	r3, #0
 8011d28:	4602      	mov	r2, r0
 8011d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011d2c:	6a21      	ldr	r1, [r4, #32]
 8011d2e:	4628      	mov	r0, r5
 8011d30:	47b0      	blx	r6
 8011d32:	1c43      	adds	r3, r0, #1
 8011d34:	89a3      	ldrh	r3, [r4, #12]
 8011d36:	d106      	bne.n	8011d46 <__sflush_r+0x66>
 8011d38:	6829      	ldr	r1, [r5, #0]
 8011d3a:	291d      	cmp	r1, #29
 8011d3c:	d82c      	bhi.n	8011d98 <__sflush_r+0xb8>
 8011d3e:	4a2a      	ldr	r2, [pc, #168]	; (8011de8 <__sflush_r+0x108>)
 8011d40:	40ca      	lsrs	r2, r1
 8011d42:	07d6      	lsls	r6, r2, #31
 8011d44:	d528      	bpl.n	8011d98 <__sflush_r+0xb8>
 8011d46:	2200      	movs	r2, #0
 8011d48:	6062      	str	r2, [r4, #4]
 8011d4a:	04d9      	lsls	r1, r3, #19
 8011d4c:	6922      	ldr	r2, [r4, #16]
 8011d4e:	6022      	str	r2, [r4, #0]
 8011d50:	d504      	bpl.n	8011d5c <__sflush_r+0x7c>
 8011d52:	1c42      	adds	r2, r0, #1
 8011d54:	d101      	bne.n	8011d5a <__sflush_r+0x7a>
 8011d56:	682b      	ldr	r3, [r5, #0]
 8011d58:	b903      	cbnz	r3, 8011d5c <__sflush_r+0x7c>
 8011d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8011d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d5e:	602f      	str	r7, [r5, #0]
 8011d60:	2900      	cmp	r1, #0
 8011d62:	d0ca      	beq.n	8011cfa <__sflush_r+0x1a>
 8011d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d68:	4299      	cmp	r1, r3
 8011d6a:	d002      	beq.n	8011d72 <__sflush_r+0x92>
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f000 fd71 	bl	8012854 <_free_r>
 8011d72:	2000      	movs	r0, #0
 8011d74:	6360      	str	r0, [r4, #52]	; 0x34
 8011d76:	e7c1      	b.n	8011cfc <__sflush_r+0x1c>
 8011d78:	6a21      	ldr	r1, [r4, #32]
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	47b0      	blx	r6
 8011d80:	1c41      	adds	r1, r0, #1
 8011d82:	d1c7      	bne.n	8011d14 <__sflush_r+0x34>
 8011d84:	682b      	ldr	r3, [r5, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d0c4      	beq.n	8011d14 <__sflush_r+0x34>
 8011d8a:	2b1d      	cmp	r3, #29
 8011d8c:	d001      	beq.n	8011d92 <__sflush_r+0xb2>
 8011d8e:	2b16      	cmp	r3, #22
 8011d90:	d101      	bne.n	8011d96 <__sflush_r+0xb6>
 8011d92:	602f      	str	r7, [r5, #0]
 8011d94:	e7b1      	b.n	8011cfa <__sflush_r+0x1a>
 8011d96:	89a3      	ldrh	r3, [r4, #12]
 8011d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d9c:	81a3      	strh	r3, [r4, #12]
 8011d9e:	e7ad      	b.n	8011cfc <__sflush_r+0x1c>
 8011da0:	690f      	ldr	r7, [r1, #16]
 8011da2:	2f00      	cmp	r7, #0
 8011da4:	d0a9      	beq.n	8011cfa <__sflush_r+0x1a>
 8011da6:	0793      	lsls	r3, r2, #30
 8011da8:	680e      	ldr	r6, [r1, #0]
 8011daa:	bf08      	it	eq
 8011dac:	694b      	ldreq	r3, [r1, #20]
 8011dae:	600f      	str	r7, [r1, #0]
 8011db0:	bf18      	it	ne
 8011db2:	2300      	movne	r3, #0
 8011db4:	eba6 0807 	sub.w	r8, r6, r7
 8011db8:	608b      	str	r3, [r1, #8]
 8011dba:	f1b8 0f00 	cmp.w	r8, #0
 8011dbe:	dd9c      	ble.n	8011cfa <__sflush_r+0x1a>
 8011dc0:	6a21      	ldr	r1, [r4, #32]
 8011dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011dc4:	4643      	mov	r3, r8
 8011dc6:	463a      	mov	r2, r7
 8011dc8:	4628      	mov	r0, r5
 8011dca:	47b0      	blx	r6
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	dc06      	bgt.n	8011dde <__sflush_r+0xfe>
 8011dd0:	89a3      	ldrh	r3, [r4, #12]
 8011dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dd6:	81a3      	strh	r3, [r4, #12]
 8011dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011ddc:	e78e      	b.n	8011cfc <__sflush_r+0x1c>
 8011dde:	4407      	add	r7, r0
 8011de0:	eba8 0800 	sub.w	r8, r8, r0
 8011de4:	e7e9      	b.n	8011dba <__sflush_r+0xda>
 8011de6:	bf00      	nop
 8011de8:	20400001 	.word	0x20400001

08011dec <_fflush_r>:
 8011dec:	b538      	push	{r3, r4, r5, lr}
 8011dee:	690b      	ldr	r3, [r1, #16]
 8011df0:	4605      	mov	r5, r0
 8011df2:	460c      	mov	r4, r1
 8011df4:	b913      	cbnz	r3, 8011dfc <_fflush_r+0x10>
 8011df6:	2500      	movs	r5, #0
 8011df8:	4628      	mov	r0, r5
 8011dfa:	bd38      	pop	{r3, r4, r5, pc}
 8011dfc:	b118      	cbz	r0, 8011e06 <_fflush_r+0x1a>
 8011dfe:	6983      	ldr	r3, [r0, #24]
 8011e00:	b90b      	cbnz	r3, 8011e06 <_fflush_r+0x1a>
 8011e02:	f000 f887 	bl	8011f14 <__sinit>
 8011e06:	4b14      	ldr	r3, [pc, #80]	; (8011e58 <_fflush_r+0x6c>)
 8011e08:	429c      	cmp	r4, r3
 8011e0a:	d11b      	bne.n	8011e44 <_fflush_r+0x58>
 8011e0c:	686c      	ldr	r4, [r5, #4]
 8011e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d0ef      	beq.n	8011df6 <_fflush_r+0xa>
 8011e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011e18:	07d0      	lsls	r0, r2, #31
 8011e1a:	d404      	bmi.n	8011e26 <_fflush_r+0x3a>
 8011e1c:	0599      	lsls	r1, r3, #22
 8011e1e:	d402      	bmi.n	8011e26 <_fflush_r+0x3a>
 8011e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e22:	f000 f91a 	bl	801205a <__retarget_lock_acquire_recursive>
 8011e26:	4628      	mov	r0, r5
 8011e28:	4621      	mov	r1, r4
 8011e2a:	f7ff ff59 	bl	8011ce0 <__sflush_r>
 8011e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011e30:	07da      	lsls	r2, r3, #31
 8011e32:	4605      	mov	r5, r0
 8011e34:	d4e0      	bmi.n	8011df8 <_fflush_r+0xc>
 8011e36:	89a3      	ldrh	r3, [r4, #12]
 8011e38:	059b      	lsls	r3, r3, #22
 8011e3a:	d4dd      	bmi.n	8011df8 <_fflush_r+0xc>
 8011e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011e3e:	f000 f90d 	bl	801205c <__retarget_lock_release_recursive>
 8011e42:	e7d9      	b.n	8011df8 <_fflush_r+0xc>
 8011e44:	4b05      	ldr	r3, [pc, #20]	; (8011e5c <_fflush_r+0x70>)
 8011e46:	429c      	cmp	r4, r3
 8011e48:	d101      	bne.n	8011e4e <_fflush_r+0x62>
 8011e4a:	68ac      	ldr	r4, [r5, #8]
 8011e4c:	e7df      	b.n	8011e0e <_fflush_r+0x22>
 8011e4e:	4b04      	ldr	r3, [pc, #16]	; (8011e60 <_fflush_r+0x74>)
 8011e50:	429c      	cmp	r4, r3
 8011e52:	bf08      	it	eq
 8011e54:	68ec      	ldreq	r4, [r5, #12]
 8011e56:	e7da      	b.n	8011e0e <_fflush_r+0x22>
 8011e58:	08014370 	.word	0x08014370
 8011e5c:	08014390 	.word	0x08014390
 8011e60:	08014350 	.word	0x08014350

08011e64 <std>:
 8011e64:	2300      	movs	r3, #0
 8011e66:	b510      	push	{r4, lr}
 8011e68:	4604      	mov	r4, r0
 8011e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8011e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e72:	6083      	str	r3, [r0, #8]
 8011e74:	8181      	strh	r1, [r0, #12]
 8011e76:	6643      	str	r3, [r0, #100]	; 0x64
 8011e78:	81c2      	strh	r2, [r0, #14]
 8011e7a:	6183      	str	r3, [r0, #24]
 8011e7c:	4619      	mov	r1, r3
 8011e7e:	2208      	movs	r2, #8
 8011e80:	305c      	adds	r0, #92	; 0x5c
 8011e82:	f7fe fa21 	bl	80102c8 <memset>
 8011e86:	4b05      	ldr	r3, [pc, #20]	; (8011e9c <std+0x38>)
 8011e88:	6263      	str	r3, [r4, #36]	; 0x24
 8011e8a:	4b05      	ldr	r3, [pc, #20]	; (8011ea0 <std+0x3c>)
 8011e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e8e:	4b05      	ldr	r3, [pc, #20]	; (8011ea4 <std+0x40>)
 8011e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e92:	4b05      	ldr	r3, [pc, #20]	; (8011ea8 <std+0x44>)
 8011e94:	6224      	str	r4, [r4, #32]
 8011e96:	6323      	str	r3, [r4, #48]	; 0x30
 8011e98:	bd10      	pop	{r4, pc}
 8011e9a:	bf00      	nop
 8011e9c:	08012a51 	.word	0x08012a51
 8011ea0:	08012a73 	.word	0x08012a73
 8011ea4:	08012aab 	.word	0x08012aab
 8011ea8:	08012acf 	.word	0x08012acf

08011eac <_cleanup_r>:
 8011eac:	4901      	ldr	r1, [pc, #4]	; (8011eb4 <_cleanup_r+0x8>)
 8011eae:	f000 b8af 	b.w	8012010 <_fwalk_reent>
 8011eb2:	bf00      	nop
 8011eb4:	08011ded 	.word	0x08011ded

08011eb8 <__sfmoreglue>:
 8011eb8:	b570      	push	{r4, r5, r6, lr}
 8011eba:	1e4a      	subs	r2, r1, #1
 8011ebc:	2568      	movs	r5, #104	; 0x68
 8011ebe:	4355      	muls	r5, r2
 8011ec0:	460e      	mov	r6, r1
 8011ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011ec6:	f000 fd15 	bl	80128f4 <_malloc_r>
 8011eca:	4604      	mov	r4, r0
 8011ecc:	b140      	cbz	r0, 8011ee0 <__sfmoreglue+0x28>
 8011ece:	2100      	movs	r1, #0
 8011ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8011ed4:	300c      	adds	r0, #12
 8011ed6:	60a0      	str	r0, [r4, #8]
 8011ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011edc:	f7fe f9f4 	bl	80102c8 <memset>
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	bd70      	pop	{r4, r5, r6, pc}

08011ee4 <__sfp_lock_acquire>:
 8011ee4:	4801      	ldr	r0, [pc, #4]	; (8011eec <__sfp_lock_acquire+0x8>)
 8011ee6:	f000 b8b8 	b.w	801205a <__retarget_lock_acquire_recursive>
 8011eea:	bf00      	nop
 8011eec:	2000dd54 	.word	0x2000dd54

08011ef0 <__sfp_lock_release>:
 8011ef0:	4801      	ldr	r0, [pc, #4]	; (8011ef8 <__sfp_lock_release+0x8>)
 8011ef2:	f000 b8b3 	b.w	801205c <__retarget_lock_release_recursive>
 8011ef6:	bf00      	nop
 8011ef8:	2000dd54 	.word	0x2000dd54

08011efc <__sinit_lock_acquire>:
 8011efc:	4801      	ldr	r0, [pc, #4]	; (8011f04 <__sinit_lock_acquire+0x8>)
 8011efe:	f000 b8ac 	b.w	801205a <__retarget_lock_acquire_recursive>
 8011f02:	bf00      	nop
 8011f04:	2000dd4f 	.word	0x2000dd4f

08011f08 <__sinit_lock_release>:
 8011f08:	4801      	ldr	r0, [pc, #4]	; (8011f10 <__sinit_lock_release+0x8>)
 8011f0a:	f000 b8a7 	b.w	801205c <__retarget_lock_release_recursive>
 8011f0e:	bf00      	nop
 8011f10:	2000dd4f 	.word	0x2000dd4f

08011f14 <__sinit>:
 8011f14:	b510      	push	{r4, lr}
 8011f16:	4604      	mov	r4, r0
 8011f18:	f7ff fff0 	bl	8011efc <__sinit_lock_acquire>
 8011f1c:	69a3      	ldr	r3, [r4, #24]
 8011f1e:	b11b      	cbz	r3, 8011f28 <__sinit+0x14>
 8011f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f24:	f7ff bff0 	b.w	8011f08 <__sinit_lock_release>
 8011f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8011f2e:	4b13      	ldr	r3, [pc, #76]	; (8011f7c <__sinit+0x68>)
 8011f30:	4a13      	ldr	r2, [pc, #76]	; (8011f80 <__sinit+0x6c>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8011f36:	42a3      	cmp	r3, r4
 8011f38:	bf04      	itt	eq
 8011f3a:	2301      	moveq	r3, #1
 8011f3c:	61a3      	streq	r3, [r4, #24]
 8011f3e:	4620      	mov	r0, r4
 8011f40:	f000 f820 	bl	8011f84 <__sfp>
 8011f44:	6060      	str	r0, [r4, #4]
 8011f46:	4620      	mov	r0, r4
 8011f48:	f000 f81c 	bl	8011f84 <__sfp>
 8011f4c:	60a0      	str	r0, [r4, #8]
 8011f4e:	4620      	mov	r0, r4
 8011f50:	f000 f818 	bl	8011f84 <__sfp>
 8011f54:	2200      	movs	r2, #0
 8011f56:	60e0      	str	r0, [r4, #12]
 8011f58:	2104      	movs	r1, #4
 8011f5a:	6860      	ldr	r0, [r4, #4]
 8011f5c:	f7ff ff82 	bl	8011e64 <std>
 8011f60:	68a0      	ldr	r0, [r4, #8]
 8011f62:	2201      	movs	r2, #1
 8011f64:	2109      	movs	r1, #9
 8011f66:	f7ff ff7d 	bl	8011e64 <std>
 8011f6a:	68e0      	ldr	r0, [r4, #12]
 8011f6c:	2202      	movs	r2, #2
 8011f6e:	2112      	movs	r1, #18
 8011f70:	f7ff ff78 	bl	8011e64 <std>
 8011f74:	2301      	movs	r3, #1
 8011f76:	61a3      	str	r3, [r4, #24]
 8011f78:	e7d2      	b.n	8011f20 <__sinit+0xc>
 8011f7a:	bf00      	nop
 8011f7c:	08014270 	.word	0x08014270
 8011f80:	08011ead 	.word	0x08011ead

08011f84 <__sfp>:
 8011f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f86:	4607      	mov	r7, r0
 8011f88:	f7ff ffac 	bl	8011ee4 <__sfp_lock_acquire>
 8011f8c:	4b1e      	ldr	r3, [pc, #120]	; (8012008 <__sfp+0x84>)
 8011f8e:	681e      	ldr	r6, [r3, #0]
 8011f90:	69b3      	ldr	r3, [r6, #24]
 8011f92:	b913      	cbnz	r3, 8011f9a <__sfp+0x16>
 8011f94:	4630      	mov	r0, r6
 8011f96:	f7ff ffbd 	bl	8011f14 <__sinit>
 8011f9a:	3648      	adds	r6, #72	; 0x48
 8011f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011fa0:	3b01      	subs	r3, #1
 8011fa2:	d503      	bpl.n	8011fac <__sfp+0x28>
 8011fa4:	6833      	ldr	r3, [r6, #0]
 8011fa6:	b30b      	cbz	r3, 8011fec <__sfp+0x68>
 8011fa8:	6836      	ldr	r6, [r6, #0]
 8011faa:	e7f7      	b.n	8011f9c <__sfp+0x18>
 8011fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011fb0:	b9d5      	cbnz	r5, 8011fe8 <__sfp+0x64>
 8011fb2:	4b16      	ldr	r3, [pc, #88]	; (801200c <__sfp+0x88>)
 8011fb4:	60e3      	str	r3, [r4, #12]
 8011fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011fba:	6665      	str	r5, [r4, #100]	; 0x64
 8011fbc:	f000 f84c 	bl	8012058 <__retarget_lock_init_recursive>
 8011fc0:	f7ff ff96 	bl	8011ef0 <__sfp_lock_release>
 8011fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011fcc:	6025      	str	r5, [r4, #0]
 8011fce:	61a5      	str	r5, [r4, #24]
 8011fd0:	2208      	movs	r2, #8
 8011fd2:	4629      	mov	r1, r5
 8011fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011fd8:	f7fe f976 	bl	80102c8 <memset>
 8011fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fe8:	3468      	adds	r4, #104	; 0x68
 8011fea:	e7d9      	b.n	8011fa0 <__sfp+0x1c>
 8011fec:	2104      	movs	r1, #4
 8011fee:	4638      	mov	r0, r7
 8011ff0:	f7ff ff62 	bl	8011eb8 <__sfmoreglue>
 8011ff4:	4604      	mov	r4, r0
 8011ff6:	6030      	str	r0, [r6, #0]
 8011ff8:	2800      	cmp	r0, #0
 8011ffa:	d1d5      	bne.n	8011fa8 <__sfp+0x24>
 8011ffc:	f7ff ff78 	bl	8011ef0 <__sfp_lock_release>
 8012000:	230c      	movs	r3, #12
 8012002:	603b      	str	r3, [r7, #0]
 8012004:	e7ee      	b.n	8011fe4 <__sfp+0x60>
 8012006:	bf00      	nop
 8012008:	08014270 	.word	0x08014270
 801200c:	ffff0001 	.word	0xffff0001

08012010 <_fwalk_reent>:
 8012010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012014:	4606      	mov	r6, r0
 8012016:	4688      	mov	r8, r1
 8012018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801201c:	2700      	movs	r7, #0
 801201e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012022:	f1b9 0901 	subs.w	r9, r9, #1
 8012026:	d505      	bpl.n	8012034 <_fwalk_reent+0x24>
 8012028:	6824      	ldr	r4, [r4, #0]
 801202a:	2c00      	cmp	r4, #0
 801202c:	d1f7      	bne.n	801201e <_fwalk_reent+0xe>
 801202e:	4638      	mov	r0, r7
 8012030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012034:	89ab      	ldrh	r3, [r5, #12]
 8012036:	2b01      	cmp	r3, #1
 8012038:	d907      	bls.n	801204a <_fwalk_reent+0x3a>
 801203a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801203e:	3301      	adds	r3, #1
 8012040:	d003      	beq.n	801204a <_fwalk_reent+0x3a>
 8012042:	4629      	mov	r1, r5
 8012044:	4630      	mov	r0, r6
 8012046:	47c0      	blx	r8
 8012048:	4307      	orrs	r7, r0
 801204a:	3568      	adds	r5, #104	; 0x68
 801204c:	e7e9      	b.n	8012022 <_fwalk_reent+0x12>
	...

08012050 <_localeconv_r>:
 8012050:	4800      	ldr	r0, [pc, #0]	; (8012054 <_localeconv_r+0x4>)
 8012052:	4770      	bx	lr
 8012054:	20000458 	.word	0x20000458

08012058 <__retarget_lock_init_recursive>:
 8012058:	4770      	bx	lr

0801205a <__retarget_lock_acquire_recursive>:
 801205a:	4770      	bx	lr

0801205c <__retarget_lock_release_recursive>:
 801205c:	4770      	bx	lr

0801205e <__swhatbuf_r>:
 801205e:	b570      	push	{r4, r5, r6, lr}
 8012060:	460e      	mov	r6, r1
 8012062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012066:	2900      	cmp	r1, #0
 8012068:	b096      	sub	sp, #88	; 0x58
 801206a:	4614      	mov	r4, r2
 801206c:	461d      	mov	r5, r3
 801206e:	da07      	bge.n	8012080 <__swhatbuf_r+0x22>
 8012070:	2300      	movs	r3, #0
 8012072:	602b      	str	r3, [r5, #0]
 8012074:	89b3      	ldrh	r3, [r6, #12]
 8012076:	061a      	lsls	r2, r3, #24
 8012078:	d410      	bmi.n	801209c <__swhatbuf_r+0x3e>
 801207a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801207e:	e00e      	b.n	801209e <__swhatbuf_r+0x40>
 8012080:	466a      	mov	r2, sp
 8012082:	f000 fd4b 	bl	8012b1c <_fstat_r>
 8012086:	2800      	cmp	r0, #0
 8012088:	dbf2      	blt.n	8012070 <__swhatbuf_r+0x12>
 801208a:	9a01      	ldr	r2, [sp, #4]
 801208c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012090:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012094:	425a      	negs	r2, r3
 8012096:	415a      	adcs	r2, r3
 8012098:	602a      	str	r2, [r5, #0]
 801209a:	e7ee      	b.n	801207a <__swhatbuf_r+0x1c>
 801209c:	2340      	movs	r3, #64	; 0x40
 801209e:	2000      	movs	r0, #0
 80120a0:	6023      	str	r3, [r4, #0]
 80120a2:	b016      	add	sp, #88	; 0x58
 80120a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080120a8 <__smakebuf_r>:
 80120a8:	898b      	ldrh	r3, [r1, #12]
 80120aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80120ac:	079d      	lsls	r5, r3, #30
 80120ae:	4606      	mov	r6, r0
 80120b0:	460c      	mov	r4, r1
 80120b2:	d507      	bpl.n	80120c4 <__smakebuf_r+0x1c>
 80120b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80120b8:	6023      	str	r3, [r4, #0]
 80120ba:	6123      	str	r3, [r4, #16]
 80120bc:	2301      	movs	r3, #1
 80120be:	6163      	str	r3, [r4, #20]
 80120c0:	b002      	add	sp, #8
 80120c2:	bd70      	pop	{r4, r5, r6, pc}
 80120c4:	ab01      	add	r3, sp, #4
 80120c6:	466a      	mov	r2, sp
 80120c8:	f7ff ffc9 	bl	801205e <__swhatbuf_r>
 80120cc:	9900      	ldr	r1, [sp, #0]
 80120ce:	4605      	mov	r5, r0
 80120d0:	4630      	mov	r0, r6
 80120d2:	f000 fc0f 	bl	80128f4 <_malloc_r>
 80120d6:	b948      	cbnz	r0, 80120ec <__smakebuf_r+0x44>
 80120d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120dc:	059a      	lsls	r2, r3, #22
 80120de:	d4ef      	bmi.n	80120c0 <__smakebuf_r+0x18>
 80120e0:	f023 0303 	bic.w	r3, r3, #3
 80120e4:	f043 0302 	orr.w	r3, r3, #2
 80120e8:	81a3      	strh	r3, [r4, #12]
 80120ea:	e7e3      	b.n	80120b4 <__smakebuf_r+0xc>
 80120ec:	4b0d      	ldr	r3, [pc, #52]	; (8012124 <__smakebuf_r+0x7c>)
 80120ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80120f0:	89a3      	ldrh	r3, [r4, #12]
 80120f2:	6020      	str	r0, [r4, #0]
 80120f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120f8:	81a3      	strh	r3, [r4, #12]
 80120fa:	9b00      	ldr	r3, [sp, #0]
 80120fc:	6163      	str	r3, [r4, #20]
 80120fe:	9b01      	ldr	r3, [sp, #4]
 8012100:	6120      	str	r0, [r4, #16]
 8012102:	b15b      	cbz	r3, 801211c <__smakebuf_r+0x74>
 8012104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012108:	4630      	mov	r0, r6
 801210a:	f000 fd19 	bl	8012b40 <_isatty_r>
 801210e:	b128      	cbz	r0, 801211c <__smakebuf_r+0x74>
 8012110:	89a3      	ldrh	r3, [r4, #12]
 8012112:	f023 0303 	bic.w	r3, r3, #3
 8012116:	f043 0301 	orr.w	r3, r3, #1
 801211a:	81a3      	strh	r3, [r4, #12]
 801211c:	89a0      	ldrh	r0, [r4, #12]
 801211e:	4305      	orrs	r5, r0
 8012120:	81a5      	strh	r5, [r4, #12]
 8012122:	e7cd      	b.n	80120c0 <__smakebuf_r+0x18>
 8012124:	08011ead 	.word	0x08011ead

08012128 <malloc>:
 8012128:	4b02      	ldr	r3, [pc, #8]	; (8012134 <malloc+0xc>)
 801212a:	4601      	mov	r1, r0
 801212c:	6818      	ldr	r0, [r3, #0]
 801212e:	f000 bbe1 	b.w	80128f4 <_malloc_r>
 8012132:	bf00      	nop
 8012134:	20000304 	.word	0x20000304

08012138 <_Balloc>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801213c:	4604      	mov	r4, r0
 801213e:	460d      	mov	r5, r1
 8012140:	b976      	cbnz	r6, 8012160 <_Balloc+0x28>
 8012142:	2010      	movs	r0, #16
 8012144:	f7ff fff0 	bl	8012128 <malloc>
 8012148:	4602      	mov	r2, r0
 801214a:	6260      	str	r0, [r4, #36]	; 0x24
 801214c:	b920      	cbnz	r0, 8012158 <_Balloc+0x20>
 801214e:	4b18      	ldr	r3, [pc, #96]	; (80121b0 <_Balloc+0x78>)
 8012150:	4818      	ldr	r0, [pc, #96]	; (80121b4 <_Balloc+0x7c>)
 8012152:	2166      	movs	r1, #102	; 0x66
 8012154:	f7fe f850 	bl	80101f8 <__assert_func>
 8012158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801215c:	6006      	str	r6, [r0, #0]
 801215e:	60c6      	str	r6, [r0, #12]
 8012160:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012162:	68f3      	ldr	r3, [r6, #12]
 8012164:	b183      	cbz	r3, 8012188 <_Balloc+0x50>
 8012166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012168:	68db      	ldr	r3, [r3, #12]
 801216a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801216e:	b9b8      	cbnz	r0, 80121a0 <_Balloc+0x68>
 8012170:	2101      	movs	r1, #1
 8012172:	fa01 f605 	lsl.w	r6, r1, r5
 8012176:	1d72      	adds	r2, r6, #5
 8012178:	0092      	lsls	r2, r2, #2
 801217a:	4620      	mov	r0, r4
 801217c:	f000 fb5a 	bl	8012834 <_calloc_r>
 8012180:	b160      	cbz	r0, 801219c <_Balloc+0x64>
 8012182:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012186:	e00e      	b.n	80121a6 <_Balloc+0x6e>
 8012188:	2221      	movs	r2, #33	; 0x21
 801218a:	2104      	movs	r1, #4
 801218c:	4620      	mov	r0, r4
 801218e:	f000 fb51 	bl	8012834 <_calloc_r>
 8012192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012194:	60f0      	str	r0, [r6, #12]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d1e4      	bne.n	8012166 <_Balloc+0x2e>
 801219c:	2000      	movs	r0, #0
 801219e:	bd70      	pop	{r4, r5, r6, pc}
 80121a0:	6802      	ldr	r2, [r0, #0]
 80121a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80121a6:	2300      	movs	r3, #0
 80121a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80121ac:	e7f7      	b.n	801219e <_Balloc+0x66>
 80121ae:	bf00      	nop
 80121b0:	080142c6 	.word	0x080142c6
 80121b4:	080143b0 	.word	0x080143b0

080121b8 <_Bfree>:
 80121b8:	b570      	push	{r4, r5, r6, lr}
 80121ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80121bc:	4605      	mov	r5, r0
 80121be:	460c      	mov	r4, r1
 80121c0:	b976      	cbnz	r6, 80121e0 <_Bfree+0x28>
 80121c2:	2010      	movs	r0, #16
 80121c4:	f7ff ffb0 	bl	8012128 <malloc>
 80121c8:	4602      	mov	r2, r0
 80121ca:	6268      	str	r0, [r5, #36]	; 0x24
 80121cc:	b920      	cbnz	r0, 80121d8 <_Bfree+0x20>
 80121ce:	4b09      	ldr	r3, [pc, #36]	; (80121f4 <_Bfree+0x3c>)
 80121d0:	4809      	ldr	r0, [pc, #36]	; (80121f8 <_Bfree+0x40>)
 80121d2:	218a      	movs	r1, #138	; 0x8a
 80121d4:	f7fe f810 	bl	80101f8 <__assert_func>
 80121d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80121dc:	6006      	str	r6, [r0, #0]
 80121de:	60c6      	str	r6, [r0, #12]
 80121e0:	b13c      	cbz	r4, 80121f2 <_Bfree+0x3a>
 80121e2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80121e4:	6862      	ldr	r2, [r4, #4]
 80121e6:	68db      	ldr	r3, [r3, #12]
 80121e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80121ec:	6021      	str	r1, [r4, #0]
 80121ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80121f2:	bd70      	pop	{r4, r5, r6, pc}
 80121f4:	080142c6 	.word	0x080142c6
 80121f8:	080143b0 	.word	0x080143b0

080121fc <__multadd>:
 80121fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012200:	690e      	ldr	r6, [r1, #16]
 8012202:	4607      	mov	r7, r0
 8012204:	4698      	mov	r8, r3
 8012206:	460c      	mov	r4, r1
 8012208:	f101 0014 	add.w	r0, r1, #20
 801220c:	2300      	movs	r3, #0
 801220e:	6805      	ldr	r5, [r0, #0]
 8012210:	b2a9      	uxth	r1, r5
 8012212:	fb02 8101 	mla	r1, r2, r1, r8
 8012216:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801221a:	0c2d      	lsrs	r5, r5, #16
 801221c:	fb02 c505 	mla	r5, r2, r5, ip
 8012220:	b289      	uxth	r1, r1
 8012222:	3301      	adds	r3, #1
 8012224:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8012228:	429e      	cmp	r6, r3
 801222a:	f840 1b04 	str.w	r1, [r0], #4
 801222e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8012232:	dcec      	bgt.n	801220e <__multadd+0x12>
 8012234:	f1b8 0f00 	cmp.w	r8, #0
 8012238:	d022      	beq.n	8012280 <__multadd+0x84>
 801223a:	68a3      	ldr	r3, [r4, #8]
 801223c:	42b3      	cmp	r3, r6
 801223e:	dc19      	bgt.n	8012274 <__multadd+0x78>
 8012240:	6861      	ldr	r1, [r4, #4]
 8012242:	4638      	mov	r0, r7
 8012244:	3101      	adds	r1, #1
 8012246:	f7ff ff77 	bl	8012138 <_Balloc>
 801224a:	4605      	mov	r5, r0
 801224c:	b928      	cbnz	r0, 801225a <__multadd+0x5e>
 801224e:	4602      	mov	r2, r0
 8012250:	4b0d      	ldr	r3, [pc, #52]	; (8012288 <__multadd+0x8c>)
 8012252:	480e      	ldr	r0, [pc, #56]	; (801228c <__multadd+0x90>)
 8012254:	21b5      	movs	r1, #181	; 0xb5
 8012256:	f7fd ffcf 	bl	80101f8 <__assert_func>
 801225a:	6922      	ldr	r2, [r4, #16]
 801225c:	3202      	adds	r2, #2
 801225e:	f104 010c 	add.w	r1, r4, #12
 8012262:	0092      	lsls	r2, r2, #2
 8012264:	300c      	adds	r0, #12
 8012266:	f7fe f821 	bl	80102ac <memcpy>
 801226a:	4621      	mov	r1, r4
 801226c:	4638      	mov	r0, r7
 801226e:	f7ff ffa3 	bl	80121b8 <_Bfree>
 8012272:	462c      	mov	r4, r5
 8012274:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8012278:	3601      	adds	r6, #1
 801227a:	f8c3 8014 	str.w	r8, [r3, #20]
 801227e:	6126      	str	r6, [r4, #16]
 8012280:	4620      	mov	r0, r4
 8012282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012286:	bf00      	nop
 8012288:	0801433c 	.word	0x0801433c
 801228c:	080143b0 	.word	0x080143b0

08012290 <__hi0bits>:
 8012290:	0c03      	lsrs	r3, r0, #16
 8012292:	041b      	lsls	r3, r3, #16
 8012294:	b9d3      	cbnz	r3, 80122cc <__hi0bits+0x3c>
 8012296:	0400      	lsls	r0, r0, #16
 8012298:	2310      	movs	r3, #16
 801229a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801229e:	bf04      	itt	eq
 80122a0:	0200      	lsleq	r0, r0, #8
 80122a2:	3308      	addeq	r3, #8
 80122a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80122a8:	bf04      	itt	eq
 80122aa:	0100      	lsleq	r0, r0, #4
 80122ac:	3304      	addeq	r3, #4
 80122ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80122b2:	bf04      	itt	eq
 80122b4:	0080      	lsleq	r0, r0, #2
 80122b6:	3302      	addeq	r3, #2
 80122b8:	2800      	cmp	r0, #0
 80122ba:	db05      	blt.n	80122c8 <__hi0bits+0x38>
 80122bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122c0:	f103 0301 	add.w	r3, r3, #1
 80122c4:	bf08      	it	eq
 80122c6:	2320      	moveq	r3, #32
 80122c8:	4618      	mov	r0, r3
 80122ca:	4770      	bx	lr
 80122cc:	2300      	movs	r3, #0
 80122ce:	e7e4      	b.n	801229a <__hi0bits+0xa>

080122d0 <__lo0bits>:
 80122d0:	6803      	ldr	r3, [r0, #0]
 80122d2:	f013 0207 	ands.w	r2, r3, #7
 80122d6:	4601      	mov	r1, r0
 80122d8:	d00b      	beq.n	80122f2 <__lo0bits+0x22>
 80122da:	07da      	lsls	r2, r3, #31
 80122dc:	d424      	bmi.n	8012328 <__lo0bits+0x58>
 80122de:	0798      	lsls	r0, r3, #30
 80122e0:	bf49      	itett	mi
 80122e2:	085b      	lsrmi	r3, r3, #1
 80122e4:	089b      	lsrpl	r3, r3, #2
 80122e6:	2001      	movmi	r0, #1
 80122e8:	600b      	strmi	r3, [r1, #0]
 80122ea:	bf5c      	itt	pl
 80122ec:	600b      	strpl	r3, [r1, #0]
 80122ee:	2002      	movpl	r0, #2
 80122f0:	4770      	bx	lr
 80122f2:	b298      	uxth	r0, r3
 80122f4:	b9b0      	cbnz	r0, 8012324 <__lo0bits+0x54>
 80122f6:	0c1b      	lsrs	r3, r3, #16
 80122f8:	2010      	movs	r0, #16
 80122fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80122fe:	bf04      	itt	eq
 8012300:	0a1b      	lsreq	r3, r3, #8
 8012302:	3008      	addeq	r0, #8
 8012304:	071a      	lsls	r2, r3, #28
 8012306:	bf04      	itt	eq
 8012308:	091b      	lsreq	r3, r3, #4
 801230a:	3004      	addeq	r0, #4
 801230c:	079a      	lsls	r2, r3, #30
 801230e:	bf04      	itt	eq
 8012310:	089b      	lsreq	r3, r3, #2
 8012312:	3002      	addeq	r0, #2
 8012314:	07da      	lsls	r2, r3, #31
 8012316:	d403      	bmi.n	8012320 <__lo0bits+0x50>
 8012318:	085b      	lsrs	r3, r3, #1
 801231a:	f100 0001 	add.w	r0, r0, #1
 801231e:	d005      	beq.n	801232c <__lo0bits+0x5c>
 8012320:	600b      	str	r3, [r1, #0]
 8012322:	4770      	bx	lr
 8012324:	4610      	mov	r0, r2
 8012326:	e7e8      	b.n	80122fa <__lo0bits+0x2a>
 8012328:	2000      	movs	r0, #0
 801232a:	4770      	bx	lr
 801232c:	2020      	movs	r0, #32
 801232e:	4770      	bx	lr

08012330 <__i2b>:
 8012330:	b510      	push	{r4, lr}
 8012332:	460c      	mov	r4, r1
 8012334:	2101      	movs	r1, #1
 8012336:	f7ff feff 	bl	8012138 <_Balloc>
 801233a:	4602      	mov	r2, r0
 801233c:	b928      	cbnz	r0, 801234a <__i2b+0x1a>
 801233e:	4b05      	ldr	r3, [pc, #20]	; (8012354 <__i2b+0x24>)
 8012340:	4805      	ldr	r0, [pc, #20]	; (8012358 <__i2b+0x28>)
 8012342:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012346:	f7fd ff57 	bl	80101f8 <__assert_func>
 801234a:	2301      	movs	r3, #1
 801234c:	6144      	str	r4, [r0, #20]
 801234e:	6103      	str	r3, [r0, #16]
 8012350:	bd10      	pop	{r4, pc}
 8012352:	bf00      	nop
 8012354:	0801433c 	.word	0x0801433c
 8012358:	080143b0 	.word	0x080143b0

0801235c <__multiply>:
 801235c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012360:	4614      	mov	r4, r2
 8012362:	690a      	ldr	r2, [r1, #16]
 8012364:	6923      	ldr	r3, [r4, #16]
 8012366:	429a      	cmp	r2, r3
 8012368:	bfb8      	it	lt
 801236a:	460b      	movlt	r3, r1
 801236c:	460d      	mov	r5, r1
 801236e:	bfbc      	itt	lt
 8012370:	4625      	movlt	r5, r4
 8012372:	461c      	movlt	r4, r3
 8012374:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8012378:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801237c:	68ab      	ldr	r3, [r5, #8]
 801237e:	6869      	ldr	r1, [r5, #4]
 8012380:	eb0a 0709 	add.w	r7, sl, r9
 8012384:	42bb      	cmp	r3, r7
 8012386:	b085      	sub	sp, #20
 8012388:	bfb8      	it	lt
 801238a:	3101      	addlt	r1, #1
 801238c:	f7ff fed4 	bl	8012138 <_Balloc>
 8012390:	b930      	cbnz	r0, 80123a0 <__multiply+0x44>
 8012392:	4602      	mov	r2, r0
 8012394:	4b42      	ldr	r3, [pc, #264]	; (80124a0 <__multiply+0x144>)
 8012396:	4843      	ldr	r0, [pc, #268]	; (80124a4 <__multiply+0x148>)
 8012398:	f240 115d 	movw	r1, #349	; 0x15d
 801239c:	f7fd ff2c 	bl	80101f8 <__assert_func>
 80123a0:	f100 0614 	add.w	r6, r0, #20
 80123a4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80123a8:	4633      	mov	r3, r6
 80123aa:	2200      	movs	r2, #0
 80123ac:	4543      	cmp	r3, r8
 80123ae:	d31e      	bcc.n	80123ee <__multiply+0x92>
 80123b0:	f105 0c14 	add.w	ip, r5, #20
 80123b4:	f104 0314 	add.w	r3, r4, #20
 80123b8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80123bc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80123c0:	9202      	str	r2, [sp, #8]
 80123c2:	ebac 0205 	sub.w	r2, ip, r5
 80123c6:	3a15      	subs	r2, #21
 80123c8:	f022 0203 	bic.w	r2, r2, #3
 80123cc:	3204      	adds	r2, #4
 80123ce:	f105 0115 	add.w	r1, r5, #21
 80123d2:	458c      	cmp	ip, r1
 80123d4:	bf38      	it	cc
 80123d6:	2204      	movcc	r2, #4
 80123d8:	9201      	str	r2, [sp, #4]
 80123da:	9a02      	ldr	r2, [sp, #8]
 80123dc:	9303      	str	r3, [sp, #12]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d808      	bhi.n	80123f4 <__multiply+0x98>
 80123e2:	2f00      	cmp	r7, #0
 80123e4:	dc55      	bgt.n	8012492 <__multiply+0x136>
 80123e6:	6107      	str	r7, [r0, #16]
 80123e8:	b005      	add	sp, #20
 80123ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ee:	f843 2b04 	str.w	r2, [r3], #4
 80123f2:	e7db      	b.n	80123ac <__multiply+0x50>
 80123f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80123f8:	f1ba 0f00 	cmp.w	sl, #0
 80123fc:	d020      	beq.n	8012440 <__multiply+0xe4>
 80123fe:	f105 0e14 	add.w	lr, r5, #20
 8012402:	46b1      	mov	r9, r6
 8012404:	2200      	movs	r2, #0
 8012406:	f85e 4b04 	ldr.w	r4, [lr], #4
 801240a:	f8d9 b000 	ldr.w	fp, [r9]
 801240e:	b2a1      	uxth	r1, r4
 8012410:	fa1f fb8b 	uxth.w	fp, fp
 8012414:	fb0a b101 	mla	r1, sl, r1, fp
 8012418:	4411      	add	r1, r2
 801241a:	f8d9 2000 	ldr.w	r2, [r9]
 801241e:	0c24      	lsrs	r4, r4, #16
 8012420:	0c12      	lsrs	r2, r2, #16
 8012422:	fb0a 2404 	mla	r4, sl, r4, r2
 8012426:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801242a:	b289      	uxth	r1, r1
 801242c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012430:	45f4      	cmp	ip, lr
 8012432:	f849 1b04 	str.w	r1, [r9], #4
 8012436:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801243a:	d8e4      	bhi.n	8012406 <__multiply+0xaa>
 801243c:	9901      	ldr	r1, [sp, #4]
 801243e:	5072      	str	r2, [r6, r1]
 8012440:	9a03      	ldr	r2, [sp, #12]
 8012442:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012446:	3304      	adds	r3, #4
 8012448:	f1b9 0f00 	cmp.w	r9, #0
 801244c:	d01f      	beq.n	801248e <__multiply+0x132>
 801244e:	6834      	ldr	r4, [r6, #0]
 8012450:	f105 0114 	add.w	r1, r5, #20
 8012454:	46b6      	mov	lr, r6
 8012456:	f04f 0a00 	mov.w	sl, #0
 801245a:	880a      	ldrh	r2, [r1, #0]
 801245c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012460:	fb09 b202 	mla	r2, r9, r2, fp
 8012464:	4492      	add	sl, r2
 8012466:	b2a4      	uxth	r4, r4
 8012468:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801246c:	f84e 4b04 	str.w	r4, [lr], #4
 8012470:	f851 4b04 	ldr.w	r4, [r1], #4
 8012474:	f8be 2000 	ldrh.w	r2, [lr]
 8012478:	0c24      	lsrs	r4, r4, #16
 801247a:	fb09 2404 	mla	r4, r9, r4, r2
 801247e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012482:	458c      	cmp	ip, r1
 8012484:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012488:	d8e7      	bhi.n	801245a <__multiply+0xfe>
 801248a:	9a01      	ldr	r2, [sp, #4]
 801248c:	50b4      	str	r4, [r6, r2]
 801248e:	3604      	adds	r6, #4
 8012490:	e7a3      	b.n	80123da <__multiply+0x7e>
 8012492:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012496:	2b00      	cmp	r3, #0
 8012498:	d1a5      	bne.n	80123e6 <__multiply+0x8a>
 801249a:	3f01      	subs	r7, #1
 801249c:	e7a1      	b.n	80123e2 <__multiply+0x86>
 801249e:	bf00      	nop
 80124a0:	0801433c 	.word	0x0801433c
 80124a4:	080143b0 	.word	0x080143b0

080124a8 <__pow5mult>:
 80124a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124ac:	4615      	mov	r5, r2
 80124ae:	f012 0203 	ands.w	r2, r2, #3
 80124b2:	4606      	mov	r6, r0
 80124b4:	460f      	mov	r7, r1
 80124b6:	d007      	beq.n	80124c8 <__pow5mult+0x20>
 80124b8:	4c25      	ldr	r4, [pc, #148]	; (8012550 <__pow5mult+0xa8>)
 80124ba:	3a01      	subs	r2, #1
 80124bc:	2300      	movs	r3, #0
 80124be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124c2:	f7ff fe9b 	bl	80121fc <__multadd>
 80124c6:	4607      	mov	r7, r0
 80124c8:	10ad      	asrs	r5, r5, #2
 80124ca:	d03d      	beq.n	8012548 <__pow5mult+0xa0>
 80124cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124ce:	b97c      	cbnz	r4, 80124f0 <__pow5mult+0x48>
 80124d0:	2010      	movs	r0, #16
 80124d2:	f7ff fe29 	bl	8012128 <malloc>
 80124d6:	4602      	mov	r2, r0
 80124d8:	6270      	str	r0, [r6, #36]	; 0x24
 80124da:	b928      	cbnz	r0, 80124e8 <__pow5mult+0x40>
 80124dc:	4b1d      	ldr	r3, [pc, #116]	; (8012554 <__pow5mult+0xac>)
 80124de:	481e      	ldr	r0, [pc, #120]	; (8012558 <__pow5mult+0xb0>)
 80124e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124e4:	f7fd fe88 	bl	80101f8 <__assert_func>
 80124e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124ec:	6004      	str	r4, [r0, #0]
 80124ee:	60c4      	str	r4, [r0, #12]
 80124f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124f8:	b94c      	cbnz	r4, 801250e <__pow5mult+0x66>
 80124fa:	f240 2171 	movw	r1, #625	; 0x271
 80124fe:	4630      	mov	r0, r6
 8012500:	f7ff ff16 	bl	8012330 <__i2b>
 8012504:	2300      	movs	r3, #0
 8012506:	f8c8 0008 	str.w	r0, [r8, #8]
 801250a:	4604      	mov	r4, r0
 801250c:	6003      	str	r3, [r0, #0]
 801250e:	f04f 0900 	mov.w	r9, #0
 8012512:	07eb      	lsls	r3, r5, #31
 8012514:	d50a      	bpl.n	801252c <__pow5mult+0x84>
 8012516:	4639      	mov	r1, r7
 8012518:	4622      	mov	r2, r4
 801251a:	4630      	mov	r0, r6
 801251c:	f7ff ff1e 	bl	801235c <__multiply>
 8012520:	4639      	mov	r1, r7
 8012522:	4680      	mov	r8, r0
 8012524:	4630      	mov	r0, r6
 8012526:	f7ff fe47 	bl	80121b8 <_Bfree>
 801252a:	4647      	mov	r7, r8
 801252c:	106d      	asrs	r5, r5, #1
 801252e:	d00b      	beq.n	8012548 <__pow5mult+0xa0>
 8012530:	6820      	ldr	r0, [r4, #0]
 8012532:	b938      	cbnz	r0, 8012544 <__pow5mult+0x9c>
 8012534:	4622      	mov	r2, r4
 8012536:	4621      	mov	r1, r4
 8012538:	4630      	mov	r0, r6
 801253a:	f7ff ff0f 	bl	801235c <__multiply>
 801253e:	6020      	str	r0, [r4, #0]
 8012540:	f8c0 9000 	str.w	r9, [r0]
 8012544:	4604      	mov	r4, r0
 8012546:	e7e4      	b.n	8012512 <__pow5mult+0x6a>
 8012548:	4638      	mov	r0, r7
 801254a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801254e:	bf00      	nop
 8012550:	08014500 	.word	0x08014500
 8012554:	080142c6 	.word	0x080142c6
 8012558:	080143b0 	.word	0x080143b0

0801255c <__lshift>:
 801255c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012560:	460c      	mov	r4, r1
 8012562:	6849      	ldr	r1, [r1, #4]
 8012564:	6923      	ldr	r3, [r4, #16]
 8012566:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801256a:	68a3      	ldr	r3, [r4, #8]
 801256c:	4607      	mov	r7, r0
 801256e:	4691      	mov	r9, r2
 8012570:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012574:	f108 0601 	add.w	r6, r8, #1
 8012578:	42b3      	cmp	r3, r6
 801257a:	db0b      	blt.n	8012594 <__lshift+0x38>
 801257c:	4638      	mov	r0, r7
 801257e:	f7ff fddb 	bl	8012138 <_Balloc>
 8012582:	4605      	mov	r5, r0
 8012584:	b948      	cbnz	r0, 801259a <__lshift+0x3e>
 8012586:	4602      	mov	r2, r0
 8012588:	4b28      	ldr	r3, [pc, #160]	; (801262c <__lshift+0xd0>)
 801258a:	4829      	ldr	r0, [pc, #164]	; (8012630 <__lshift+0xd4>)
 801258c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8012590:	f7fd fe32 	bl	80101f8 <__assert_func>
 8012594:	3101      	adds	r1, #1
 8012596:	005b      	lsls	r3, r3, #1
 8012598:	e7ee      	b.n	8012578 <__lshift+0x1c>
 801259a:	2300      	movs	r3, #0
 801259c:	f100 0114 	add.w	r1, r0, #20
 80125a0:	f100 0210 	add.w	r2, r0, #16
 80125a4:	4618      	mov	r0, r3
 80125a6:	4553      	cmp	r3, sl
 80125a8:	db33      	blt.n	8012612 <__lshift+0xb6>
 80125aa:	6920      	ldr	r0, [r4, #16]
 80125ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125b0:	f104 0314 	add.w	r3, r4, #20
 80125b4:	f019 091f 	ands.w	r9, r9, #31
 80125b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125c0:	d02b      	beq.n	801261a <__lshift+0xbe>
 80125c2:	f1c9 0e20 	rsb	lr, r9, #32
 80125c6:	468a      	mov	sl, r1
 80125c8:	2200      	movs	r2, #0
 80125ca:	6818      	ldr	r0, [r3, #0]
 80125cc:	fa00 f009 	lsl.w	r0, r0, r9
 80125d0:	4302      	orrs	r2, r0
 80125d2:	f84a 2b04 	str.w	r2, [sl], #4
 80125d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80125da:	459c      	cmp	ip, r3
 80125dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80125e0:	d8f3      	bhi.n	80125ca <__lshift+0x6e>
 80125e2:	ebac 0304 	sub.w	r3, ip, r4
 80125e6:	3b15      	subs	r3, #21
 80125e8:	f023 0303 	bic.w	r3, r3, #3
 80125ec:	3304      	adds	r3, #4
 80125ee:	f104 0015 	add.w	r0, r4, #21
 80125f2:	4584      	cmp	ip, r0
 80125f4:	bf38      	it	cc
 80125f6:	2304      	movcc	r3, #4
 80125f8:	50ca      	str	r2, [r1, r3]
 80125fa:	b10a      	cbz	r2, 8012600 <__lshift+0xa4>
 80125fc:	f108 0602 	add.w	r6, r8, #2
 8012600:	3e01      	subs	r6, #1
 8012602:	4638      	mov	r0, r7
 8012604:	612e      	str	r6, [r5, #16]
 8012606:	4621      	mov	r1, r4
 8012608:	f7ff fdd6 	bl	80121b8 <_Bfree>
 801260c:	4628      	mov	r0, r5
 801260e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012612:	f842 0f04 	str.w	r0, [r2, #4]!
 8012616:	3301      	adds	r3, #1
 8012618:	e7c5      	b.n	80125a6 <__lshift+0x4a>
 801261a:	3904      	subs	r1, #4
 801261c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012620:	f841 2f04 	str.w	r2, [r1, #4]!
 8012624:	459c      	cmp	ip, r3
 8012626:	d8f9      	bhi.n	801261c <__lshift+0xc0>
 8012628:	e7ea      	b.n	8012600 <__lshift+0xa4>
 801262a:	bf00      	nop
 801262c:	0801433c 	.word	0x0801433c
 8012630:	080143b0 	.word	0x080143b0

08012634 <__mcmp>:
 8012634:	b530      	push	{r4, r5, lr}
 8012636:	6902      	ldr	r2, [r0, #16]
 8012638:	690c      	ldr	r4, [r1, #16]
 801263a:	1b12      	subs	r2, r2, r4
 801263c:	d10e      	bne.n	801265c <__mcmp+0x28>
 801263e:	f100 0314 	add.w	r3, r0, #20
 8012642:	3114      	adds	r1, #20
 8012644:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012648:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801264c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012650:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012654:	42a5      	cmp	r5, r4
 8012656:	d003      	beq.n	8012660 <__mcmp+0x2c>
 8012658:	d305      	bcc.n	8012666 <__mcmp+0x32>
 801265a:	2201      	movs	r2, #1
 801265c:	4610      	mov	r0, r2
 801265e:	bd30      	pop	{r4, r5, pc}
 8012660:	4283      	cmp	r3, r0
 8012662:	d3f3      	bcc.n	801264c <__mcmp+0x18>
 8012664:	e7fa      	b.n	801265c <__mcmp+0x28>
 8012666:	f04f 32ff 	mov.w	r2, #4294967295
 801266a:	e7f7      	b.n	801265c <__mcmp+0x28>

0801266c <__mdiff>:
 801266c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012670:	460c      	mov	r4, r1
 8012672:	4606      	mov	r6, r0
 8012674:	4611      	mov	r1, r2
 8012676:	4620      	mov	r0, r4
 8012678:	4617      	mov	r7, r2
 801267a:	f7ff ffdb 	bl	8012634 <__mcmp>
 801267e:	1e05      	subs	r5, r0, #0
 8012680:	d110      	bne.n	80126a4 <__mdiff+0x38>
 8012682:	4629      	mov	r1, r5
 8012684:	4630      	mov	r0, r6
 8012686:	f7ff fd57 	bl	8012138 <_Balloc>
 801268a:	b930      	cbnz	r0, 801269a <__mdiff+0x2e>
 801268c:	4b39      	ldr	r3, [pc, #228]	; (8012774 <__mdiff+0x108>)
 801268e:	4602      	mov	r2, r0
 8012690:	f240 2132 	movw	r1, #562	; 0x232
 8012694:	4838      	ldr	r0, [pc, #224]	; (8012778 <__mdiff+0x10c>)
 8012696:	f7fd fdaf 	bl	80101f8 <__assert_func>
 801269a:	2301      	movs	r3, #1
 801269c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126a4:	bfa4      	itt	ge
 80126a6:	463b      	movge	r3, r7
 80126a8:	4627      	movge	r7, r4
 80126aa:	4630      	mov	r0, r6
 80126ac:	6879      	ldr	r1, [r7, #4]
 80126ae:	bfa6      	itte	ge
 80126b0:	461c      	movge	r4, r3
 80126b2:	2500      	movge	r5, #0
 80126b4:	2501      	movlt	r5, #1
 80126b6:	f7ff fd3f 	bl	8012138 <_Balloc>
 80126ba:	b920      	cbnz	r0, 80126c6 <__mdiff+0x5a>
 80126bc:	4b2d      	ldr	r3, [pc, #180]	; (8012774 <__mdiff+0x108>)
 80126be:	4602      	mov	r2, r0
 80126c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80126c4:	e7e6      	b.n	8012694 <__mdiff+0x28>
 80126c6:	693e      	ldr	r6, [r7, #16]
 80126c8:	60c5      	str	r5, [r0, #12]
 80126ca:	6925      	ldr	r5, [r4, #16]
 80126cc:	f107 0114 	add.w	r1, r7, #20
 80126d0:	f104 0914 	add.w	r9, r4, #20
 80126d4:	f100 0e14 	add.w	lr, r0, #20
 80126d8:	f107 0210 	add.w	r2, r7, #16
 80126dc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80126e0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80126e4:	46f2      	mov	sl, lr
 80126e6:	2700      	movs	r7, #0
 80126e8:	f859 3b04 	ldr.w	r3, [r9], #4
 80126ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80126f0:	fa1f f883 	uxth.w	r8, r3
 80126f4:	fa17 f78b 	uxtah	r7, r7, fp
 80126f8:	0c1b      	lsrs	r3, r3, #16
 80126fa:	eba7 0808 	sub.w	r8, r7, r8
 80126fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012702:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012706:	fa1f f888 	uxth.w	r8, r8
 801270a:	141f      	asrs	r7, r3, #16
 801270c:	454d      	cmp	r5, r9
 801270e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012712:	f84a 3b04 	str.w	r3, [sl], #4
 8012716:	d8e7      	bhi.n	80126e8 <__mdiff+0x7c>
 8012718:	1b2b      	subs	r3, r5, r4
 801271a:	3b15      	subs	r3, #21
 801271c:	f023 0303 	bic.w	r3, r3, #3
 8012720:	3304      	adds	r3, #4
 8012722:	3415      	adds	r4, #21
 8012724:	42a5      	cmp	r5, r4
 8012726:	bf38      	it	cc
 8012728:	2304      	movcc	r3, #4
 801272a:	4419      	add	r1, r3
 801272c:	4473      	add	r3, lr
 801272e:	469e      	mov	lr, r3
 8012730:	460d      	mov	r5, r1
 8012732:	4565      	cmp	r5, ip
 8012734:	d30e      	bcc.n	8012754 <__mdiff+0xe8>
 8012736:	f10c 0203 	add.w	r2, ip, #3
 801273a:	1a52      	subs	r2, r2, r1
 801273c:	f022 0203 	bic.w	r2, r2, #3
 8012740:	3903      	subs	r1, #3
 8012742:	458c      	cmp	ip, r1
 8012744:	bf38      	it	cc
 8012746:	2200      	movcc	r2, #0
 8012748:	441a      	add	r2, r3
 801274a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801274e:	b17b      	cbz	r3, 8012770 <__mdiff+0x104>
 8012750:	6106      	str	r6, [r0, #16]
 8012752:	e7a5      	b.n	80126a0 <__mdiff+0x34>
 8012754:	f855 8b04 	ldr.w	r8, [r5], #4
 8012758:	fa17 f488 	uxtah	r4, r7, r8
 801275c:	1422      	asrs	r2, r4, #16
 801275e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012762:	b2a4      	uxth	r4, r4
 8012764:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8012768:	f84e 4b04 	str.w	r4, [lr], #4
 801276c:	1417      	asrs	r7, r2, #16
 801276e:	e7e0      	b.n	8012732 <__mdiff+0xc6>
 8012770:	3e01      	subs	r6, #1
 8012772:	e7ea      	b.n	801274a <__mdiff+0xde>
 8012774:	0801433c 	.word	0x0801433c
 8012778:	080143b0 	.word	0x080143b0

0801277c <__d2b>:
 801277c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012780:	4689      	mov	r9, r1
 8012782:	2101      	movs	r1, #1
 8012784:	ec57 6b10 	vmov	r6, r7, d0
 8012788:	4690      	mov	r8, r2
 801278a:	f7ff fcd5 	bl	8012138 <_Balloc>
 801278e:	4604      	mov	r4, r0
 8012790:	b930      	cbnz	r0, 80127a0 <__d2b+0x24>
 8012792:	4602      	mov	r2, r0
 8012794:	4b25      	ldr	r3, [pc, #148]	; (801282c <__d2b+0xb0>)
 8012796:	4826      	ldr	r0, [pc, #152]	; (8012830 <__d2b+0xb4>)
 8012798:	f240 310a 	movw	r1, #778	; 0x30a
 801279c:	f7fd fd2c 	bl	80101f8 <__assert_func>
 80127a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80127a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80127a8:	bb35      	cbnz	r5, 80127f8 <__d2b+0x7c>
 80127aa:	2e00      	cmp	r6, #0
 80127ac:	9301      	str	r3, [sp, #4]
 80127ae:	d028      	beq.n	8012802 <__d2b+0x86>
 80127b0:	4668      	mov	r0, sp
 80127b2:	9600      	str	r6, [sp, #0]
 80127b4:	f7ff fd8c 	bl	80122d0 <__lo0bits>
 80127b8:	9900      	ldr	r1, [sp, #0]
 80127ba:	b300      	cbz	r0, 80127fe <__d2b+0x82>
 80127bc:	9a01      	ldr	r2, [sp, #4]
 80127be:	f1c0 0320 	rsb	r3, r0, #32
 80127c2:	fa02 f303 	lsl.w	r3, r2, r3
 80127c6:	430b      	orrs	r3, r1
 80127c8:	40c2      	lsrs	r2, r0
 80127ca:	6163      	str	r3, [r4, #20]
 80127cc:	9201      	str	r2, [sp, #4]
 80127ce:	9b01      	ldr	r3, [sp, #4]
 80127d0:	61a3      	str	r3, [r4, #24]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	bf14      	ite	ne
 80127d6:	2202      	movne	r2, #2
 80127d8:	2201      	moveq	r2, #1
 80127da:	6122      	str	r2, [r4, #16]
 80127dc:	b1d5      	cbz	r5, 8012814 <__d2b+0x98>
 80127de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80127e2:	4405      	add	r5, r0
 80127e4:	f8c9 5000 	str.w	r5, [r9]
 80127e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80127ec:	f8c8 0000 	str.w	r0, [r8]
 80127f0:	4620      	mov	r0, r4
 80127f2:	b003      	add	sp, #12
 80127f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80127f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80127fc:	e7d5      	b.n	80127aa <__d2b+0x2e>
 80127fe:	6161      	str	r1, [r4, #20]
 8012800:	e7e5      	b.n	80127ce <__d2b+0x52>
 8012802:	a801      	add	r0, sp, #4
 8012804:	f7ff fd64 	bl	80122d0 <__lo0bits>
 8012808:	9b01      	ldr	r3, [sp, #4]
 801280a:	6163      	str	r3, [r4, #20]
 801280c:	2201      	movs	r2, #1
 801280e:	6122      	str	r2, [r4, #16]
 8012810:	3020      	adds	r0, #32
 8012812:	e7e3      	b.n	80127dc <__d2b+0x60>
 8012814:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012818:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801281c:	f8c9 0000 	str.w	r0, [r9]
 8012820:	6918      	ldr	r0, [r3, #16]
 8012822:	f7ff fd35 	bl	8012290 <__hi0bits>
 8012826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801282a:	e7df      	b.n	80127ec <__d2b+0x70>
 801282c:	0801433c 	.word	0x0801433c
 8012830:	080143b0 	.word	0x080143b0

08012834 <_calloc_r>:
 8012834:	b513      	push	{r0, r1, r4, lr}
 8012836:	434a      	muls	r2, r1
 8012838:	4611      	mov	r1, r2
 801283a:	9201      	str	r2, [sp, #4]
 801283c:	f000 f85a 	bl	80128f4 <_malloc_r>
 8012840:	4604      	mov	r4, r0
 8012842:	b118      	cbz	r0, 801284c <_calloc_r+0x18>
 8012844:	9a01      	ldr	r2, [sp, #4]
 8012846:	2100      	movs	r1, #0
 8012848:	f7fd fd3e 	bl	80102c8 <memset>
 801284c:	4620      	mov	r0, r4
 801284e:	b002      	add	sp, #8
 8012850:	bd10      	pop	{r4, pc}
	...

08012854 <_free_r>:
 8012854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012856:	2900      	cmp	r1, #0
 8012858:	d048      	beq.n	80128ec <_free_r+0x98>
 801285a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801285e:	9001      	str	r0, [sp, #4]
 8012860:	2b00      	cmp	r3, #0
 8012862:	f1a1 0404 	sub.w	r4, r1, #4
 8012866:	bfb8      	it	lt
 8012868:	18e4      	addlt	r4, r4, r3
 801286a:	f000 f99d 	bl	8012ba8 <__malloc_lock>
 801286e:	4a20      	ldr	r2, [pc, #128]	; (80128f0 <_free_r+0x9c>)
 8012870:	9801      	ldr	r0, [sp, #4]
 8012872:	6813      	ldr	r3, [r2, #0]
 8012874:	4615      	mov	r5, r2
 8012876:	b933      	cbnz	r3, 8012886 <_free_r+0x32>
 8012878:	6063      	str	r3, [r4, #4]
 801287a:	6014      	str	r4, [r2, #0]
 801287c:	b003      	add	sp, #12
 801287e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012882:	f000 b997 	b.w	8012bb4 <__malloc_unlock>
 8012886:	42a3      	cmp	r3, r4
 8012888:	d90b      	bls.n	80128a2 <_free_r+0x4e>
 801288a:	6821      	ldr	r1, [r4, #0]
 801288c:	1862      	adds	r2, r4, r1
 801288e:	4293      	cmp	r3, r2
 8012890:	bf04      	itt	eq
 8012892:	681a      	ldreq	r2, [r3, #0]
 8012894:	685b      	ldreq	r3, [r3, #4]
 8012896:	6063      	str	r3, [r4, #4]
 8012898:	bf04      	itt	eq
 801289a:	1852      	addeq	r2, r2, r1
 801289c:	6022      	streq	r2, [r4, #0]
 801289e:	602c      	str	r4, [r5, #0]
 80128a0:	e7ec      	b.n	801287c <_free_r+0x28>
 80128a2:	461a      	mov	r2, r3
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	b10b      	cbz	r3, 80128ac <_free_r+0x58>
 80128a8:	42a3      	cmp	r3, r4
 80128aa:	d9fa      	bls.n	80128a2 <_free_r+0x4e>
 80128ac:	6811      	ldr	r1, [r2, #0]
 80128ae:	1855      	adds	r5, r2, r1
 80128b0:	42a5      	cmp	r5, r4
 80128b2:	d10b      	bne.n	80128cc <_free_r+0x78>
 80128b4:	6824      	ldr	r4, [r4, #0]
 80128b6:	4421      	add	r1, r4
 80128b8:	1854      	adds	r4, r2, r1
 80128ba:	42a3      	cmp	r3, r4
 80128bc:	6011      	str	r1, [r2, #0]
 80128be:	d1dd      	bne.n	801287c <_free_r+0x28>
 80128c0:	681c      	ldr	r4, [r3, #0]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	6053      	str	r3, [r2, #4]
 80128c6:	4421      	add	r1, r4
 80128c8:	6011      	str	r1, [r2, #0]
 80128ca:	e7d7      	b.n	801287c <_free_r+0x28>
 80128cc:	d902      	bls.n	80128d4 <_free_r+0x80>
 80128ce:	230c      	movs	r3, #12
 80128d0:	6003      	str	r3, [r0, #0]
 80128d2:	e7d3      	b.n	801287c <_free_r+0x28>
 80128d4:	6825      	ldr	r5, [r4, #0]
 80128d6:	1961      	adds	r1, r4, r5
 80128d8:	428b      	cmp	r3, r1
 80128da:	bf04      	itt	eq
 80128dc:	6819      	ldreq	r1, [r3, #0]
 80128de:	685b      	ldreq	r3, [r3, #4]
 80128e0:	6063      	str	r3, [r4, #4]
 80128e2:	bf04      	itt	eq
 80128e4:	1949      	addeq	r1, r1, r5
 80128e6:	6021      	streq	r1, [r4, #0]
 80128e8:	6054      	str	r4, [r2, #4]
 80128ea:	e7c7      	b.n	801287c <_free_r+0x28>
 80128ec:	b003      	add	sp, #12
 80128ee:	bd30      	pop	{r4, r5, pc}
 80128f0:	20004668 	.word	0x20004668

080128f4 <_malloc_r>:
 80128f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128f6:	1ccd      	adds	r5, r1, #3
 80128f8:	f025 0503 	bic.w	r5, r5, #3
 80128fc:	3508      	adds	r5, #8
 80128fe:	2d0c      	cmp	r5, #12
 8012900:	bf38      	it	cc
 8012902:	250c      	movcc	r5, #12
 8012904:	2d00      	cmp	r5, #0
 8012906:	4606      	mov	r6, r0
 8012908:	db01      	blt.n	801290e <_malloc_r+0x1a>
 801290a:	42a9      	cmp	r1, r5
 801290c:	d903      	bls.n	8012916 <_malloc_r+0x22>
 801290e:	230c      	movs	r3, #12
 8012910:	6033      	str	r3, [r6, #0]
 8012912:	2000      	movs	r0, #0
 8012914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012916:	f000 f947 	bl	8012ba8 <__malloc_lock>
 801291a:	4921      	ldr	r1, [pc, #132]	; (80129a0 <_malloc_r+0xac>)
 801291c:	680a      	ldr	r2, [r1, #0]
 801291e:	4614      	mov	r4, r2
 8012920:	b99c      	cbnz	r4, 801294a <_malloc_r+0x56>
 8012922:	4f20      	ldr	r7, [pc, #128]	; (80129a4 <_malloc_r+0xb0>)
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	b923      	cbnz	r3, 8012932 <_malloc_r+0x3e>
 8012928:	4621      	mov	r1, r4
 801292a:	4630      	mov	r0, r6
 801292c:	f000 f83c 	bl	80129a8 <_sbrk_r>
 8012930:	6038      	str	r0, [r7, #0]
 8012932:	4629      	mov	r1, r5
 8012934:	4630      	mov	r0, r6
 8012936:	f000 f837 	bl	80129a8 <_sbrk_r>
 801293a:	1c43      	adds	r3, r0, #1
 801293c:	d123      	bne.n	8012986 <_malloc_r+0x92>
 801293e:	230c      	movs	r3, #12
 8012940:	6033      	str	r3, [r6, #0]
 8012942:	4630      	mov	r0, r6
 8012944:	f000 f936 	bl	8012bb4 <__malloc_unlock>
 8012948:	e7e3      	b.n	8012912 <_malloc_r+0x1e>
 801294a:	6823      	ldr	r3, [r4, #0]
 801294c:	1b5b      	subs	r3, r3, r5
 801294e:	d417      	bmi.n	8012980 <_malloc_r+0x8c>
 8012950:	2b0b      	cmp	r3, #11
 8012952:	d903      	bls.n	801295c <_malloc_r+0x68>
 8012954:	6023      	str	r3, [r4, #0]
 8012956:	441c      	add	r4, r3
 8012958:	6025      	str	r5, [r4, #0]
 801295a:	e004      	b.n	8012966 <_malloc_r+0x72>
 801295c:	6863      	ldr	r3, [r4, #4]
 801295e:	42a2      	cmp	r2, r4
 8012960:	bf0c      	ite	eq
 8012962:	600b      	streq	r3, [r1, #0]
 8012964:	6053      	strne	r3, [r2, #4]
 8012966:	4630      	mov	r0, r6
 8012968:	f000 f924 	bl	8012bb4 <__malloc_unlock>
 801296c:	f104 000b 	add.w	r0, r4, #11
 8012970:	1d23      	adds	r3, r4, #4
 8012972:	f020 0007 	bic.w	r0, r0, #7
 8012976:	1ac2      	subs	r2, r0, r3
 8012978:	d0cc      	beq.n	8012914 <_malloc_r+0x20>
 801297a:	1a1b      	subs	r3, r3, r0
 801297c:	50a3      	str	r3, [r4, r2]
 801297e:	e7c9      	b.n	8012914 <_malloc_r+0x20>
 8012980:	4622      	mov	r2, r4
 8012982:	6864      	ldr	r4, [r4, #4]
 8012984:	e7cc      	b.n	8012920 <_malloc_r+0x2c>
 8012986:	1cc4      	adds	r4, r0, #3
 8012988:	f024 0403 	bic.w	r4, r4, #3
 801298c:	42a0      	cmp	r0, r4
 801298e:	d0e3      	beq.n	8012958 <_malloc_r+0x64>
 8012990:	1a21      	subs	r1, r4, r0
 8012992:	4630      	mov	r0, r6
 8012994:	f000 f808 	bl	80129a8 <_sbrk_r>
 8012998:	3001      	adds	r0, #1
 801299a:	d1dd      	bne.n	8012958 <_malloc_r+0x64>
 801299c:	e7cf      	b.n	801293e <_malloc_r+0x4a>
 801299e:	bf00      	nop
 80129a0:	20004668 	.word	0x20004668
 80129a4:	2000466c 	.word	0x2000466c

080129a8 <_sbrk_r>:
 80129a8:	b538      	push	{r3, r4, r5, lr}
 80129aa:	4d06      	ldr	r5, [pc, #24]	; (80129c4 <_sbrk_r+0x1c>)
 80129ac:	2300      	movs	r3, #0
 80129ae:	4604      	mov	r4, r0
 80129b0:	4608      	mov	r0, r1
 80129b2:	602b      	str	r3, [r5, #0]
 80129b4:	f7f6 ff6c 	bl	8009890 <_sbrk>
 80129b8:	1c43      	adds	r3, r0, #1
 80129ba:	d102      	bne.n	80129c2 <_sbrk_r+0x1a>
 80129bc:	682b      	ldr	r3, [r5, #0]
 80129be:	b103      	cbz	r3, 80129c2 <_sbrk_r+0x1a>
 80129c0:	6023      	str	r3, [r4, #0]
 80129c2:	bd38      	pop	{r3, r4, r5, pc}
 80129c4:	2000dd58 	.word	0x2000dd58

080129c8 <_raise_r>:
 80129c8:	291f      	cmp	r1, #31
 80129ca:	b538      	push	{r3, r4, r5, lr}
 80129cc:	4604      	mov	r4, r0
 80129ce:	460d      	mov	r5, r1
 80129d0:	d904      	bls.n	80129dc <_raise_r+0x14>
 80129d2:	2316      	movs	r3, #22
 80129d4:	6003      	str	r3, [r0, #0]
 80129d6:	f04f 30ff 	mov.w	r0, #4294967295
 80129da:	bd38      	pop	{r3, r4, r5, pc}
 80129dc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80129de:	b112      	cbz	r2, 80129e6 <_raise_r+0x1e>
 80129e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80129e4:	b94b      	cbnz	r3, 80129fa <_raise_r+0x32>
 80129e6:	4620      	mov	r0, r4
 80129e8:	f000 f830 	bl	8012a4c <_getpid_r>
 80129ec:	462a      	mov	r2, r5
 80129ee:	4601      	mov	r1, r0
 80129f0:	4620      	mov	r0, r4
 80129f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80129f6:	f000 b817 	b.w	8012a28 <_kill_r>
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d00a      	beq.n	8012a14 <_raise_r+0x4c>
 80129fe:	1c59      	adds	r1, r3, #1
 8012a00:	d103      	bne.n	8012a0a <_raise_r+0x42>
 8012a02:	2316      	movs	r3, #22
 8012a04:	6003      	str	r3, [r0, #0]
 8012a06:	2001      	movs	r0, #1
 8012a08:	e7e7      	b.n	80129da <_raise_r+0x12>
 8012a0a:	2400      	movs	r4, #0
 8012a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012a10:	4628      	mov	r0, r5
 8012a12:	4798      	blx	r3
 8012a14:	2000      	movs	r0, #0
 8012a16:	e7e0      	b.n	80129da <_raise_r+0x12>

08012a18 <raise>:
 8012a18:	4b02      	ldr	r3, [pc, #8]	; (8012a24 <raise+0xc>)
 8012a1a:	4601      	mov	r1, r0
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	f7ff bfd3 	b.w	80129c8 <_raise_r>
 8012a22:	bf00      	nop
 8012a24:	20000304 	.word	0x20000304

08012a28 <_kill_r>:
 8012a28:	b538      	push	{r3, r4, r5, lr}
 8012a2a:	4d07      	ldr	r5, [pc, #28]	; (8012a48 <_kill_r+0x20>)
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	4604      	mov	r4, r0
 8012a30:	4608      	mov	r0, r1
 8012a32:	4611      	mov	r1, r2
 8012a34:	602b      	str	r3, [r5, #0]
 8012a36:	f7f6 fea3 	bl	8009780 <_kill>
 8012a3a:	1c43      	adds	r3, r0, #1
 8012a3c:	d102      	bne.n	8012a44 <_kill_r+0x1c>
 8012a3e:	682b      	ldr	r3, [r5, #0]
 8012a40:	b103      	cbz	r3, 8012a44 <_kill_r+0x1c>
 8012a42:	6023      	str	r3, [r4, #0]
 8012a44:	bd38      	pop	{r3, r4, r5, pc}
 8012a46:	bf00      	nop
 8012a48:	2000dd58 	.word	0x2000dd58

08012a4c <_getpid_r>:
 8012a4c:	f7f6 be90 	b.w	8009770 <_getpid>

08012a50 <__sread>:
 8012a50:	b510      	push	{r4, lr}
 8012a52:	460c      	mov	r4, r1
 8012a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a58:	f000 f8b2 	bl	8012bc0 <_read_r>
 8012a5c:	2800      	cmp	r0, #0
 8012a5e:	bfab      	itete	ge
 8012a60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012a62:	89a3      	ldrhlt	r3, [r4, #12]
 8012a64:	181b      	addge	r3, r3, r0
 8012a66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012a6a:	bfac      	ite	ge
 8012a6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012a6e:	81a3      	strhlt	r3, [r4, #12]
 8012a70:	bd10      	pop	{r4, pc}

08012a72 <__swrite>:
 8012a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a76:	461f      	mov	r7, r3
 8012a78:	898b      	ldrh	r3, [r1, #12]
 8012a7a:	05db      	lsls	r3, r3, #23
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	460c      	mov	r4, r1
 8012a80:	4616      	mov	r6, r2
 8012a82:	d505      	bpl.n	8012a90 <__swrite+0x1e>
 8012a84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a88:	2302      	movs	r3, #2
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	f000 f868 	bl	8012b60 <_lseek_r>
 8012a90:	89a3      	ldrh	r3, [r4, #12]
 8012a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012a9a:	81a3      	strh	r3, [r4, #12]
 8012a9c:	4632      	mov	r2, r6
 8012a9e:	463b      	mov	r3, r7
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012aa6:	f000 b817 	b.w	8012ad8 <_write_r>

08012aaa <__sseek>:
 8012aaa:	b510      	push	{r4, lr}
 8012aac:	460c      	mov	r4, r1
 8012aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ab2:	f000 f855 	bl	8012b60 <_lseek_r>
 8012ab6:	1c43      	adds	r3, r0, #1
 8012ab8:	89a3      	ldrh	r3, [r4, #12]
 8012aba:	bf15      	itete	ne
 8012abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8012abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ac6:	81a3      	strheq	r3, [r4, #12]
 8012ac8:	bf18      	it	ne
 8012aca:	81a3      	strhne	r3, [r4, #12]
 8012acc:	bd10      	pop	{r4, pc}

08012ace <__sclose>:
 8012ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ad2:	f000 b813 	b.w	8012afc <_close_r>
	...

08012ad8 <_write_r>:
 8012ad8:	b538      	push	{r3, r4, r5, lr}
 8012ada:	4d07      	ldr	r5, [pc, #28]	; (8012af8 <_write_r+0x20>)
 8012adc:	4604      	mov	r4, r0
 8012ade:	4608      	mov	r0, r1
 8012ae0:	4611      	mov	r1, r2
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	602a      	str	r2, [r5, #0]
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	f7f6 fe81 	bl	80097ee <_write>
 8012aec:	1c43      	adds	r3, r0, #1
 8012aee:	d102      	bne.n	8012af6 <_write_r+0x1e>
 8012af0:	682b      	ldr	r3, [r5, #0]
 8012af2:	b103      	cbz	r3, 8012af6 <_write_r+0x1e>
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	bd38      	pop	{r3, r4, r5, pc}
 8012af8:	2000dd58 	.word	0x2000dd58

08012afc <_close_r>:
 8012afc:	b538      	push	{r3, r4, r5, lr}
 8012afe:	4d06      	ldr	r5, [pc, #24]	; (8012b18 <_close_r+0x1c>)
 8012b00:	2300      	movs	r3, #0
 8012b02:	4604      	mov	r4, r0
 8012b04:	4608      	mov	r0, r1
 8012b06:	602b      	str	r3, [r5, #0]
 8012b08:	f7f6 fe8d 	bl	8009826 <_close>
 8012b0c:	1c43      	adds	r3, r0, #1
 8012b0e:	d102      	bne.n	8012b16 <_close_r+0x1a>
 8012b10:	682b      	ldr	r3, [r5, #0]
 8012b12:	b103      	cbz	r3, 8012b16 <_close_r+0x1a>
 8012b14:	6023      	str	r3, [r4, #0]
 8012b16:	bd38      	pop	{r3, r4, r5, pc}
 8012b18:	2000dd58 	.word	0x2000dd58

08012b1c <_fstat_r>:
 8012b1c:	b538      	push	{r3, r4, r5, lr}
 8012b1e:	4d07      	ldr	r5, [pc, #28]	; (8012b3c <_fstat_r+0x20>)
 8012b20:	2300      	movs	r3, #0
 8012b22:	4604      	mov	r4, r0
 8012b24:	4608      	mov	r0, r1
 8012b26:	4611      	mov	r1, r2
 8012b28:	602b      	str	r3, [r5, #0]
 8012b2a:	f7f6 fe88 	bl	800983e <_fstat>
 8012b2e:	1c43      	adds	r3, r0, #1
 8012b30:	d102      	bne.n	8012b38 <_fstat_r+0x1c>
 8012b32:	682b      	ldr	r3, [r5, #0]
 8012b34:	b103      	cbz	r3, 8012b38 <_fstat_r+0x1c>
 8012b36:	6023      	str	r3, [r4, #0]
 8012b38:	bd38      	pop	{r3, r4, r5, pc}
 8012b3a:	bf00      	nop
 8012b3c:	2000dd58 	.word	0x2000dd58

08012b40 <_isatty_r>:
 8012b40:	b538      	push	{r3, r4, r5, lr}
 8012b42:	4d06      	ldr	r5, [pc, #24]	; (8012b5c <_isatty_r+0x1c>)
 8012b44:	2300      	movs	r3, #0
 8012b46:	4604      	mov	r4, r0
 8012b48:	4608      	mov	r0, r1
 8012b4a:	602b      	str	r3, [r5, #0]
 8012b4c:	f7f6 fe87 	bl	800985e <_isatty>
 8012b50:	1c43      	adds	r3, r0, #1
 8012b52:	d102      	bne.n	8012b5a <_isatty_r+0x1a>
 8012b54:	682b      	ldr	r3, [r5, #0]
 8012b56:	b103      	cbz	r3, 8012b5a <_isatty_r+0x1a>
 8012b58:	6023      	str	r3, [r4, #0]
 8012b5a:	bd38      	pop	{r3, r4, r5, pc}
 8012b5c:	2000dd58 	.word	0x2000dd58

08012b60 <_lseek_r>:
 8012b60:	b538      	push	{r3, r4, r5, lr}
 8012b62:	4d07      	ldr	r5, [pc, #28]	; (8012b80 <_lseek_r+0x20>)
 8012b64:	4604      	mov	r4, r0
 8012b66:	4608      	mov	r0, r1
 8012b68:	4611      	mov	r1, r2
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	602a      	str	r2, [r5, #0]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	f7f6 fe80 	bl	8009874 <_lseek>
 8012b74:	1c43      	adds	r3, r0, #1
 8012b76:	d102      	bne.n	8012b7e <_lseek_r+0x1e>
 8012b78:	682b      	ldr	r3, [r5, #0]
 8012b7a:	b103      	cbz	r3, 8012b7e <_lseek_r+0x1e>
 8012b7c:	6023      	str	r3, [r4, #0]
 8012b7e:	bd38      	pop	{r3, r4, r5, pc}
 8012b80:	2000dd58 	.word	0x2000dd58

08012b84 <__ascii_mbtowc>:
 8012b84:	b082      	sub	sp, #8
 8012b86:	b901      	cbnz	r1, 8012b8a <__ascii_mbtowc+0x6>
 8012b88:	a901      	add	r1, sp, #4
 8012b8a:	b142      	cbz	r2, 8012b9e <__ascii_mbtowc+0x1a>
 8012b8c:	b14b      	cbz	r3, 8012ba2 <__ascii_mbtowc+0x1e>
 8012b8e:	7813      	ldrb	r3, [r2, #0]
 8012b90:	600b      	str	r3, [r1, #0]
 8012b92:	7812      	ldrb	r2, [r2, #0]
 8012b94:	1e10      	subs	r0, r2, #0
 8012b96:	bf18      	it	ne
 8012b98:	2001      	movne	r0, #1
 8012b9a:	b002      	add	sp, #8
 8012b9c:	4770      	bx	lr
 8012b9e:	4610      	mov	r0, r2
 8012ba0:	e7fb      	b.n	8012b9a <__ascii_mbtowc+0x16>
 8012ba2:	f06f 0001 	mvn.w	r0, #1
 8012ba6:	e7f8      	b.n	8012b9a <__ascii_mbtowc+0x16>

08012ba8 <__malloc_lock>:
 8012ba8:	4801      	ldr	r0, [pc, #4]	; (8012bb0 <__malloc_lock+0x8>)
 8012baa:	f7ff ba56 	b.w	801205a <__retarget_lock_acquire_recursive>
 8012bae:	bf00      	nop
 8012bb0:	2000dd50 	.word	0x2000dd50

08012bb4 <__malloc_unlock>:
 8012bb4:	4801      	ldr	r0, [pc, #4]	; (8012bbc <__malloc_unlock+0x8>)
 8012bb6:	f7ff ba51 	b.w	801205c <__retarget_lock_release_recursive>
 8012bba:	bf00      	nop
 8012bbc:	2000dd50 	.word	0x2000dd50

08012bc0 <_read_r>:
 8012bc0:	b538      	push	{r3, r4, r5, lr}
 8012bc2:	4d07      	ldr	r5, [pc, #28]	; (8012be0 <_read_r+0x20>)
 8012bc4:	4604      	mov	r4, r0
 8012bc6:	4608      	mov	r0, r1
 8012bc8:	4611      	mov	r1, r2
 8012bca:	2200      	movs	r2, #0
 8012bcc:	602a      	str	r2, [r5, #0]
 8012bce:	461a      	mov	r2, r3
 8012bd0:	f7f6 fdf0 	bl	80097b4 <_read>
 8012bd4:	1c43      	adds	r3, r0, #1
 8012bd6:	d102      	bne.n	8012bde <_read_r+0x1e>
 8012bd8:	682b      	ldr	r3, [r5, #0]
 8012bda:	b103      	cbz	r3, 8012bde <_read_r+0x1e>
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	bd38      	pop	{r3, r4, r5, pc}
 8012be0:	2000dd58 	.word	0x2000dd58

08012be4 <__ascii_wctomb>:
 8012be4:	b149      	cbz	r1, 8012bfa <__ascii_wctomb+0x16>
 8012be6:	2aff      	cmp	r2, #255	; 0xff
 8012be8:	bf85      	ittet	hi
 8012bea:	238a      	movhi	r3, #138	; 0x8a
 8012bec:	6003      	strhi	r3, [r0, #0]
 8012bee:	700a      	strbls	r2, [r1, #0]
 8012bf0:	f04f 30ff 	movhi.w	r0, #4294967295
 8012bf4:	bf98      	it	ls
 8012bf6:	2001      	movls	r0, #1
 8012bf8:	4770      	bx	lr
 8012bfa:	4608      	mov	r0, r1
 8012bfc:	4770      	bx	lr
	...

08012c00 <asin>:
 8012c00:	b538      	push	{r3, r4, r5, lr}
 8012c02:	ed2d 8b02 	vpush	{d8}
 8012c06:	ec55 4b10 	vmov	r4, r5, d0
 8012c0a:	f000 f869 	bl	8012ce0 <__ieee754_asin>
 8012c0e:	4b16      	ldr	r3, [pc, #88]	; (8012c68 <asin+0x68>)
 8012c10:	eeb0 8a40 	vmov.f32	s16, s0
 8012c14:	eef0 8a60 	vmov.f32	s17, s1
 8012c18:	f993 3000 	ldrsb.w	r3, [r3]
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	d01c      	beq.n	8012c5a <asin+0x5a>
 8012c20:	4622      	mov	r2, r4
 8012c22:	462b      	mov	r3, r5
 8012c24:	4620      	mov	r0, r4
 8012c26:	4629      	mov	r1, r5
 8012c28:	f7ed ff80 	bl	8000b2c <__aeabi_dcmpun>
 8012c2c:	b9a8      	cbnz	r0, 8012c5a <asin+0x5a>
 8012c2e:	ec45 4b10 	vmov	d0, r4, r5
 8012c32:	f000 fd89 	bl	8013748 <fabs>
 8012c36:	4b0d      	ldr	r3, [pc, #52]	; (8012c6c <asin+0x6c>)
 8012c38:	ec51 0b10 	vmov	r0, r1, d0
 8012c3c:	2200      	movs	r2, #0
 8012c3e:	f7ed ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 8012c42:	b150      	cbz	r0, 8012c5a <asin+0x5a>
 8012c44:	f7fd faf6 	bl	8010234 <__errno>
 8012c48:	ecbd 8b02 	vpop	{d8}
 8012c4c:	2321      	movs	r3, #33	; 0x21
 8012c4e:	6003      	str	r3, [r0, #0]
 8012c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c54:	4806      	ldr	r0, [pc, #24]	; (8012c70 <asin+0x70>)
 8012c56:	f000 bd83 	b.w	8013760 <nan>
 8012c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8012c5e:	eef0 0a68 	vmov.f32	s1, s17
 8012c62:	ecbd 8b02 	vpop	{d8}
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	200004d4 	.word	0x200004d4
 8012c6c:	3ff00000 	.word	0x3ff00000
 8012c70:	0801426f 	.word	0x0801426f

08012c74 <atan2>:
 8012c74:	f000 ba48 	b.w	8013108 <__ieee754_atan2>

08012c78 <sqrt>:
 8012c78:	b538      	push	{r3, r4, r5, lr}
 8012c7a:	ed2d 8b02 	vpush	{d8}
 8012c7e:	ec55 4b10 	vmov	r4, r5, d0
 8012c82:	f000 fb0b 	bl	801329c <__ieee754_sqrt>
 8012c86:	4b15      	ldr	r3, [pc, #84]	; (8012cdc <sqrt+0x64>)
 8012c88:	eeb0 8a40 	vmov.f32	s16, s0
 8012c8c:	eef0 8a60 	vmov.f32	s17, s1
 8012c90:	f993 3000 	ldrsb.w	r3, [r3]
 8012c94:	3301      	adds	r3, #1
 8012c96:	d019      	beq.n	8012ccc <sqrt+0x54>
 8012c98:	4622      	mov	r2, r4
 8012c9a:	462b      	mov	r3, r5
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	f7ed ff44 	bl	8000b2c <__aeabi_dcmpun>
 8012ca4:	b990      	cbnz	r0, 8012ccc <sqrt+0x54>
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	2300      	movs	r3, #0
 8012caa:	4620      	mov	r0, r4
 8012cac:	4629      	mov	r1, r5
 8012cae:	f7ed ff15 	bl	8000adc <__aeabi_dcmplt>
 8012cb2:	b158      	cbz	r0, 8012ccc <sqrt+0x54>
 8012cb4:	f7fd fabe 	bl	8010234 <__errno>
 8012cb8:	2321      	movs	r3, #33	; 0x21
 8012cba:	6003      	str	r3, [r0, #0]
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	2300      	movs	r3, #0
 8012cc0:	4610      	mov	r0, r2
 8012cc2:	4619      	mov	r1, r3
 8012cc4:	f7ed fdc2 	bl	800084c <__aeabi_ddiv>
 8012cc8:	ec41 0b18 	vmov	d8, r0, r1
 8012ccc:	eeb0 0a48 	vmov.f32	s0, s16
 8012cd0:	eef0 0a68 	vmov.f32	s1, s17
 8012cd4:	ecbd 8b02 	vpop	{d8}
 8012cd8:	bd38      	pop	{r3, r4, r5, pc}
 8012cda:	bf00      	nop
 8012cdc:	200004d4 	.word	0x200004d4

08012ce0 <__ieee754_asin>:
 8012ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ce4:	ed2d 8b04 	vpush	{d8-d9}
 8012ce8:	ec55 4b10 	vmov	r4, r5, d0
 8012cec:	4bcc      	ldr	r3, [pc, #816]	; (8013020 <__ieee754_asin+0x340>)
 8012cee:	b083      	sub	sp, #12
 8012cf0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012cf4:	4598      	cmp	r8, r3
 8012cf6:	9501      	str	r5, [sp, #4]
 8012cf8:	dd35      	ble.n	8012d66 <__ieee754_asin+0x86>
 8012cfa:	ee10 3a10 	vmov	r3, s0
 8012cfe:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8012d02:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8012d06:	ea58 0303 	orrs.w	r3, r8, r3
 8012d0a:	d117      	bne.n	8012d3c <__ieee754_asin+0x5c>
 8012d0c:	a3aa      	add	r3, pc, #680	; (adr r3, 8012fb8 <__ieee754_asin+0x2d8>)
 8012d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d12:	ee10 0a10 	vmov	r0, s0
 8012d16:	4629      	mov	r1, r5
 8012d18:	f7ed fc6e 	bl	80005f8 <__aeabi_dmul>
 8012d1c:	a3a8      	add	r3, pc, #672	; (adr r3, 8012fc0 <__ieee754_asin+0x2e0>)
 8012d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d22:	4606      	mov	r6, r0
 8012d24:	460f      	mov	r7, r1
 8012d26:	4620      	mov	r0, r4
 8012d28:	4629      	mov	r1, r5
 8012d2a:	f7ed fc65 	bl	80005f8 <__aeabi_dmul>
 8012d2e:	4602      	mov	r2, r0
 8012d30:	460b      	mov	r3, r1
 8012d32:	4630      	mov	r0, r6
 8012d34:	4639      	mov	r1, r7
 8012d36:	f7ed faa9 	bl	800028c <__adddf3>
 8012d3a:	e00b      	b.n	8012d54 <__ieee754_asin+0x74>
 8012d3c:	ee10 2a10 	vmov	r2, s0
 8012d40:	462b      	mov	r3, r5
 8012d42:	ee10 0a10 	vmov	r0, s0
 8012d46:	4629      	mov	r1, r5
 8012d48:	f7ed fa9e 	bl	8000288 <__aeabi_dsub>
 8012d4c:	4602      	mov	r2, r0
 8012d4e:	460b      	mov	r3, r1
 8012d50:	f7ed fd7c 	bl	800084c <__aeabi_ddiv>
 8012d54:	4604      	mov	r4, r0
 8012d56:	460d      	mov	r5, r1
 8012d58:	ec45 4b10 	vmov	d0, r4, r5
 8012d5c:	b003      	add	sp, #12
 8012d5e:	ecbd 8b04 	vpop	{d8-d9}
 8012d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d66:	4baf      	ldr	r3, [pc, #700]	; (8013024 <__ieee754_asin+0x344>)
 8012d68:	4598      	cmp	r8, r3
 8012d6a:	dc11      	bgt.n	8012d90 <__ieee754_asin+0xb0>
 8012d6c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012d70:	f280 80ae 	bge.w	8012ed0 <__ieee754_asin+0x1f0>
 8012d74:	a394      	add	r3, pc, #592	; (adr r3, 8012fc8 <__ieee754_asin+0x2e8>)
 8012d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d7a:	ee10 0a10 	vmov	r0, s0
 8012d7e:	4629      	mov	r1, r5
 8012d80:	f7ed fa84 	bl	800028c <__adddf3>
 8012d84:	4ba8      	ldr	r3, [pc, #672]	; (8013028 <__ieee754_asin+0x348>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	f7ed fec6 	bl	8000b18 <__aeabi_dcmpgt>
 8012d8c:	2800      	cmp	r0, #0
 8012d8e:	d1e3      	bne.n	8012d58 <__ieee754_asin+0x78>
 8012d90:	ec45 4b10 	vmov	d0, r4, r5
 8012d94:	f000 fcd8 	bl	8013748 <fabs>
 8012d98:	49a3      	ldr	r1, [pc, #652]	; (8013028 <__ieee754_asin+0x348>)
 8012d9a:	ec53 2b10 	vmov	r2, r3, d0
 8012d9e:	2000      	movs	r0, #0
 8012da0:	f7ed fa72 	bl	8000288 <__aeabi_dsub>
 8012da4:	4ba1      	ldr	r3, [pc, #644]	; (801302c <__ieee754_asin+0x34c>)
 8012da6:	2200      	movs	r2, #0
 8012da8:	f7ed fc26 	bl	80005f8 <__aeabi_dmul>
 8012dac:	a388      	add	r3, pc, #544	; (adr r3, 8012fd0 <__ieee754_asin+0x2f0>)
 8012dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db2:	4604      	mov	r4, r0
 8012db4:	460d      	mov	r5, r1
 8012db6:	f7ed fc1f 	bl	80005f8 <__aeabi_dmul>
 8012dba:	a387      	add	r3, pc, #540	; (adr r3, 8012fd8 <__ieee754_asin+0x2f8>)
 8012dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc0:	f7ed fa64 	bl	800028c <__adddf3>
 8012dc4:	4622      	mov	r2, r4
 8012dc6:	462b      	mov	r3, r5
 8012dc8:	f7ed fc16 	bl	80005f8 <__aeabi_dmul>
 8012dcc:	a384      	add	r3, pc, #528	; (adr r3, 8012fe0 <__ieee754_asin+0x300>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	f7ed fa59 	bl	8000288 <__aeabi_dsub>
 8012dd6:	4622      	mov	r2, r4
 8012dd8:	462b      	mov	r3, r5
 8012dda:	f7ed fc0d 	bl	80005f8 <__aeabi_dmul>
 8012dde:	a382      	add	r3, pc, #520	; (adr r3, 8012fe8 <__ieee754_asin+0x308>)
 8012de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de4:	f7ed fa52 	bl	800028c <__adddf3>
 8012de8:	4622      	mov	r2, r4
 8012dea:	462b      	mov	r3, r5
 8012dec:	f7ed fc04 	bl	80005f8 <__aeabi_dmul>
 8012df0:	a37f      	add	r3, pc, #508	; (adr r3, 8012ff0 <__ieee754_asin+0x310>)
 8012df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df6:	f7ed fa47 	bl	8000288 <__aeabi_dsub>
 8012dfa:	4622      	mov	r2, r4
 8012dfc:	462b      	mov	r3, r5
 8012dfe:	f7ed fbfb 	bl	80005f8 <__aeabi_dmul>
 8012e02:	a37d      	add	r3, pc, #500	; (adr r3, 8012ff8 <__ieee754_asin+0x318>)
 8012e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e08:	f7ed fa40 	bl	800028c <__adddf3>
 8012e0c:	4622      	mov	r2, r4
 8012e0e:	462b      	mov	r3, r5
 8012e10:	f7ed fbf2 	bl	80005f8 <__aeabi_dmul>
 8012e14:	a37a      	add	r3, pc, #488	; (adr r3, 8013000 <__ieee754_asin+0x320>)
 8012e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1a:	ec41 0b18 	vmov	d8, r0, r1
 8012e1e:	4620      	mov	r0, r4
 8012e20:	4629      	mov	r1, r5
 8012e22:	f7ed fbe9 	bl	80005f8 <__aeabi_dmul>
 8012e26:	a378      	add	r3, pc, #480	; (adr r3, 8013008 <__ieee754_asin+0x328>)
 8012e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e2c:	f7ed fa2c 	bl	8000288 <__aeabi_dsub>
 8012e30:	4622      	mov	r2, r4
 8012e32:	462b      	mov	r3, r5
 8012e34:	f7ed fbe0 	bl	80005f8 <__aeabi_dmul>
 8012e38:	a375      	add	r3, pc, #468	; (adr r3, 8013010 <__ieee754_asin+0x330>)
 8012e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3e:	f7ed fa25 	bl	800028c <__adddf3>
 8012e42:	4622      	mov	r2, r4
 8012e44:	462b      	mov	r3, r5
 8012e46:	f7ed fbd7 	bl	80005f8 <__aeabi_dmul>
 8012e4a:	a373      	add	r3, pc, #460	; (adr r3, 8013018 <__ieee754_asin+0x338>)
 8012e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e50:	f7ed fa1a 	bl	8000288 <__aeabi_dsub>
 8012e54:	4622      	mov	r2, r4
 8012e56:	462b      	mov	r3, r5
 8012e58:	f7ed fbce 	bl	80005f8 <__aeabi_dmul>
 8012e5c:	4b72      	ldr	r3, [pc, #456]	; (8013028 <__ieee754_asin+0x348>)
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f7ed fa14 	bl	800028c <__adddf3>
 8012e64:	ec45 4b10 	vmov	d0, r4, r5
 8012e68:	4606      	mov	r6, r0
 8012e6a:	460f      	mov	r7, r1
 8012e6c:	f000 fa16 	bl	801329c <__ieee754_sqrt>
 8012e70:	4b6f      	ldr	r3, [pc, #444]	; (8013030 <__ieee754_asin+0x350>)
 8012e72:	4598      	cmp	r8, r3
 8012e74:	ec5b ab10 	vmov	sl, fp, d0
 8012e78:	f340 80dc 	ble.w	8013034 <__ieee754_asin+0x354>
 8012e7c:	4632      	mov	r2, r6
 8012e7e:	463b      	mov	r3, r7
 8012e80:	ec51 0b18 	vmov	r0, r1, d8
 8012e84:	f7ed fce2 	bl	800084c <__aeabi_ddiv>
 8012e88:	4652      	mov	r2, sl
 8012e8a:	465b      	mov	r3, fp
 8012e8c:	f7ed fbb4 	bl	80005f8 <__aeabi_dmul>
 8012e90:	4652      	mov	r2, sl
 8012e92:	465b      	mov	r3, fp
 8012e94:	f7ed f9fa 	bl	800028c <__adddf3>
 8012e98:	4602      	mov	r2, r0
 8012e9a:	460b      	mov	r3, r1
 8012e9c:	f7ed f9f6 	bl	800028c <__adddf3>
 8012ea0:	a347      	add	r3, pc, #284	; (adr r3, 8012fc0 <__ieee754_asin+0x2e0>)
 8012ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea6:	f7ed f9ef 	bl	8000288 <__aeabi_dsub>
 8012eaa:	4602      	mov	r2, r0
 8012eac:	460b      	mov	r3, r1
 8012eae:	a142      	add	r1, pc, #264	; (adr r1, 8012fb8 <__ieee754_asin+0x2d8>)
 8012eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012eb4:	f7ed f9e8 	bl	8000288 <__aeabi_dsub>
 8012eb8:	9b01      	ldr	r3, [sp, #4]
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	bfdc      	itt	le
 8012ebe:	4602      	movle	r2, r0
 8012ec0:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8012ec4:	4604      	mov	r4, r0
 8012ec6:	460d      	mov	r5, r1
 8012ec8:	bfdc      	itt	le
 8012eca:	4614      	movle	r4, r2
 8012ecc:	461d      	movle	r5, r3
 8012ece:	e743      	b.n	8012d58 <__ieee754_asin+0x78>
 8012ed0:	ee10 2a10 	vmov	r2, s0
 8012ed4:	ee10 0a10 	vmov	r0, s0
 8012ed8:	462b      	mov	r3, r5
 8012eda:	4629      	mov	r1, r5
 8012edc:	f7ed fb8c 	bl	80005f8 <__aeabi_dmul>
 8012ee0:	a33b      	add	r3, pc, #236	; (adr r3, 8012fd0 <__ieee754_asin+0x2f0>)
 8012ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee6:	4606      	mov	r6, r0
 8012ee8:	460f      	mov	r7, r1
 8012eea:	f7ed fb85 	bl	80005f8 <__aeabi_dmul>
 8012eee:	a33a      	add	r3, pc, #232	; (adr r3, 8012fd8 <__ieee754_asin+0x2f8>)
 8012ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef4:	f7ed f9ca 	bl	800028c <__adddf3>
 8012ef8:	4632      	mov	r2, r6
 8012efa:	463b      	mov	r3, r7
 8012efc:	f7ed fb7c 	bl	80005f8 <__aeabi_dmul>
 8012f00:	a337      	add	r3, pc, #220	; (adr r3, 8012fe0 <__ieee754_asin+0x300>)
 8012f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f06:	f7ed f9bf 	bl	8000288 <__aeabi_dsub>
 8012f0a:	4632      	mov	r2, r6
 8012f0c:	463b      	mov	r3, r7
 8012f0e:	f7ed fb73 	bl	80005f8 <__aeabi_dmul>
 8012f12:	a335      	add	r3, pc, #212	; (adr r3, 8012fe8 <__ieee754_asin+0x308>)
 8012f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f18:	f7ed f9b8 	bl	800028c <__adddf3>
 8012f1c:	4632      	mov	r2, r6
 8012f1e:	463b      	mov	r3, r7
 8012f20:	f7ed fb6a 	bl	80005f8 <__aeabi_dmul>
 8012f24:	a332      	add	r3, pc, #200	; (adr r3, 8012ff0 <__ieee754_asin+0x310>)
 8012f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2a:	f7ed f9ad 	bl	8000288 <__aeabi_dsub>
 8012f2e:	4632      	mov	r2, r6
 8012f30:	463b      	mov	r3, r7
 8012f32:	f7ed fb61 	bl	80005f8 <__aeabi_dmul>
 8012f36:	a330      	add	r3, pc, #192	; (adr r3, 8012ff8 <__ieee754_asin+0x318>)
 8012f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3c:	f7ed f9a6 	bl	800028c <__adddf3>
 8012f40:	4632      	mov	r2, r6
 8012f42:	463b      	mov	r3, r7
 8012f44:	f7ed fb58 	bl	80005f8 <__aeabi_dmul>
 8012f48:	a32d      	add	r3, pc, #180	; (adr r3, 8013000 <__ieee754_asin+0x320>)
 8012f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f4e:	4680      	mov	r8, r0
 8012f50:	4689      	mov	r9, r1
 8012f52:	4630      	mov	r0, r6
 8012f54:	4639      	mov	r1, r7
 8012f56:	f7ed fb4f 	bl	80005f8 <__aeabi_dmul>
 8012f5a:	a32b      	add	r3, pc, #172	; (adr r3, 8013008 <__ieee754_asin+0x328>)
 8012f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f60:	f7ed f992 	bl	8000288 <__aeabi_dsub>
 8012f64:	4632      	mov	r2, r6
 8012f66:	463b      	mov	r3, r7
 8012f68:	f7ed fb46 	bl	80005f8 <__aeabi_dmul>
 8012f6c:	a328      	add	r3, pc, #160	; (adr r3, 8013010 <__ieee754_asin+0x330>)
 8012f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f72:	f7ed f98b 	bl	800028c <__adddf3>
 8012f76:	4632      	mov	r2, r6
 8012f78:	463b      	mov	r3, r7
 8012f7a:	f7ed fb3d 	bl	80005f8 <__aeabi_dmul>
 8012f7e:	a326      	add	r3, pc, #152	; (adr r3, 8013018 <__ieee754_asin+0x338>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	f7ed f980 	bl	8000288 <__aeabi_dsub>
 8012f88:	4632      	mov	r2, r6
 8012f8a:	463b      	mov	r3, r7
 8012f8c:	f7ed fb34 	bl	80005f8 <__aeabi_dmul>
 8012f90:	4b25      	ldr	r3, [pc, #148]	; (8013028 <__ieee754_asin+0x348>)
 8012f92:	2200      	movs	r2, #0
 8012f94:	f7ed f97a 	bl	800028c <__adddf3>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	460b      	mov	r3, r1
 8012f9c:	4640      	mov	r0, r8
 8012f9e:	4649      	mov	r1, r9
 8012fa0:	f7ed fc54 	bl	800084c <__aeabi_ddiv>
 8012fa4:	4622      	mov	r2, r4
 8012fa6:	462b      	mov	r3, r5
 8012fa8:	f7ed fb26 	bl	80005f8 <__aeabi_dmul>
 8012fac:	4602      	mov	r2, r0
 8012fae:	460b      	mov	r3, r1
 8012fb0:	4620      	mov	r0, r4
 8012fb2:	4629      	mov	r1, r5
 8012fb4:	e6bf      	b.n	8012d36 <__ieee754_asin+0x56>
 8012fb6:	bf00      	nop
 8012fb8:	54442d18 	.word	0x54442d18
 8012fbc:	3ff921fb 	.word	0x3ff921fb
 8012fc0:	33145c07 	.word	0x33145c07
 8012fc4:	3c91a626 	.word	0x3c91a626
 8012fc8:	8800759c 	.word	0x8800759c
 8012fcc:	7e37e43c 	.word	0x7e37e43c
 8012fd0:	0dfdf709 	.word	0x0dfdf709
 8012fd4:	3f023de1 	.word	0x3f023de1
 8012fd8:	7501b288 	.word	0x7501b288
 8012fdc:	3f49efe0 	.word	0x3f49efe0
 8012fe0:	b5688f3b 	.word	0xb5688f3b
 8012fe4:	3fa48228 	.word	0x3fa48228
 8012fe8:	0e884455 	.word	0x0e884455
 8012fec:	3fc9c155 	.word	0x3fc9c155
 8012ff0:	03eb6f7d 	.word	0x03eb6f7d
 8012ff4:	3fd4d612 	.word	0x3fd4d612
 8012ff8:	55555555 	.word	0x55555555
 8012ffc:	3fc55555 	.word	0x3fc55555
 8013000:	b12e9282 	.word	0xb12e9282
 8013004:	3fb3b8c5 	.word	0x3fb3b8c5
 8013008:	1b8d0159 	.word	0x1b8d0159
 801300c:	3fe6066c 	.word	0x3fe6066c
 8013010:	9c598ac8 	.word	0x9c598ac8
 8013014:	40002ae5 	.word	0x40002ae5
 8013018:	1c8a2d4b 	.word	0x1c8a2d4b
 801301c:	40033a27 	.word	0x40033a27
 8013020:	3fefffff 	.word	0x3fefffff
 8013024:	3fdfffff 	.word	0x3fdfffff
 8013028:	3ff00000 	.word	0x3ff00000
 801302c:	3fe00000 	.word	0x3fe00000
 8013030:	3fef3332 	.word	0x3fef3332
 8013034:	ee10 2a10 	vmov	r2, s0
 8013038:	ee10 0a10 	vmov	r0, s0
 801303c:	465b      	mov	r3, fp
 801303e:	4659      	mov	r1, fp
 8013040:	f7ed f924 	bl	800028c <__adddf3>
 8013044:	4632      	mov	r2, r6
 8013046:	463b      	mov	r3, r7
 8013048:	ec41 0b19 	vmov	d9, r0, r1
 801304c:	ec51 0b18 	vmov	r0, r1, d8
 8013050:	f7ed fbfc 	bl	800084c <__aeabi_ddiv>
 8013054:	4602      	mov	r2, r0
 8013056:	460b      	mov	r3, r1
 8013058:	ec51 0b19 	vmov	r0, r1, d9
 801305c:	f7ed facc 	bl	80005f8 <__aeabi_dmul>
 8013060:	f04f 0800 	mov.w	r8, #0
 8013064:	4606      	mov	r6, r0
 8013066:	460f      	mov	r7, r1
 8013068:	4642      	mov	r2, r8
 801306a:	465b      	mov	r3, fp
 801306c:	4640      	mov	r0, r8
 801306e:	4659      	mov	r1, fp
 8013070:	f7ed fac2 	bl	80005f8 <__aeabi_dmul>
 8013074:	4602      	mov	r2, r0
 8013076:	460b      	mov	r3, r1
 8013078:	4620      	mov	r0, r4
 801307a:	4629      	mov	r1, r5
 801307c:	f7ed f904 	bl	8000288 <__aeabi_dsub>
 8013080:	4642      	mov	r2, r8
 8013082:	4604      	mov	r4, r0
 8013084:	460d      	mov	r5, r1
 8013086:	465b      	mov	r3, fp
 8013088:	4650      	mov	r0, sl
 801308a:	4659      	mov	r1, fp
 801308c:	f7ed f8fe 	bl	800028c <__adddf3>
 8013090:	4602      	mov	r2, r0
 8013092:	460b      	mov	r3, r1
 8013094:	4620      	mov	r0, r4
 8013096:	4629      	mov	r1, r5
 8013098:	f7ed fbd8 	bl	800084c <__aeabi_ddiv>
 801309c:	4602      	mov	r2, r0
 801309e:	460b      	mov	r3, r1
 80130a0:	f7ed f8f4 	bl	800028c <__adddf3>
 80130a4:	4602      	mov	r2, r0
 80130a6:	460b      	mov	r3, r1
 80130a8:	a113      	add	r1, pc, #76	; (adr r1, 80130f8 <__ieee754_asin+0x418>)
 80130aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130ae:	f7ed f8eb 	bl	8000288 <__aeabi_dsub>
 80130b2:	4602      	mov	r2, r0
 80130b4:	460b      	mov	r3, r1
 80130b6:	4630      	mov	r0, r6
 80130b8:	4639      	mov	r1, r7
 80130ba:	f7ed f8e5 	bl	8000288 <__aeabi_dsub>
 80130be:	4642      	mov	r2, r8
 80130c0:	4604      	mov	r4, r0
 80130c2:	460d      	mov	r5, r1
 80130c4:	465b      	mov	r3, fp
 80130c6:	4640      	mov	r0, r8
 80130c8:	4659      	mov	r1, fp
 80130ca:	f7ed f8df 	bl	800028c <__adddf3>
 80130ce:	4602      	mov	r2, r0
 80130d0:	460b      	mov	r3, r1
 80130d2:	a10b      	add	r1, pc, #44	; (adr r1, 8013100 <__ieee754_asin+0x420>)
 80130d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130d8:	f7ed f8d6 	bl	8000288 <__aeabi_dsub>
 80130dc:	4602      	mov	r2, r0
 80130de:	460b      	mov	r3, r1
 80130e0:	4620      	mov	r0, r4
 80130e2:	4629      	mov	r1, r5
 80130e4:	f7ed f8d0 	bl	8000288 <__aeabi_dsub>
 80130e8:	4602      	mov	r2, r0
 80130ea:	460b      	mov	r3, r1
 80130ec:	a104      	add	r1, pc, #16	; (adr r1, 8013100 <__ieee754_asin+0x420>)
 80130ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80130f2:	e6df      	b.n	8012eb4 <__ieee754_asin+0x1d4>
 80130f4:	f3af 8000 	nop.w
 80130f8:	33145c07 	.word	0x33145c07
 80130fc:	3c91a626 	.word	0x3c91a626
 8013100:	54442d18 	.word	0x54442d18
 8013104:	3fe921fb 	.word	0x3fe921fb

08013108 <__ieee754_atan2>:
 8013108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801310c:	ec57 6b11 	vmov	r6, r7, d1
 8013110:	4273      	negs	r3, r6
 8013112:	f8df e184 	ldr.w	lr, [pc, #388]	; 8013298 <__ieee754_atan2+0x190>
 8013116:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801311a:	4333      	orrs	r3, r6
 801311c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013120:	4573      	cmp	r3, lr
 8013122:	ec51 0b10 	vmov	r0, r1, d0
 8013126:	ee11 8a10 	vmov	r8, s2
 801312a:	d80a      	bhi.n	8013142 <__ieee754_atan2+0x3a>
 801312c:	4244      	negs	r4, r0
 801312e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013132:	4304      	orrs	r4, r0
 8013134:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013138:	4574      	cmp	r4, lr
 801313a:	ee10 9a10 	vmov	r9, s0
 801313e:	468c      	mov	ip, r1
 8013140:	d907      	bls.n	8013152 <__ieee754_atan2+0x4a>
 8013142:	4632      	mov	r2, r6
 8013144:	463b      	mov	r3, r7
 8013146:	f7ed f8a1 	bl	800028c <__adddf3>
 801314a:	ec41 0b10 	vmov	d0, r0, r1
 801314e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013152:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8013156:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801315a:	4334      	orrs	r4, r6
 801315c:	d103      	bne.n	8013166 <__ieee754_atan2+0x5e>
 801315e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013162:	f000 b951 	b.w	8013408 <atan>
 8013166:	17bc      	asrs	r4, r7, #30
 8013168:	f004 0402 	and.w	r4, r4, #2
 801316c:	ea53 0909 	orrs.w	r9, r3, r9
 8013170:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8013174:	d107      	bne.n	8013186 <__ieee754_atan2+0x7e>
 8013176:	2c02      	cmp	r4, #2
 8013178:	d060      	beq.n	801323c <__ieee754_atan2+0x134>
 801317a:	2c03      	cmp	r4, #3
 801317c:	d1e5      	bne.n	801314a <__ieee754_atan2+0x42>
 801317e:	a142      	add	r1, pc, #264	; (adr r1, 8013288 <__ieee754_atan2+0x180>)
 8013180:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013184:	e7e1      	b.n	801314a <__ieee754_atan2+0x42>
 8013186:	ea52 0808 	orrs.w	r8, r2, r8
 801318a:	d106      	bne.n	801319a <__ieee754_atan2+0x92>
 801318c:	f1bc 0f00 	cmp.w	ip, #0
 8013190:	da5f      	bge.n	8013252 <__ieee754_atan2+0x14a>
 8013192:	a13f      	add	r1, pc, #252	; (adr r1, 8013290 <__ieee754_atan2+0x188>)
 8013194:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013198:	e7d7      	b.n	801314a <__ieee754_atan2+0x42>
 801319a:	4572      	cmp	r2, lr
 801319c:	d10f      	bne.n	80131be <__ieee754_atan2+0xb6>
 801319e:	4293      	cmp	r3, r2
 80131a0:	f104 34ff 	add.w	r4, r4, #4294967295
 80131a4:	d107      	bne.n	80131b6 <__ieee754_atan2+0xae>
 80131a6:	2c02      	cmp	r4, #2
 80131a8:	d84c      	bhi.n	8013244 <__ieee754_atan2+0x13c>
 80131aa:	4b35      	ldr	r3, [pc, #212]	; (8013280 <__ieee754_atan2+0x178>)
 80131ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80131b0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80131b4:	e7c9      	b.n	801314a <__ieee754_atan2+0x42>
 80131b6:	2c02      	cmp	r4, #2
 80131b8:	d848      	bhi.n	801324c <__ieee754_atan2+0x144>
 80131ba:	4b32      	ldr	r3, [pc, #200]	; (8013284 <__ieee754_atan2+0x17c>)
 80131bc:	e7f6      	b.n	80131ac <__ieee754_atan2+0xa4>
 80131be:	4573      	cmp	r3, lr
 80131c0:	d0e4      	beq.n	801318c <__ieee754_atan2+0x84>
 80131c2:	1a9b      	subs	r3, r3, r2
 80131c4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80131c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80131cc:	da1e      	bge.n	801320c <__ieee754_atan2+0x104>
 80131ce:	2f00      	cmp	r7, #0
 80131d0:	da01      	bge.n	80131d6 <__ieee754_atan2+0xce>
 80131d2:	323c      	adds	r2, #60	; 0x3c
 80131d4:	db1e      	blt.n	8013214 <__ieee754_atan2+0x10c>
 80131d6:	4632      	mov	r2, r6
 80131d8:	463b      	mov	r3, r7
 80131da:	f7ed fb37 	bl	800084c <__aeabi_ddiv>
 80131de:	ec41 0b10 	vmov	d0, r0, r1
 80131e2:	f000 fab1 	bl	8013748 <fabs>
 80131e6:	f000 f90f 	bl	8013408 <atan>
 80131ea:	ec51 0b10 	vmov	r0, r1, d0
 80131ee:	2c01      	cmp	r4, #1
 80131f0:	d013      	beq.n	801321a <__ieee754_atan2+0x112>
 80131f2:	2c02      	cmp	r4, #2
 80131f4:	d015      	beq.n	8013222 <__ieee754_atan2+0x11a>
 80131f6:	2c00      	cmp	r4, #0
 80131f8:	d0a7      	beq.n	801314a <__ieee754_atan2+0x42>
 80131fa:	a319      	add	r3, pc, #100	; (adr r3, 8013260 <__ieee754_atan2+0x158>)
 80131fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013200:	f7ed f842 	bl	8000288 <__aeabi_dsub>
 8013204:	a318      	add	r3, pc, #96	; (adr r3, 8013268 <__ieee754_atan2+0x160>)
 8013206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801320a:	e014      	b.n	8013236 <__ieee754_atan2+0x12e>
 801320c:	a118      	add	r1, pc, #96	; (adr r1, 8013270 <__ieee754_atan2+0x168>)
 801320e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013212:	e7ec      	b.n	80131ee <__ieee754_atan2+0xe6>
 8013214:	2000      	movs	r0, #0
 8013216:	2100      	movs	r1, #0
 8013218:	e7e9      	b.n	80131ee <__ieee754_atan2+0xe6>
 801321a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801321e:	4619      	mov	r1, r3
 8013220:	e793      	b.n	801314a <__ieee754_atan2+0x42>
 8013222:	a30f      	add	r3, pc, #60	; (adr r3, 8013260 <__ieee754_atan2+0x158>)
 8013224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013228:	f7ed f82e 	bl	8000288 <__aeabi_dsub>
 801322c:	4602      	mov	r2, r0
 801322e:	460b      	mov	r3, r1
 8013230:	a10d      	add	r1, pc, #52	; (adr r1, 8013268 <__ieee754_atan2+0x160>)
 8013232:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013236:	f7ed f827 	bl	8000288 <__aeabi_dsub>
 801323a:	e786      	b.n	801314a <__ieee754_atan2+0x42>
 801323c:	a10a      	add	r1, pc, #40	; (adr r1, 8013268 <__ieee754_atan2+0x160>)
 801323e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013242:	e782      	b.n	801314a <__ieee754_atan2+0x42>
 8013244:	a10c      	add	r1, pc, #48	; (adr r1, 8013278 <__ieee754_atan2+0x170>)
 8013246:	e9d1 0100 	ldrd	r0, r1, [r1]
 801324a:	e77e      	b.n	801314a <__ieee754_atan2+0x42>
 801324c:	2000      	movs	r0, #0
 801324e:	2100      	movs	r1, #0
 8013250:	e77b      	b.n	801314a <__ieee754_atan2+0x42>
 8013252:	a107      	add	r1, pc, #28	; (adr r1, 8013270 <__ieee754_atan2+0x168>)
 8013254:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013258:	e777      	b.n	801314a <__ieee754_atan2+0x42>
 801325a:	bf00      	nop
 801325c:	f3af 8000 	nop.w
 8013260:	33145c07 	.word	0x33145c07
 8013264:	3ca1a626 	.word	0x3ca1a626
 8013268:	54442d18 	.word	0x54442d18
 801326c:	400921fb 	.word	0x400921fb
 8013270:	54442d18 	.word	0x54442d18
 8013274:	3ff921fb 	.word	0x3ff921fb
 8013278:	54442d18 	.word	0x54442d18
 801327c:	3fe921fb 	.word	0x3fe921fb
 8013280:	08014618 	.word	0x08014618
 8013284:	08014630 	.word	0x08014630
 8013288:	54442d18 	.word	0x54442d18
 801328c:	c00921fb 	.word	0xc00921fb
 8013290:	54442d18 	.word	0x54442d18
 8013294:	bff921fb 	.word	0xbff921fb
 8013298:	7ff00000 	.word	0x7ff00000

0801329c <__ieee754_sqrt>:
 801329c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132a0:	ec55 4b10 	vmov	r4, r5, d0
 80132a4:	4e56      	ldr	r6, [pc, #344]	; (8013400 <__ieee754_sqrt+0x164>)
 80132a6:	43ae      	bics	r6, r5
 80132a8:	ee10 0a10 	vmov	r0, s0
 80132ac:	ee10 3a10 	vmov	r3, s0
 80132b0:	4629      	mov	r1, r5
 80132b2:	462a      	mov	r2, r5
 80132b4:	d110      	bne.n	80132d8 <__ieee754_sqrt+0x3c>
 80132b6:	ee10 2a10 	vmov	r2, s0
 80132ba:	462b      	mov	r3, r5
 80132bc:	f7ed f99c 	bl	80005f8 <__aeabi_dmul>
 80132c0:	4602      	mov	r2, r0
 80132c2:	460b      	mov	r3, r1
 80132c4:	4620      	mov	r0, r4
 80132c6:	4629      	mov	r1, r5
 80132c8:	f7ec ffe0 	bl	800028c <__adddf3>
 80132cc:	4604      	mov	r4, r0
 80132ce:	460d      	mov	r5, r1
 80132d0:	ec45 4b10 	vmov	d0, r4, r5
 80132d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132d8:	2d00      	cmp	r5, #0
 80132da:	dc10      	bgt.n	80132fe <__ieee754_sqrt+0x62>
 80132dc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80132e0:	4330      	orrs	r0, r6
 80132e2:	d0f5      	beq.n	80132d0 <__ieee754_sqrt+0x34>
 80132e4:	b15d      	cbz	r5, 80132fe <__ieee754_sqrt+0x62>
 80132e6:	ee10 2a10 	vmov	r2, s0
 80132ea:	462b      	mov	r3, r5
 80132ec:	ee10 0a10 	vmov	r0, s0
 80132f0:	f7ec ffca 	bl	8000288 <__aeabi_dsub>
 80132f4:	4602      	mov	r2, r0
 80132f6:	460b      	mov	r3, r1
 80132f8:	f7ed faa8 	bl	800084c <__aeabi_ddiv>
 80132fc:	e7e6      	b.n	80132cc <__ieee754_sqrt+0x30>
 80132fe:	1509      	asrs	r1, r1, #20
 8013300:	d076      	beq.n	80133f0 <__ieee754_sqrt+0x154>
 8013302:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8013306:	07ce      	lsls	r6, r1, #31
 8013308:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801330c:	bf5e      	ittt	pl
 801330e:	0fda      	lsrpl	r2, r3, #31
 8013310:	005b      	lslpl	r3, r3, #1
 8013312:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8013316:	0fda      	lsrs	r2, r3, #31
 8013318:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801331c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8013320:	2000      	movs	r0, #0
 8013322:	106d      	asrs	r5, r5, #1
 8013324:	005b      	lsls	r3, r3, #1
 8013326:	f04f 0e16 	mov.w	lr, #22
 801332a:	4684      	mov	ip, r0
 801332c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013330:	eb0c 0401 	add.w	r4, ip, r1
 8013334:	4294      	cmp	r4, r2
 8013336:	bfde      	ittt	le
 8013338:	1b12      	suble	r2, r2, r4
 801333a:	eb04 0c01 	addle.w	ip, r4, r1
 801333e:	1840      	addle	r0, r0, r1
 8013340:	0052      	lsls	r2, r2, #1
 8013342:	f1be 0e01 	subs.w	lr, lr, #1
 8013346:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801334a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801334e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013352:	d1ed      	bne.n	8013330 <__ieee754_sqrt+0x94>
 8013354:	4671      	mov	r1, lr
 8013356:	2720      	movs	r7, #32
 8013358:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801335c:	4562      	cmp	r2, ip
 801335e:	eb04 060e 	add.w	r6, r4, lr
 8013362:	dc02      	bgt.n	801336a <__ieee754_sqrt+0xce>
 8013364:	d113      	bne.n	801338e <__ieee754_sqrt+0xf2>
 8013366:	429e      	cmp	r6, r3
 8013368:	d811      	bhi.n	801338e <__ieee754_sqrt+0xf2>
 801336a:	2e00      	cmp	r6, #0
 801336c:	eb06 0e04 	add.w	lr, r6, r4
 8013370:	da43      	bge.n	80133fa <__ieee754_sqrt+0x15e>
 8013372:	f1be 0f00 	cmp.w	lr, #0
 8013376:	db40      	blt.n	80133fa <__ieee754_sqrt+0x15e>
 8013378:	f10c 0801 	add.w	r8, ip, #1
 801337c:	eba2 020c 	sub.w	r2, r2, ip
 8013380:	429e      	cmp	r6, r3
 8013382:	bf88      	it	hi
 8013384:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8013388:	1b9b      	subs	r3, r3, r6
 801338a:	4421      	add	r1, r4
 801338c:	46c4      	mov	ip, r8
 801338e:	0052      	lsls	r2, r2, #1
 8013390:	3f01      	subs	r7, #1
 8013392:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8013396:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801339a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801339e:	d1dd      	bne.n	801335c <__ieee754_sqrt+0xc0>
 80133a0:	4313      	orrs	r3, r2
 80133a2:	d006      	beq.n	80133b2 <__ieee754_sqrt+0x116>
 80133a4:	1c4c      	adds	r4, r1, #1
 80133a6:	bf13      	iteet	ne
 80133a8:	3101      	addne	r1, #1
 80133aa:	3001      	addeq	r0, #1
 80133ac:	4639      	moveq	r1, r7
 80133ae:	f021 0101 	bicne.w	r1, r1, #1
 80133b2:	1043      	asrs	r3, r0, #1
 80133b4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80133b8:	0849      	lsrs	r1, r1, #1
 80133ba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80133be:	07c2      	lsls	r2, r0, #31
 80133c0:	bf48      	it	mi
 80133c2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80133c6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80133ca:	460c      	mov	r4, r1
 80133cc:	463d      	mov	r5, r7
 80133ce:	e77f      	b.n	80132d0 <__ieee754_sqrt+0x34>
 80133d0:	0ada      	lsrs	r2, r3, #11
 80133d2:	3815      	subs	r0, #21
 80133d4:	055b      	lsls	r3, r3, #21
 80133d6:	2a00      	cmp	r2, #0
 80133d8:	d0fa      	beq.n	80133d0 <__ieee754_sqrt+0x134>
 80133da:	02d7      	lsls	r7, r2, #11
 80133dc:	d50a      	bpl.n	80133f4 <__ieee754_sqrt+0x158>
 80133de:	f1c1 0420 	rsb	r4, r1, #32
 80133e2:	fa23 f404 	lsr.w	r4, r3, r4
 80133e6:	1e4d      	subs	r5, r1, #1
 80133e8:	408b      	lsls	r3, r1
 80133ea:	4322      	orrs	r2, r4
 80133ec:	1b41      	subs	r1, r0, r5
 80133ee:	e788      	b.n	8013302 <__ieee754_sqrt+0x66>
 80133f0:	4608      	mov	r0, r1
 80133f2:	e7f0      	b.n	80133d6 <__ieee754_sqrt+0x13a>
 80133f4:	0052      	lsls	r2, r2, #1
 80133f6:	3101      	adds	r1, #1
 80133f8:	e7ef      	b.n	80133da <__ieee754_sqrt+0x13e>
 80133fa:	46e0      	mov	r8, ip
 80133fc:	e7be      	b.n	801337c <__ieee754_sqrt+0xe0>
 80133fe:	bf00      	nop
 8013400:	7ff00000 	.word	0x7ff00000
 8013404:	00000000 	.word	0x00000000

08013408 <atan>:
 8013408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801340c:	ec55 4b10 	vmov	r4, r5, d0
 8013410:	4bc3      	ldr	r3, [pc, #780]	; (8013720 <atan+0x318>)
 8013412:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013416:	429e      	cmp	r6, r3
 8013418:	46ab      	mov	fp, r5
 801341a:	dd18      	ble.n	801344e <atan+0x46>
 801341c:	4bc1      	ldr	r3, [pc, #772]	; (8013724 <atan+0x31c>)
 801341e:	429e      	cmp	r6, r3
 8013420:	dc01      	bgt.n	8013426 <atan+0x1e>
 8013422:	d109      	bne.n	8013438 <atan+0x30>
 8013424:	b144      	cbz	r4, 8013438 <atan+0x30>
 8013426:	4622      	mov	r2, r4
 8013428:	462b      	mov	r3, r5
 801342a:	4620      	mov	r0, r4
 801342c:	4629      	mov	r1, r5
 801342e:	f7ec ff2d 	bl	800028c <__adddf3>
 8013432:	4604      	mov	r4, r0
 8013434:	460d      	mov	r5, r1
 8013436:	e006      	b.n	8013446 <atan+0x3e>
 8013438:	f1bb 0f00 	cmp.w	fp, #0
 801343c:	f300 8131 	bgt.w	80136a2 <atan+0x29a>
 8013440:	a59b      	add	r5, pc, #620	; (adr r5, 80136b0 <atan+0x2a8>)
 8013442:	e9d5 4500 	ldrd	r4, r5, [r5]
 8013446:	ec45 4b10 	vmov	d0, r4, r5
 801344a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801344e:	4bb6      	ldr	r3, [pc, #728]	; (8013728 <atan+0x320>)
 8013450:	429e      	cmp	r6, r3
 8013452:	dc14      	bgt.n	801347e <atan+0x76>
 8013454:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8013458:	429e      	cmp	r6, r3
 801345a:	dc0d      	bgt.n	8013478 <atan+0x70>
 801345c:	a396      	add	r3, pc, #600	; (adr r3, 80136b8 <atan+0x2b0>)
 801345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013462:	ee10 0a10 	vmov	r0, s0
 8013466:	4629      	mov	r1, r5
 8013468:	f7ec ff10 	bl	800028c <__adddf3>
 801346c:	4baf      	ldr	r3, [pc, #700]	; (801372c <atan+0x324>)
 801346e:	2200      	movs	r2, #0
 8013470:	f7ed fb52 	bl	8000b18 <__aeabi_dcmpgt>
 8013474:	2800      	cmp	r0, #0
 8013476:	d1e6      	bne.n	8013446 <atan+0x3e>
 8013478:	f04f 3aff 	mov.w	sl, #4294967295
 801347c:	e02b      	b.n	80134d6 <atan+0xce>
 801347e:	f000 f963 	bl	8013748 <fabs>
 8013482:	4bab      	ldr	r3, [pc, #684]	; (8013730 <atan+0x328>)
 8013484:	429e      	cmp	r6, r3
 8013486:	ec55 4b10 	vmov	r4, r5, d0
 801348a:	f300 80bf 	bgt.w	801360c <atan+0x204>
 801348e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8013492:	429e      	cmp	r6, r3
 8013494:	f300 80a0 	bgt.w	80135d8 <atan+0x1d0>
 8013498:	ee10 2a10 	vmov	r2, s0
 801349c:	ee10 0a10 	vmov	r0, s0
 80134a0:	462b      	mov	r3, r5
 80134a2:	4629      	mov	r1, r5
 80134a4:	f7ec fef2 	bl	800028c <__adddf3>
 80134a8:	4ba0      	ldr	r3, [pc, #640]	; (801372c <atan+0x324>)
 80134aa:	2200      	movs	r2, #0
 80134ac:	f7ec feec 	bl	8000288 <__aeabi_dsub>
 80134b0:	2200      	movs	r2, #0
 80134b2:	4606      	mov	r6, r0
 80134b4:	460f      	mov	r7, r1
 80134b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80134ba:	4620      	mov	r0, r4
 80134bc:	4629      	mov	r1, r5
 80134be:	f7ec fee5 	bl	800028c <__adddf3>
 80134c2:	4602      	mov	r2, r0
 80134c4:	460b      	mov	r3, r1
 80134c6:	4630      	mov	r0, r6
 80134c8:	4639      	mov	r1, r7
 80134ca:	f7ed f9bf 	bl	800084c <__aeabi_ddiv>
 80134ce:	f04f 0a00 	mov.w	sl, #0
 80134d2:	4604      	mov	r4, r0
 80134d4:	460d      	mov	r5, r1
 80134d6:	4622      	mov	r2, r4
 80134d8:	462b      	mov	r3, r5
 80134da:	4620      	mov	r0, r4
 80134dc:	4629      	mov	r1, r5
 80134de:	f7ed f88b 	bl	80005f8 <__aeabi_dmul>
 80134e2:	4602      	mov	r2, r0
 80134e4:	460b      	mov	r3, r1
 80134e6:	4680      	mov	r8, r0
 80134e8:	4689      	mov	r9, r1
 80134ea:	f7ed f885 	bl	80005f8 <__aeabi_dmul>
 80134ee:	a374      	add	r3, pc, #464	; (adr r3, 80136c0 <atan+0x2b8>)
 80134f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f4:	4606      	mov	r6, r0
 80134f6:	460f      	mov	r7, r1
 80134f8:	f7ed f87e 	bl	80005f8 <__aeabi_dmul>
 80134fc:	a372      	add	r3, pc, #456	; (adr r3, 80136c8 <atan+0x2c0>)
 80134fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013502:	f7ec fec3 	bl	800028c <__adddf3>
 8013506:	4632      	mov	r2, r6
 8013508:	463b      	mov	r3, r7
 801350a:	f7ed f875 	bl	80005f8 <__aeabi_dmul>
 801350e:	a370      	add	r3, pc, #448	; (adr r3, 80136d0 <atan+0x2c8>)
 8013510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013514:	f7ec feba 	bl	800028c <__adddf3>
 8013518:	4632      	mov	r2, r6
 801351a:	463b      	mov	r3, r7
 801351c:	f7ed f86c 	bl	80005f8 <__aeabi_dmul>
 8013520:	a36d      	add	r3, pc, #436	; (adr r3, 80136d8 <atan+0x2d0>)
 8013522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013526:	f7ec feb1 	bl	800028c <__adddf3>
 801352a:	4632      	mov	r2, r6
 801352c:	463b      	mov	r3, r7
 801352e:	f7ed f863 	bl	80005f8 <__aeabi_dmul>
 8013532:	a36b      	add	r3, pc, #428	; (adr r3, 80136e0 <atan+0x2d8>)
 8013534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013538:	f7ec fea8 	bl	800028c <__adddf3>
 801353c:	4632      	mov	r2, r6
 801353e:	463b      	mov	r3, r7
 8013540:	f7ed f85a 	bl	80005f8 <__aeabi_dmul>
 8013544:	a368      	add	r3, pc, #416	; (adr r3, 80136e8 <atan+0x2e0>)
 8013546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354a:	f7ec fe9f 	bl	800028c <__adddf3>
 801354e:	4642      	mov	r2, r8
 8013550:	464b      	mov	r3, r9
 8013552:	f7ed f851 	bl	80005f8 <__aeabi_dmul>
 8013556:	a366      	add	r3, pc, #408	; (adr r3, 80136f0 <atan+0x2e8>)
 8013558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355c:	4680      	mov	r8, r0
 801355e:	4689      	mov	r9, r1
 8013560:	4630      	mov	r0, r6
 8013562:	4639      	mov	r1, r7
 8013564:	f7ed f848 	bl	80005f8 <__aeabi_dmul>
 8013568:	a363      	add	r3, pc, #396	; (adr r3, 80136f8 <atan+0x2f0>)
 801356a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801356e:	f7ec fe8b 	bl	8000288 <__aeabi_dsub>
 8013572:	4632      	mov	r2, r6
 8013574:	463b      	mov	r3, r7
 8013576:	f7ed f83f 	bl	80005f8 <__aeabi_dmul>
 801357a:	a361      	add	r3, pc, #388	; (adr r3, 8013700 <atan+0x2f8>)
 801357c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013580:	f7ec fe82 	bl	8000288 <__aeabi_dsub>
 8013584:	4632      	mov	r2, r6
 8013586:	463b      	mov	r3, r7
 8013588:	f7ed f836 	bl	80005f8 <__aeabi_dmul>
 801358c:	a35e      	add	r3, pc, #376	; (adr r3, 8013708 <atan+0x300>)
 801358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013592:	f7ec fe79 	bl	8000288 <__aeabi_dsub>
 8013596:	4632      	mov	r2, r6
 8013598:	463b      	mov	r3, r7
 801359a:	f7ed f82d 	bl	80005f8 <__aeabi_dmul>
 801359e:	a35c      	add	r3, pc, #368	; (adr r3, 8013710 <atan+0x308>)
 80135a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a4:	f7ec fe70 	bl	8000288 <__aeabi_dsub>
 80135a8:	4632      	mov	r2, r6
 80135aa:	463b      	mov	r3, r7
 80135ac:	f7ed f824 	bl	80005f8 <__aeabi_dmul>
 80135b0:	4602      	mov	r2, r0
 80135b2:	460b      	mov	r3, r1
 80135b4:	4640      	mov	r0, r8
 80135b6:	4649      	mov	r1, r9
 80135b8:	f7ec fe68 	bl	800028c <__adddf3>
 80135bc:	4622      	mov	r2, r4
 80135be:	462b      	mov	r3, r5
 80135c0:	f7ed f81a 	bl	80005f8 <__aeabi_dmul>
 80135c4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80135c8:	4602      	mov	r2, r0
 80135ca:	460b      	mov	r3, r1
 80135cc:	d14b      	bne.n	8013666 <atan+0x25e>
 80135ce:	4620      	mov	r0, r4
 80135d0:	4629      	mov	r1, r5
 80135d2:	f7ec fe59 	bl	8000288 <__aeabi_dsub>
 80135d6:	e72c      	b.n	8013432 <atan+0x2a>
 80135d8:	ee10 0a10 	vmov	r0, s0
 80135dc:	4b53      	ldr	r3, [pc, #332]	; (801372c <atan+0x324>)
 80135de:	2200      	movs	r2, #0
 80135e0:	4629      	mov	r1, r5
 80135e2:	f7ec fe51 	bl	8000288 <__aeabi_dsub>
 80135e6:	4b51      	ldr	r3, [pc, #324]	; (801372c <atan+0x324>)
 80135e8:	4606      	mov	r6, r0
 80135ea:	460f      	mov	r7, r1
 80135ec:	2200      	movs	r2, #0
 80135ee:	4620      	mov	r0, r4
 80135f0:	4629      	mov	r1, r5
 80135f2:	f7ec fe4b 	bl	800028c <__adddf3>
 80135f6:	4602      	mov	r2, r0
 80135f8:	460b      	mov	r3, r1
 80135fa:	4630      	mov	r0, r6
 80135fc:	4639      	mov	r1, r7
 80135fe:	f7ed f925 	bl	800084c <__aeabi_ddiv>
 8013602:	f04f 0a01 	mov.w	sl, #1
 8013606:	4604      	mov	r4, r0
 8013608:	460d      	mov	r5, r1
 801360a:	e764      	b.n	80134d6 <atan+0xce>
 801360c:	4b49      	ldr	r3, [pc, #292]	; (8013734 <atan+0x32c>)
 801360e:	429e      	cmp	r6, r3
 8013610:	da1d      	bge.n	801364e <atan+0x246>
 8013612:	ee10 0a10 	vmov	r0, s0
 8013616:	4b48      	ldr	r3, [pc, #288]	; (8013738 <atan+0x330>)
 8013618:	2200      	movs	r2, #0
 801361a:	4629      	mov	r1, r5
 801361c:	f7ec fe34 	bl	8000288 <__aeabi_dsub>
 8013620:	4b45      	ldr	r3, [pc, #276]	; (8013738 <atan+0x330>)
 8013622:	4606      	mov	r6, r0
 8013624:	460f      	mov	r7, r1
 8013626:	2200      	movs	r2, #0
 8013628:	4620      	mov	r0, r4
 801362a:	4629      	mov	r1, r5
 801362c:	f7ec ffe4 	bl	80005f8 <__aeabi_dmul>
 8013630:	4b3e      	ldr	r3, [pc, #248]	; (801372c <atan+0x324>)
 8013632:	2200      	movs	r2, #0
 8013634:	f7ec fe2a 	bl	800028c <__adddf3>
 8013638:	4602      	mov	r2, r0
 801363a:	460b      	mov	r3, r1
 801363c:	4630      	mov	r0, r6
 801363e:	4639      	mov	r1, r7
 8013640:	f7ed f904 	bl	800084c <__aeabi_ddiv>
 8013644:	f04f 0a02 	mov.w	sl, #2
 8013648:	4604      	mov	r4, r0
 801364a:	460d      	mov	r5, r1
 801364c:	e743      	b.n	80134d6 <atan+0xce>
 801364e:	462b      	mov	r3, r5
 8013650:	ee10 2a10 	vmov	r2, s0
 8013654:	4939      	ldr	r1, [pc, #228]	; (801373c <atan+0x334>)
 8013656:	2000      	movs	r0, #0
 8013658:	f7ed f8f8 	bl	800084c <__aeabi_ddiv>
 801365c:	f04f 0a03 	mov.w	sl, #3
 8013660:	4604      	mov	r4, r0
 8013662:	460d      	mov	r5, r1
 8013664:	e737      	b.n	80134d6 <atan+0xce>
 8013666:	4b36      	ldr	r3, [pc, #216]	; (8013740 <atan+0x338>)
 8013668:	4e36      	ldr	r6, [pc, #216]	; (8013744 <atan+0x33c>)
 801366a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801366e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8013672:	e9da 2300 	ldrd	r2, r3, [sl]
 8013676:	f7ec fe07 	bl	8000288 <__aeabi_dsub>
 801367a:	4622      	mov	r2, r4
 801367c:	462b      	mov	r3, r5
 801367e:	f7ec fe03 	bl	8000288 <__aeabi_dsub>
 8013682:	4602      	mov	r2, r0
 8013684:	460b      	mov	r3, r1
 8013686:	e9d6 0100 	ldrd	r0, r1, [r6]
 801368a:	f7ec fdfd 	bl	8000288 <__aeabi_dsub>
 801368e:	f1bb 0f00 	cmp.w	fp, #0
 8013692:	4604      	mov	r4, r0
 8013694:	460d      	mov	r5, r1
 8013696:	f6bf aed6 	bge.w	8013446 <atan+0x3e>
 801369a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801369e:	461d      	mov	r5, r3
 80136a0:	e6d1      	b.n	8013446 <atan+0x3e>
 80136a2:	a51d      	add	r5, pc, #116	; (adr r5, 8013718 <atan+0x310>)
 80136a4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80136a8:	e6cd      	b.n	8013446 <atan+0x3e>
 80136aa:	bf00      	nop
 80136ac:	f3af 8000 	nop.w
 80136b0:	54442d18 	.word	0x54442d18
 80136b4:	bff921fb 	.word	0xbff921fb
 80136b8:	8800759c 	.word	0x8800759c
 80136bc:	7e37e43c 	.word	0x7e37e43c
 80136c0:	e322da11 	.word	0xe322da11
 80136c4:	3f90ad3a 	.word	0x3f90ad3a
 80136c8:	24760deb 	.word	0x24760deb
 80136cc:	3fa97b4b 	.word	0x3fa97b4b
 80136d0:	a0d03d51 	.word	0xa0d03d51
 80136d4:	3fb10d66 	.word	0x3fb10d66
 80136d8:	c54c206e 	.word	0xc54c206e
 80136dc:	3fb745cd 	.word	0x3fb745cd
 80136e0:	920083ff 	.word	0x920083ff
 80136e4:	3fc24924 	.word	0x3fc24924
 80136e8:	5555550d 	.word	0x5555550d
 80136ec:	3fd55555 	.word	0x3fd55555
 80136f0:	2c6a6c2f 	.word	0x2c6a6c2f
 80136f4:	bfa2b444 	.word	0xbfa2b444
 80136f8:	52defd9a 	.word	0x52defd9a
 80136fc:	3fadde2d 	.word	0x3fadde2d
 8013700:	af749a6d 	.word	0xaf749a6d
 8013704:	3fb3b0f2 	.word	0x3fb3b0f2
 8013708:	fe231671 	.word	0xfe231671
 801370c:	3fbc71c6 	.word	0x3fbc71c6
 8013710:	9998ebc4 	.word	0x9998ebc4
 8013714:	3fc99999 	.word	0x3fc99999
 8013718:	54442d18 	.word	0x54442d18
 801371c:	3ff921fb 	.word	0x3ff921fb
 8013720:	440fffff 	.word	0x440fffff
 8013724:	7ff00000 	.word	0x7ff00000
 8013728:	3fdbffff 	.word	0x3fdbffff
 801372c:	3ff00000 	.word	0x3ff00000
 8013730:	3ff2ffff 	.word	0x3ff2ffff
 8013734:	40038000 	.word	0x40038000
 8013738:	3ff80000 	.word	0x3ff80000
 801373c:	bff00000 	.word	0xbff00000
 8013740:	08014668 	.word	0x08014668
 8013744:	08014648 	.word	0x08014648

08013748 <fabs>:
 8013748:	ec51 0b10 	vmov	r0, r1, d0
 801374c:	ee10 2a10 	vmov	r2, s0
 8013750:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013754:	ec43 2b10 	vmov	d0, r2, r3
 8013758:	4770      	bx	lr
 801375a:	0000      	movs	r0, r0
 801375c:	0000      	movs	r0, r0
	...

08013760 <nan>:
 8013760:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013768 <nan+0x8>
 8013764:	4770      	bx	lr
 8013766:	bf00      	nop
 8013768:	00000000 	.word	0x00000000
 801376c:	7ff80000 	.word	0x7ff80000

08013770 <_init>:
 8013770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013772:	bf00      	nop
 8013774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013776:	bc08      	pop	{r3}
 8013778:	469e      	mov	lr, r3
 801377a:	4770      	bx	lr

0801377c <_fini>:
 801377c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801377e:	bf00      	nop
 8013780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013782:	bc08      	pop	{r3}
 8013784:	469e      	mov	lr, r3
 8013786:	4770      	bx	lr
